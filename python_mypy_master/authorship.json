[{"path":"docs/source/common_issues.rst","fileType":"rst","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".. _common_issues:"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Common issues and solutions"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"This section has examples of cases when you need to update your code"},{"lineNumber":7,"author":{"gitId":"-"},"content":"to use static typing, and ideas for working around issues if mypy"},{"lineNumber":8,"author":{"gitId":"-"},"content":"doesn\u0027t work as expected. Statically typed code is often identical to"},{"lineNumber":9,"author":{"gitId":"-"},"content":"normal Python code (except for type annotations), but sometimes you need"},{"lineNumber":10,"author":{"gitId":"-"},"content":"to do things slightly differently."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Can\u0027t install mypy using pip"},{"lineNumber":13,"author":{"gitId":"-"},"content":"----------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"If installation fails, you\u0027ve probably hit one of these issues:"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Mypy needs Python 3.5 or later to run."},{"lineNumber":18,"author":{"gitId":"-"},"content":"* You may have to run pip like this:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  ``python3 -m pip install mypy``."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":".. _annotations_needed:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"No errors reported for obviously wrong code"},{"lineNumber":24,"author":{"gitId":"-"},"content":"-------------------------------------------"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"There are several common reasons why obviously wrong code is not"},{"lineNumber":27,"author":{"gitId":"-"},"content":"flagged as an error."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"- **The function containing the error is not annotated.** Functions that"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  do not have any annotations (neither for any argument nor for the"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  return type) are not type-checked, and even the most blatant type"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  errors (e.g. ``2 + \u0027a\u0027``) pass silently.  The solution is to add"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  annotations. Where that isn\u0027t possible, functions without annotations"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  can be checked using :option:`--check-untyped-defs \u003cmypy --check-untyped-defs\u003e`."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  Example:"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"      def foo(a):"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          return \u0027(\u0027 + a.split() + \u0027)\u0027  # No error!"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  This gives no error even though ``a.split()`` is \"obviously\" a list"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  (the author probably meant ``a.strip()``).  The error is reported"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  once you add annotations:"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"      def foo(a: str) -\u003e str:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          return \u0027(\u0027 + a.split() + \u0027)\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      # error: Unsupported operand types for + (\"str\" and List[str])"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  If you don\u0027t know what types to add, you can use ``Any``, but beware:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"- **One of the values involved has type \u0027Any\u0027.** Extending the above"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  example, if we were to leave out the annotation for ``a``, we\u0027d get"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  no error:"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"      def foo(a) -\u003e str:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          return \u0027(\u0027 + a.split() + \u0027)\u0027  # No error!"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  The reason is that if the type of ``a`` is unknown, the type of"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  ``a.split()`` is also unknown, so it is inferred as having type"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  ``Any``, and it is no error to add a string to an ``Any``."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  If you\u0027re having trouble debugging such situations,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  :ref:`reveal_type() \u003creveal-type\u003e` might come in handy."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  Note that sometimes library stubs have imprecise type information,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  e.g. the :py:func:`pow` builtin returns ``Any`` (see `typeshed issue 285"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  \u003chttps://github.com/python/typeshed/issues/285\u003e`_ for the reason)."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"- :py:meth:`__init__ \u003cobject.__init__\u003e` **method has no annotated"},{"lineNumber":76,"author":{"gitId":"le0tan"},"content":"  arguments or return type annotation.** :py:meth:`__init__ \u003cobject.__init__\u003e`"},{"lineNumber":77,"author":{"gitId":"le0tan"},"content":"  is considered fully-annotated **if at least one argument is annotated**,"},{"lineNumber":78,"author":{"gitId":"le0tan"},"content":"  while mypy will infer the return type as ``None``."},{"lineNumber":79,"author":{"gitId":"le0tan"},"content":"  The implication is that, for a :py:meth:`__init__ \u003cobject.__init__\u003e` method"},{"lineNumber":80,"author":{"gitId":"le0tan"},"content":"  that has no argument, you\u0027ll have to explicitly annotate the return type"},{"lineNumber":81,"author":{"gitId":"le0tan"},"content":"  as ``None`` to type-check this :py:meth:`__init__ \u003cobject.__init__\u003e` method:"},{"lineNumber":82,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":83,"author":{"gitId":"le0tan"},"content":"  .. code-block:: python"},{"lineNumber":84,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":85,"author":{"gitId":"le0tan"},"content":"      def foo(s: str) -\u003e str:"},{"lineNumber":86,"author":{"gitId":"le0tan"},"content":"          return s"},{"lineNumber":87,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":88,"author":{"gitId":"le0tan"},"content":"      class A():"},{"lineNumber":89,"author":{"gitId":"le0tan"},"content":"          def __init__(self, value: str): # Return type inferred as None, considered as typed method"},{"lineNumber":90,"author":{"gitId":"le0tan"},"content":"              self.value \u003d value"},{"lineNumber":91,"author":{"gitId":"le0tan"},"content":"              foo(1) # error: Argument 1 to \"foo\" has incompatible type \"int\"; expected \"str\""},{"lineNumber":92,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":93,"author":{"gitId":"le0tan"},"content":"      class B():"},{"lineNumber":94,"author":{"gitId":"le0tan"},"content":"          def __init__(self):  # No argument is annotated, considered as untyped method"},{"lineNumber":95,"author":{"gitId":"le0tan"},"content":"              foo(1)  # No error!"},{"lineNumber":96,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":97,"author":{"gitId":"le0tan"},"content":"      class C():"},{"lineNumber":98,"author":{"gitId":"le0tan"},"content":"          def __init__(self) -\u003e None:  # Must specify return type to type-check"},{"lineNumber":99,"author":{"gitId":"le0tan"},"content":"              foo(1) # error: Argument 1 to \"foo\" has incompatible type \"int\"; expected \"str\""},{"lineNumber":100,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"- **Some imports may be silently ignored**.  Another source of"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  unexpected ``Any`` values are the :option:`--ignore-missing-imports"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \u003cmypy --ignore-missing-imports\u003e` and :option:`--follow-imports\u003dskip"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  \u003cmypy --follow-imports\u003e` flags.  When you use :option:`--ignore-missing-imports \u003cmypy --ignore-missing-imports\u003e`,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  any imported module that cannot be found is silently replaced with"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  ``Any``.  When using :option:`--follow-imports\u003dskip \u003cmypy --follow-imports\u003e` the same is true for"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  modules for which a ``.py`` file is found but that are not specified"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  on the command line.  (If a ``.pyi`` stub is found it is always"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  processed normally, regardless of the value of"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  :option:`--follow-imports \u003cmypy --follow-imports\u003e`.)  To help debug the former situation (no"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  module found at all) leave out :option:`--ignore-missing-imports \u003cmypy --ignore-missing-imports\u003e`; to get"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  clarity about the latter use :option:`--follow-imports\u003derror \u003cmypy --follow-imports\u003e`.  You can"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  read up about these and other useful flags in :ref:`command-line`."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"- **A function annotated as returning a non-optional type returns \u0027None\u0027"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  and mypy doesn\u0027t complain**."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"      def foo() -\u003e str:"},{"lineNumber":121,"author":{"gitId":"-"},"content":"          return None  # No error!"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  You may have disabled strict optional checking (see"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  :ref:`no_strict_optional` for more)."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":".. _silencing_checker:"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Spurious errors and locally silencing the checker"},{"lineNumber":129,"author":{"gitId":"-"},"content":"-------------------------------------------------"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"You can use a ``# type: ignore`` comment to silence the type checker"},{"lineNumber":132,"author":{"gitId":"-"},"content":"on a particular line. For example, let\u0027s say our code is using"},{"lineNumber":133,"author":{"gitId":"-"},"content":"the C extension module ``frobnicate``, and there\u0027s no stub available."},{"lineNumber":134,"author":{"gitId":"-"},"content":"Mypy will complain about this, as it has no information about the"},{"lineNumber":135,"author":{"gitId":"-"},"content":"module:"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    import frobnicate  # Error: No module \"frobnicate\""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    frobnicate.start()"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"You can add a ``# type: ignore`` comment to tell mypy to ignore this"},{"lineNumber":143,"author":{"gitId":"-"},"content":"error:"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    import frobnicate  # type: ignore"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    frobnicate.start()  # Okay!"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"The second line is now fine, since the ignore comment causes the name"},{"lineNumber":151,"author":{"gitId":"-"},"content":"``frobnicate`` to get an implicit ``Any`` type."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    You can use the form ``# type: ignore[\u003ccode\u003e]`` to only ignore"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    specific errors on the line. This way you are less likely to"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    silence unexpected errors that are not safe to ignore, and this"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    will also document what the purpose of the comment is.  See"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    :ref:`error-codes` for more information."},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    The ``# type: ignore`` comment will only assign the implicit ``Any``"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    type if mypy cannot find information about that particular module. So,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    if we did have a stub available for ``frobnicate`` then mypy would"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    ignore the ``# type: ignore`` comment and typecheck the stub as usual."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"Another option is to explicitly annotate values with type ``Any`` --"},{"lineNumber":169,"author":{"gitId":"-"},"content":"mypy will let you perform arbitrary operations on ``Any``"},{"lineNumber":170,"author":{"gitId":"-"},"content":"values. Sometimes there is no more precise type you can use for a"},{"lineNumber":171,"author":{"gitId":"-"},"content":"particular value, especially if you use dynamic Python features"},{"lineNumber":172,"author":{"gitId":"-"},"content":"such as :py:meth:`__getattr__ \u003cobject.__getattr__\u003e`:"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"   class Wrapper:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":178,"author":{"gitId":"-"},"content":"       def __getattr__(self, a: str) -\u003e Any:"},{"lineNumber":179,"author":{"gitId":"-"},"content":"           return getattr(self._wrapped, a)"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"Finally, you can create a stub file (``.pyi``) for a file that"},{"lineNumber":182,"author":{"gitId":"-"},"content":"generates spurious errors. Mypy will only look at the stub file"},{"lineNumber":183,"author":{"gitId":"-"},"content":"and ignore the implementation, since stub files take precedence"},{"lineNumber":184,"author":{"gitId":"-"},"content":"over ``.py`` files."},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"Ignoring a whole file"},{"lineNumber":187,"author":{"gitId":"-"},"content":"---------------------"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"A ``# type: ignore`` comment at the top of a module (before any statements,"},{"lineNumber":190,"author":{"gitId":"-"},"content":"including imports or docstrings) has the effect of ignoring the *entire* module."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    # type: ignore"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    import foo"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    foo.bar()"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"Unexpected errors about \u0027None\u0027 and/or \u0027Optional\u0027 types"},{"lineNumber":201,"author":{"gitId":"-"},"content":"------------------------------------------------------"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"Starting from mypy 0.600, mypy uses"},{"lineNumber":204,"author":{"gitId":"-"},"content":":ref:`strict optional checking \u003cstrict_optional\u003e` by default,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"and the ``None`` value is not compatible with non-optional types."},{"lineNumber":206,"author":{"gitId":"-"},"content":"It\u0027s easy to switch back to the older behavior where ``None`` was"},{"lineNumber":207,"author":{"gitId":"-"},"content":"compatible with arbitrary types (see :ref:`no_strict_optional`)."},{"lineNumber":208,"author":{"gitId":"-"},"content":"You can also fall back to this behavior if strict optional"},{"lineNumber":209,"author":{"gitId":"-"},"content":"checking would require a large number of ``assert foo is not None``"},{"lineNumber":210,"author":{"gitId":"-"},"content":"checks to be inserted, and you want to minimize the number"},{"lineNumber":211,"author":{"gitId":"-"},"content":"of code changes required to get a clean mypy run."},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"Mypy runs are slow"},{"lineNumber":214,"author":{"gitId":"-"},"content":"------------------"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"If your mypy runs feel slow, you should probably use the :ref:`mypy"},{"lineNumber":217,"author":{"gitId":"-"},"content":"daemon \u003cmypy_daemon\u003e`, which can speed up incremental mypy runtimes by"},{"lineNumber":218,"author":{"gitId":"-"},"content":"a factor of 10 or more. :ref:`Remote caching \u003cremote-cache\u003e` can"},{"lineNumber":219,"author":{"gitId":"-"},"content":"make cold mypy runs several times faster."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"Types of empty collections"},{"lineNumber":222,"author":{"gitId":"-"},"content":"--------------------------"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"You often need to specify the type when you assign an empty list or"},{"lineNumber":225,"author":{"gitId":"-"},"content":"dict to a new variable, as mentioned earlier:"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"   a: List[int] \u003d []"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"Without the annotation mypy can\u0027t always figure out the"},{"lineNumber":232,"author":{"gitId":"-"},"content":"precise type of ``a``."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"You can use a simple empty list literal in a dynamically typed function (as the"},{"lineNumber":235,"author":{"gitId":"-"},"content":"type of ``a`` would be implicitly ``Any`` and need not be inferred), if type"},{"lineNumber":236,"author":{"gitId":"-"},"content":"of the variable has been declared or inferred before, or if you perform a simple"},{"lineNumber":237,"author":{"gitId":"-"},"content":"modification operation in the same scope (such as ``append`` for a list):"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"   a \u003d []  # Okay because followed by append, inferred type List[int]"},{"lineNumber":242,"author":{"gitId":"-"},"content":"   for i in range(n):"},{"lineNumber":243,"author":{"gitId":"-"},"content":"       a.append(i * i)"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"However, in more complex cases an explicit type annotation can be"},{"lineNumber":246,"author":{"gitId":"-"},"content":"required (mypy will tell you this). Often the annotation can"},{"lineNumber":247,"author":{"gitId":"-"},"content":"make your code easier to understand, so it doesn\u0027t only help mypy but"},{"lineNumber":248,"author":{"gitId":"-"},"content":"everybody who is reading the code!"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"Redefinitions with incompatible types"},{"lineNumber":251,"author":{"gitId":"-"},"content":"-------------------------------------"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"Each name within a function only has a single \u0027declared\u0027 type. You can"},{"lineNumber":254,"author":{"gitId":"-"},"content":"reuse for loop indices etc., but if you want to use a variable with"},{"lineNumber":255,"author":{"gitId":"-"},"content":"multiple types within a single function, you may need to declare it"},{"lineNumber":256,"author":{"gitId":"-"},"content":"with the ``Any`` type."},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"   def f() -\u003e None:"},{"lineNumber":261,"author":{"gitId":"-"},"content":"       n \u003d 1"},{"lineNumber":262,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":263,"author":{"gitId":"-"},"content":"       n \u003d \u0027x\u0027        # Type error: n has type int"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"   This limitation could be lifted in a future mypy"},{"lineNumber":268,"author":{"gitId":"-"},"content":"   release."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"Note that you can redefine a variable with a more *precise* or a more"},{"lineNumber":271,"author":{"gitId":"-"},"content":"concrete type. For example, you can redefine a sequence (which does"},{"lineNumber":272,"author":{"gitId":"-"},"content":"not support ``sort()``) as a list and sort it in-place:"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    def f(x: Sequence[int]) -\u003e None:"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        # Type of x is Sequence[int] here; we don\u0027t know the concrete type."},{"lineNumber":278,"author":{"gitId":"-"},"content":"        x \u003d list(x)"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        # Type of x is List[int] here."},{"lineNumber":280,"author":{"gitId":"-"},"content":"        x.sort()  # Okay!"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":".. _variance:"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Invariance vs covariance"},{"lineNumber":285,"author":{"gitId":"-"},"content":"------------------------"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"Most mutable generic collections are invariant, and mypy considers all"},{"lineNumber":288,"author":{"gitId":"-"},"content":"user-defined generic classes invariant by default"},{"lineNumber":289,"author":{"gitId":"-"},"content":"(see :ref:`variance-of-generics` for motivation). This could lead to some"},{"lineNumber":290,"author":{"gitId":"-"},"content":"unexpected errors when combined with type inference. For example:"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"   class A: ..."},{"lineNumber":295,"author":{"gitId":"-"},"content":"   class B(A): ..."},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"   lst \u003d [A(), A()]  # Inferred type is List[A]"},{"lineNumber":298,"author":{"gitId":"-"},"content":"   new_lst \u003d [B(), B()]  # inferred type is List[B]"},{"lineNumber":299,"author":{"gitId":"-"},"content":"   lst \u003d new_lst  # mypy will complain about this, because List is invariant"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"Possible strategies in such situations are:"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"* Use an explicit type annotation:"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"     new_lst: List[A] \u003d [B(), B()]"},{"lineNumber":308,"author":{"gitId":"-"},"content":"     lst \u003d new_lst  # OK"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"* Make a copy of the right hand side:"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"     lst \u003d list(new_lst) # Also OK"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"* Use immutable collections as annotations whenever possible:"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"  .. code-block:: python"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"     def f_bad(x: List[A]) -\u003e A:"},{"lineNumber":321,"author":{"gitId":"-"},"content":"         return x[0]"},{"lineNumber":322,"author":{"gitId":"-"},"content":"     f_bad(new_lst) # Fails"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"     def f_good(x: Sequence[A]) -\u003e A:"},{"lineNumber":325,"author":{"gitId":"-"},"content":"         return x[0]"},{"lineNumber":326,"author":{"gitId":"-"},"content":"     f_good(new_lst) # OK"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"Declaring a supertype as variable type"},{"lineNumber":329,"author":{"gitId":"-"},"content":"--------------------------------------"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"Sometimes the inferred type is a subtype (subclass) of the desired"},{"lineNumber":332,"author":{"gitId":"-"},"content":"type. The type inference uses the first assignment to infer the type"},{"lineNumber":333,"author":{"gitId":"-"},"content":"of a name (assume here that ``Shape`` is the base class of both"},{"lineNumber":334,"author":{"gitId":"-"},"content":"``Circle`` and ``Triangle``):"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"   shape \u003d Circle()    # Infer shape to be Circle"},{"lineNumber":339,"author":{"gitId":"-"},"content":"   ..."},{"lineNumber":340,"author":{"gitId":"-"},"content":"   shape \u003d Triangle()  # Type error: Triangle is not a Circle"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"You can just give an explicit type for the variable in cases such the"},{"lineNumber":343,"author":{"gitId":"-"},"content":"above example:"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"   shape \u003d Circle() # type: Shape   # The variable s can be any Shape,"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                                    # not just Circle"},{"lineNumber":349,"author":{"gitId":"-"},"content":"   ..."},{"lineNumber":350,"author":{"gitId":"-"},"content":"   shape \u003d Triangle()               # OK"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"Complex type tests"},{"lineNumber":353,"author":{"gitId":"-"},"content":"------------------"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"Mypy can usually infer the types correctly when using :py:func:`isinstance \u003cisinstance\u003e`"},{"lineNumber":356,"author":{"gitId":"-"},"content":"type tests, but for other kinds of checks you may need to add an"},{"lineNumber":357,"author":{"gitId":"-"},"content":"explicit type cast:"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"   def f(o: object) -\u003e None:"},{"lineNumber":362,"author":{"gitId":"-"},"content":"       if type(o) is int:"},{"lineNumber":363,"author":{"gitId":"-"},"content":"           o \u003d cast(int, o)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           g(o + 1)    # This would be an error without the cast"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":366,"author":{"gitId":"-"},"content":"       else:"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"    Note that the :py:class:`object` type used in the above example is similar"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    to ``Object`` in Java: it only supports operations defined for *all*"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    objects, such as equality and :py:func:`isinstance`. The type ``Any``,"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    in contrast, supports all operations, even if they may fail at"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    runtime. The cast above would have been unnecessary if the type of"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    ``o`` was ``Any``."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Mypy can\u0027t infer the type of ``o`` after the :py:class:`type() \u003ctype\u003e` check"},{"lineNumber":379,"author":{"gitId":"-"},"content":"because it only knows about :py:func:`isinstance` (and the latter is better"},{"lineNumber":380,"author":{"gitId":"-"},"content":"style anyway).  We can write the above code without a cast by using"},{"lineNumber":381,"author":{"gitId":"-"},"content":":py:func:`isinstance`:"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"   def f(o: object) -\u003e None:"},{"lineNumber":386,"author":{"gitId":"-"},"content":"       if isinstance(o, int):  # Mypy understands isinstance checks"},{"lineNumber":387,"author":{"gitId":"-"},"content":"           g(o + 1)        # Okay; type of o is inferred as int here"},{"lineNumber":388,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"Type inference in mypy is designed to work well in common cases, to be"},{"lineNumber":391,"author":{"gitId":"-"},"content":"predictable and to let the type checker give useful error"},{"lineNumber":392,"author":{"gitId":"-"},"content":"messages. More powerful type inference strategies often have complex"},{"lineNumber":393,"author":{"gitId":"-"},"content":"and difficult-to-predict failure modes and could result in very"},{"lineNumber":394,"author":{"gitId":"-"},"content":"confusing error messages. The tradeoff is that you as a programmer"},{"lineNumber":395,"author":{"gitId":"-"},"content":"sometimes have to give the type checker a little help."},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":".. _version_and_platform_checks:"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"Python version and system platform checks"},{"lineNumber":400,"author":{"gitId":"-"},"content":"-----------------------------------------"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"Mypy supports the ability to perform Python version checks and platform"},{"lineNumber":403,"author":{"gitId":"-"},"content":"checks (e.g. Windows vs Posix), ignoring code paths that won\u0027t be run on"},{"lineNumber":404,"author":{"gitId":"-"},"content":"the targeted Python version or platform. This allows you to more effectively"},{"lineNumber":405,"author":{"gitId":"-"},"content":"typecheck code that supports multiple versions of Python or multiple operating"},{"lineNumber":406,"author":{"gitId":"-"},"content":"systems."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"More specifically, mypy will understand the use of :py:data:`sys.version_info` and"},{"lineNumber":409,"author":{"gitId":"-"},"content":":py:data:`sys.platform` checks within ``if/elif/else`` statements. For example:"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"   import sys"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"   # Distinguishing between different versions of Python:"},{"lineNumber":416,"author":{"gitId":"-"},"content":"   if sys.version_info \u003e\u003d (3, 5):"},{"lineNumber":417,"author":{"gitId":"-"},"content":"       # Python 3.5+ specific definitions and imports"},{"lineNumber":418,"author":{"gitId":"-"},"content":"   elif sys.version_info[0] \u003e\u003d 3:"},{"lineNumber":419,"author":{"gitId":"-"},"content":"       # Python 3 specific definitions and imports"},{"lineNumber":420,"author":{"gitId":"-"},"content":"   else:"},{"lineNumber":421,"author":{"gitId":"-"},"content":"       # Python 2 specific definitions and imports"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"   # Distinguishing between different operating systems:"},{"lineNumber":424,"author":{"gitId":"-"},"content":"   if sys.platform.startswith(\"linux\"):"},{"lineNumber":425,"author":{"gitId":"-"},"content":"       # Linux-specific code"},{"lineNumber":426,"author":{"gitId":"-"},"content":"   elif sys.platform \u003d\u003d \"darwin\":"},{"lineNumber":427,"author":{"gitId":"-"},"content":"       # Mac-specific code"},{"lineNumber":428,"author":{"gitId":"-"},"content":"   elif sys.platform \u003d\u003d \"win32\":"},{"lineNumber":429,"author":{"gitId":"-"},"content":"       # Windows-specific code"},{"lineNumber":430,"author":{"gitId":"-"},"content":"   else:"},{"lineNumber":431,"author":{"gitId":"-"},"content":"       # Other systems"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"As a special case, you can also use one of these checks in a top-level"},{"lineNumber":434,"author":{"gitId":"-"},"content":"(unindented) ``assert``; this makes mypy skip the rest of the file."},{"lineNumber":435,"author":{"gitId":"-"},"content":"Example:"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   import sys"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"   assert sys.platform !\u003d \u0027win32\u0027"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"   # The rest of this file doesn\u0027t apply to Windows."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"Some other expressions exhibit similar behavior; in particular,"},{"lineNumber":446,"author":{"gitId":"-"},"content":":py:data:`~typing.TYPE_CHECKING`, variables named ``MYPY``, and any variable"},{"lineNumber":447,"author":{"gitId":"-"},"content":"whose name is passed to :option:`--always-true \u003cmypy --always-true\u003e` or :option:`--always-false \u003cmypy --always-false\u003e`."},{"lineNumber":448,"author":{"gitId":"-"},"content":"(However, ``True`` and ``False`` are not treated specially!)"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"   Mypy currently does not support more complex checks, and does not assign"},{"lineNumber":453,"author":{"gitId":"-"},"content":"   any special meaning when assigning a :py:data:`sys.version_info` or :py:data:`sys.platform`"},{"lineNumber":454,"author":{"gitId":"-"},"content":"   check to a variable. This may change in future versions of mypy."},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"By default, mypy will use your current version of Python and your current"},{"lineNumber":457,"author":{"gitId":"-"},"content":"operating system as default values for :py:data:`sys.version_info` and"},{"lineNumber":458,"author":{"gitId":"-"},"content":":py:data:`sys.platform`."},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"To target a different Python version, use the :option:`--python-version X.Y \u003cmypy --python-version\u003e` flag."},{"lineNumber":461,"author":{"gitId":"-"},"content":"For example, to verify your code typechecks if were run using Python 2, pass"},{"lineNumber":462,"author":{"gitId":"-"},"content":"in :option:`--python-version 2.7 \u003cmypy --python-version\u003e` from the command line. Note that you do not need"},{"lineNumber":463,"author":{"gitId":"-"},"content":"to have Python 2.7 installed to perform this check."},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"To target a different operating system, use the :option:`--platform PLATFORM \u003cmypy --platform\u003e` flag."},{"lineNumber":466,"author":{"gitId":"-"},"content":"For example, to verify your code typechecks if it were run in Windows, pass"},{"lineNumber":467,"author":{"gitId":"-"},"content":"in :option:`--platform win32 \u003cmypy --platform\u003e`. See the documentation for :py:data:`sys.platform`"},{"lineNumber":468,"author":{"gitId":"-"},"content":"for examples of valid platform parameters."},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":".. _reveal-type:"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"Displaying the type of an expression"},{"lineNumber":473,"author":{"gitId":"-"},"content":"------------------------------------"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"You can use ``reveal_type(expr)`` to ask mypy to display the inferred"},{"lineNumber":476,"author":{"gitId":"-"},"content":"static type of an expression. This can be useful when you don\u0027t quite"},{"lineNumber":477,"author":{"gitId":"-"},"content":"understand how mypy handles a particular piece of code. Example:"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"   reveal_type((1, \u0027hello\u0027))  # Revealed type is \u0027Tuple[builtins.int, builtins.str]\u0027"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"You can also use ``reveal_locals()`` at any line in a file"},{"lineNumber":484,"author":{"gitId":"-"},"content":"to see the types of all local variables at once. Example:"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"   a \u003d 1"},{"lineNumber":489,"author":{"gitId":"-"},"content":"   b \u003d \u0027one\u0027"},{"lineNumber":490,"author":{"gitId":"-"},"content":"   reveal_locals()"},{"lineNumber":491,"author":{"gitId":"-"},"content":"   # Revealed local types are:"},{"lineNumber":492,"author":{"gitId":"-"},"content":"   #     a: builtins.int"},{"lineNumber":493,"author":{"gitId":"-"},"content":"   #     b: builtins.str"},{"lineNumber":494,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"   ``reveal_type`` and ``reveal_locals`` are only understood by mypy and"},{"lineNumber":497,"author":{"gitId":"-"},"content":"   don\u0027t exist in Python. If you try to run your program, you\u0027ll have to"},{"lineNumber":498,"author":{"gitId":"-"},"content":"   remove any ``reveal_type`` and ``reveal_locals`` calls before you can"},{"lineNumber":499,"author":{"gitId":"-"},"content":"   run your code. Both are always available and you don\u0027t need to import"},{"lineNumber":500,"author":{"gitId":"-"},"content":"   them."},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":".. _import-cycles:"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"Import cycles"},{"lineNumber":506,"author":{"gitId":"-"},"content":"-------------"},{"lineNumber":507,"author":{"gitId":"-"},"content":""},{"lineNumber":508,"author":{"gitId":"-"},"content":"An import cycle occurs where module A imports module B and module B"},{"lineNumber":509,"author":{"gitId":"-"},"content":"imports module A (perhaps indirectly, e.g. ``A -\u003e B -\u003e C -\u003e A``)."},{"lineNumber":510,"author":{"gitId":"-"},"content":"Sometimes in order to add type annotations you have to add extra"},{"lineNumber":511,"author":{"gitId":"-"},"content":"imports to a module and those imports cause cycles that didn\u0027t exist"},{"lineNumber":512,"author":{"gitId":"-"},"content":"before.  If those cycles become a problem when running your program,"},{"lineNumber":513,"author":{"gitId":"-"},"content":"there\u0027s a trick: if the import is only needed for type annotations in"},{"lineNumber":514,"author":{"gitId":"-"},"content":"forward references (string literals) or comments, you can write the"},{"lineNumber":515,"author":{"gitId":"-"},"content":"imports inside ``if TYPE_CHECKING:`` so that they are not executed at runtime."},{"lineNumber":516,"author":{"gitId":"-"},"content":"Example:"},{"lineNumber":517,"author":{"gitId":"-"},"content":""},{"lineNumber":518,"author":{"gitId":"-"},"content":"File ``foo.py``:"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"   from typing import List, TYPE_CHECKING"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"   if TYPE_CHECKING:"},{"lineNumber":525,"author":{"gitId":"-"},"content":"       import bar"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"   def listify(arg: \u0027bar.BarClass\u0027) -\u003e \u0027List[bar.BarClass]\u0027:"},{"lineNumber":528,"author":{"gitId":"-"},"content":"       return [arg]"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"File ``bar.py``:"},{"lineNumber":531,"author":{"gitId":"-"},"content":""},{"lineNumber":532,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"   from typing import List"},{"lineNumber":535,"author":{"gitId":"-"},"content":"   from foo import listify"},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"   class BarClass:"},{"lineNumber":538,"author":{"gitId":"-"},"content":"       def listifyme(self) -\u003e \u0027List[BarClass]\u0027:"},{"lineNumber":539,"author":{"gitId":"-"},"content":"           return listify(self)"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":".. note::"},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"   The :py:data:`~typing.TYPE_CHECKING` constant defined by the :py:mod:`typing` module"},{"lineNumber":544,"author":{"gitId":"-"},"content":"   is ``False`` at runtime but ``True`` while type checking."},{"lineNumber":545,"author":{"gitId":"-"},"content":""},{"lineNumber":546,"author":{"gitId":"-"},"content":"Python 3.5.1 doesn\u0027t have :py:data:`~typing.TYPE_CHECKING`. An alternative is"},{"lineNumber":547,"author":{"gitId":"-"},"content":"to define a constant named ``MYPY`` that has the value ``False``"},{"lineNumber":548,"author":{"gitId":"-"},"content":"at runtime. Mypy considers it to be ``True`` when type checking."},{"lineNumber":549,"author":{"gitId":"-"},"content":"Here\u0027s the above example modified to use ``MYPY``:"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"   from typing import List"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"-"},"content":"   MYPY \u003d False"},{"lineNumber":556,"author":{"gitId":"-"},"content":"   if MYPY:"},{"lineNumber":557,"author":{"gitId":"-"},"content":"       import bar"},{"lineNumber":558,"author":{"gitId":"-"},"content":""},{"lineNumber":559,"author":{"gitId":"-"},"content":"   def listify(arg: \u0027bar.BarClass\u0027) -\u003e \u0027List[bar.BarClass]\u0027:"},{"lineNumber":560,"author":{"gitId":"-"},"content":"       return [arg]"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":".. _not-generic-runtime:"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"Using classes that are generic in stubs but not at runtime"},{"lineNumber":565,"author":{"gitId":"-"},"content":"----------------------------------------------------------"},{"lineNumber":566,"author":{"gitId":"-"},"content":""},{"lineNumber":567,"author":{"gitId":"-"},"content":"Some classes are declared as generic in stubs, but not at runtime. Examples"},{"lineNumber":568,"author":{"gitId":"-"},"content":"in the standard library include :py:class:`os.PathLike` and :py:class:`queue.Queue`."},{"lineNumber":569,"author":{"gitId":"-"},"content":"Subscripting such a class will result in a runtime error:"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"-"},"content":"   from queue import Queue"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"   class Tasks(Queue[str]):  # TypeError: \u0027type\u0027 object is not subscriptable"},{"lineNumber":576,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":577,"author":{"gitId":"-"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":"   results: Queue[int] \u003d Queue()  # TypeError: \u0027type\u0027 object is not subscriptable"},{"lineNumber":579,"author":{"gitId":"-"},"content":""},{"lineNumber":580,"author":{"gitId":"-"},"content":"To avoid these errors while still having precise types you can either use"},{"lineNumber":581,"author":{"gitId":"-"},"content":"string literal types or :py:data:`~typing.TYPE_CHECKING`:"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"   from queue import Queue"},{"lineNumber":586,"author":{"gitId":"-"},"content":"   from typing import TYPE_CHECKING"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":"   if TYPE_CHECKING:"},{"lineNumber":589,"author":{"gitId":"-"},"content":"       BaseQueue \u003d Queue[str]  # this is only processed by mypy"},{"lineNumber":590,"author":{"gitId":"-"},"content":"   else:"},{"lineNumber":591,"author":{"gitId":"-"},"content":"       BaseQueue \u003d Queue  # this is not seen by mypy but will be executed at runtime."},{"lineNumber":592,"author":{"gitId":"-"},"content":""},{"lineNumber":593,"author":{"gitId":"-"},"content":"   class Tasks(BaseQueue):  # OK"},{"lineNumber":594,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":"   results: \u0027Queue[int]\u0027 \u003d Queue()  # OK"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"If you are running Python 3.7+ you can use ``from __future__ import annotations``"},{"lineNumber":599,"author":{"gitId":"-"},"content":"as a (nicer) alternative to string quotes, read more in :pep:`563`.  For example:"},{"lineNumber":600,"author":{"gitId":"-"},"content":""},{"lineNumber":601,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":602,"author":{"gitId":"-"},"content":""},{"lineNumber":603,"author":{"gitId":"-"},"content":"   from __future__ import annotations"},{"lineNumber":604,"author":{"gitId":"-"},"content":"   from queue import Queue"},{"lineNumber":605,"author":{"gitId":"-"},"content":""},{"lineNumber":606,"author":{"gitId":"-"},"content":"   results: Queue[int] \u003d Queue()  # This works at runtime"},{"lineNumber":607,"author":{"gitId":"-"},"content":""},{"lineNumber":608,"author":{"gitId":"-"},"content":".. _silencing-linters:"},{"lineNumber":609,"author":{"gitId":"-"},"content":""},{"lineNumber":610,"author":{"gitId":"-"},"content":"Silencing linters"},{"lineNumber":611,"author":{"gitId":"-"},"content":"-----------------"},{"lineNumber":612,"author":{"gitId":"-"},"content":""},{"lineNumber":613,"author":{"gitId":"-"},"content":"In some cases, linters will complain about unused imports or code. In"},{"lineNumber":614,"author":{"gitId":"-"},"content":"these cases, you can silence them with a comment after type comments, or on"},{"lineNumber":615,"author":{"gitId":"-"},"content":"the same line as the import:"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"   # to silence complaints about unused imports"},{"lineNumber":620,"author":{"gitId":"-"},"content":"   from typing import List  # noqa"},{"lineNumber":621,"author":{"gitId":"-"},"content":"   a \u003d None  # type: List[int]"},{"lineNumber":622,"author":{"gitId":"-"},"content":""},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"To silence the linter on the same line as a type comment"},{"lineNumber":625,"author":{"gitId":"-"},"content":"put the linter comment *after* the type comment:"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"    a \u003d some_complex_thing()  # type: ignore  # noqa"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"Covariant subtyping of mutable protocol members is rejected"},{"lineNumber":632,"author":{"gitId":"-"},"content":"-----------------------------------------------------------"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"Mypy rejects this because this is potentially unsafe."},{"lineNumber":635,"author":{"gitId":"-"},"content":"Consider this example:"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":638,"author":{"gitId":"-"},"content":""},{"lineNumber":639,"author":{"gitId":"-"},"content":"   from typing_extensions import Protocol"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"   class P(Protocol):"},{"lineNumber":642,"author":{"gitId":"-"},"content":"       x: float"},{"lineNumber":643,"author":{"gitId":"-"},"content":""},{"lineNumber":644,"author":{"gitId":"-"},"content":"   def fun(arg: P) -\u003e None:"},{"lineNumber":645,"author":{"gitId":"-"},"content":"       arg.x \u003d 3.14"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"   class C:"},{"lineNumber":648,"author":{"gitId":"-"},"content":"       x \u003d 42"},{"lineNumber":649,"author":{"gitId":"-"},"content":"   c \u003d C()"},{"lineNumber":650,"author":{"gitId":"-"},"content":"   fun(c)  # This is not safe"},{"lineNumber":651,"author":{"gitId":"-"},"content":"   c.x \u003c\u003c 5  # Since this will fail!"},{"lineNumber":652,"author":{"gitId":"-"},"content":""},{"lineNumber":653,"author":{"gitId":"-"},"content":"To work around this problem consider whether \"mutating\" is actually part"},{"lineNumber":654,"author":{"gitId":"-"},"content":"of a protocol. If not, then one can use a :py:class:`@property \u003cproperty\u003e` in"},{"lineNumber":655,"author":{"gitId":"-"},"content":"the protocol definition:"},{"lineNumber":656,"author":{"gitId":"-"},"content":""},{"lineNumber":657,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":658,"author":{"gitId":"-"},"content":""},{"lineNumber":659,"author":{"gitId":"-"},"content":"   from typing_extensions import Protocol"},{"lineNumber":660,"author":{"gitId":"-"},"content":""},{"lineNumber":661,"author":{"gitId":"-"},"content":"   class P(Protocol):"},{"lineNumber":662,"author":{"gitId":"-"},"content":"       @property"},{"lineNumber":663,"author":{"gitId":"-"},"content":"       def x(self) -\u003e float:"},{"lineNumber":664,"author":{"gitId":"-"},"content":"          pass"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"   def fun(arg: P) -\u003e None:"},{"lineNumber":667,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":668,"author":{"gitId":"-"},"content":""},{"lineNumber":669,"author":{"gitId":"-"},"content":"   class C:"},{"lineNumber":670,"author":{"gitId":"-"},"content":"       x \u003d 42"},{"lineNumber":671,"author":{"gitId":"-"},"content":"   fun(C())  # OK"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"Dealing with conflicting names"},{"lineNumber":674,"author":{"gitId":"-"},"content":"------------------------------"},{"lineNumber":675,"author":{"gitId":"-"},"content":""},{"lineNumber":676,"author":{"gitId":"-"},"content":"Suppose you have a class with a method whose name is the same as an"},{"lineNumber":677,"author":{"gitId":"-"},"content":"imported (or built-in) type, and you want to use the type in another"},{"lineNumber":678,"author":{"gitId":"-"},"content":"method signature.  E.g.:"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":681,"author":{"gitId":"-"},"content":""},{"lineNumber":682,"author":{"gitId":"-"},"content":"   class Message:"},{"lineNumber":683,"author":{"gitId":"-"},"content":"       def bytes(self):"},{"lineNumber":684,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":685,"author":{"gitId":"-"},"content":"       def register(self, path: bytes):  # error: Invalid type \"mod.Message.bytes\""},{"lineNumber":686,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":687,"author":{"gitId":"-"},"content":""},{"lineNumber":688,"author":{"gitId":"-"},"content":"The third line elicits an error because mypy sees the argument type"},{"lineNumber":689,"author":{"gitId":"-"},"content":"``bytes`` as a reference to the method by that name.  Other than"},{"lineNumber":690,"author":{"gitId":"-"},"content":"renaming the method, a work-around is to use an alias:"},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":693,"author":{"gitId":"-"},"content":""},{"lineNumber":694,"author":{"gitId":"-"},"content":"   bytes_ \u003d bytes"},{"lineNumber":695,"author":{"gitId":"-"},"content":"   class Message:"},{"lineNumber":696,"author":{"gitId":"-"},"content":"       def bytes(self):"},{"lineNumber":697,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":698,"author":{"gitId":"-"},"content":"       def register(self, path: bytes_):"},{"lineNumber":699,"author":{"gitId":"-"},"content":"           ..."},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"Using a development mypy build"},{"lineNumber":702,"author":{"gitId":"-"},"content":"------------------------------"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"You can install the latest development version of mypy from source. Clone the"},{"lineNumber":705,"author":{"gitId":"-"},"content":"`mypy repository on GitHub \u003chttps://github.com/python/mypy\u003e`_, and then run"},{"lineNumber":706,"author":{"gitId":"-"},"content":"``pip install`` locally:"},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":".. code-block:: text"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"    git clone --recurse-submodules https://github.com/python/mypy.git"},{"lineNumber":711,"author":{"gitId":"-"},"content":"    cd mypy"},{"lineNumber":712,"author":{"gitId":"-"},"content":"    sudo python3 -m pip install --upgrade ."},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"Variables vs type aliases"},{"lineNumber":715,"author":{"gitId":"-"},"content":"-----------------------------------"},{"lineNumber":716,"author":{"gitId":"-"},"content":""},{"lineNumber":717,"author":{"gitId":"-"},"content":"Mypy has both type aliases and variables with types like ``Type[...]`` and it is important to know their difference."},{"lineNumber":718,"author":{"gitId":"-"},"content":""},{"lineNumber":719,"author":{"gitId":"-"},"content":"1. Variables with type ``Type[...]`` should be created by assignments with an explicit type annotations:"},{"lineNumber":720,"author":{"gitId":"-"},"content":""},{"lineNumber":721,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":722,"author":{"gitId":"-"},"content":""},{"lineNumber":723,"author":{"gitId":"-"},"content":"    class A: ..."},{"lineNumber":724,"author":{"gitId":"-"},"content":"    tp: Type[A] \u003d A"},{"lineNumber":725,"author":{"gitId":"-"},"content":""},{"lineNumber":726,"author":{"gitId":"-"},"content":"2. Aliases are created by assignments without an explicit type:"},{"lineNumber":727,"author":{"gitId":"-"},"content":""},{"lineNumber":728,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"    class A: ..."},{"lineNumber":731,"author":{"gitId":"-"},"content":"    Alias \u003d A"},{"lineNumber":732,"author":{"gitId":"-"},"content":""},{"lineNumber":733,"author":{"gitId":"-"},"content":"3. The difference is that aliases are completely known statically and can be used in type context (annotations):"},{"lineNumber":734,"author":{"gitId":"-"},"content":""},{"lineNumber":735,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":736,"author":{"gitId":"-"},"content":""},{"lineNumber":737,"author":{"gitId":"-"},"content":"    class A: ..."},{"lineNumber":738,"author":{"gitId":"-"},"content":"    class B: ..."},{"lineNumber":739,"author":{"gitId":"-"},"content":""},{"lineNumber":740,"author":{"gitId":"-"},"content":"    if random() \u003e 0.5:"},{"lineNumber":741,"author":{"gitId":"-"},"content":"        Alias \u003d A"},{"lineNumber":742,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":743,"author":{"gitId":"-"},"content":"        Alias \u003d B  # error: Cannot assign multiple types to name \"Alias\" without an explicit \"Type[...]\" annotation \\"},{"lineNumber":744,"author":{"gitId":"-"},"content":"                   # error: Incompatible types in assignment (expression has type \"Type[B]\", variable has type \"Type[A]\")"},{"lineNumber":745,"author":{"gitId":"-"},"content":""},{"lineNumber":746,"author":{"gitId":"-"},"content":"    tp: Type[object]  # tp is a type variable"},{"lineNumber":747,"author":{"gitId":"-"},"content":"    if random() \u003e 0.5:"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        tp \u003d A"},{"lineNumber":749,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":750,"author":{"gitId":"-"},"content":"        tp \u003d B  # This is OK"},{"lineNumber":751,"author":{"gitId":"-"},"content":""},{"lineNumber":752,"author":{"gitId":"-"},"content":"    def fun1(x: Alias) -\u003e None: ...  # This is OK"},{"lineNumber":753,"author":{"gitId":"-"},"content":"    def fun2(x: tp) -\u003e None: ...  # error: Variable \"__main__.tp\" is not valid as a type"},{"lineNumber":754,"author":{"gitId":"-"},"content":""},{"lineNumber":755,"author":{"gitId":"-"},"content":"Incompatible overrides"},{"lineNumber":756,"author":{"gitId":"-"},"content":"------------------------------"},{"lineNumber":757,"author":{"gitId":"-"},"content":""},{"lineNumber":758,"author":{"gitId":"-"},"content":"It\u0027s unsafe to override a method with a more specific argument type,"},{"lineNumber":759,"author":{"gitId":"-"},"content":"as it violates the `Liskov substitution principle"},{"lineNumber":760,"author":{"gitId":"-"},"content":"\u003chttps://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle\u003e`_."},{"lineNumber":761,"author":{"gitId":"-"},"content":"For return types, it\u0027s unsafe to override a method with a more general"},{"lineNumber":762,"author":{"gitId":"-"},"content":"return type."},{"lineNumber":763,"author":{"gitId":"-"},"content":""},{"lineNumber":764,"author":{"gitId":"-"},"content":"Other incompatible signature changes in method overrides, such as"},{"lineNumber":765,"author":{"gitId":"-"},"content":"adding an extra required parameter, or removing an optional parameter,"},{"lineNumber":766,"author":{"gitId":"-"},"content":"will also generate errors. The signature of a method in a subclass"},{"lineNumber":767,"author":{"gitId":"-"},"content":"should accept all valid calls to the base class method. Mypy"},{"lineNumber":768,"author":{"gitId":"-"},"content":"treats a subclass as a subtype of the base class. An instance of a"},{"lineNumber":769,"author":{"gitId":"-"},"content":"subclass is valid everywhere where an instance of the base class is"},{"lineNumber":770,"author":{"gitId":"-"},"content":"valid."},{"lineNumber":771,"author":{"gitId":"-"},"content":""},{"lineNumber":772,"author":{"gitId":"-"},"content":"This example demonstrates both safe and unsafe overrides:"},{"lineNumber":773,"author":{"gitId":"-"},"content":""},{"lineNumber":774,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":"    from typing import Sequence, List, Iterable"},{"lineNumber":777,"author":{"gitId":"-"},"content":""},{"lineNumber":778,"author":{"gitId":"-"},"content":"    class A:"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        def test(self, t: Sequence[int]) -\u003e Sequence[str]:"},{"lineNumber":780,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":781,"author":{"gitId":"-"},"content":""},{"lineNumber":782,"author":{"gitId":"-"},"content":"    class GeneralizedArgument(A):"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        # A more general argument type is okay"},{"lineNumber":784,"author":{"gitId":"-"},"content":"        def test(self, t: Iterable[int]) -\u003e Sequence[str]:  # OK"},{"lineNumber":785,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":786,"author":{"gitId":"-"},"content":""},{"lineNumber":787,"author":{"gitId":"-"},"content":"    class NarrowerArgument(A):"},{"lineNumber":788,"author":{"gitId":"-"},"content":"        # A more specific argument type isn\u0027t accepted"},{"lineNumber":789,"author":{"gitId":"-"},"content":"        def test(self, t: List[int]) -\u003e Sequence[str]:  # Error"},{"lineNumber":790,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":791,"author":{"gitId":"-"},"content":""},{"lineNumber":792,"author":{"gitId":"-"},"content":"    class NarrowerReturn(A):"},{"lineNumber":793,"author":{"gitId":"-"},"content":"        # A more specific return type is fine"},{"lineNumber":794,"author":{"gitId":"-"},"content":"        def test(self, t: Sequence[int]) -\u003e List[str]:  # OK"},{"lineNumber":795,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":796,"author":{"gitId":"-"},"content":""},{"lineNumber":797,"author":{"gitId":"-"},"content":"    class GeneralizedReturn(A):"},{"lineNumber":798,"author":{"gitId":"-"},"content":"        # A more general return type is an error"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        def test(self, t: Sequence[int]) -\u003e Iterable[str]:  # Error"},{"lineNumber":800,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":801,"author":{"gitId":"-"},"content":""},{"lineNumber":802,"author":{"gitId":"-"},"content":"You can use ``# type: ignore[override]`` to silence the error. Add it"},{"lineNumber":803,"author":{"gitId":"-"},"content":"to the line that generates the error, if you decide that type safety is"},{"lineNumber":804,"author":{"gitId":"-"},"content":"not necessary:"},{"lineNumber":805,"author":{"gitId":"-"},"content":""},{"lineNumber":806,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":807,"author":{"gitId":"-"},"content":""},{"lineNumber":808,"author":{"gitId":"-"},"content":"    class NarrowerArgument(A):"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        def test(self, t: List[int]) -\u003e Sequence[str]:  # type: ignore[override]"},{"lineNumber":810,"author":{"gitId":"-"},"content":"            ..."},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"Unreachable code"},{"lineNumber":813,"author":{"gitId":"-"},"content":"----------------"},{"lineNumber":814,"author":{"gitId":"-"},"content":""},{"lineNumber":815,"author":{"gitId":"-"},"content":"Mypy may consider some code as *unreachable*, even if it might not be"},{"lineNumber":816,"author":{"gitId":"-"},"content":"immediately obvious why.  It\u0027s important to note that mypy will *not*"},{"lineNumber":817,"author":{"gitId":"-"},"content":"type check such code. Consider this example:"},{"lineNumber":818,"author":{"gitId":"-"},"content":""},{"lineNumber":819,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":820,"author":{"gitId":"-"},"content":""},{"lineNumber":821,"author":{"gitId":"-"},"content":"    class Foo:"},{"lineNumber":822,"author":{"gitId":"-"},"content":"        bar: str \u003d \u0027\u0027"},{"lineNumber":823,"author":{"gitId":"-"},"content":""},{"lineNumber":824,"author":{"gitId":"-"},"content":"    def bar() -\u003e None:"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        foo: Foo \u003d Foo()"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        return"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        x: int \u003d \u0027abc\u0027  # Unreachable -- no error"},{"lineNumber":828,"author":{"gitId":"-"},"content":""},{"lineNumber":829,"author":{"gitId":"-"},"content":"It\u0027s easy to see that any statement after ``return`` is unreachable,"},{"lineNumber":830,"author":{"gitId":"-"},"content":"and hence mypy will not complain about the mis-typed code below"},{"lineNumber":831,"author":{"gitId":"-"},"content":"it. For a more subtle example, consider this code:"},{"lineNumber":832,"author":{"gitId":"-"},"content":""},{"lineNumber":833,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":834,"author":{"gitId":"-"},"content":""},{"lineNumber":835,"author":{"gitId":"-"},"content":"    class Foo:"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        bar: str \u003d \u0027\u0027"},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"-"},"content":"    def bar() -\u003e None:"},{"lineNumber":839,"author":{"gitId":"-"},"content":"        foo: Foo \u003d Foo()"},{"lineNumber":840,"author":{"gitId":"-"},"content":"        assert foo.bar is None"},{"lineNumber":841,"author":{"gitId":"-"},"content":"        x: int \u003d \u0027abc\u0027  # Unreachable -- no error"},{"lineNumber":842,"author":{"gitId":"-"},"content":""},{"lineNumber":843,"author":{"gitId":"-"},"content":"Again, mypy will not report any errors. The type of ``foo.bar`` is"},{"lineNumber":844,"author":{"gitId":"-"},"content":"``str``, and mypy reasons that it can never be ``None``.  Hence the"},{"lineNumber":845,"author":{"gitId":"-"},"content":"``assert`` statement will always fail and the statement below will"},{"lineNumber":846,"author":{"gitId":"-"},"content":"never be executed.  (Note that in Python, ``None`` is not an empty"},{"lineNumber":847,"author":{"gitId":"-"},"content":"reference but an object of type ``None``.)"},{"lineNumber":848,"author":{"gitId":"-"},"content":""},{"lineNumber":849,"author":{"gitId":"-"},"content":"In this example mypy will go on to check the last line and report an"},{"lineNumber":850,"author":{"gitId":"-"},"content":"error, since mypy thinks that the condition could be either True or"},{"lineNumber":851,"author":{"gitId":"-"},"content":"False:"},{"lineNumber":852,"author":{"gitId":"-"},"content":""},{"lineNumber":853,"author":{"gitId":"-"},"content":".. code-block:: python"},{"lineNumber":854,"author":{"gitId":"-"},"content":""},{"lineNumber":855,"author":{"gitId":"-"},"content":"    class Foo:"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        bar: str \u003d \u0027\u0027"},{"lineNumber":857,"author":{"gitId":"-"},"content":""},{"lineNumber":858,"author":{"gitId":"-"},"content":"    def bar() -\u003e None:"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        foo: Foo \u003d Foo()"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        if not foo.bar:"},{"lineNumber":861,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":862,"author":{"gitId":"-"},"content":"        x: int \u003d \u0027abc\u0027  # Reachable -- error"},{"lineNumber":863,"author":{"gitId":"-"},"content":""},{"lineNumber":864,"author":{"gitId":"-"},"content":"If you use the :option:`--warn-unreachable \u003cmypy --warn-unreachable\u003e` flag, mypy will generate"},{"lineNumber":865,"author":{"gitId":"-"},"content":"an error about each unreachable code block."}],"authorContributionMap":{"le0tan":25,"-":840}}]
