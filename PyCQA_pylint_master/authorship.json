[{"path":"CONTRIBUTORS.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"﻿Contributors"},{"lineNumber":2,"author":{"gitId":"-"},"content":"------------"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Current team:"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Ashley Whetter: maintainer, contributor"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Bryce Guinta: maintainer, contributor"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"* Claudiu Popa: maintainer, contributor"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Cara Vinson: astroid committer."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Guillaume Peillex: committer"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"* Łukasz Rogalski: committer."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Roy Williams (Lyft): committer"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  added check for implementing __eq__ without implementing __hash__,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  Added Python 3 check for accessing Exception.message."},{"lineNumber":22,"author":{"gitId":"-"},"content":"  Added Python 3 check for calling encode/decode with invalid codecs."},{"lineNumber":23,"author":{"gitId":"-"},"content":"  Added Python 3 check for accessing sys.maxint."},{"lineNumber":24,"author":{"gitId":"-"},"content":"  Added Python 3 check for bad import statements."},{"lineNumber":25,"author":{"gitId":"-"},"content":"  Added Python 3 check for accessing deprecated methods on the \u0027string\u0027 module,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  various patches."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Dmitry Pribysh: committer"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  multiple-imports, not-iterable, not-a-mapping, various patches."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Jim Robertson: committer"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"Ex-maintainers:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Sylvain Thenault (Logilab): main author / maintainer"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Torsten Marek (Google): committer / contributor"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"We would not be here without folks that contributed patches, pull requests,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"issues and their time to pylint. We\u0027re incredibly grateful to all of these"},{"lineNumber":43,"author":{"gitId":"-"},"content":"contributors:"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Daniel Balparda (Google): GPyLint maintainer (Google\u0027s pylint variant),"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  various patches"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Martin Pool (Google): warnings for anomalous backslashes, symbolic names for"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  messages (like \u0027unused\u0027), etc"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Alexandre Fayolle (Logilab): TkInter gui, documentation, debian support"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Julien Cristau, Emile Anclin (Logilab): python 3 support"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Sandro Tosi: Debian packaging"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Mads Kiilerich, Boris Feld, Bill Wendling, Sebastian Ulrich:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  various patches"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Brian van den Broek: windows installation documentation"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Amaury Forgeot d\u0027Arc: check names imported from a module exists in the module"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Benjamin Niemann: allow block level enabling/disabling of messages"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"* Nathaniel Manista: suspicious lambda checking"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"* David Shea: invalid sequence and slice index"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Carl Crowder: don\u0027t evaluate the value of arguments for \u0027dangerous-default-value\u0027"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Michal Nowikowski: wrong-spelling-in-comment, wrong-spelling-in-docstring,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  parallel execution on multiple CPUs and other patches."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"* David Lindquist: logging-format-interpolation warning."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"* Brett Cannon: Port source code to be Python 2/3 compatible, Python 3"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  checker."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"* Vlad Temian: redundant-unittest-assert and the JSON reporter."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"* Cosmin Poieană: unichr-builtin and improvements to bad-open-mode."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"* Viorel Știrbu: intern-builtin warning."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"* Dan Goldsmith: support for msg-template in HTML reporter."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"* Chris Rebert: unidiomatic-typecheck."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"* Steven Myint: duplicate-except."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Radu Ciorba: not-context-manager and confusing-with-statement warnings."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"* Bruno Daniel: check_docs extension."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"* James Morgensen: ignored-modules option applies to import errors."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"* Cezar Elnazli: deprecated-method"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"* Stéphane Wirtel: nonlocal-without-binding"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"* Laura Medioni (Logilab, on behalf of the CNES): misplaced-comparison-constant,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  no-classmethod-decorator, no-staticmethod-decorator, too-many-nested-blocks,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  too-many-boolean-expressions, unneeded-not, wrong-import-order, ungrouped-imports,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  wrong-import-position, redefined-variable-type"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"* Aru Sahni: Git ignoring, regex-based ignores"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"* Mike Frysinger: contributor."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"* Moisés López (Vauxoo): Support for deprecated-modules in modules not installed,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  Refactor wrong-import-order to integrate it with `isort` library"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  Add check too-complex with mccabe for cyclomatic complexity"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  Refactor wrong-import-position to skip try-import and nested cases"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  Add consider-merging-isinstance, superfluous-else-return"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  Fix consider-using-ternary for \u0027True and True and True or True\u0027 case"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"* Luis Escobar (Vauxoo), Moisés López (Vauxoo): Add bad-docstring-quotes and docstring-first-line-empty"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Yannick Brehon: contributor."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Glenn Matthews: autogenerated documentation for optional extensions,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  bug fixes and enhancements for docparams (née check_docs) extension"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"* Elias Dorneles: minor adjust to config defaults and docs"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"* Yuri Bochkarev: Added epytext support to docparams extension."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"* Alexander Todorov: added new error conditions to \u0027bad-super-call\u0027,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  Added new check for incorrect len(SEQUENCE) usage,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  Added new extension for comparison against empty string constants,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  Added new extension which detects comparing integers to zero,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  Added new useless-return checker,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  Added new try-except-raise checker"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"* Erik Eriksson - Added overlapping-except error check."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Anthony Foglia (Google): Added simple string slots check."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"* Derek Gustafson: contributor"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"* Petr Pulc: require whitespace around annotations"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"* John Paraskevopoulos: add \u0027differing-param-doc\u0027 and \u0027differing-type-doc\u0027"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Martin von Gagern (Google): Added \u0027raising-format-tuple\u0027 warning."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"* Ahirnish Pareek, \u0027keyword-arg-before-var-arg\u0027 check"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"* Daniel Miller: contributor."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"* Bryce Guinta: contributor"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"* Martin Bašti: contributor"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  Added new check for shallow copy of os.environ"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"* Jacques Kvam: contributor"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Brian Shaginaw: prevent error on exception check for functions"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Ioana Tagirta: fix bad thread instantiation check"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Reverb Chu: contributor"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"* Tobias Hernstig: contributor"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"* Konstantin Manna: contributor"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"* Andreas Freimuth: fix indentation checking with tabs"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"* Renat Galimov: contributor"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"* Thomas Snowden: fix missing-docstring for inner functions"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"* Mitchell Young: minor adjustment to docparams"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"* Marianna Polatoglou: minor contribution for wildcard import check"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"* Ben Green: contributor"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"* Benjamin Freeman: contributor"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"* Fureigh: contributor"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"* Jace Browning: updated default report format with clickable paths"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"* Sushobhit (sushobhit27): contributor"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  Added new check \u0027comparison-with-itself\u0027."},{"lineNumber":190,"author":{"gitId":"-"},"content":"  Added new check \u0027useless-import-alias\u0027."},{"lineNumber":191,"author":{"gitId":"-"},"content":"  Added support of annotations in missing-type-doc and missing-return-type-doc."},{"lineNumber":192,"author":{"gitId":"-"},"content":"  Added new check \u0027comparison-with-callable\u0027."},{"lineNumber":193,"author":{"gitId":"-"},"content":"  Removed six package dependency."},{"lineNumber":194,"author":{"gitId":"-"},"content":"  Added new check \u0027chained-comparison\u0027."},{"lineNumber":195,"author":{"gitId":"-"},"content":"  Added new check \u0027useless-object-inheritance\u0027."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"* Mariatta Wijaya: contributor"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  Added new check `logging-fstring-interpolation`"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  Documentation typo fixes"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"* Jason Owen: contributor"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"* Mark Roman Miller: fix inline defs in too-many-statements"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* Adam Dangoor: contributor"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"* Gary Tyler McLeod: contributor"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* Wolfgang Grafen, Axel Muller, Fabio Zadrozny, Pierre Rouleau,"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  Maarten ter Huurne, Mirko Friedenhagen and all the Logilab\u0027s team (among others)."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"* Matej Marusak: contributor"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"* Nick Drozd: contributor, performance improvements to astroid"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"* Kosarchuk Sergey: contributor"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"* Carey Metcalfe: demoted `try-except-raise` from error to warning"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"* Marcus Näslund (naslundx): contributor"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"* Natalie Serebryakova: contributor"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"* Caio Carrara: contributor"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"* Roberto Leinardi: PyCharm plugin maintainer"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"* Aivar Annamaa: contributor"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"* Hornwitser: fix import graph"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"* Yuri Gribov: contributor"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"* Drew Risinger: committer (docs)"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"* Ben James"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"* Tomer Chachamu, Richard Goodman: simplifiable-if-expression"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"* Alan Chan: contributor"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"* Benjamin Drung: contributing Debian Developer"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"* Scott Worley: contributor"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"* Michael Hudson-Doyle"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"* Lucas Cimon: contributor"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"* Mike Miller: contributor"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"* Sergei Lebedev: contributor"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"* Sasha Bagan"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"* Pablo Galindo Salgado: contributor"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  Fix false positive \u0027Non-iterable value\u0027 with async comprehensions."},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"* Matus Valo"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"* Sardorbek Imomaliev: contributor"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"* Justin Li (justinnhli)"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"* Nicolas Dickreuter"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"* Pascal Corpet"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"* Svetoslav Neykov: contributor"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"* Federico Bond: contributor"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"* Fantix King (UChicago): contributor"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"* Yory (yory8): contributor"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"* Thomas Hisch: contributor"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"* Clément Pit-Claudel : contributor"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"* Goudcode: contributor"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"* Paul Renvoise : contributor"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"* Bluesheeptoken: contributor"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"* Michael Scott Cuthbert: contributor"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"* Pierre Sassoulas : maintainer, contributor"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"* Nathan Marrow"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"* Taewon Kim : contributor"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"* Daniil Kharkov: contributor"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"* Tyler N. Thieding: contributor"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"* Zeb Nicholls: contributor"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    - Made W9011 compatible with \u0027of\u0027 syntax in return types"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"* Martin Vielsmaier: contributor"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"* Agustin Toledo: contributor"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"* Nicholas Smith: contributor"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"* Peter Kolbus (Garmin): contributor"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"* Oisin Moran: contributor"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"* Andrzej Klajnert: contributor"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"* Andrés Pérez Hortal: contributor"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"* Niko Wenselowski: contributor"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"* Danny Hermes: contributor"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"* Eric Froemling: contributor"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"* Robert Schweizer: contributor"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"* Hugo van Kemenade: contributor"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"* Mikhail Fesenko: contributor"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"* Trevor Bekolay: contributor"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    - Added --list-msgs-enabled command"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"* Rémi Cardona: contributor"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"* Daniel Draper: contributor"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"* Gabriel R. Sezefredo: contributor"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    - Fixed \"exception-escape\" false positive with generators"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"* laike9m: contributor"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"* Janne Rönkkö: contributor"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"* Hugues Bruant: contributor"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"* Tim Gates: contributor"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"* Enji Cooper: contributor"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"* Bastien Vallet: contributor"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"* Pek Chhan: contributor"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"* Craig Henriques: contributor"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"* Matthijs Blom: contributor"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"* Andy Palmer: contributor"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"* Wes Turner (Google): added new check \u0027inconsistent-quotes\u0027"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"* Athos Ribeiro"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    Fixed dict-keys-not-iterating false positive for inverse containment checks"},{"lineNumber":362,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":363,"author":{"gitId":"anubh-v"},"content":"* Anubhav: contributor"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"* Ben Graham: contributor"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"* Anthony Tan: contributor"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"* Benny Müller: contributor"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"* Bernie Gray: contributor"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"* Slavfox: contributor"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"* Matthew Beckers (mattlbeck): contributor"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"* Yang Yang: contributor"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"* Andrew J. Simmons (anjsimmo): contributor"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"* Damien Baty: contributor"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"* Daniel R. Neal (danrneal): contributer"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"* Jeremy Fleischman (jfly): contributer"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"* Shiv Venkatasubrahmanyam"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"* Jochen Preusche (iilei): contributor"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"* Ram Rachum (cool-RR)"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"* Pieter Engelbrecht"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"* Ethan Leba: contributor"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"* Matěj Grabovský: contributor"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"* Yeting Li (yetingli): contributor"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"* Frost Ming (frostming): contributor"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"* Luigi Bertaco Cristofolini (luigibertaco): contributor"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"* Eli Fine (eli88fine): Fixed false positive duplicate code warning for lines with symbols only"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"* Ganden Schaffner: contributor"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"* Josselin Feist: contributor"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"* David Cain: contributor"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"* Pedro Algarvio (s0undt3ch): contributor"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"* Luigi Bertaco Cristofolini (luigibertaco): contributor"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"* Or Bahari"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"* Joshua Cannon: contributor"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"* Giuseppe Valente: contributor"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"* Takashi Hirashima: contributor"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"* Joffrey Mander: contributor"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"* Julien Palard: contributor"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"* Raphael Gaschignard: contributor"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"* Sorin Sbarnea: contributor"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"* Gergely Kalmár: contributor"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"* Batuhan Taskaya: contributor"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"* Frank Harrison (doublethefish): contributor"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"* Gauthier Sebaux: contributor"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"* Logan Miller (komodo472): contributor"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"* Matthew Suozzo: contributor"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"* Marc Mueller (cdce8p): contributor"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"* David Gilman: contributor"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"* Ikraduya Edian: contributor"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    - Added new checks \u0027consider-using-generator\u0027 and \u0027use-a-generator\u0027."},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"* Tiago Honorato: contributor"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"* Lefteris Karapetsas: contributor"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"* Louis Sautier: contributor"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"* Quentin Young: contributor"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"* Alexander Kapshuna: contributor"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"* Mark Byrne: contributor"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"* Konstantina Saketou: contributor"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"* Andrew Howe: contributor"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"* James Sinclair (irgeek): contributor"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"* Andreas Finkler: contributor"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"* Aidan Haase, Elizabeth Bott: contributor"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"* Sebastian Müller: contributor"},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"* Ramiro Leal-Cavazos (ramiro050): Fixed bug preventing pylint from working with emacs tramp"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"* manderj: contributor"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"* qwiddle: contributor"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"* das-intensity: contributor"},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"* Jiajunsu (victor): contributor"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"* Andrew Haigh (nelfin): contributor"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"* Pang Yu Shao (yushao2): contributor"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"* Aditya Gupta (adityagupta1089) : contributor"},{"lineNumber":491,"author":{"gitId":"-"},"content":"  - Added ignore_signatures to duplicate checker"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"* Jacob Walls: contributor"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"* ruro: contributor"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"* David Liu (david-yz-liu): contributor"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"* Bernard Nauwelaerts: contributor"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"* Fabian Damken: contributor"},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"* Markus Siebenhaar: contributor"}],"authorContributionMap":{"anubh-v":2,"-":501}},{"path":"ChangeLog","fileType":"ChangeLog","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"------------------"},{"lineNumber":2,"author":{"gitId":"-"},"content":"Pylint\u0027s ChangeLog"},{"lineNumber":3,"author":{"gitId":"-"},"content":"------------------"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.9.0?"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Release date: TBA"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":".."},{"lineNumber":10,"author":{"gitId":"-"},"content":"  Put new features and bugfixes here and also in \u0027doc/whatsnew/2.9.rst\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Added ``deprecated-decorator``: Emitted when deprecated decorator is used."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  Closes #4429"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"* Added ``ignore-paths`` behaviour. Defined regex patterns are matched against full file path."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  Close #2541"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Fix false negative for ``consider-using-with`` if calls like ``open()`` were used outside of assignment expressions."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* The warning for ``arguments-differ`` now signals explicitly the difference it detected"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  by naming the argument or arguments that changed and the type of change that occurred."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* Suppress ``consider-using-with`` inside context managers."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  Closes #4430"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Added ``--fail-on`` option to return non-zero exit codes regardless of ``--fail-under`` value."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* numversion tuple contains integers again to fix multiple pylint\u0027s plugins that relied on it"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  Closes #4420"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"* Fix false-positive ``too-many-ancestors`` when inheriting from builtin classes,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  especially from the ``collections.abc`` module"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  Closes #4166"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  Closes #4415"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Stdlib deprecated modules check is moved to stdlib checker. New deprecated"},{"lineNumber":42,"author":{"gitId":"-"},"content":"modules are added."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"* Fix raising false-positive ``no-member`` on abstract properties"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Created new error message called ``arguments-renamed`` which identifies any changes at the parameter"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  names of overridden functions."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  Closes #3536"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"* New checker ``consider-using-dict-items``. Emitted  when iterating over dictionary keys and then"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  indexing the same dictionary with the key within loop body."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  Closes #3389"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Don\u0027t emit ``import-error`` if import guarded behind ``if sys.version_info \u003e\u003d (x, x)``"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Fix incompatibility with Python 3.6.0 caused by ``typing.Counter`` and ``typing.NoReturn`` usage"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  Closes #4412"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* New checker ``use-maxsplit-arg``. Emitted either when accessing only the first or last"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  element of ``str.split()``."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  Closes #4440"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"* Add ignore_signatures to duplicate code checker"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  Closes #3619"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Fix documentation errors in \"Block disables\" paragraph of User Guide."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* New checker ``unnecessary-dict-index-lookup``. Emitted when iterating over dictionary items"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  (key-value pairs) and accessing the value by index lookup."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  Closes #4470"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"* New checker``consider-using-from-import``. Emitted when a submodule/member of a package is imported and aliased"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  with the same name."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  Closes #2309"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"* Allow comma-separated list in ``output-format`` and separate output files for"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  each specified format."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"  Closes #1798"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"* Make ``using-constant-test`` detect constant tests consisting of list literals like ``[]`` and"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  ``[1, 2, 3]``."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"* Improved error message of ``unnecessary-comprehension`` checker by providing code suggestion."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  Closes #4499"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"* New checker ``unused-private-member``. Emitted when a private member (i.e., starts with ``__``) of a class"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  is defined but not used."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  Closes #4483"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"* Fix false negative of ``consider-using-enumerate`` when iterating over an attribute."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  Closes #3657"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* New checker ``invalid-class-object``. Emitted when a non-class is assigned to a ``__class__`` attribute."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  Closes #585"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"* Added handling of floating point values when parsing configuration from pyproject.toml"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  Closes #4518"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.8.2?"},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":115,"author":{"gitId":"-"},"content":"Release date: 2021-04-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"* Keep ``__pkginfo__.numversion`` a tuple to avoid breaking pylint-django."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"  Closes #4405"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"* scm_setuptools has been added to the packaging."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Pylint\u0027s tags are now the standard form ``vX.Y.Z`` and not ``pylint-X.Y.Z`` anymore."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"* New warning message ``deprecated-class``. This message is emitted if import or call deprecated class of the"},{"lineNumber":126,"author":{"gitId":"-"},"content":"standard library (like ``collections.Iterable`` that will be removed in Python 3.10)."},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Closes #4388"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.8.1?"},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Release date: 2021-04-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"* Add numversion back (temporarily) in ``__pkginfo__`` because it broke Pylama and revert the unnecessary"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  ``pylint.version`` breaking change."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  Closes #4399"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.8.0?"},{"lineNumber":142,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Release date: 2021-04-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"* New refactoring message ``consider-using-with``. This message is emitted if resource-allocating functions or methods of the"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  standard library (like ``open()`` or ``threading.Lock.acquire()``) that can be used as a context manager are called without"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  a ``with`` block."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  Closes #3413"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"* Resolve false positives on unused variables in decorator functions"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  Closes #4252"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"* Add new extension ``ConfusingConsecutiveElifChecker``. This optional checker emits a refactoring message (R5601 ``confusing-consecutive-elif``)"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  if if/elif statements with different indentation levels follow directly one after the other."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"* New option ``--output\u003d\u003cfile\u003e`` to output result to a file rather than printing to stdout."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"  Closes #1070"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Use a prescriptive message for ``unidiomatic-typecheck``"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  Closes #3891"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"* Apply ``const-naming-style`` to module constants annotated with"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  ``typing.Final``"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"* The packaging is now done via setuptools exclusively. ``doc``, ``tests``, ``man``, ``elisp`` and ``Changelog`` are"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  not packaged anymore - reducing the size of the package by 75%."},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"* Debian packaging is now  (officially) done in https://salsa.debian.org/python-team/packages/pylint."},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"* The \u0027doc\u0027 extra-require has been removed."},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"* ``__pkginfo__`` now only contain ``__version__`` (also accessible with ``pylint.__version__``), other meta-information are still"},{"lineNumber":177,"author":{"gitId":"-"},"content":"  accessible with ``from importlib import metadata;metadata.metadata(\u0027pylint\u0027)``."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"* COPYING has been renamed to LICENSE for standardization."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"* Fix false-positive ``used-before-assignment`` in function returns."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"  Closes #4301"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"* Updated ``astroid`` to 2.5.3"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"  Closes #2822, #4206, #4284"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"* Add ``consider-using-min-max-builtin`` check for if statement which could be replaced by Python builtin min or max"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  Closes #3406"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"* Don\u0027t auto-enable postponed evaluation of type annotations with Python 3.10"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"* Update ``astroid`` to 2.5.4"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"* Add new extension ``TypingChecker``. This optional checker can detect the use of deprecated typing aliases"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  and can suggest the use of the alternative union syntax where possible."},{"lineNumber":199,"author":{"gitId":"-"},"content":"  (For example, \u0027typing.Dict\u0027 can be replaced by \u0027dict\u0027, and \u0027typing.Unions\u0027 by \u0027|\u0027, etc.)"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  Make sure to check the config options if you plan on using it!"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"* Reactivates old counts in report mode."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  Closes #3819"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"* During detection of ``inconsistent-return-statements`` consider that ``assert False`` is a return node."},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  Closes #4019"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"* Run will not fail if score exactly equals ``config.fail_under``."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"* Functions that never returns may declare ``NoReturn`` as type hints, so that"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  ``inconsistent-return-statements`` is not emitted."},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"  Closes #4122, #4188"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"* Improved protected access checks to allow access inside class methods"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  Closes #1159"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"* Fix issue with PEP 585 syntax and the use of ``collections.abc.Set``"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"* Fix issue that caused class variables annotated with ``typing.ClassVar`` to be"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  identified as class constants. Now, class variables annotated with"},{"lineNumber":225,"author":{"gitId":"-"},"content":"  ``typing.Final`` are identified as such."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"  Closes #4277"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"* Continuous integration with read the doc has been added."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"  Closes #3850"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"* Don\u0027t show ``DuplicateBasesError`` for attribute access"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"* Fix crash when checking ``setup.cfg`` for pylint config when there are non-ascii characters in there"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"  Closes #4328"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"* Allow code flanked in backticks to be skipped by spellchecker"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"  Closes #4319"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"* Allow Python tool directives (for black, flake8, zimports, isort, mypy, bandit, pycharm) at beginning of comments to be skipped by spellchecker"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"  Closes #4320"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"* Fix issue that caused emacs pylint to fail when used with tramp"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"* Improve check for invalid PEP 585 syntax inside functions"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  if postponed evaluation of type annotations is enabled"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"* Improve check for invalid PEP 585 syntax as default function arguments"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.7.4?"},{"lineNumber":256,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Release date: 2021-03-30"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"* Fix a problem with disabled msgid not being ignored"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"  Closes #4265"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"* Fix issue with annotated class constants"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"  Closes #4264"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.7.3?"},{"lineNumber":270,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Release date: 2021-03-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"* Introduce logic for checking deprecated attributes in DeprecationMixin."},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"* Reduce usage of blacklist/whitelist terminology. Notably, ``extension-pkg-allow-list`` is an"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  alternative to ``extension-pkg-whitelist`` and the message ``blacklisted-name`` is now emitted as"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  ``disallowed-name``. The previous names are accepted to maintain backward compatibility."},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"* Move deprecated checker to ``DeprecatedMixin``"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"  Closes #4086"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"* Bump ``astroid`` version to ``2.5.2``"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"* Fix false positive for ``method-hidden`` when using private attribute and method"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"  Closes #3936"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"* ``use-symbolic-message-instead`` now also works on legacy messages like ``C0111`` (``missing-docstring``)."},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"* Remove unwanted print to stdout from ``_emit_no_member``"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"* Introduce a command-line option to specify pyreverse output directory"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"  Closes #4159"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"* Fix issue with Enums and ``class-attribute-naming-style\u003dsnake_case``"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"  Closes #4149"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"* Add ``allowed-redefined-builtins`` option for fine tuning ``redefined-builtin`` check."},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"  Close #3263"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"* Fix issue when executing with ``python -m pylint``"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"  Closes #4161"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"* Exempt ``typing.TypedDict`` from ``too-few-public-methods`` check."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"  Closes #4180"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"* Fix false-positive ``no-member`` for typed annotations without default value."},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"  Closes #3167"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"* Add ``--class-const-naming-style`` for Enum constants and class variables annotated"},{"lineNumber":318,"author":{"gitId":"-"},"content":"  with ``typing.ClassVar``"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"  Closes #4181"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"* Fix astroid.Inference error for undefined-variables with ``len()```"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"  Closes #4215"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"* Fix column index on FIXME warning messages"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"  Closes #4218"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"* Improve handling of assignment expressions, better edge case handling"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"  Closes #3763, #4238"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"* Improve check if class is subscriptable PEP585"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"* Fix documentation and filename handling of --import-graph"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"* Fix false-positive for ``unused-import`` on class keyword arguments"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"  Closes #3202"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"* Fix regression with plugins on PYTHONPATH if latter is cwd"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"  Closes #4252"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.7.2?"},{"lineNumber":348,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":349,"author":{"gitId":"-"},"content":"Release date: 2021-02-28"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"* Fix False Positive on ``Enum.__members__.items()``, ``Enum.__members__.values``, and ``Enum.__members__.keys``"},{"lineNumber":352,"author":{"gitId":"-"},"content":"  Closes #4123"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"* Properly strip dangerous sys.path entries (not just the first one)"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"  Closes #3636"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"* Workflow and packaging improvements"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.7.1?"},{"lineNumber":362,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":363,"author":{"gitId":"-"},"content":"Release date: 2021-02-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"* Expose ``UnittestLinter`` in pylint.testutils"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"* Don\u0027t check directories starting with \u0027.\u0027 when using register_plugins"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"  Closes #4119"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.7.0?"},{"lineNumber":373,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Release date: 2021-02-21"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"* Introduce DeprecationMixin for reusable deprecation checks."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"  Closes #4049"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"* Fix false positive for ``builtin-not-iterating`` when ``map`` receives iterable"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"  Closes #4078"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"* Python 3.6+ is now required."},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"* Fix false positive for ``builtin-not-iterating`` when ``zip`` receives iterable"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"* Add ``nan-comparison`` check for NaN comparisons"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"* Bug fix for empty-comment message line number."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"  Closes #4009"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"* Only emit ``bad-reversed-sequence`` on dictionaries if below py3.8"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"  Closes #3940"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"* Handle class decorators applied to function."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"  Closes #3882"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"* Add check for empty comments"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"* Fix minor documentation issue in contribute.rst"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"* Enums are now required to be named in UPPER_CASE by ``invalid-name``."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"  Close #3834"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"* Add missing checks for deprecated functions."},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"* Postponed evaluation of annotations are now recognized by default if python version is above 3.10"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"  Closes #3992"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"* Fix column metadata for anomalous backslash lints"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"* Drop support for Python 3.5"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"* Add support for pep585 with postponed evaluation"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"  Closes #3320"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"* Check alternative union syntax - PEP 604"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"  Closes #4065"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"* Fix multiple false positives with assignment expressions"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"  Closes #3347, #3953, #3865, #3275"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"* Fix TypedDict inherit-non-class false-positive Python 3.9+"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"  Closes #1927"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"* Fix issue with nested PEP 585 syntax"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"* Fix issue with nested PEP 604 syntax"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"* Fix a crash in ``undefined-variable`` caused by chained attributes in metaclass"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"  Close #3742"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"* Fix false positive for ``not-async-context-manager`` when ``contextlib.asynccontextmanager`` is used"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"  Close #3862"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"* Fix linter multiprocessing pool shutdown (triggered warnings when runned in parallels with other pytest plugins)"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"  Closes #3779"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"* Fix a false-positive emission of ``no-self-use`` and ``unused-argument`` for methods"},{"lineNumber":453,"author":{"gitId":"-"},"content":"  of generic structural types (`Protocol[T]`)"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"  Closes #3885"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"* Fix bug that lead to duplicate messages when using ``--jobs 2`` or more."},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"  Close #3584"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"* Adds option ``check-protected-access-in-special-methods`` in the ClassChecker to activate/deactivate"},{"lineNumber":462,"author":{"gitId":"-"},"content":"  ``protected-access`` message emission for single underscore prefixed attribute in special methods."},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"  Close #3120"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"* Fix vulnerable regular expressions in ``pyreverse``"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"  Close #3811"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"* ``inconsistent-return-statements`` message is now emitted if one of ``try/except`` statement"},{"lineNumber":471,"author":{"gitId":"-"},"content":"  is not returning explicitly while the other do."},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"  Closes #3468"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"* Fix ``useless-super-delegation`` false positive when default keyword argument is a dictionnary."},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"  Close #3773"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"* Fix a crash when a specified config file does not exist"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"* Add support to ``ignored-argument-names`` in DocstringParameterChecker and adds ``useless-param-doc`` and ``useless-type-doc`` messages."},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"  Close #3800"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"* Enforce docparams consistently when docstring is not present"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"  Close #2738"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"* Fix ``duplicate-code`` false positive when lines only contain whitespace and non-alphanumeric characters (e.g. parentheses, bracket, comma, etc.)"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"* Improve lint message for ``singleton-comparison`` with bools"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"* Fix spell-checker crash on indented docstring lines that look like # comments"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"  Close #3786"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"* Fix AttributeError in checkers/refactoring.py"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"* Improve sphinx directives spelling filter"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"* Fix a bug with postponed evaluation when using aliases for annotations."},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"  Close #3798"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"* Fix minor documentation issues"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"* Improve the performance of the line length check."},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"* Removed incorrect deprecation of ``inspect.getfullargspec``"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"* Fix ``signature-differs`` false positive for functions with variadics"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"  Close #3737"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"* Fix a crash in ``consider-using-enumerate`` when encountering ``range()`` without arguments"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"  Close #3735"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"* ``len-as-conditions`` is now triggered only for classes that are inheriting directly from list, dict, or set and not implementing the ``__bool__`` function, or from generators like range or list/dict/set comprehension. This should reduce the false positives for other classes, like pandas\u0027s DataFrame or numpy\u0027s Array."},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"  Close #1879"},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"* Fixes duplicate-errors not working with -j2+"},{"lineNumber":524,"author":{"gitId":"-"},"content":""},{"lineNumber":525,"author":{"gitId":"-"},"content":"  Close #3314"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"* ``generated-members`` now matches the qualified name of members"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"  Close #2498"},{"lineNumber":530,"author":{"gitId":"-"},"content":""},{"lineNumber":531,"author":{"gitId":"-"},"content":"* Add check for bool function to ``len-as-condition``"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"* Add ``simplifiable-condition`` check for extraneous constants in conditionals using and/or."},{"lineNumber":534,"author":{"gitId":"-"},"content":""},{"lineNumber":535,"author":{"gitId":"-"},"content":"* Add ``condition-evals-to-constant`` check for conditionals using and/or that evaluate to a constant."},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"  Close #3407"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"* Changed setup.py to work with [distlib](https://pypi.org/project/distlib)"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":"  Close #3555"},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"* New check: ``consider-using-generator``"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"  This check warns when a comprehension is used inside an ``any`` or ``all`` function,"},{"lineNumber":546,"author":{"gitId":"-"},"content":"  since it is unnecessary and should be replaced by a generator instead."},{"lineNumber":547,"author":{"gitId":"-"},"content":"  Using a generator would be less code and way faster."},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"  Close #3165"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"* Add Github Actions to replace Travis and AppVeyor in the future"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":""},{"lineNumber":554,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.6.1?"},{"lineNumber":555,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"* Astroid version has been set as \u003c 2.5"},{"lineNumber":558,"author":{"gitId":"-"},"content":""},{"lineNumber":559,"author":{"gitId":"-"},"content":"  Close #4093"},{"lineNumber":560,"author":{"gitId":"-"},"content":""},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.6.0?"},{"lineNumber":563,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":564,"author":{"gitId":"-"},"content":""},{"lineNumber":565,"author":{"gitId":"-"},"content":"Release date: 2020-08-20"},{"lineNumber":566,"author":{"gitId":"-"},"content":""},{"lineNumber":567,"author":{"gitId":"-"},"content":"* Fix various scope-related bugs in ``undefined-variable`` checker"},{"lineNumber":568,"author":{"gitId":"-"},"content":""},{"lineNumber":569,"author":{"gitId":"-"},"content":"  Close #1082, #3434, #3461"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":"* bad-continuation and bad-whitespace have been removed, black or another formatter can help you with this better than Pylint"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"-"},"content":"  Close #246, #289, #638, #747, #1148, #1179, #1943, #2041, #2301, #2304, #2944, #3565"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"* The no-space-check option has been removed. It\u0027s no longer possible to consider empty line like a ``trailing-whitespace`` by using clever options"},{"lineNumber":576,"author":{"gitId":"-"},"content":""},{"lineNumber":577,"author":{"gitId":"-"},"content":"  Close #1368"},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"* ``missing-kwoa`` is no longer emitted when dealing with overload functions"},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"-"},"content":"  Close #3655"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"* mixed-indentation has been removed, it is no longer useful since TabError is included directly in python3"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"  Close #2984 #3573"},{"lineNumber":586,"author":{"gitId":"-"},"content":""},{"lineNumber":587,"author":{"gitId":"-"},"content":"* Add ``super-with-arguments`` check for flagging instances of Python 2 style super calls."},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"-"},"content":"* Add an faq detailing which messages to disable to avoid duplicates w/ other popular linters"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"* Fix superfluous-parens false-positive for the walrus operator"},{"lineNumber":592,"author":{"gitId":"-"},"content":""},{"lineNumber":593,"author":{"gitId":"-"},"content":"  Close #3383"},{"lineNumber":594,"author":{"gitId":"-"},"content":""},{"lineNumber":595,"author":{"gitId":"-"},"content":"* Fix ``fail-under`` not accepting floats"},{"lineNumber":596,"author":{"gitId":"-"},"content":""},{"lineNumber":597,"author":{"gitId":"-"},"content":"* Fix a bug with ``ignore-docstrings`` ignoring all lines in a module"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"* Fix ``pre-commit`` config that could lead to undetected duplicate lines of code"},{"lineNumber":600,"author":{"gitId":"-"},"content":""},{"lineNumber":601,"author":{"gitId":"-"},"content":"* Fix a crash in parallel mode when the module\u0027s filepath is not set"},{"lineNumber":602,"author":{"gitId":"-"},"content":""},{"lineNumber":603,"author":{"gitId":"-"},"content":"  Close #3564"},{"lineNumber":604,"author":{"gitId":"-"},"content":""},{"lineNumber":605,"author":{"gitId":"-"},"content":"* Add ``raise-missing-from`` check for exceptions that should have a cause."},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"* Support both isort 4 and isort 5. If you have pinned isort 4 in your projet requirements, nothing changes. If you use isort 5, though, note that the ``known-standard-library`` option is not interpreted the same in isort 4 and isort 5 (see the migration guide in isort documentation for further details). For compatibility\u0027s sake for most pylint users, the ``known-standard-library`` option in pylint now maps to ``extra-standard-library`` in isort 5. If you really want what ``known-standard-library`` now means in isort 5, you must disable the ``wrong-import-order`` check in pylint and run isort manually with a proper isort configuration file."},{"lineNumber":608,"author":{"gitId":"-"},"content":""},{"lineNumber":609,"author":{"gitId":"-"},"content":"  Close #3722"},{"lineNumber":610,"author":{"gitId":"-"},"content":""},{"lineNumber":611,"author":{"gitId":"-"},"content":""},{"lineNumber":612,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.5.4?"},{"lineNumber":613,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":614,"author":{"gitId":"-"},"content":""},{"lineNumber":615,"author":{"gitId":"-"},"content":"* Fix a crash caused by not guarding against ``InferenceError`` when calling ``infer_call_result``"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"  Close #3690"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"* Fix a crash in parallel mode when the module\u0027s filepath is not set"},{"lineNumber":620,"author":{"gitId":"-"},"content":""},{"lineNumber":621,"author":{"gitId":"-"},"content":"  Close #3564"},{"lineNumber":622,"author":{"gitId":"-"},"content":""},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.5.3?"},{"lineNumber":625,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"Release date: 2020-06-8"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"* Fix a regression where disable comments that have checker names with numbers in them are not parsed correctly"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"  Close #3666"},{"lineNumber":632,"author":{"gitId":"-"},"content":""},{"lineNumber":633,"author":{"gitId":"-"},"content":"* ``property-with-parameters`` properly handles abstract properties"},{"lineNumber":634,"author":{"gitId":"-"},"content":""},{"lineNumber":635,"author":{"gitId":"-"},"content":"  Close #3600"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"* ``continue-in-finally`` no longer emitted on Python 3.8 where it\u0027s now valid"},{"lineNumber":638,"author":{"gitId":"-"},"content":""},{"lineNumber":639,"author":{"gitId":"-"},"content":"  Close #3612"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"* Fix a regression where messages with dash are not fully parsed"},{"lineNumber":642,"author":{"gitId":"-"},"content":""},{"lineNumber":643,"author":{"gitId":"-"},"content":"  Close #3604"},{"lineNumber":644,"author":{"gitId":"-"},"content":""},{"lineNumber":645,"author":{"gitId":"-"},"content":"* In a TOML configuration file, it\u0027s now possible to use rich (non-string) types, such as list, integer or boolean instead of strings. For example, one can now define a *list* of message identifiers to enable like this::"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"    enable \u003d ["},{"lineNumber":648,"author":{"gitId":"-"},"content":"        \"use-symbolic-message-instead\","},{"lineNumber":649,"author":{"gitId":"-"},"content":"        \"useless-suppression\","},{"lineNumber":650,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":651,"author":{"gitId":"-"},"content":""},{"lineNumber":652,"author":{"gitId":"-"},"content":"  Close #3538"},{"lineNumber":653,"author":{"gitId":"-"},"content":""},{"lineNumber":654,"author":{"gitId":"-"},"content":"* Fix a regression where the score was not reported with multiple jobs"},{"lineNumber":655,"author":{"gitId":"-"},"content":""},{"lineNumber":656,"author":{"gitId":"-"},"content":"  Close #3547"},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"-"},"content":"* Protect against ``AttributeError`` when checking ``cell-var-from-loop``"},{"lineNumber":659,"author":{"gitId":"-"},"content":""},{"lineNumber":660,"author":{"gitId":"-"},"content":"  Close #3646"},{"lineNumber":661,"author":{"gitId":"-"},"content":""},{"lineNumber":662,"author":{"gitId":"-"},"content":""},{"lineNumber":663,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.5.2?"},{"lineNumber":664,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"Release date: 2020-05-05"},{"lineNumber":667,"author":{"gitId":"-"},"content":""},{"lineNumber":668,"author":{"gitId":"-"},"content":"* ``pylint.Run`` accepts ``do_exit`` as a deprecated parameter"},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"-"},"content":"  Close #3590"},{"lineNumber":671,"author":{"gitId":"-"},"content":""},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.5.1?"},{"lineNumber":674,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":675,"author":{"gitId":"-"},"content":""},{"lineNumber":676,"author":{"gitId":"-"},"content":"Release date: 2020-05-05"},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"* Fix a crash in ``method-hidden`` lookup for unknown base classes"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"  Close #3527"},{"lineNumber":681,"author":{"gitId":"-"},"content":""},{"lineNumber":682,"author":{"gitId":"-"},"content":"* Revert pylint.Run\u0027s ``exit`` parameter to ``do_exit``"},{"lineNumber":683,"author":{"gitId":"-"},"content":""},{"lineNumber":684,"author":{"gitId":"-"},"content":"  This has been inadvertently changed several releases ago to ``do_exit``."},{"lineNumber":685,"author":{"gitId":"-"},"content":""},{"lineNumber":686,"author":{"gitId":"-"},"content":"  Close #3533"},{"lineNumber":687,"author":{"gitId":"-"},"content":""},{"lineNumber":688,"author":{"gitId":"-"},"content":"* ``no-value-for-parameter`` variadic detection has improved for assign statements"},{"lineNumber":689,"author":{"gitId":"-"},"content":""},{"lineNumber":690,"author":{"gitId":"-"},"content":"  Close #3563"},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":"* Allow package files to be properly discovered with multiple jobs"},{"lineNumber":693,"author":{"gitId":"-"},"content":""},{"lineNumber":694,"author":{"gitId":"-"},"content":"  Close #3524"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"-"},"content":"* Allow linting directories without ``__init__.py`` which was a regression in 2.5."},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"  Close #3528"},{"lineNumber":699,"author":{"gitId":"-"},"content":""},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.5.0?"},{"lineNumber":702,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"Release date: 2020-04-27"},{"lineNumber":705,"author":{"gitId":"-"},"content":""},{"lineNumber":706,"author":{"gitId":"-"},"content":"* Fix a false negative for ``undefined-variable`` when using class attribute in comprehension."},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":"  Close #3494"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"* Fix a false positive for ``undefined-variable`` when using class attribute in decorator or as type hint."},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"-"},"content":"  Close #511"},{"lineNumber":713,"author":{"gitId":"-"},"content":"  Close #1976"},{"lineNumber":714,"author":{"gitId":"-"},"content":""},{"lineNumber":715,"author":{"gitId":"-"},"content":"* Remove HTML quoting of messages in JSON output."},{"lineNumber":716,"author":{"gitId":"-"},"content":""},{"lineNumber":717,"author":{"gitId":"-"},"content":"  Close #2769"},{"lineNumber":718,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":719,"author":{"gitId":"-"},"content":"* Adjust the ``invalid-name`` rule to work with non-ASCII identifiers and add the ``non-ascii-name`` rule."},{"lineNumber":720,"author":{"gitId":"-"},"content":""},{"lineNumber":721,"author":{"gitId":"-"},"content":"  Close #2725"},{"lineNumber":722,"author":{"gitId":"-"},"content":""},{"lineNumber":723,"author":{"gitId":"-"},"content":"* Positional-only arguments are taken in account for ``useless-super-delegation``"},{"lineNumber":724,"author":{"gitId":"-"},"content":""},{"lineNumber":725,"author":{"gitId":"-"},"content":"* ``unidiomatic-typecheck`` is no longer emitted for ``in`` and ``not in`` operators"},{"lineNumber":726,"author":{"gitId":"-"},"content":""},{"lineNumber":727,"author":{"gitId":"-"},"content":"  Close #3337"},{"lineNumber":728,"author":{"gitId":"-"},"content":""},{"lineNumber":729,"author":{"gitId":"-"},"content":"* Positional-only argument annotations are taken in account for ``unused-import``"},{"lineNumber":730,"author":{"gitId":"-"},"content":""},{"lineNumber":731,"author":{"gitId":"-"},"content":"  Close #3462"},{"lineNumber":732,"author":{"gitId":"-"},"content":""},{"lineNumber":733,"author":{"gitId":"anubh-v"},"content":"* Add a command to list available extensions."},{"lineNumber":734,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":735,"author":{"gitId":"-"},"content":"* Allow used variables to be properly consumed when different checks are enabled / disabled"},{"lineNumber":736,"author":{"gitId":"-"},"content":""},{"lineNumber":737,"author":{"gitId":"-"},"content":"  Close #3445"},{"lineNumber":738,"author":{"gitId":"-"},"content":""},{"lineNumber":739,"author":{"gitId":"-"},"content":"* Fix dangerous-default-value rule to account for keyword argument defaults"},{"lineNumber":740,"author":{"gitId":"-"},"content":""},{"lineNumber":741,"author":{"gitId":"-"},"content":"  Close #3373"},{"lineNumber":742,"author":{"gitId":"-"},"content":""},{"lineNumber":743,"author":{"gitId":"-"},"content":"* Fix a false positive of ``self-assigning-variable`` on tuple unpacking."},{"lineNumber":744,"author":{"gitId":"-"},"content":""},{"lineNumber":745,"author":{"gitId":"-"},"content":"  Close #3433"},{"lineNumber":746,"author":{"gitId":"-"},"content":""},{"lineNumber":747,"author":{"gitId":"-"},"content":"* ``no-self-use`` is no longer emitted for typing stubs."},{"lineNumber":748,"author":{"gitId":"-"},"content":""},{"lineNumber":749,"author":{"gitId":"-"},"content":"  Close #3439"},{"lineNumber":750,"author":{"gitId":"-"},"content":""},{"lineNumber":751,"author":{"gitId":"-"},"content":"* Fix a false positive for ``undefined-variable`` when ``__class__`` is used"},{"lineNumber":752,"author":{"gitId":"-"},"content":""},{"lineNumber":753,"author":{"gitId":"-"},"content":"  Close #3090"},{"lineNumber":754,"author":{"gitId":"-"},"content":""},{"lineNumber":755,"author":{"gitId":"-"},"content":"* Emit ``invalid-name`` for variables defined in loops at module level."},{"lineNumber":756,"author":{"gitId":"-"},"content":""},{"lineNumber":757,"author":{"gitId":"-"},"content":"  Close #2695"},{"lineNumber":758,"author":{"gitId":"-"},"content":""},{"lineNumber":759,"author":{"gitId":"-"},"content":"* Add a check for cases where the second argument to ``isinstance`` is not a type."},{"lineNumber":760,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":761,"author":{"gitId":"anubh-v"},"content":"  Close #3308"},{"lineNumber":762,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"* Add \u0027notes-rgx\u0027 option, to be used for fixme check."},{"lineNumber":764,"author":{"gitId":"-"},"content":""},{"lineNumber":765,"author":{"gitId":"-"},"content":"  Close #2874"},{"lineNumber":766,"author":{"gitId":"-"},"content":""},{"lineNumber":767,"author":{"gitId":"-"},"content":"* ``function-redefined`` exempts function redefined on a condition."},{"lineNumber":768,"author":{"gitId":"-"},"content":""},{"lineNumber":769,"author":{"gitId":"-"},"content":"  Close #2410"},{"lineNumber":770,"author":{"gitId":"-"},"content":""},{"lineNumber":771,"author":{"gitId":"-"},"content":"* ``typing.overload`` functions are exempted from docstring checks"},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"  Close #3350"},{"lineNumber":774,"author":{"gitId":"-"},"content":""},{"lineNumber":775,"author":{"gitId":"-"},"content":"* Emit ``invalid-overridden-method`` for improper async def overrides."},{"lineNumber":776,"author":{"gitId":"-"},"content":""},{"lineNumber":777,"author":{"gitId":"-"},"content":"  Close #3355"},{"lineNumber":778,"author":{"gitId":"-"},"content":""},{"lineNumber":779,"author":{"gitId":"-"},"content":"* Do not allow ``python -m pylint ...`` to import user code"},{"lineNumber":780,"author":{"gitId":"-"},"content":""},{"lineNumber":781,"author":{"gitId":"-"},"content":"  ``python -m pylint ...`` adds the current working directory as the first element"},{"lineNumber":782,"author":{"gitId":"-"},"content":"  of ``sys.path``. This opens up a potential security hole where ``pylint`` will import"},{"lineNumber":783,"author":{"gitId":"-"},"content":"  user level code as long as that code resides in modules having the same name as stdlib"},{"lineNumber":784,"author":{"gitId":"-"},"content":"  or pylint\u0027s own modules."},{"lineNumber":785,"author":{"gitId":"-"},"content":""},{"lineNumber":786,"author":{"gitId":"-"},"content":"  Close #3386"},{"lineNumber":787,"author":{"gitId":"-"},"content":""},{"lineNumber":788,"author":{"gitId":"-"},"content":"* Add ``dummy-variables-rgx`` option for ``_redeclared-assigned-name`` check."},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"  Close #3341"},{"lineNumber":791,"author":{"gitId":"-"},"content":""},{"lineNumber":792,"author":{"gitId":"-"},"content":"* Fixed graph creation for relative paths"},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"anubh-v"},"content":"* Add a check for asserts on string literals."},{"lineNumber":795,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":796,"author":{"gitId":"anubh-v"},"content":"  Close #3284"},{"lineNumber":797,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":798,"author":{"gitId":"-"},"content":"* ``not in`` is considered iterating context for some of the Python 3 porting checkers."},{"lineNumber":799,"author":{"gitId":"-"},"content":""},{"lineNumber":800,"author":{"gitId":"-"},"content":"* A new check ``inconsistent-quotes`` was added."},{"lineNumber":801,"author":{"gitId":"-"},"content":""},{"lineNumber":802,"author":{"gitId":"-"},"content":"* Add a check for non string assignment to __name__ attribute."},{"lineNumber":803,"author":{"gitId":"-"},"content":""},{"lineNumber":804,"author":{"gitId":"-"},"content":"  Close #583"},{"lineNumber":805,"author":{"gitId":"-"},"content":""},{"lineNumber":806,"author":{"gitId":"-"},"content":"* ``__pow__``, ``__imatmul__``, ``__trunc__``, ``__floor__``, and ``__ceil__`` are recognized as special method names."},{"lineNumber":807,"author":{"gitId":"-"},"content":""},{"lineNumber":808,"author":{"gitId":"-"},"content":"  Close #3281"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"* Added errors for protocol functions when invalid return types are detected."},{"lineNumber":811,"author":{"gitId":"-"},"content":"  E0304 (invalid-bool-returned): __bool__ did not return a bool"},{"lineNumber":812,"author":{"gitId":"-"},"content":"  E0305 (invalid-index-returned): __index__ did not return an integer"},{"lineNumber":813,"author":{"gitId":"-"},"content":"  E0306 (invalid-repr-returned): __repr__ did not return a string"},{"lineNumber":814,"author":{"gitId":"-"},"content":"  E0307 (invalid-str-returned): __str__ did not return a string"},{"lineNumber":815,"author":{"gitId":"-"},"content":"  E0308 (invalid-bytes-returned): __bytes__ did not return a string"},{"lineNumber":816,"author":{"gitId":"-"},"content":"  E0309 (invalid-hash-returned): __hash__ did not return an integer"},{"lineNumber":817,"author":{"gitId":"-"},"content":"  E0310 (invalid-length-hint-returned): __length_hint__ did not return a non-negative integer"},{"lineNumber":818,"author":{"gitId":"-"},"content":"  E0311 (invalid-format-returned): __format__ did not return a string"},{"lineNumber":819,"author":{"gitId":"-"},"content":"  E0312 (invalid-getnewargs-returned): __getnewargs__ did not return a tuple"},{"lineNumber":820,"author":{"gitId":"-"},"content":"  E0313 (invalid-getnewargs-ex-returned): __getnewargs_ex__ did not return a tuple of the form (tuple, dict)"},{"lineNumber":821,"author":{"gitId":"-"},"content":""},{"lineNumber":822,"author":{"gitId":"-"},"content":"  Close #560"},{"lineNumber":823,"author":{"gitId":"-"},"content":""},{"lineNumber":824,"author":{"gitId":"-"},"content":"* ``missing-*-docstring`` can look for ``__doc__`` assignments."},{"lineNumber":825,"author":{"gitId":"-"},"content":""},{"lineNumber":826,"author":{"gitId":"-"},"content":"  Close #3301"},{"lineNumber":827,"author":{"gitId":"-"},"content":""},{"lineNumber":828,"author":{"gitId":"-"},"content":"* ``undefined-variable`` can now find undefined loop iterables"},{"lineNumber":829,"author":{"gitId":"-"},"content":""},{"lineNumber":830,"author":{"gitId":"-"},"content":"  Close #498"},{"lineNumber":831,"author":{"gitId":"-"},"content":""},{"lineNumber":832,"author":{"gitId":"-"},"content":"* ``safe_infer`` can infer a value as long as all the paths share the same type."},{"lineNumber":833,"author":{"gitId":"-"},"content":""},{"lineNumber":834,"author":{"gitId":"-"},"content":"  Close #2503"},{"lineNumber":835,"author":{"gitId":"-"},"content":""},{"lineNumber":836,"author":{"gitId":"-"},"content":"* Add a --fail-under \u003cscore\u003e flag, also configurable in a .pylintrc file. If the final score is more than the specified score, it\u0027s considered a success and pylint exits with exitcode 0. Otherwise, it\u0027s considered a failure and pylint exits with its current exitcode based on the messages issued."},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"-"},"content":"  Close #2242"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"* Don\u0027t emit ``line-too-long`` for multilines when ``disable\u003dline-too-long`` comment stands at their end"},{"lineNumber":841,"author":{"gitId":"-"},"content":""},{"lineNumber":842,"author":{"gitId":"-"},"content":"  Close #2957"},{"lineNumber":843,"author":{"gitId":"-"},"content":""},{"lineNumber":844,"author":{"gitId":"-"},"content":"* Fixed an ``AttributeError`` caused by improper handling of ``dataclasses`` inference in ``pyreverse``"},{"lineNumber":845,"author":{"gitId":"-"},"content":""},{"lineNumber":846,"author":{"gitId":"-"},"content":"  Close #3256"},{"lineNumber":847,"author":{"gitId":"-"},"content":""},{"lineNumber":848,"author":{"gitId":"-"},"content":"* Do not exempt bare except from ``undefined-variable`` and similar checks"},{"lineNumber":849,"author":{"gitId":"-"},"content":""},{"lineNumber":850,"author":{"gitId":"-"},"content":"  If a node was wrapped in a ``TryExcept``, ``pylint`` was taking a hint"},{"lineNumber":851,"author":{"gitId":"-"},"content":"  from the except handler when deciding to emit or not a message."},{"lineNumber":852,"author":{"gitId":"-"},"content":"  We were treating bare except as a fully fledged ignore but only"},{"lineNumber":853,"author":{"gitId":"-"},"content":"  the corresponding exceptions should be handled that way (e.g. ``NameError`` or ``ImportError``)"},{"lineNumber":854,"author":{"gitId":"-"},"content":""},{"lineNumber":855,"author":{"gitId":"-"},"content":"  Close #3235"},{"lineNumber":856,"author":{"gitId":"-"},"content":""},{"lineNumber":857,"author":{"gitId":"-"},"content":"* No longer emit ``assignment-from-no-return`` when a function only raises an exception"},{"lineNumber":858,"author":{"gitId":"-"},"content":""},{"lineNumber":859,"author":{"gitId":"-"},"content":"  Close #3218"},{"lineNumber":860,"author":{"gitId":"-"},"content":""},{"lineNumber":861,"author":{"gitId":"-"},"content":"* Allow import aliases to exempt ``import-error`` when used in type annotations."},{"lineNumber":862,"author":{"gitId":"-"},"content":""},{"lineNumber":863,"author":{"gitId":"-"},"content":"  Close #3178"},{"lineNumber":864,"author":{"gitId":"-"},"content":""},{"lineNumber":865,"author":{"gitId":"-"},"content":"* ``Ellipsis` is exempted from ``multiple-statements`` for function overloads."},{"lineNumber":866,"author":{"gitId":"-"},"content":""},{"lineNumber":867,"author":{"gitId":"-"},"content":"  Close #3224"},{"lineNumber":868,"author":{"gitId":"-"},"content":""},{"lineNumber":869,"author":{"gitId":"-"},"content":"* No longer emit ``invalid-name`` for non-constants found at module level."},{"lineNumber":870,"author":{"gitId":"-"},"content":""},{"lineNumber":871,"author":{"gitId":"-"},"content":"  Pylint was taking the following statement from PEP-8 too far, considering"},{"lineNumber":872,"author":{"gitId":"-"},"content":"  all module level variables as constants, which is not what the statement is saying:"},{"lineNumber":873,"author":{"gitId":"-"},"content":""},{"lineNumber":874,"author":{"gitId":"-"},"content":"  `Constants are usually defined on a module level and written in"},{"lineNumber":875,"author":{"gitId":"-"},"content":"  all capital letters with underscores separating words.`"},{"lineNumber":876,"author":{"gitId":"-"},"content":""},{"lineNumber":877,"author":{"gitId":"-"},"content":"  Close #3111"},{"lineNumber":878,"author":{"gitId":"-"},"content":"  Close #3132"},{"lineNumber":879,"author":{"gitId":"-"},"content":""},{"lineNumber":880,"author":{"gitId":"-"},"content":"* Allow ``implicit-str-concat-in-sequence`` to be emitted for string juxtaposition"},{"lineNumber":881,"author":{"gitId":"-"},"content":""},{"lineNumber":882,"author":{"gitId":"-"},"content":"  Close #3030"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"* ``implicit-str-concat-in-sequence`` was renamed ``implicit-str-concat``"},{"lineNumber":885,"author":{"gitId":"-"},"content":""},{"lineNumber":886,"author":{"gitId":"-"},"content":"* The ``json`` reporter no longer bypasses ``redirect_stdout``. Close #3227"},{"lineNumber":887,"author":{"gitId":"-"},"content":""},{"lineNumber":888,"author":{"gitId":"-"},"content":"* Move ``NoFileError``, ``OutputLine``, ``FunctionalTestReporter``,"},{"lineNumber":889,"author":{"gitId":"-"},"content":"  ``FunctionalTestFile``, ``LintModuleTest`` and related methods from"},{"lineNumber":890,"author":{"gitId":"-"},"content":"  ``test_functional.py`` to ``pylint.testutils`` to help testing for 3rd"},{"lineNumber":891,"author":{"gitId":"-"},"content":"  party pylint plugins."},{"lineNumber":892,"author":{"gitId":"-"},"content":""},{"lineNumber":893,"author":{"gitId":"-"},"content":"* Can read config from a setup.cfg or pyproject.toml file."},{"lineNumber":894,"author":{"gitId":"-"},"content":""},{"lineNumber":895,"author":{"gitId":"-"},"content":"  Close #617"},{"lineNumber":896,"author":{"gitId":"-"},"content":""},{"lineNumber":897,"author":{"gitId":"-"},"content":"* Fix exception-escape false positive with generators"},{"lineNumber":898,"author":{"gitId":"-"},"content":""},{"lineNumber":899,"author":{"gitId":"-"},"content":"  Close #3128"},{"lineNumber":900,"author":{"gitId":"-"},"content":""},{"lineNumber":901,"author":{"gitId":"-"},"content":"* ``inspect.getargvalues`` is no longer marked as deprecated."},{"lineNumber":902,"author":{"gitId":"-"},"content":""},{"lineNumber":903,"author":{"gitId":"-"},"content":"* A new check ``f-string-without-interpolation`` was added"},{"lineNumber":904,"author":{"gitId":"-"},"content":""},{"lineNumber":905,"author":{"gitId":"-"},"content":"  Close #3190"},{"lineNumber":906,"author":{"gitId":"-"},"content":""},{"lineNumber":907,"author":{"gitId":"-"},"content":"* Flag mutable ``collections.*`` utilities as dangerous defaults"},{"lineNumber":908,"author":{"gitId":"-"},"content":""},{"lineNumber":909,"author":{"gitId":"-"},"content":"  Close #3183"},{"lineNumber":910,"author":{"gitId":"-"},"content":""},{"lineNumber":911,"author":{"gitId":"-"},"content":"* ``docparams`` extension supports multiple types in raises sections."},{"lineNumber":912,"author":{"gitId":"-"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"  Multiple types can also be separated by commas in all valid sections."},{"lineNumber":914,"author":{"gitId":"-"},"content":""},{"lineNumber":915,"author":{"gitId":"-"},"content":"  Closes #2729"},{"lineNumber":916,"author":{"gitId":"-"},"content":""},{"lineNumber":917,"author":{"gitId":"-"},"content":"* Allow parallel linting when run under Prospector"},{"lineNumber":918,"author":{"gitId":"-"},"content":""},{"lineNumber":919,"author":{"gitId":"-"},"content":"* Fixed false positives of ``method-hidden`` when a subclass defines the method that is being hidden."},{"lineNumber":920,"author":{"gitId":"-"},"content":""},{"lineNumber":921,"author":{"gitId":"-"},"content":"  Closes #414"},{"lineNumber":922,"author":{"gitId":"-"},"content":""},{"lineNumber":923,"author":{"gitId":"-"},"content":"* Python 3 porting mode is 30-50% faster on most codebases"},{"lineNumber":924,"author":{"gitId":"-"},"content":""},{"lineNumber":925,"author":{"gitId":"-"},"content":"* Python 3 porting mode no longer swallows syntax errors"},{"lineNumber":926,"author":{"gitId":"-"},"content":""},{"lineNumber":927,"author":{"gitId":"-"},"content":"  Closes #2956"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"* Pass the actual PyLinter object to sub processes to allow using custom"},{"lineNumber":930,"author":{"gitId":"-"},"content":"  PyLinter classes."},{"lineNumber":931,"author":{"gitId":"-"},"content":""},{"lineNumber":932,"author":{"gitId":"-"},"content":"  PyLinter object (and all its members except reporter) needs to support"},{"lineNumber":933,"author":{"gitId":"-"},"content":"  pickling so the PyLinter object can be passed to worker processes."},{"lineNumber":934,"author":{"gitId":"-"},"content":""},{"lineNumber":935,"author":{"gitId":"-"},"content":"* Clean up setup.py"},{"lineNumber":936,"author":{"gitId":"-"},"content":""},{"lineNumber":937,"author":{"gitId":"-"},"content":"  Make pytest-runner a requirement only if running tests, similar to McCabe."},{"lineNumber":938,"author":{"gitId":"-"},"content":""},{"lineNumber":939,"author":{"gitId":"-"},"content":"  Clean up the setup.py file, resolving a number of warnings around it."},{"lineNumber":940,"author":{"gitId":"-"},"content":""},{"lineNumber":941,"author":{"gitId":"-"},"content":"* Handle SyntaxError in files passed via ``--from-stdin`` option"},{"lineNumber":942,"author":{"gitId":"-"},"content":""},{"lineNumber":943,"author":{"gitId":"-"},"content":"  Pylint no longer outputs a traceback, if a file, read from stdin,"},{"lineNumber":944,"author":{"gitId":"-"},"content":"  contains a syntaxerror."},{"lineNumber":945,"author":{"gitId":"-"},"content":""},{"lineNumber":946,"author":{"gitId":"-"},"content":"* Fix uppercase style to disallow 3+ uppercase followed by lowercase."},{"lineNumber":947,"author":{"gitId":"-"},"content":""},{"lineNumber":948,"author":{"gitId":"-"},"content":"* Fixed ``undefined-variable`` and ``unused-import`` false positives"},{"lineNumber":949,"author":{"gitId":"-"},"content":"  when using a metaclass via an attribute."},{"lineNumber":950,"author":{"gitId":"-"},"content":""},{"lineNumber":951,"author":{"gitId":"-"},"content":"  Close #1603"},{"lineNumber":952,"author":{"gitId":"-"},"content":""},{"lineNumber":953,"author":{"gitId":"-"},"content":"* Emit ``unused-argument`` for functions that partially uses their argument list before raising an exception."},{"lineNumber":954,"author":{"gitId":"-"},"content":""},{"lineNumber":955,"author":{"gitId":"-"},"content":"  Close #3246"},{"lineNumber":956,"author":{"gitId":"-"},"content":""},{"lineNumber":957,"author":{"gitId":"-"},"content":"* Fixed ``broad_try_clause`` extension to check try/finally statements and to"},{"lineNumber":958,"author":{"gitId":"-"},"content":"  check for nested statements (e.g., inside of an ``if`` statement)."},{"lineNumber":959,"author":{"gitId":"-"},"content":""},{"lineNumber":960,"author":{"gitId":"-"},"content":"* Recognize classes explicitly inheriting from ``abc.ABC`` or having an"},{"lineNumber":961,"author":{"gitId":"-"},"content":"  ``abc.ABCMeta`` metaclass as abstract. This makes them not trigger W0223."},{"lineNumber":962,"author":{"gitId":"-"},"content":""},{"lineNumber":963,"author":{"gitId":"-"},"content":"  Closes #3098"},{"lineNumber":964,"author":{"gitId":"-"},"content":""},{"lineNumber":965,"author":{"gitId":"-"},"content":"* Fix overzealous ``arguments-differ`` when overridden function uses variadics"},{"lineNumber":966,"author":{"gitId":"-"},"content":""},{"lineNumber":967,"author":{"gitId":"-"},"content":"  No message is emitted if the overriding function provides positional or"},{"lineNumber":968,"author":{"gitId":"-"},"content":"  keyword variadics in its signature that can feasibly accept and pass on"},{"lineNumber":969,"author":{"gitId":"-"},"content":"  all parameters given by the overridden function."},{"lineNumber":970,"author":{"gitId":"-"},"content":""},{"lineNumber":971,"author":{"gitId":"-"},"content":"  Close #1482"},{"lineNumber":972,"author":{"gitId":"-"},"content":"  Close #1553"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"* Multiple types of string formatting are allowed in logging functions."},{"lineNumber":975,"author":{"gitId":"-"},"content":""},{"lineNumber":976,"author":{"gitId":"-"},"content":"  The ``logging-fstring-interpolation`` message has been brought back to allow"},{"lineNumber":977,"author":{"gitId":"-"},"content":"  multiple types of string formatting to be used."},{"lineNumber":978,"author":{"gitId":"-"},"content":""},{"lineNumber":979,"author":{"gitId":"-"},"content":"  Close #3361"},{"lineNumber":980,"author":{"gitId":"-"},"content":""},{"lineNumber":981,"author":{"gitId":"-"},"content":""},{"lineNumber":982,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.4.4?"},{"lineNumber":983,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":984,"author":{"gitId":"-"},"content":"Release date: 2019-11-13"},{"lineNumber":985,"author":{"gitId":"-"},"content":""},{"lineNumber":986,"author":{"gitId":"-"},"content":"* Exempt all the names found in type annotations from ``unused-import``"},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"  The previous code was assuming that only ``typing`` names need to be"},{"lineNumber":989,"author":{"gitId":"-"},"content":"  exempted, but we need to do that for the rest of the type comment"},{"lineNumber":990,"author":{"gitId":"-"},"content":"  names as well."},{"lineNumber":991,"author":{"gitId":"-"},"content":""},{"lineNumber":992,"author":{"gitId":"-"},"content":"  Close #3112"},{"lineNumber":993,"author":{"gitId":"-"},"content":""},{"lineNumber":994,"author":{"gitId":"-"},"content":"* Relax type import detection for names that do not come from the ``typing`` module"},{"lineNumber":995,"author":{"gitId":"-"},"content":""},{"lineNumber":996,"author":{"gitId":"-"},"content":"  Close #3191"},{"lineNumber":997,"author":{"gitId":"-"},"content":""},{"lineNumber":998,"author":{"gitId":"-"},"content":""},{"lineNumber":999,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.4.3?"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1001,"author":{"gitId":"-"},"content":""},{"lineNumber":1002,"author":{"gitId":"-"},"content":"Release date: 2019-10-18"},{"lineNumber":1003,"author":{"gitId":"-"},"content":""},{"lineNumber":1004,"author":{"gitId":"-"},"content":"* Fix an issue with ``unnecessary-comprehension`` in comprehensions with additional repacking of elements."},{"lineNumber":1005,"author":{"gitId":"-"},"content":""},{"lineNumber":1006,"author":{"gitId":"-"},"content":"  Close #3148"},{"lineNumber":1007,"author":{"gitId":"-"},"content":""},{"lineNumber":1008,"author":{"gitId":"-"},"content":"* ``import-outside-toplevel`` is emitted for ``ImportFrom`` nodes as well."},{"lineNumber":1009,"author":{"gitId":"-"},"content":""},{"lineNumber":1010,"author":{"gitId":"-"},"content":"  Close #3175"},{"lineNumber":1011,"author":{"gitId":"-"},"content":""},{"lineNumber":1012,"author":{"gitId":"-"},"content":"* Do not emit ``no-method-argument`` for functions using positional only args."},{"lineNumber":1013,"author":{"gitId":"-"},"content":""},{"lineNumber":1014,"author":{"gitId":"-"},"content":"  Close #3161"},{"lineNumber":1015,"author":{"gitId":"-"},"content":""},{"lineNumber":1016,"author":{"gitId":"-"},"content":"* ``consider-using-sys-exit`` is no longer emitted when ``exit`` is imported in the local scope."},{"lineNumber":1017,"author":{"gitId":"-"},"content":""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"  Close #3147"},{"lineNumber":1019,"author":{"gitId":"-"},"content":""},{"lineNumber":1020,"author":{"gitId":"-"},"content":"* ``invalid-overridden-method`` takes ``abc.abstractproperty`` in account"},{"lineNumber":1021,"author":{"gitId":"-"},"content":""},{"lineNumber":1022,"author":{"gitId":"-"},"content":"  Close #3150"},{"lineNumber":1023,"author":{"gitId":"-"},"content":""},{"lineNumber":1024,"author":{"gitId":"-"},"content":"* Fixed ``missing-yield-type-doc`` getting incorrectly raised when"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"  a generator does not document a yield type but has a type annotation."},{"lineNumber":1026,"author":{"gitId":"-"},"content":""},{"lineNumber":1027,"author":{"gitId":"-"},"content":"  Closes #3185"},{"lineNumber":1028,"author":{"gitId":"-"},"content":""},{"lineNumber":1029,"author":{"gitId":"-"},"content":"* ``typing.overload`` functions are exempted from ``too-many-function-args``"},{"lineNumber":1030,"author":{"gitId":"-"},"content":""},{"lineNumber":1031,"author":{"gitId":"-"},"content":"  Close #3170"},{"lineNumber":1032,"author":{"gitId":"-"},"content":""},{"lineNumber":1033,"author":{"gitId":"-"},"content":""},{"lineNumber":1034,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.4.2?"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1036,"author":{"gitId":"-"},"content":""},{"lineNumber":1037,"author":{"gitId":"-"},"content":"Release date: 2019-09-30"},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"-"},"content":""},{"lineNumber":1040,"author":{"gitId":"-"},"content":"* ``ignored-modules`` can skip submodules. Close #3135"},{"lineNumber":1041,"author":{"gitId":"-"},"content":""},{"lineNumber":1042,"author":{"gitId":"-"},"content":"* ``self-assigning-variable`` skips class level assignments."},{"lineNumber":1043,"author":{"gitId":"-"},"content":""},{"lineNumber":1044,"author":{"gitId":"-"},"content":"   Close #2930"},{"lineNumber":1045,"author":{"gitId":"-"},"content":""},{"lineNumber":1046,"author":{"gitId":"-"},"content":"* ``consider-using-sys-exit`` is exempted when ``exit()`` is imported from ``sys``"},{"lineNumber":1047,"author":{"gitId":"-"},"content":""},{"lineNumber":1048,"author":{"gitId":"-"},"content":"   Close #3145"},{"lineNumber":1049,"author":{"gitId":"-"},"content":""},{"lineNumber":1050,"author":{"gitId":"-"},"content":"* Exempt annotated assignments without variable from ``class-variable-slots-conflict``"},{"lineNumber":1051,"author":{"gitId":"-"},"content":""},{"lineNumber":1052,"author":{"gitId":"-"},"content":"  Close #3141"},{"lineNumber":1053,"author":{"gitId":"-"},"content":""},{"lineNumber":1054,"author":{"gitId":"-"},"content":"* Fix ``utils.is_error`` to account for functions returning early."},{"lineNumber":1055,"author":{"gitId":"-"},"content":""},{"lineNumber":1056,"author":{"gitId":"-"},"content":"  This fixes a false negative with ``unused-variable`` which was no longer triggered"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"  when a function raised an exception as the last instruction, but the body of the function"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"  still had unused variables."},{"lineNumber":1059,"author":{"gitId":"-"},"content":""},{"lineNumber":1060,"author":{"gitId":"-"},"content":"  Close #3028"},{"lineNumber":1061,"author":{"gitId":"-"},"content":""},{"lineNumber":1062,"author":{"gitId":"-"},"content":""},{"lineNumber":1063,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.4.1?"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1065,"author":{"gitId":"-"},"content":""},{"lineNumber":1066,"author":{"gitId":"-"},"content":"Release date: 2019-09-25"},{"lineNumber":1067,"author":{"gitId":"-"},"content":""},{"lineNumber":1068,"author":{"gitId":"-"},"content":""},{"lineNumber":1069,"author":{"gitId":"-"},"content":"* Exempt type checking definitions defined in both clauses of a type checking guard"},{"lineNumber":1070,"author":{"gitId":"-"},"content":""},{"lineNumber":1071,"author":{"gitId":"-"},"content":"  Close #3127"},{"lineNumber":1072,"author":{"gitId":"-"},"content":""},{"lineNumber":1073,"author":{"gitId":"-"},"content":""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"* Exempt type checking definitions inside the type check guard"},{"lineNumber":1075,"author":{"gitId":"-"},"content":""},{"lineNumber":1076,"author":{"gitId":"-"},"content":"  In a7f236528bb3758886b97285a56f3f9ce5b13a99 we added basic support"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"  for emitting ``used-before-assignment`` if a variable was only defined"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"  inside a type checking guard (using ``TYPE_CHECKING`` variable from `typing`)"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"  Unfortunately that missed the case of using those type checking imports"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"  inside the guard itself, which triggered spurious used-before-assignment errors."},{"lineNumber":1081,"author":{"gitId":"-"},"content":""},{"lineNumber":1082,"author":{"gitId":"-"},"content":"  Close #3119"},{"lineNumber":1083,"author":{"gitId":"-"},"content":""},{"lineNumber":1084,"author":{"gitId":"-"},"content":"* Require astroid \u003e\u003d 2.3 to avoid any compatibility issues."},{"lineNumber":1085,"author":{"gitId":"-"},"content":""},{"lineNumber":1086,"author":{"gitId":"-"},"content":""},{"lineNumber":1087,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.4.0?"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1089,"author":{"gitId":"-"},"content":""},{"lineNumber":1090,"author":{"gitId":"-"},"content":"Release date: 2019-09-24"},{"lineNumber":1091,"author":{"gitId":"-"},"content":""},{"lineNumber":1092,"author":{"gitId":"-"},"content":"* New check: ``import-outside-toplevel``"},{"lineNumber":1093,"author":{"gitId":"-"},"content":""},{"lineNumber":1094,"author":{"gitId":"-"},"content":"  This check warns when modules are imported from places other than a"},{"lineNumber":1095,"author":{"gitId":"-"},"content":"  module toplevel, e.g. inside a function or a class."},{"lineNumber":1096,"author":{"gitId":"-"},"content":""},{"lineNumber":1097,"author":{"gitId":"-"},"content":"* Handle inference ambiguity for ``invalid-format-index``"},{"lineNumber":1098,"author":{"gitId":"-"},"content":""},{"lineNumber":1099,"author":{"gitId":"-"},"content":"  Close #2752"},{"lineNumber":1100,"author":{"gitId":"-"},"content":""},{"lineNumber":1101,"author":{"gitId":"-"},"content":"* Removed Python 2 specific checks such as ``relative-import``,"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"  ``invalid-encoded-data``, ``missing-super-argument``."},{"lineNumber":1103,"author":{"gitId":"-"},"content":""},{"lineNumber":1104,"author":{"gitId":"-"},"content":"* Support forward references for ``function-redefined`` check."},{"lineNumber":1105,"author":{"gitId":"-"},"content":""},{"lineNumber":1106,"author":{"gitId":"-"},"content":"  Close #2540"},{"lineNumber":1107,"author":{"gitId":"-"},"content":""},{"lineNumber":1108,"author":{"gitId":"-"},"content":"* Handle redefinitions in case of type checking imports."},{"lineNumber":1109,"author":{"gitId":"-"},"content":""},{"lineNumber":1110,"author":{"gitId":"-"},"content":"  Close #2834"},{"lineNumber":1111,"author":{"gitId":"-"},"content":""},{"lineNumber":1112,"author":{"gitId":"-"},"content":"* Added a new check, ``consider-using-sys-exit``"},{"lineNumber":1113,"author":{"gitId":"-"},"content":""},{"lineNumber":1114,"author":{"gitId":"-"},"content":"  This check is emitted when we detect that a quit() or exit() is invoked"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"  instead of sys.exit(), which is the preferred way of exiting in program."},{"lineNumber":1116,"author":{"gitId":"-"},"content":""},{"lineNumber":1117,"author":{"gitId":"-"},"content":"  Close #2925"},{"lineNumber":1118,"author":{"gitId":"-"},"content":""},{"lineNumber":1119,"author":{"gitId":"-"},"content":"* ``useless-suppression`` check now ignores ``cyclic-import`` suppressions,"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"  which could lead to false postiives due to incomplete context at the time"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"  of the check."},{"lineNumber":1122,"author":{"gitId":"-"},"content":""},{"lineNumber":1123,"author":{"gitId":"-"},"content":"  Close #3064"},{"lineNumber":1124,"author":{"gitId":"-"},"content":""},{"lineNumber":1125,"author":{"gitId":"-"},"content":"* Added new checks, ``no-else-break`` and ``no-else-continue``"},{"lineNumber":1126,"author":{"gitId":"-"},"content":""},{"lineNumber":1127,"author":{"gitId":"-"},"content":"  These checks highlight unnecessary ``else`` and ``elif`` blocks after"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"  ``break`` and ``continue`` statements."},{"lineNumber":1129,"author":{"gitId":"-"},"content":""},{"lineNumber":1130,"author":{"gitId":"-"},"content":"  Close #2327"},{"lineNumber":1131,"author":{"gitId":"-"},"content":""},{"lineNumber":1132,"author":{"gitId":"-"},"content":"* Don\u0027t emit ``protected-access`` when a single underscore prefixed attribute"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"  is used inside a special method"},{"lineNumber":1134,"author":{"gitId":"-"},"content":""},{"lineNumber":1135,"author":{"gitId":"-"},"content":"  Close #1802"},{"lineNumber":1136,"author":{"gitId":"-"},"content":""},{"lineNumber":1137,"author":{"gitId":"-"},"content":"* Fix the \"statement\" values in the PyLinter\u0027s stats reports by module."},{"lineNumber":1138,"author":{"gitId":"-"},"content":""},{"lineNumber":1139,"author":{"gitId":"-"},"content":"* Added a new check, ``invalid-overridden-method``"},{"lineNumber":1140,"author":{"gitId":"-"},"content":""},{"lineNumber":1141,"author":{"gitId":"-"},"content":"  This check is emitted when we detect that a method is overridden"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"  as a property or a property is overridden as a method. This can indicate"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"  a bug in the application code that will trigger a runtime error."},{"lineNumber":1144,"author":{"gitId":"-"},"content":""},{"lineNumber":1145,"author":{"gitId":"-"},"content":"  Close #2670"},{"lineNumber":1146,"author":{"gitId":"-"},"content":""},{"lineNumber":1147,"author":{"gitId":"-"},"content":"* Added a new check, ``arguments-out-of-order``"},{"lineNumber":1148,"author":{"gitId":"-"},"content":""},{"lineNumber":1149,"author":{"gitId":"-"},"content":"  This check warns if you have arguments with names that match those in"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"  a function\u0027s signature but you are passing them in to the function"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"  in a different order."},{"lineNumber":1152,"author":{"gitId":"-"},"content":""},{"lineNumber":1153,"author":{"gitId":"-"},"content":"  Close #2975"},{"lineNumber":1154,"author":{"gitId":"-"},"content":""},{"lineNumber":1155,"author":{"gitId":"-"},"content":"* Added a new check, ``redeclared-assigned-name``"},{"lineNumber":1156,"author":{"gitId":"-"},"content":""},{"lineNumber":1157,"author":{"gitId":"-"},"content":"  This check is emitted when ``pylint`` detects that a name"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"  was assigned one or multiple times in the same assignment,"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"  which indicate a potential bug."},{"lineNumber":1160,"author":{"gitId":"-"},"content":"  Close #2898"},{"lineNumber":1161,"author":{"gitId":"-"},"content":""},{"lineNumber":1162,"author":{"gitId":"-"},"content":"* Ignore lambda calls with variadic arguments without a context."},{"lineNumber":1163,"author":{"gitId":"-"},"content":""},{"lineNumber":1164,"author":{"gitId":"-"},"content":"  Inferring variadic positional arguments and keyword arguments"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"  will result into empty Tuples and Dicts, which can lead in"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"  some cases to false positives with regard to no-value-for-parameter."},{"lineNumber":1167,"author":{"gitId":"-"},"content":"  In order to avoid this, until we\u0027ll have support for call context"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"  propagation, we\u0027re ignoring such cases if detected."},{"lineNumber":1169,"author":{"gitId":"-"},"content":"  We already did that for function calls, but the previous fix"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"  was not taking in consideration ``lambdas``"},{"lineNumber":1171,"author":{"gitId":"-"},"content":""},{"lineNumber":1172,"author":{"gitId":"-"},"content":"  Close #2918"},{"lineNumber":1173,"author":{"gitId":"-"},"content":""},{"lineNumber":1174,"author":{"gitId":"-"},"content":"* Added a new check, ``self-assigning-variable``"},{"lineNumber":1175,"author":{"gitId":"-"},"content":""},{"lineNumber":1176,"author":{"gitId":"-"},"content":"  This check is emitted when we detect that a variable is assigned"},{"lineNumber":1177,"author":{"gitId":"-"},"content":"  to itself, which might indicate a potential bug in the code application."},{"lineNumber":1178,"author":{"gitId":"-"},"content":"  Close #2930"},{"lineNumber":1179,"author":{"gitId":"-"},"content":""},{"lineNumber":1180,"author":{"gitId":"-"},"content":"* Added a new check, ``property-with-parameters``."},{"lineNumber":1181,"author":{"gitId":"-"},"content":""},{"lineNumber":1182,"author":{"gitId":"-"},"content":"  This check is emitted when we detect that a defined property also"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"  has parameters, which are useless."},{"lineNumber":1184,"author":{"gitId":"-"},"content":"  Close #3006"},{"lineNumber":1185,"author":{"gitId":"-"},"content":""},{"lineNumber":1186,"author":{"gitId":"-"},"content":"* Excluded protocol classes from a couple of checks. Close #3002."},{"lineNumber":1187,"author":{"gitId":"-"},"content":""},{"lineNumber":1188,"author":{"gitId":"-"},"content":"* Add a check ``unnecessary-comprehension`` that detects unnecessary comprehensions."},{"lineNumber":1189,"author":{"gitId":"-"},"content":""},{"lineNumber":1190,"author":{"gitId":"-"},"content":"  This check is emitted when ``pylint`` finds list-, set- or dict-comprehensions,"},{"lineNumber":1191,"author":{"gitId":"-"},"content":"  that are unnecessary and can be rewritten with the list-, set- or dict-constructors."},{"lineNumber":1192,"author":{"gitId":"-"},"content":""},{"lineNumber":1193,"author":{"gitId":"-"},"content":"  Close #2905"},{"lineNumber":1194,"author":{"gitId":"-"},"content":""},{"lineNumber":1195,"author":{"gitId":"-"},"content":"* Excluded PEP 526 instance and class variables from ``no-member``. Close #2945"},{"lineNumber":1196,"author":{"gitId":"-"},"content":""},{"lineNumber":1197,"author":{"gitId":"-"},"content":"* Excluded ``attrs`` from ``too-few-public-methods`` check. Close #2988."},{"lineNumber":1198,"author":{"gitId":"-"},"content":""},{"lineNumber":1199,"author":{"gitId":"-"},"content":"* ``unused-import`` emitted for the right import names in function scopes."},{"lineNumber":1200,"author":{"gitId":"-"},"content":""},{"lineNumber":1201,"author":{"gitId":"-"},"content":"  Close #2928"},{"lineNumber":1202,"author":{"gitId":"-"},"content":""},{"lineNumber":1203,"author":{"gitId":"-"},"content":"* Dropped support for Python 3.4."},{"lineNumber":1204,"author":{"gitId":"-"},"content":""},{"lineNumber":1205,"author":{"gitId":"-"},"content":"* ``assignment-from-no-return`` not triggered for async methods."},{"lineNumber":1206,"author":{"gitId":"-"},"content":""},{"lineNumber":1207,"author":{"gitId":"-"},"content":"  Close #2902"},{"lineNumber":1208,"author":{"gitId":"-"},"content":""},{"lineNumber":1209,"author":{"gitId":"-"},"content":"* Don\u0027t emit ``attribute-defined-outside-init`` for variables defined in setters."},{"lineNumber":1210,"author":{"gitId":"-"},"content":""},{"lineNumber":1211,"author":{"gitId":"-"},"content":"  Close #409"},{"lineNumber":1212,"author":{"gitId":"-"},"content":""},{"lineNumber":1213,"author":{"gitId":"-"},"content":"* Syntax errors report the column number."},{"lineNumber":1214,"author":{"gitId":"-"},"content":""},{"lineNumber":1215,"author":{"gitId":"-"},"content":"  Close #2914"},{"lineNumber":1216,"author":{"gitId":"-"},"content":""},{"lineNumber":1217,"author":{"gitId":"-"},"content":"* Support fully qualified typing imports for type annotations."},{"lineNumber":1218,"author":{"gitId":"-"},"content":""},{"lineNumber":1219,"author":{"gitId":"-"},"content":"  Close #2915"},{"lineNumber":1220,"author":{"gitId":"-"},"content":""},{"lineNumber":1221,"author":{"gitId":"-"},"content":"* Exclude ``__dict__`` from ``attribute-defined-outside-init``"},{"lineNumber":1222,"author":{"gitId":"-"},"content":""},{"lineNumber":1223,"author":{"gitId":"-"},"content":"* Fix pointer on spelling check when the error are more than one time in the same line."},{"lineNumber":1224,"author":{"gitId":"-"},"content":""},{"lineNumber":1225,"author":{"gitId":"-"},"content":"  Close #2895"},{"lineNumber":1226,"author":{"gitId":"-"},"content":""},{"lineNumber":1227,"author":{"gitId":"-"},"content":"* Fix crash happening when parent of called object cannot be determined"},{"lineNumber":1228,"author":{"gitId":"-"},"content":""},{"lineNumber":1229,"author":{"gitId":"-"},"content":"* Allow of in ``GoogleDocstring.re_multiple_type``"},{"lineNumber":1230,"author":{"gitId":"-"},"content":""},{"lineNumber":1231,"author":{"gitId":"-"},"content":"* Added ``subprocess-run-check`` to handle subrocess.run without explicitly set ``check`` keyword."},{"lineNumber":1232,"author":{"gitId":"-"},"content":""},{"lineNumber":1233,"author":{"gitId":"-"},"content":"  Close #2848"},{"lineNumber":1234,"author":{"gitId":"-"},"content":""},{"lineNumber":1235,"author":{"gitId":"-"},"content":"* When we can\u0027t infer bare except handlers, skip ``try-except-raise``"},{"lineNumber":1236,"author":{"gitId":"-"},"content":""},{"lineNumber":1237,"author":{"gitId":"-"},"content":"  Close #2853"},{"lineNumber":1238,"author":{"gitId":"-"},"content":""},{"lineNumber":1239,"author":{"gitId":"-"},"content":"* Handle more ``unnecessary-lambda`` cases when dealing with additional kwargs in wrapped calls"},{"lineNumber":1240,"author":{"gitId":"-"},"content":""},{"lineNumber":1241,"author":{"gitId":"-"},"content":"  Close #2845"},{"lineNumber":1242,"author":{"gitId":"-"},"content":""},{"lineNumber":1243,"author":{"gitId":"-"},"content":"* Better postponed evaluation of annotations handling"},{"lineNumber":1244,"author":{"gitId":"-"},"content":""},{"lineNumber":1245,"author":{"gitId":"-"},"content":"  Close #2847"},{"lineNumber":1246,"author":{"gitId":"-"},"content":""},{"lineNumber":1247,"author":{"gitId":"-"},"content":"* Support postponed evaluation of annotations for variable annotations."},{"lineNumber":1248,"author":{"gitId":"-"},"content":""},{"lineNumber":1249,"author":{"gitId":"-"},"content":"  Close #2838"},{"lineNumber":1250,"author":{"gitId":"-"},"content":""},{"lineNumber":1251,"author":{"gitId":"-"},"content":"* ``epylint.py_run`` defaults to ``python`` in case the current executable is not a Python one."},{"lineNumber":1252,"author":{"gitId":"-"},"content":""},{"lineNumber":1253,"author":{"gitId":"-"},"content":"  Close #2837"},{"lineNumber":1254,"author":{"gitId":"-"},"content":""},{"lineNumber":1255,"author":{"gitId":"-"},"content":"* Ignore raw docstrings when running Similarities checker with ``ignore-docstrings\u003dyes`` option"},{"lineNumber":1256,"author":{"gitId":"-"},"content":""},{"lineNumber":1257,"author":{"gitId":"-"},"content":"* Fix crash when calling ``inherit_from_std_ex`` on a class which is its own ancestor"},{"lineNumber":1258,"author":{"gitId":"-"},"content":""},{"lineNumber":1259,"author":{"gitId":"-"},"content":"  Close #2680"},{"lineNumber":1260,"author":{"gitId":"-"},"content":""},{"lineNumber":1261,"author":{"gitId":"-"},"content":"* Added a new check that warns the user if a function call is used inside a test but parentheses are missing."},{"lineNumber":1262,"author":{"gitId":"-"},"content":""},{"lineNumber":1263,"author":{"gitId":"-"},"content":"  Close #2658"},{"lineNumber":1264,"author":{"gitId":"-"},"content":""},{"lineNumber":1265,"author":{"gitId":"-"},"content":"* ``len-as-condition`` now only fires when a ``len(x)`` call is made without an explicit comparison"},{"lineNumber":1266,"author":{"gitId":"-"},"content":""},{"lineNumber":1267,"author":{"gitId":"-"},"content":"  The message and description accompanying this checker has been changed"},{"lineNumber":1268,"author":{"gitId":"-"},"content":"  reflect this new behavior, by explicitly asking to either rely on the"},{"lineNumber":1269,"author":{"gitId":"-"},"content":"  fact that empty sequence are false or to compare the length with a scalar."},{"lineNumber":1270,"author":{"gitId":"-"},"content":""},{"lineNumber":1271,"author":{"gitId":"-"},"content":"  Close #2684"},{"lineNumber":1272,"author":{"gitId":"-"},"content":""},{"lineNumber":1273,"author":{"gitId":"-"},"content":"* Add ``preferred-module`` checker that notify if an import has a replacement module that should be used."},{"lineNumber":1274,"author":{"gitId":"-"},"content":""},{"lineNumber":1275,"author":{"gitId":"-"},"content":"  This check is emitted when ``pylint`` finds an imported module that has a"},{"lineNumber":1276,"author":{"gitId":"-"},"content":"  preferred replacement listed in ``preferred-modules``."},{"lineNumber":1277,"author":{"gitId":"-"},"content":""},{"lineNumber":1278,"author":{"gitId":"-"},"content":"* ``assigning-non-slot`` not emitted for classes with unknown base classes."},{"lineNumber":1279,"author":{"gitId":"-"},"content":""},{"lineNumber":1280,"author":{"gitId":"-"},"content":"  Close #2807"},{"lineNumber":1281,"author":{"gitId":"-"},"content":""},{"lineNumber":1282,"author":{"gitId":"-"},"content":"* ``old-division`` is not emitted for non-Const nodes."},{"lineNumber":1283,"author":{"gitId":"-"},"content":""},{"lineNumber":1284,"author":{"gitId":"-"},"content":"  Close #2808"},{"lineNumber":1285,"author":{"gitId":"-"},"content":""},{"lineNumber":1286,"author":{"gitId":"-"},"content":"* Added method arguments to the dot writer for pyreverse."},{"lineNumber":1287,"author":{"gitId":"-"},"content":""},{"lineNumber":1288,"author":{"gitId":"-"},"content":"  Close #2139"},{"lineNumber":1289,"author":{"gitId":"-"},"content":""},{"lineNumber":1290,"author":{"gitId":"-"},"content":"* Support for linting file from stdin."},{"lineNumber":1291,"author":{"gitId":"-"},"content":""},{"lineNumber":1292,"author":{"gitId":"-"},"content":"  IDEs may benefit from the support for linting from an in-memory file."},{"lineNumber":1293,"author":{"gitId":"-"},"content":""},{"lineNumber":1294,"author":{"gitId":"-"},"content":"  Close #1187"},{"lineNumber":1295,"author":{"gitId":"-"},"content":""},{"lineNumber":1296,"author":{"gitId":"-"},"content":"* Added a new check ``class-variable-slots-conflict``"},{"lineNumber":1297,"author":{"gitId":"-"},"content":""},{"lineNumber":1298,"author":{"gitId":"-"},"content":"  This check is emitted when ``pylint`` finds a class variable that conflicts with a slot"},{"lineNumber":1299,"author":{"gitId":"-"},"content":"  name, which would raise a ``ValueError`` at runtime."},{"lineNumber":1300,"author":{"gitId":"-"},"content":""},{"lineNumber":1301,"author":{"gitId":"-"},"content":"* Added new check: dict-iter-missing-items (E1141)"},{"lineNumber":1302,"author":{"gitId":"-"},"content":""},{"lineNumber":1303,"author":{"gitId":"-"},"content":"  Close #2761"},{"lineNumber":1304,"author":{"gitId":"-"},"content":""},{"lineNumber":1305,"author":{"gitId":"-"},"content":"* Fix issue with pylint name in output of python -m pylint --version"},{"lineNumber":1306,"author":{"gitId":"-"},"content":""},{"lineNumber":1307,"author":{"gitId":"-"},"content":"  Close #2764"},{"lineNumber":1308,"author":{"gitId":"-"},"content":""},{"lineNumber":1309,"author":{"gitId":"-"},"content":"* Relicense logo material under the CC BY-SA 4.0 license."},{"lineNumber":1310,"author":{"gitId":"-"},"content":""},{"lineNumber":1311,"author":{"gitId":"-"},"content":"* Skip ``if`` expressions from f-strings for the ``check_elif`` checker"},{"lineNumber":1312,"author":{"gitId":"-"},"content":""},{"lineNumber":1313,"author":{"gitId":"-"},"content":"  Close #2816"},{"lineNumber":1314,"author":{"gitId":"-"},"content":""},{"lineNumber":1315,"author":{"gitId":"-"},"content":"* C0412 (ungrouped-import) is now compatible with isort."},{"lineNumber":1316,"author":{"gitId":"-"},"content":""},{"lineNumber":1317,"author":{"gitId":"-"},"content":"  Close #2806"},{"lineNumber":1318,"author":{"gitId":"-"},"content":""},{"lineNumber":1319,"author":{"gitId":"-"},"content":"* Added new extension to detect too much code in a try clause"},{"lineNumber":1320,"author":{"gitId":"-"},"content":""},{"lineNumber":1321,"author":{"gitId":"-"},"content":"  Close #2877"},{"lineNumber":1322,"author":{"gitId":"-"},"content":""},{"lineNumber":1323,"author":{"gitId":"-"},"content":"* ``signature-mutators`` option was added"},{"lineNumber":1324,"author":{"gitId":"-"},"content":""},{"lineNumber":1325,"author":{"gitId":"-"},"content":"   With this option, users can choose to ignore ``too-many-function-args``, ``unexpected-keyword-arg``,"},{"lineNumber":1326,"author":{"gitId":"-"},"content":"   and ``no-value-for-parameter`` for functions decorated with decorators that change"},{"lineNumber":1327,"author":{"gitId":"-"},"content":"   the signature of a decorated function."},{"lineNumber":1328,"author":{"gitId":"-"},"content":""},{"lineNumber":1329,"author":{"gitId":"-"},"content":"   Close #259"},{"lineNumber":1330,"author":{"gitId":"-"},"content":""},{"lineNumber":1331,"author":{"gitId":"-"},"content":"* Fixed a pragma comment on its own physical line being ignored when part"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"  of a logical line with the previous physical line."},{"lineNumber":1333,"author":{"gitId":"-"},"content":""},{"lineNumber":1334,"author":{"gitId":"-"},"content":"  Close #199"},{"lineNumber":1335,"author":{"gitId":"-"},"content":""},{"lineNumber":1336,"author":{"gitId":"-"},"content":"* Fixed false ``undefined-loop-variable`` for a function defined in the loop,"},{"lineNumber":1337,"author":{"gitId":"-"},"content":"  that uses the variable defined in that loop."},{"lineNumber":1338,"author":{"gitId":"-"},"content":""},{"lineNumber":1339,"author":{"gitId":"-"},"content":"  Close #202"},{"lineNumber":1340,"author":{"gitId":"-"},"content":""},{"lineNumber":1341,"author":{"gitId":"-"},"content":"* Fixed ``unused-argument`` and ``function-redefined`` getting raised for"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"  functions decorated with ``typing.overload``."},{"lineNumber":1343,"author":{"gitId":"-"},"content":""},{"lineNumber":1344,"author":{"gitId":"-"},"content":"  Close #1581"},{"lineNumber":1345,"author":{"gitId":"-"},"content":""},{"lineNumber":1346,"author":{"gitId":"-"},"content":"* Fixed a false positive with ``consider-using-dict-comprehension`` for constructions that can\u0027t be converted to a comprehension"},{"lineNumber":1347,"author":{"gitId":"-"},"content":""},{"lineNumber":1348,"author":{"gitId":"-"},"content":"  Close #2963"},{"lineNumber":1349,"author":{"gitId":"-"},"content":""},{"lineNumber":1350,"author":{"gitId":"-"},"content":"* Added ``__post_init__`` to ``defining-attr-methods`` in order to avoid ``attribute-defined-outside-init`` in dataclasses."},{"lineNumber":1351,"author":{"gitId":"-"},"content":""},{"lineNumber":1352,"author":{"gitId":"-"},"content":"  Close #2581"},{"lineNumber":1353,"author":{"gitId":"-"},"content":""},{"lineNumber":1354,"author":{"gitId":"-"},"content":"* Changed description of W0199 to use the term 2-item-tuple instead of 2-uple."},{"lineNumber":1355,"author":{"gitId":"-"},"content":""},{"lineNumber":1356,"author":{"gitId":"-"},"content":"* Allow a ``.`` as a prefix for Sphinx name resolution."},{"lineNumber":1357,"author":{"gitId":"-"},"content":""},{"lineNumber":1358,"author":{"gitId":"-"},"content":"* Checkers must now keep a 1 to 1 relationship between \"msgid\" (ie: C1234) and \"symbol\" (ie : human-readable-symbol)"},{"lineNumber":1359,"author":{"gitId":"-"},"content":"* In checkers, an old_names can now be used for multiple new messages and pylint is now a little faster"},{"lineNumber":1360,"author":{"gitId":"-"},"content":""},{"lineNumber":1361,"author":{"gitId":"-"},"content":"Caused by #1164. It means if you do a partial old_names for a message definition an exception will tell you that you"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"must rename the associated identification."},{"lineNumber":1363,"author":{"gitId":"-"},"content":""},{"lineNumber":1364,"author":{"gitId":"-"},"content":"* Allow the choice of f-strings as a valid way of formatting logging strings."},{"lineNumber":1365,"author":{"gitId":"-"},"content":""},{"lineNumber":1366,"author":{"gitId":"-"},"content":"  Closes #2395"},{"lineNumber":1367,"author":{"gitId":"-"},"content":""},{"lineNumber":1368,"author":{"gitId":"-"},"content":"* Added ``--list-msgs-enabled`` command to list all enabled and disabled messages given the current RC file and command line arguments."},{"lineNumber":1369,"author":{"gitId":"-"},"content":""},{"lineNumber":1370,"author":{"gitId":"-"},"content":""},{"lineNumber":1371,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.3.0?"},{"lineNumber":1372,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1373,"author":{"gitId":"-"},"content":""},{"lineNumber":1374,"author":{"gitId":"-"},"content":"Release date: 2019-02-27"},{"lineNumber":1375,"author":{"gitId":"-"},"content":""},{"lineNumber":1376,"author":{"gitId":"-"},"content":"* Protect against ``NonDeducibleTypeHierarchy`` when calling semi-private ``is_subtype``"},{"lineNumber":1377,"author":{"gitId":"-"},"content":""},{"lineNumber":1378,"author":{"gitId":"-"},"content":"  ``astroid.helpers.is_subtype`` raises ``NonDeducibleTypeHierarchy`` when it cannot infer"},{"lineNumber":1379,"author":{"gitId":"-"},"content":"  the base classes of the given types, but that makes sense in its context given that"},{"lineNumber":1380,"author":{"gitId":"-"},"content":"  the method is mostly used to inform the inference process about the hierarchy of classes."},{"lineNumber":1381,"author":{"gitId":"-"},"content":"  Doesn\u0027t make that much sense for ``pylint`` itself, which is why we\u0027re handling the"},{"lineNumber":1382,"author":{"gitId":"-"},"content":"  exception here, rather than in ``astroid``"},{"lineNumber":1383,"author":{"gitId":"-"},"content":""},{"lineNumber":1384,"author":{"gitId":"-"},"content":"  Close PyCQA/astroid#644"},{"lineNumber":1385,"author":{"gitId":"-"},"content":""},{"lineNumber":1386,"author":{"gitId":"-"},"content":"* Added a new command line option ``list-groups`` for listing all the check groups ``pylint`` knows about."},{"lineNumber":1387,"author":{"gitId":"-"},"content":""},{"lineNumber":1388,"author":{"gitId":"-"},"content":"* Allow ``BaseException`` for emitting ``broad-except``, just like ``Exception``."},{"lineNumber":1389,"author":{"gitId":"-"},"content":""},{"lineNumber":1390,"author":{"gitId":"-"},"content":"  Close #2741"},{"lineNumber":1391,"author":{"gitId":"-"},"content":""},{"lineNumber":1392,"author":{"gitId":"-"},"content":"* Fixed a crash that occurred for ``bad-str-strip-call`` when ``strip()`` received ``None``"},{"lineNumber":1393,"author":{"gitId":"-"},"content":""},{"lineNumber":1394,"author":{"gitId":"-"},"content":"  Close #2743"},{"lineNumber":1395,"author":{"gitId":"-"},"content":""},{"lineNumber":1396,"author":{"gitId":"-"},"content":"* Don\u0027t emit ``*-not-iterating`` checks for builtins consumed by ``itertools``"},{"lineNumber":1397,"author":{"gitId":"-"},"content":""},{"lineNumber":1398,"author":{"gitId":"-"},"content":"  Close #2731"},{"lineNumber":1399,"author":{"gitId":"-"},"content":""},{"lineNumber":1400,"author":{"gitId":"-"},"content":"* Fix a crash caused by iterating over ``Uninferable`` in a string formatting check."},{"lineNumber":1401,"author":{"gitId":"-"},"content":""},{"lineNumber":1402,"author":{"gitId":"-"},"content":"  Close #2727"},{"lineNumber":1403,"author":{"gitId":"-"},"content":""},{"lineNumber":1404,"author":{"gitId":"-"},"content":"* Fixed false positives for ``no-self-argument`` and ``unsubscriptable-object`` when using ``__class_getitem__`` (new in Python 3.7)"},{"lineNumber":1405,"author":{"gitId":"-"},"content":""},{"lineNumber":1406,"author":{"gitId":"-"},"content":"  Close #2416"},{"lineNumber":1407,"author":{"gitId":"-"},"content":""},{"lineNumber":1408,"author":{"gitId":"-"},"content":"* Support ``Ellipsis`` as a synonym for ``pass`` statements."},{"lineNumber":1409,"author":{"gitId":"-"},"content":""},{"lineNumber":1410,"author":{"gitId":"-"},"content":"  Close #2718"},{"lineNumber":1411,"author":{"gitId":"-"},"content":""},{"lineNumber":1412,"author":{"gitId":"-"},"content":"* ``fixme`` gets triggered only on comments."},{"lineNumber":1413,"author":{"gitId":"-"},"content":""},{"lineNumber":1414,"author":{"gitId":"-"},"content":"  Close #2321"},{"lineNumber":1415,"author":{"gitId":"-"},"content":""},{"lineNumber":1416,"author":{"gitId":"-"},"content":"* Fixed a false positive for ``unused-variable`` and ``nonlocal`` assignments"},{"lineNumber":1417,"author":{"gitId":"-"},"content":""},{"lineNumber":1418,"author":{"gitId":"-"},"content":"  Close #2671"},{"lineNumber":1419,"author":{"gitId":"-"},"content":""},{"lineNumber":1420,"author":{"gitId":"-"},"content":"* Added ``load_configuration()`` hook for plugins"},{"lineNumber":1421,"author":{"gitId":"-"},"content":""},{"lineNumber":1422,"author":{"gitId":"-"},"content":"  New optional hook for plugins is added: ``load_configuration()``."},{"lineNumber":1423,"author":{"gitId":"-"},"content":"  This hook is executed after configuration is loaded to prevent"},{"lineNumber":1424,"author":{"gitId":"-"},"content":"  overwriting plugin specific configuration via user-based"},{"lineNumber":1425,"author":{"gitId":"-"},"content":"  configuration."},{"lineNumber":1426,"author":{"gitId":"-"},"content":""},{"lineNumber":1427,"author":{"gitId":"-"},"content":"  Close #2635"},{"lineNumber":1428,"author":{"gitId":"-"},"content":""},{"lineNumber":1429,"author":{"gitId":"-"},"content":"* Fix missing-raises-doc false positive (W9006)"},{"lineNumber":1430,"author":{"gitId":"-"},"content":""},{"lineNumber":1431,"author":{"gitId":"-"},"content":"  Close #1502"},{"lineNumber":1432,"author":{"gitId":"-"},"content":""},{"lineNumber":1433,"author":{"gitId":"-"},"content":"* Exempt starred unpacking from ``*-not-iterating`` Python 3 checks"},{"lineNumber":1434,"author":{"gitId":"-"},"content":""},{"lineNumber":1435,"author":{"gitId":"-"},"content":"  Close #2651"},{"lineNumber":1436,"author":{"gitId":"-"},"content":""},{"lineNumber":1437,"author":{"gitId":"-"},"content":"* Make ``compare-to-zero`` less zealous by checking against equality and identity"},{"lineNumber":1438,"author":{"gitId":"-"},"content":""},{"lineNumber":1439,"author":{"gitId":"-"},"content":"  Close #2645"},{"lineNumber":1440,"author":{"gitId":"-"},"content":""},{"lineNumber":1441,"author":{"gitId":"-"},"content":"* Add ``no-else-raise`` warning (R1720)"},{"lineNumber":1442,"author":{"gitId":"-"},"content":""},{"lineNumber":1443,"author":{"gitId":"-"},"content":"  Close #2558"},{"lineNumber":1444,"author":{"gitId":"-"},"content":""},{"lineNumber":1445,"author":{"gitId":"-"},"content":"* Exempt ``yield from`` from ``*-not-iterating`` Python 3 checks."},{"lineNumber":1446,"author":{"gitId":"-"},"content":""},{"lineNumber":1447,"author":{"gitId":"-"},"content":"  Close #2643"},{"lineNumber":1448,"author":{"gitId":"-"},"content":""},{"lineNumber":1449,"author":{"gitId":"-"},"content":"* Fix incorrect generation of ``no-else-return`` warnings (R1705)"},{"lineNumber":1450,"author":{"gitId":"-"},"content":""},{"lineNumber":1451,"author":{"gitId":"-"},"content":"  Fixed issue where ``if`` statements with nested ``if`` statements"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"  were incorrectly being flagged as ``no-else-return`` in some cases and"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"  not being flagged as ``no-else-return`` in other cases.  Added tests"},{"lineNumber":1454,"author":{"gitId":"-"},"content":"  for verification and updated pylint source files to eliminate newly"},{"lineNumber":1455,"author":{"gitId":"-"},"content":"  exposed warnings."},{"lineNumber":1456,"author":{"gitId":"-"},"content":""},{"lineNumber":1457,"author":{"gitId":"-"},"content":"* Fix false positive with ``not-async-context-manager`` caused by not understanding ``contextlib.asynccontextmanager``"},{"lineNumber":1458,"author":{"gitId":"-"},"content":""},{"lineNumber":1459,"author":{"gitId":"-"},"content":"  Close #2440"},{"lineNumber":1460,"author":{"gitId":"-"},"content":""},{"lineNumber":1461,"author":{"gitId":"-"},"content":"* Refactor ``bad-reversed-sequence`` to account for more objects that can define ``__reversed__``"},{"lineNumber":1462,"author":{"gitId":"-"},"content":""},{"lineNumber":1463,"author":{"gitId":"-"},"content":"  One such object would be an enum class, for which ``__reversed__`` yields each individual enum."},{"lineNumber":1464,"author":{"gitId":"-"},"content":"  As such, the check for ``bad-reversed-sequence`` needs to not differentiate between classes"},{"lineNumber":1465,"author":{"gitId":"-"},"content":"  and instances when it comes for checking of ``__reversed__`` presence."},{"lineNumber":1466,"author":{"gitId":"-"},"content":""},{"lineNumber":1467,"author":{"gitId":"-"},"content":"  Close #2598"},{"lineNumber":1468,"author":{"gitId":"-"},"content":""},{"lineNumber":1469,"author":{"gitId":"-"},"content":"* Added ``wrong-exception-operation``"},{"lineNumber":1470,"author":{"gitId":"-"},"content":""},{"lineNumber":1471,"author":{"gitId":"-"},"content":"  Used when an operation is done against an exception, but the operation"},{"lineNumber":1472,"author":{"gitId":"-"},"content":"  is not valid for the exception in question. Usually emitted when having"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"  binary operations between exceptions in except handlers."},{"lineNumber":1474,"author":{"gitId":"-"},"content":""},{"lineNumber":1475,"author":{"gitId":"-"},"content":"  Close #2494"},{"lineNumber":1476,"author":{"gitId":"-"},"content":""},{"lineNumber":1477,"author":{"gitId":"-"},"content":"* ``no-member`` is emitted for enums when they lack a member"},{"lineNumber":1478,"author":{"gitId":"-"},"content":""},{"lineNumber":1479,"author":{"gitId":"-"},"content":"  Previously we weren\u0027t doing this because we detected a"},{"lineNumber":1480,"author":{"gitId":"-"},"content":"  ``__getattr__`` implementation on the ``Enum`` class"},{"lineNumber":1481,"author":{"gitId":"-"},"content":"  (and this check is skipped for classes with ``__getattr__``),"},{"lineNumber":1482,"author":{"gitId":"-"},"content":"  but that is fine for Enums, given that they are inferred in a customised"},{"lineNumber":1483,"author":{"gitId":"-"},"content":"  way in astroid."},{"lineNumber":1484,"author":{"gitId":"-"},"content":""},{"lineNumber":1485,"author":{"gitId":"-"},"content":"  Close #2565"},{"lineNumber":1486,"author":{"gitId":"-"},"content":""},{"lineNumber":1487,"author":{"gitId":"-"},"content":"* Generalize ``chained-comparison``"},{"lineNumber":1488,"author":{"gitId":"-"},"content":""},{"lineNumber":1489,"author":{"gitId":"-"},"content":"  Previous version incorrectly detects `a \u003c b \u003c c and b \u003c d` and fails to"},{"lineNumber":1490,"author":{"gitId":"-"},"content":"  detect `a \u003c b \u003c c and c \u003c d`."},{"lineNumber":1491,"author":{"gitId":"-"},"content":""},{"lineNumber":1492,"author":{"gitId":"-"},"content":"* Avoid popping __main__ when using multiple jobs"},{"lineNumber":1493,"author":{"gitId":"-"},"content":""},{"lineNumber":1494,"author":{"gitId":"-"},"content":"  Close #2689"},{"lineNumber":1495,"author":{"gitId":"-"},"content":""},{"lineNumber":1496,"author":{"gitId":"-"},"content":"* Add a new option \u0027check-str-concat-over-line-jumps\u0027 to check \u0027implicit-str-concat-in-sequence\u0027"},{"lineNumber":1497,"author":{"gitId":"-"},"content":""},{"lineNumber":1498,"author":{"gitId":"-"},"content":"* Fixes for the new style logging format linter."},{"lineNumber":1499,"author":{"gitId":"-"},"content":""},{"lineNumber":1500,"author":{"gitId":"-"},"content":"  The number of arguments was not handled properly, leading to an always"},{"lineNumber":1501,"author":{"gitId":"-"},"content":"  successful check."},{"lineNumber":1502,"author":{"gitId":"-"},"content":""},{"lineNumber":1503,"author":{"gitId":"-"},"content":"* Fix false positive ``not-callable`` for uninferable properties."},{"lineNumber":1504,"author":{"gitId":"-"},"content":""},{"lineNumber":1505,"author":{"gitId":"-"},"content":"* Fix false positive ``useless-else-on-loop`` if the break is deep in the else"},{"lineNumber":1506,"author":{"gitId":"-"},"content":"  of an inner loop."},{"lineNumber":1507,"author":{"gitId":"-"},"content":""},{"lineNumber":1508,"author":{"gitId":"-"},"content":"* Minor improvements to the help text for a few options."},{"lineNumber":1509,"author":{"gitId":"-"},"content":""},{"lineNumber":1510,"author":{"gitId":"-"},"content":""},{"lineNumber":1511,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.2.2?"},{"lineNumber":1512,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1513,"author":{"gitId":"-"},"content":""},{"lineNumber":1514,"author":{"gitId":"-"},"content":"Release date: 2018-11-28"},{"lineNumber":1515,"author":{"gitId":"-"},"content":""},{"lineNumber":1516,"author":{"gitId":"-"},"content":"* Change the ``logging-format-style`` to use name identifier instead of their"},{"lineNumber":1517,"author":{"gitId":"-"},"content":"  corresponding Python identifiers"},{"lineNumber":1518,"author":{"gitId":"-"},"content":""},{"lineNumber":1519,"author":{"gitId":"-"},"content":"  This is to prevent users having to think about escaping the default value for"},{"lineNumber":1520,"author":{"gitId":"-"},"content":"  ``logging-format-style`` in the generated config file. Also our config parsing"},{"lineNumber":1521,"author":{"gitId":"-"},"content":"  utilities don\u0027t quite support escaped values when it comes to ``choices`` detection,"},{"lineNumber":1522,"author":{"gitId":"-"},"content":"  so this would have needed various hacks around that."},{"lineNumber":1523,"author":{"gitId":"-"},"content":""},{"lineNumber":1524,"author":{"gitId":"-"},"content":"  Closes #2614"},{"lineNumber":1525,"author":{"gitId":"-"},"content":""},{"lineNumber":1526,"author":{"gitId":"-"},"content":""},{"lineNumber":1527,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.2.1?"},{"lineNumber":1528,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1529,"author":{"gitId":"-"},"content":""},{"lineNumber":1530,"author":{"gitId":"-"},"content":"Release date: 2018-11-27"},{"lineNumber":1531,"author":{"gitId":"-"},"content":""},{"lineNumber":1532,"author":{"gitId":"-"},"content":"* Fix a crash caused by ``implicit-str-concat-in-sequence`` and multi-bytes characters."},{"lineNumber":1533,"author":{"gitId":"-"},"content":""},{"lineNumber":1534,"author":{"gitId":"-"},"content":"  Closes #2610"},{"lineNumber":1535,"author":{"gitId":"-"},"content":""},{"lineNumber":1536,"author":{"gitId":"-"},"content":""},{"lineNumber":1537,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.2?"},{"lineNumber":1538,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1539,"author":{"gitId":"-"},"content":""},{"lineNumber":1540,"author":{"gitId":"-"},"content":"Release date: 2018-11-25"},{"lineNumber":1541,"author":{"gitId":"-"},"content":""},{"lineNumber":1542,"author":{"gitId":"-"},"content":"   * Consider ``range()`` objects for ``undefined-loop-variable`` leaking from iteration."},{"lineNumber":1543,"author":{"gitId":"-"},"content":""},{"lineNumber":1544,"author":{"gitId":"-"},"content":"     Close #2533"},{"lineNumber":1545,"author":{"gitId":"-"},"content":""},{"lineNumber":1546,"author":{"gitId":"-"},"content":"   * ``deprecated-method`` can use the attribute name for identifying a deprecated method"},{"lineNumber":1547,"author":{"gitId":"-"},"content":""},{"lineNumber":1548,"author":{"gitId":"-"},"content":"     Previously we were using the fully qualified name, which we still do, but the fully"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"     qualified name for some ``unittest`` deprecated aliases leads to a generic"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"     deprecation function. Instead on relying on that, we now also rely on the attribute"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"     name, which should solve some false positives."},{"lineNumber":1552,"author":{"gitId":"-"},"content":""},{"lineNumber":1553,"author":{"gitId":"-"},"content":"     Close #1653"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"     Close #1946"},{"lineNumber":1555,"author":{"gitId":"-"},"content":""},{"lineNumber":1556,"author":{"gitId":"-"},"content":"   * Fix compatibility with changes to stdlib tokenizer."},{"lineNumber":1557,"author":{"gitId":"-"},"content":""},{"lineNumber":1558,"author":{"gitId":"-"},"content":"   * ``pylint`` is less eager to consume the whole line for pragmas"},{"lineNumber":1559,"author":{"gitId":"-"},"content":""},{"lineNumber":1560,"author":{"gitId":"-"},"content":"     Close #2485"},{"lineNumber":1561,"author":{"gitId":"-"},"content":""},{"lineNumber":1562,"author":{"gitId":"-"},"content":"   * Obtain the correct number of CPUs for virtualized or containerized environments."},{"lineNumber":1563,"author":{"gitId":"-"},"content":""},{"lineNumber":1564,"author":{"gitId":"-"},"content":"     Close #2519"},{"lineNumber":1565,"author":{"gitId":"-"},"content":""},{"lineNumber":1566,"author":{"gitId":"-"},"content":"   * Change ``unbalanced-tuple-unpacking`` back to a warning."},{"lineNumber":1567,"author":{"gitId":"-"},"content":""},{"lineNumber":1568,"author":{"gitId":"-"},"content":"     It used to be a warning until a couple of years ago, after it was promoted to"},{"lineNumber":1569,"author":{"gitId":"-"},"content":"     an error. But the check might be suggesting the wrong thing in some cases,"},{"lineNumber":1570,"author":{"gitId":"-"},"content":"     for instance when checking against ``sys.argv`` which cannot be known at static"},{"lineNumber":1571,"author":{"gitId":"-"},"content":"     analysis time. Given it might rely on potential unknown data, it\u0027s best to"},{"lineNumber":1572,"author":{"gitId":"-"},"content":"     have it as a warning."},{"lineNumber":1573,"author":{"gitId":"-"},"content":""},{"lineNumber":1574,"author":{"gitId":"-"},"content":"     Close #2522"},{"lineNumber":1575,"author":{"gitId":"-"},"content":""},{"lineNumber":1576,"author":{"gitId":"-"},"content":"   * Remove ``enumerate`` usage suggestion when defining ``__iter__`` (C0200)"},{"lineNumber":1577,"author":{"gitId":"-"},"content":""},{"lineNumber":1578,"author":{"gitId":"-"},"content":"     Close #2477"},{"lineNumber":1579,"author":{"gitId":"-"},"content":""},{"lineNumber":1580,"author":{"gitId":"-"},"content":"   * Emit ``too-many-starred-assignment`` only when the number of Starred nodes is per assignment elements"},{"lineNumber":1581,"author":{"gitId":"-"},"content":""},{"lineNumber":1582,"author":{"gitId":"-"},"content":"     Close #2513"},{"lineNumber":1583,"author":{"gitId":"-"},"content":""},{"lineNumber":1584,"author":{"gitId":"-"},"content":"   * ``try-except-raise`` checker now handles multilevel inheritance hirerachy for exceptions correctly."},{"lineNumber":1585,"author":{"gitId":"-"},"content":""},{"lineNumber":1586,"author":{"gitId":"-"},"content":"     Close #2484"},{"lineNumber":1587,"author":{"gitId":"-"},"content":""},{"lineNumber":1588,"author":{"gitId":"-"},"content":"   * Add a new check, ``simplifiable-if-expression`` for expressions like ``True if cond else False``."},{"lineNumber":1589,"author":{"gitId":"-"},"content":""},{"lineNumber":1590,"author":{"gitId":"-"},"content":"     Close #2487"},{"lineNumber":1591,"author":{"gitId":"-"},"content":""},{"lineNumber":1592,"author":{"gitId":"-"},"content":"   * ``too-few-public-methods`` is not reported for ``typing.NamedTuple``"},{"lineNumber":1593,"author":{"gitId":"-"},"content":""},{"lineNumber":1594,"author":{"gitId":"-"},"content":"     Close #2459"},{"lineNumber":1595,"author":{"gitId":"-"},"content":""},{"lineNumber":1596,"author":{"gitId":"-"},"content":"   * ```too-few-public-methods`` is not reported for dataclasses created with options."},{"lineNumber":1597,"author":{"gitId":"-"},"content":""},{"lineNumber":1598,"author":{"gitId":"-"},"content":"     Close #2488"},{"lineNumber":1599,"author":{"gitId":"-"},"content":""},{"lineNumber":1600,"author":{"gitId":"-"},"content":"   * Remove wrong modules from \u0027bad-python3-import\u0027."},{"lineNumber":1601,"author":{"gitId":"-"},"content":""},{"lineNumber":1602,"author":{"gitId":"-"},"content":"     Close #2453"},{"lineNumber":1603,"author":{"gitId":"-"},"content":""},{"lineNumber":1604,"author":{"gitId":"-"},"content":"   * The ``json`` reporter prints an empty list when no messages are emitted"},{"lineNumber":1605,"author":{"gitId":"-"},"content":""},{"lineNumber":1606,"author":{"gitId":"-"},"content":"     Close #2446"},{"lineNumber":1607,"author":{"gitId":"-"},"content":""},{"lineNumber":1608,"author":{"gitId":"-"},"content":"   * Add a new check, ``duplicate-string-formatting-argument``"},{"lineNumber":1609,"author":{"gitId":"-"},"content":""},{"lineNumber":1610,"author":{"gitId":"-"},"content":"     This new check is emitted whenever a duplicate string formatting argument"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"     is found."},{"lineNumber":1612,"author":{"gitId":"-"},"content":""},{"lineNumber":1613,"author":{"gitId":"-"},"content":"     Close #497"},{"lineNumber":1614,"author":{"gitId":"-"},"content":""},{"lineNumber":1615,"author":{"gitId":"-"},"content":"   * ``assignment-from-no-return`` is not emitted for coroutines."},{"lineNumber":1616,"author":{"gitId":"-"},"content":""},{"lineNumber":1617,"author":{"gitId":"-"},"content":"     Close #1715"},{"lineNumber":1618,"author":{"gitId":"-"},"content":""},{"lineNumber":1619,"author":{"gitId":"-"},"content":"   * Report format string type mismatches."},{"lineNumber":1620,"author":{"gitId":"-"},"content":""},{"lineNumber":1621,"author":{"gitId":"-"},"content":"   * ``consider-using-ternary`` and ``simplified-boolean-expression`` no longer emit for sequence based checks"},{"lineNumber":1622,"author":{"gitId":"-"},"content":""},{"lineNumber":1623,"author":{"gitId":"-"},"content":"     Close #2473"},{"lineNumber":1624,"author":{"gitId":"-"},"content":""},{"lineNumber":1625,"author":{"gitId":"-"},"content":"   * Handle ``AstroidSyntaxError`` when trying to import a module."},{"lineNumber":1626,"author":{"gitId":"-"},"content":""},{"lineNumber":1627,"author":{"gitId":"-"},"content":"     Close #2313"},{"lineNumber":1628,"author":{"gitId":"-"},"content":""},{"lineNumber":1629,"author":{"gitId":"-"},"content":"   * Allow ``__module__`` to be redefined at a class level. Close #2451"},{"lineNumber":1630,"author":{"gitId":"-"},"content":""},{"lineNumber":1631,"author":{"gitId":"-"},"content":"   * ``pylint`` used to emit a ``unused-variable`` error if unused import was found in the function. Now instead of"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"     ``unused-variable``, ``unused-import`` is emitted."},{"lineNumber":1633,"author":{"gitId":"-"},"content":""},{"lineNumber":1634,"author":{"gitId":"-"},"content":"     Close #2421"},{"lineNumber":1635,"author":{"gitId":"-"},"content":""},{"lineNumber":1636,"author":{"gitId":"-"},"content":"   * Handle asyncio.coroutine when looking for ``not-an-iterable`` check."},{"lineNumber":1637,"author":{"gitId":"-"},"content":""},{"lineNumber":1638,"author":{"gitId":"-"},"content":"     Close #996"},{"lineNumber":1639,"author":{"gitId":"-"},"content":""},{"lineNumber":1640,"author":{"gitId":"-"},"content":"   * The ``locally-enabled`` check is gone."},{"lineNumber":1641,"author":{"gitId":"-"},"content":""},{"lineNumber":1642,"author":{"gitId":"-"},"content":"     Close #2442"},{"lineNumber":1643,"author":{"gitId":"-"},"content":""},{"lineNumber":1644,"author":{"gitId":"-"},"content":"   * Infer decorated methods when looking for method-hidden"},{"lineNumber":1645,"author":{"gitId":"-"},"content":""},{"lineNumber":1646,"author":{"gitId":"-"},"content":"     Close #2369"},{"lineNumber":1647,"author":{"gitId":"-"},"content":""},{"lineNumber":1648,"author":{"gitId":"-"},"content":"   * Pick the latest value from the inferred values when looking for ``raising-non-exception``"},{"lineNumber":1649,"author":{"gitId":"-"},"content":""},{"lineNumber":1650,"author":{"gitId":"-"},"content":"     Close #2431"},{"lineNumber":1651,"author":{"gitId":"-"},"content":""},{"lineNumber":1652,"author":{"gitId":"-"},"content":"   * Extend the TYPE_CHECKING guard to TYPE_CHECKING name as well, not just the attribute"},{"lineNumber":1653,"author":{"gitId":"-"},"content":""},{"lineNumber":1654,"author":{"gitId":"-"},"content":"     Close #2411"},{"lineNumber":1655,"author":{"gitId":"-"},"content":""},{"lineNumber":1656,"author":{"gitId":"-"},"content":"   * Ignore import x.y.z as z cases for checker ``useless-import-alias``."},{"lineNumber":1657,"author":{"gitId":"-"},"content":""},{"lineNumber":1658,"author":{"gitId":"-"},"content":"     Close #2309"},{"lineNumber":1659,"author":{"gitId":"-"},"content":""},{"lineNumber":1660,"author":{"gitId":"-"},"content":"   * Fix false positive ``undefined-variable`` and ``used-before-assignment`` with nonlocal keyword usage."},{"lineNumber":1661,"author":{"gitId":"-"},"content":""},{"lineNumber":1662,"author":{"gitId":"-"},"content":"     Close #2049"},{"lineNumber":1663,"author":{"gitId":"-"},"content":""},{"lineNumber":1664,"author":{"gitId":"-"},"content":"   * Stop ``protected-access`` exception for missing class attributes"},{"lineNumber":1665,"author":{"gitId":"-"},"content":""},{"lineNumber":1666,"author":{"gitId":"-"},"content":"   * Don\u0027t emit ``assignment-from-no-return`` for decorated function nodes"},{"lineNumber":1667,"author":{"gitId":"-"},"content":""},{"lineNumber":1668,"author":{"gitId":"-"},"content":"     Close #2385"},{"lineNumber":1669,"author":{"gitId":"-"},"content":""},{"lineNumber":1670,"author":{"gitId":"-"},"content":"   * ``unnecessary-pass`` is now also emitted when a function or class contains only docstring and pass statement."},{"lineNumber":1671,"author":{"gitId":"-"},"content":""},{"lineNumber":1672,"author":{"gitId":"-"},"content":"      In Python, stubbed functions often have a body that contains just a single ``pass`` statement,"},{"lineNumber":1673,"author":{"gitId":"-"},"content":"      indicating that the function doesn\u0027t do anything. However, a stubbed function can also have just a"},{"lineNumber":1674,"author":{"gitId":"-"},"content":"      docstring, and function with a docstring and no body also does nothing."},{"lineNumber":1675,"author":{"gitId":"-"},"content":""},{"lineNumber":1676,"author":{"gitId":"-"},"content":"      Close #2208"},{"lineNumber":1677,"author":{"gitId":"-"},"content":""},{"lineNumber":1678,"author":{"gitId":"-"},"content":"   * ``duplicate-argument-name`` is emitted for more than one duplicate argument per function"},{"lineNumber":1679,"author":{"gitId":"-"},"content":""},{"lineNumber":1680,"author":{"gitId":"-"},"content":"      Close #1712"},{"lineNumber":1681,"author":{"gitId":"-"},"content":""},{"lineNumber":1682,"author":{"gitId":"-"},"content":"   * Allow double indentation levels for more distinguishable indentations"},{"lineNumber":1683,"author":{"gitId":"-"},"content":""},{"lineNumber":1684,"author":{"gitId":"-"},"content":"     Close #741"},{"lineNumber":1685,"author":{"gitId":"-"},"content":""},{"lineNumber":1686,"author":{"gitId":"-"},"content":"   * Consider tuples in exception handler for ``try-except-raise``."},{"lineNumber":1687,"author":{"gitId":"-"},"content":"     Close #2389"},{"lineNumber":1688,"author":{"gitId":"-"},"content":""},{"lineNumber":1689,"author":{"gitId":"-"},"content":"   * Fix astroid.ClassDef check in checkers.utils.is_subclass_of"},{"lineNumber":1690,"author":{"gitId":"-"},"content":""},{"lineNumber":1691,"author":{"gitId":"-"},"content":"   * Fix wildcard imports being ignored by the import checker"},{"lineNumber":1692,"author":{"gitId":"-"},"content":""},{"lineNumber":1693,"author":{"gitId":"-"},"content":"   * Fix external/internal distinction being broken in the import graph"},{"lineNumber":1694,"author":{"gitId":"-"},"content":""},{"lineNumber":1695,"author":{"gitId":"-"},"content":"   * Fix wildcard import check not skipping ``__init__.py``"},{"lineNumber":1696,"author":{"gitId":"-"},"content":""},{"lineNumber":1697,"author":{"gitId":"-"},"content":"     Close #2430"},{"lineNumber":1698,"author":{"gitId":"-"},"content":""},{"lineNumber":1699,"author":{"gitId":"-"},"content":"   * Add new option to logging checker, ``logging_format_style``"},{"lineNumber":1700,"author":{"gitId":"-"},"content":""},{"lineNumber":1701,"author":{"gitId":"-"},"content":"   * Fix --ignore-imports to understand multi-line imports"},{"lineNumber":1702,"author":{"gitId":"-"},"content":""},{"lineNumber":1703,"author":{"gitId":"-"},"content":"     Close #1422"},{"lineNumber":1704,"author":{"gitId":"-"},"content":"     Close #2019"},{"lineNumber":1705,"author":{"gitId":"-"},"content":""},{"lineNumber":1706,"author":{"gitId":"-"},"content":"   * Add a new check \u0027implicit-str-concat-in-sequence\u0027 to spot string concatenation inside lists, sets \u0026 tuples."},{"lineNumber":1707,"author":{"gitId":"-"},"content":""},{"lineNumber":1708,"author":{"gitId":"-"},"content":"   * ``literal-comparison`` is now emitted for 0 and 1 literals."},{"lineNumber":1709,"author":{"gitId":"-"},"content":""},{"lineNumber":1710,"author":{"gitId":"-"},"content":""},{"lineNumber":1711,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.1.1?"},{"lineNumber":1712,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1713,"author":{"gitId":"-"},"content":""},{"lineNumber":1714,"author":{"gitId":"-"},"content":"Release date: 2018-08-07"},{"lineNumber":1715,"author":{"gitId":"-"},"content":""},{"lineNumber":1716,"author":{"gitId":"-"},"content":"   * fix pylint crash due to ``misplaced-format-function`` not correctly handling class attribute."},{"lineNumber":1717,"author":{"gitId":"-"},"content":"     Close #2384"},{"lineNumber":1718,"author":{"gitId":"-"},"content":""},{"lineNumber":1719,"author":{"gitId":"-"},"content":"   * Do not emit \\*-builtin for Python 3 builtin checks when the builtin is used inside a try-except"},{"lineNumber":1720,"author":{"gitId":"-"},"content":""},{"lineNumber":1721,"author":{"gitId":"-"},"content":"     Close PyCQA/pylint#2228"},{"lineNumber":1722,"author":{"gitId":"-"},"content":""},{"lineNumber":1723,"author":{"gitId":"-"},"content":"   * ``simplifiable-if-statement`` not emitted when dealing with subscripts"},{"lineNumber":1724,"author":{"gitId":"-"},"content":""},{"lineNumber":1725,"author":{"gitId":"-"},"content":""},{"lineNumber":1726,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.1?"},{"lineNumber":1727,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1728,"author":{"gitId":"-"},"content":""},{"lineNumber":1729,"author":{"gitId":"-"},"content":"Release date: 2018-08-01"},{"lineNumber":1730,"author":{"gitId":"-"},"content":"   * ``trailing-comma-tuple`` gets emitted for ``yield`` statements as well."},{"lineNumber":1731,"author":{"gitId":"-"},"content":""},{"lineNumber":1732,"author":{"gitId":"-"},"content":"      Close #2363"},{"lineNumber":1733,"author":{"gitId":"-"},"content":""},{"lineNumber":1734,"author":{"gitId":"-"},"content":"   * Get only the arguments of the scope function for ``redefined-argument-from-local``"},{"lineNumber":1735,"author":{"gitId":"-"},"content":""},{"lineNumber":1736,"author":{"gitId":"-"},"content":"     Close #2364"},{"lineNumber":1737,"author":{"gitId":"-"},"content":""},{"lineNumber":1738,"author":{"gitId":"-"},"content":"   * Add a check ``misplaced-format-function`` which is emitted if format function is used on"},{"lineNumber":1739,"author":{"gitId":"-"},"content":"     non str object."},{"lineNumber":1740,"author":{"gitId":"-"},"content":""},{"lineNumber":1741,"author":{"gitId":"-"},"content":"     Close #2200"},{"lineNumber":1742,"author":{"gitId":"-"},"content":""},{"lineNumber":1743,"author":{"gitId":"-"},"content":"   * ``chain.from_iterable`` no longer emits `dict-{}-not-iterating` when dealing with dict values and keys"},{"lineNumber":1744,"author":{"gitId":"-"},"content":""},{"lineNumber":1745,"author":{"gitId":"-"},"content":"   * Demote the ``try-except-raise`` message from an error to a warning (E0705 -\u003e W0706)"},{"lineNumber":1746,"author":{"gitId":"-"},"content":""},{"lineNumber":1747,"author":{"gitId":"-"},"content":"      Close #2323"},{"lineNumber":1748,"author":{"gitId":"-"},"content":""},{"lineNumber":1749,"author":{"gitId":"-"},"content":"   * Correctly handle the new name of the Python implementation of the ``abc`` module."},{"lineNumber":1750,"author":{"gitId":"-"},"content":""},{"lineNumber":1751,"author":{"gitId":"-"},"content":"     Close PyCQA/astroid#2288"},{"lineNumber":1752,"author":{"gitId":"-"},"content":""},{"lineNumber":1753,"author":{"gitId":"-"},"content":"    * Modules with ``__getattr__`` are exempted by default from ``no-member``"},{"lineNumber":1754,"author":{"gitId":"-"},"content":""},{"lineNumber":1755,"author":{"gitId":"-"},"content":"      There\u0027s no easy way to figure out if a module has a particular member when"},{"lineNumber":1756,"author":{"gitId":"-"},"content":"      the said module uses ``__getattr__``, which is a new addition to Python 3.7."},{"lineNumber":1757,"author":{"gitId":"-"},"content":"      Instead we assume the safe thing to do, in the same way we do for classes,"},{"lineNumber":1758,"author":{"gitId":"-"},"content":"      and skip those modules from checking."},{"lineNumber":1759,"author":{"gitId":"-"},"content":""},{"lineNumber":1760,"author":{"gitId":"-"},"content":"      Close #2331"},{"lineNumber":1761,"author":{"gitId":"-"},"content":""},{"lineNumber":1762,"author":{"gitId":"-"},"content":"    * Fix a false positive ``invalid name`` message when method or attribute name is longer then 30 characters."},{"lineNumber":1763,"author":{"gitId":"-"},"content":""},{"lineNumber":1764,"author":{"gitId":"-"},"content":"      Close #2047"},{"lineNumber":1765,"author":{"gitId":"-"},"content":""},{"lineNumber":1766,"author":{"gitId":"-"},"content":"    * Include the type of the next branch in ``no-else-return``"},{"lineNumber":1767,"author":{"gitId":"-"},"content":""},{"lineNumber":1768,"author":{"gitId":"-"},"content":"      Close #2295"},{"lineNumber":1769,"author":{"gitId":"-"},"content":""},{"lineNumber":1770,"author":{"gitId":"-"},"content":"    * Fix inconsistent behaviour for bad-continuation on first line of file"},{"lineNumber":1771,"author":{"gitId":"-"},"content":""},{"lineNumber":1772,"author":{"gitId":"-"},"content":"      Close #2281"},{"lineNumber":1773,"author":{"gitId":"-"},"content":""},{"lineNumber":1774,"author":{"gitId":"-"},"content":"     * Fix not being able to disable certain messages on the last line through"},{"lineNumber":1775,"author":{"gitId":"-"},"content":"       the global disable option"},{"lineNumber":1776,"author":{"gitId":"-"},"content":""},{"lineNumber":1777,"author":{"gitId":"-"},"content":"       Close #2278"},{"lineNumber":1778,"author":{"gitId":"-"},"content":""},{"lineNumber":1779,"author":{"gitId":"-"},"content":"    * Don\u0027t emit ``useless-return`` when we have a single statement that is the return itself"},{"lineNumber":1780,"author":{"gitId":"-"},"content":""},{"lineNumber":1781,"author":{"gitId":"-"},"content":"      We still want to be explicit when a function is supposed to return"},{"lineNumber":1782,"author":{"gitId":"-"},"content":"      an optional value; even though ``pass`` could still work, it\u0027s not explicit"},{"lineNumber":1783,"author":{"gitId":"-"},"content":"      enough and the function might look like it\u0027s missing an implementation."},{"lineNumber":1784,"author":{"gitId":"-"},"content":"      Close #2300"},{"lineNumber":1785,"author":{"gitId":"-"},"content":""},{"lineNumber":1786,"author":{"gitId":"-"},"content":"   * Fix false-positive undefined-variable for self referential class name in lamdbas"},{"lineNumber":1787,"author":{"gitId":"-"},"content":""},{"lineNumber":1788,"author":{"gitId":"-"},"content":"      Close #704"},{"lineNumber":1789,"author":{"gitId":"-"},"content":""},{"lineNumber":1790,"author":{"gitId":"-"},"content":"    * Don\u0027t crash when ``pylint`` is unable to infer the value of an argument to ``next()``"},{"lineNumber":1791,"author":{"gitId":"-"},"content":""},{"lineNumber":1792,"author":{"gitId":"-"},"content":"      Close #2316"},{"lineNumber":1793,"author":{"gitId":"-"},"content":""},{"lineNumber":1794,"author":{"gitId":"-"},"content":"    * Don\u0027t emit ``not-an-iterable`` when dealing with async iterators."},{"lineNumber":1795,"author":{"gitId":"-"},"content":""},{"lineNumber":1796,"author":{"gitId":"-"},"content":"      But do emit it when using the usual iteration protocol against"},{"lineNumber":1797,"author":{"gitId":"-"},"content":"      async iterators."},{"lineNumber":1798,"author":{"gitId":"-"},"content":""},{"lineNumber":1799,"author":{"gitId":"-"},"content":"      Close #2311"},{"lineNumber":1800,"author":{"gitId":"-"},"content":""},{"lineNumber":1801,"author":{"gitId":"-"},"content":"   * Can specify a default docstring type for when the check cannot guess the type"},{"lineNumber":1802,"author":{"gitId":"-"},"content":""},{"lineNumber":1803,"author":{"gitId":"-"},"content":"      Close #1169"},{"lineNumber":1804,"author":{"gitId":"-"},"content":""},{"lineNumber":1805,"author":{"gitId":"-"},"content":""},{"lineNumber":1806,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 2.0?"},{"lineNumber":1807,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1808,"author":{"gitId":"-"},"content":""},{"lineNumber":1809,"author":{"gitId":"-"},"content":"Release date: 2018-07-15"},{"lineNumber":1810,"author":{"gitId":"-"},"content":"    * ``try-except-raise`` should not be emitted if there are any parent exception class handlers."},{"lineNumber":1811,"author":{"gitId":"-"},"content":""},{"lineNumber":1812,"author":{"gitId":"-"},"content":"       Close #2284"},{"lineNumber":1813,"author":{"gitId":"-"},"content":""},{"lineNumber":1814,"author":{"gitId":"-"},"content":"    * ``trailing-comma-tuple`` can be emitted for ``return`` statements as well."},{"lineNumber":1815,"author":{"gitId":"-"},"content":""},{"lineNumber":1816,"author":{"gitId":"-"},"content":"       Close #2269"},{"lineNumber":1817,"author":{"gitId":"-"},"content":""},{"lineNumber":1818,"author":{"gitId":"-"},"content":"    * Fix a false positive ``inconsistent-return-statements`` message when exception is raised"},{"lineNumber":1819,"author":{"gitId":"-"},"content":"      inside an else statement."},{"lineNumber":1820,"author":{"gitId":"-"},"content":""},{"lineNumber":1821,"author":{"gitId":"-"},"content":"      Close #1782"},{"lineNumber":1822,"author":{"gitId":"-"},"content":""},{"lineNumber":1823,"author":{"gitId":"-"},"content":"    * ``ImportFrom`` nodes correctly use the full name for the import sorting checks."},{"lineNumber":1824,"author":{"gitId":"-"},"content":""},{"lineNumber":1825,"author":{"gitId":"-"},"content":"      Close #2181"},{"lineNumber":1826,"author":{"gitId":"-"},"content":""},{"lineNumber":1827,"author":{"gitId":"-"},"content":"    * [].extend and similar builtin operations don\u0027t emit `dict-*-not-iterating` with the Python 3 porting checker"},{"lineNumber":1828,"author":{"gitId":"-"},"content":""},{"lineNumber":1829,"author":{"gitId":"-"},"content":"      Close #2187"},{"lineNumber":1830,"author":{"gitId":"-"},"content":""},{"lineNumber":1831,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-dict-comprehension`` which is emitted if for dict initialization"},{"lineNumber":1832,"author":{"gitId":"-"},"content":"      the old style with list comprehensions is used."},{"lineNumber":1833,"author":{"gitId":"-"},"content":""},{"lineNumber":1834,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-set-comprehension`` which is emitted if for set initialization"},{"lineNumber":1835,"author":{"gitId":"-"},"content":"      the old style with list comprehensions is used."},{"lineNumber":1836,"author":{"gitId":"-"},"content":""},{"lineNumber":1837,"author":{"gitId":"-"},"content":"    * ``logging-not-lazy`` is emitted whenever pylint infers that a string is built with addition"},{"lineNumber":1838,"author":{"gitId":"-"},"content":""},{"lineNumber":1839,"author":{"gitId":"-"},"content":"      Close #2193"},{"lineNumber":1840,"author":{"gitId":"-"},"content":""},{"lineNumber":1841,"author":{"gitId":"-"},"content":"    * Add a check ``chained-comparison`` which is emitted if a boolean operation can be simplified"},{"lineNumber":1842,"author":{"gitId":"-"},"content":"      by chaining some of its operations."},{"lineNumber":1843,"author":{"gitId":"-"},"content":"      e.g \"a \u003c b and b \u003c c\", can be simplified as \"a \u003c b \u003c c\"."},{"lineNumber":1844,"author":{"gitId":"-"},"content":""},{"lineNumber":1845,"author":{"gitId":"-"},"content":"      Close #2032"},{"lineNumber":1846,"author":{"gitId":"-"},"content":""},{"lineNumber":1847,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-in`` for comparisons of a variable against"},{"lineNumber":1848,"author":{"gitId":"-"},"content":"      multiple values with \"\u003d\u003d\" and \"or\"s instead of checking if the variable"},{"lineNumber":1849,"author":{"gitId":"-"},"content":"      is contained \"in\" a tuple of those values."},{"lineNumber":1850,"author":{"gitId":"-"},"content":""},{"lineNumber":1851,"author":{"gitId":"-"},"content":"    * ``in`` is considered iterating context for some of the Python 3 porting checkers"},{"lineNumber":1852,"author":{"gitId":"-"},"content":""},{"lineNumber":1853,"author":{"gitId":"-"},"content":"      Close #2186"},{"lineNumber":1854,"author":{"gitId":"-"},"content":""},{"lineNumber":1855,"author":{"gitId":"-"},"content":"    * Add ``--ignore-none`` flag to control if pylint should warn about ``no-member`` where the owner is None"},{"lineNumber":1856,"author":{"gitId":"-"},"content":""},{"lineNumber":1857,"author":{"gitId":"-"},"content":"    * Fix a false positive related to ``too-many-arguments`` and bounded ``__get__`` methods"},{"lineNumber":1858,"author":{"gitId":"-"},"content":""},{"lineNumber":1859,"author":{"gitId":"-"},"content":"      Close #2172"},{"lineNumber":1860,"author":{"gitId":"-"},"content":""},{"lineNumber":1861,"author":{"gitId":"-"},"content":"    * ``mcs`` as the first parameter of metaclass\u0027s ``__new__`` method was replaced by ``cls``"},{"lineNumber":1862,"author":{"gitId":"-"},"content":""},{"lineNumber":1863,"author":{"gitId":"-"},"content":"      Close #2028"},{"lineNumber":1864,"author":{"gitId":"-"},"content":""},{"lineNumber":1865,"author":{"gitId":"-"},"content":"    * ``assignment-from-no-return`` considers methods as well."},{"lineNumber":1866,"author":{"gitId":"-"},"content":""},{"lineNumber":1867,"author":{"gitId":"-"},"content":"       Close #2081"},{"lineNumber":1868,"author":{"gitId":"-"},"content":""},{"lineNumber":1869,"author":{"gitId":"-"},"content":"    * Support typing.TYPE_CHECKING for *unused-import* errors"},{"lineNumber":1870,"author":{"gitId":"-"},"content":""},{"lineNumber":1871,"author":{"gitId":"-"},"content":"      Close #1948"},{"lineNumber":1872,"author":{"gitId":"-"},"content":""},{"lineNumber":1873,"author":{"gitId":"-"},"content":"    * Inferred classes at a function level no longer emit ``invalid-name``"},{"lineNumber":1874,"author":{"gitId":"-"},"content":"      when they don\u0027t respect the variable regular expression"},{"lineNumber":1875,"author":{"gitId":"-"},"content":""},{"lineNumber":1876,"author":{"gitId":"-"},"content":"      Close #1049"},{"lineNumber":1877,"author":{"gitId":"-"},"content":""},{"lineNumber":1878,"author":{"gitId":"-"},"content":"    * Added basic support for postponed evaluation of function annotations."},{"lineNumber":1879,"author":{"gitId":"-"},"content":""},{"lineNumber":1880,"author":{"gitId":"-"},"content":"      Close #2069"},{"lineNumber":1881,"author":{"gitId":"-"},"content":""},{"lineNumber":1882,"author":{"gitId":"-"},"content":"    * Fix a bug with ``missing-kwoa`` and variadics parameters"},{"lineNumber":1883,"author":{"gitId":"-"},"content":""},{"lineNumber":1884,"author":{"gitId":"-"},"content":"      Close #1111"},{"lineNumber":1885,"author":{"gitId":"-"},"content":""},{"lineNumber":1886,"author":{"gitId":"-"},"content":"    * ``simplifiable-if-statement`` takes in account only when assigning to same targets"},{"lineNumber":1887,"author":{"gitId":"-"},"content":""},{"lineNumber":1888,"author":{"gitId":"-"},"content":"       Close #1984"},{"lineNumber":1889,"author":{"gitId":"-"},"content":""},{"lineNumber":1890,"author":{"gitId":"-"},"content":"    * Make ``len-as-condition`` test more cases, such as ``len() \u003c 1`` or ``len \u003c\u003d 0``"},{"lineNumber":1891,"author":{"gitId":"-"},"content":""},{"lineNumber":1892,"author":{"gitId":"-"},"content":"    * Fix false-positive ``line-too-long`` message emission for"},{"lineNumber":1893,"author":{"gitId":"-"},"content":"      commented line at the end of a module"},{"lineNumber":1894,"author":{"gitId":"-"},"content":""},{"lineNumber":1895,"author":{"gitId":"-"},"content":"      Close #1950"},{"lineNumber":1896,"author":{"gitId":"-"},"content":""},{"lineNumber":1897,"author":{"gitId":"-"},"content":"    * Fix false-positive ``bad-continuation`` for with statements"},{"lineNumber":1898,"author":{"gitId":"-"},"content":""},{"lineNumber":1899,"author":{"gitId":"-"},"content":"      Close #461"},{"lineNumber":1900,"author":{"gitId":"-"},"content":""},{"lineNumber":1901,"author":{"gitId":"-"},"content":"    * Don\u0027t warn about ``stop-iteration-return`` when using ``next()`` over ``itertools.count``"},{"lineNumber":1902,"author":{"gitId":"-"},"content":""},{"lineNumber":1903,"author":{"gitId":"-"},"content":"      Close #2158"},{"lineNumber":1904,"author":{"gitId":"-"},"content":""},{"lineNumber":1905,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-get`` for unidiomatic usage of value/default-retrieval"},{"lineNumber":1906,"author":{"gitId":"-"},"content":"      for a key from a dictionary"},{"lineNumber":1907,"author":{"gitId":"-"},"content":""},{"lineNumber":1908,"author":{"gitId":"-"},"content":"      Close #2076"},{"lineNumber":1909,"author":{"gitId":"-"},"content":""},{"lineNumber":1910,"author":{"gitId":"-"},"content":"    * invalid-slice-index is not emitted when the slice is used as index for a complex object."},{"lineNumber":1911,"author":{"gitId":"-"},"content":""},{"lineNumber":1912,"author":{"gitId":"-"},"content":"      We only use a handful of known objects (list, set and friends) to figure out if"},{"lineNumber":1913,"author":{"gitId":"-"},"content":"      we should emit invalid-slice-index when the slice is used to subscript an object."},{"lineNumber":1914,"author":{"gitId":"-"},"content":""},{"lineNumber":1915,"author":{"gitId":"-"},"content":"    * Don\u0027t emit ``unused-import`` anymore for typing imports used in type comments."},{"lineNumber":1916,"author":{"gitId":"-"},"content":""},{"lineNumber":1917,"author":{"gitId":"-"},"content":"    * Add a new check \u0027useless-import-alias\u0027."},{"lineNumber":1918,"author":{"gitId":"-"},"content":""},{"lineNumber":1919,"author":{"gitId":"-"},"content":"      Close #2052"},{"lineNumber":1920,"author":{"gitId":"-"},"content":""},{"lineNumber":1921,"author":{"gitId":"-"},"content":"    * Add ``comparison-with-callable`` to warn for comparison with bare callable, without calling it."},{"lineNumber":1922,"author":{"gitId":"-"},"content":""},{"lineNumber":1923,"author":{"gitId":"-"},"content":"      Close #2082"},{"lineNumber":1924,"author":{"gitId":"-"},"content":""},{"lineNumber":1925,"author":{"gitId":"-"},"content":"    * Don\u0027t warn for ``missing-type-doc`` and/or ``missing-return-type-doc``, if type"},{"lineNumber":1926,"author":{"gitId":"-"},"content":"      annotations exist on the function signature for a parameter and/or return type."},{"lineNumber":1927,"author":{"gitId":"-"},"content":"      Close #2083"},{"lineNumber":1928,"author":{"gitId":"-"},"content":""},{"lineNumber":1929,"author":{"gitId":"-"},"content":"    * Add ``--exit-zero`` option for continuous integration scripts to more"},{"lineNumber":1930,"author":{"gitId":"-"},"content":"      easily call Pylint in environments that abort when a program returns a"},{"lineNumber":1931,"author":{"gitId":"-"},"content":"      non-zero (error) status code."},{"lineNumber":1932,"author":{"gitId":"-"},"content":""},{"lineNumber":1933,"author":{"gitId":"-"},"content":"      Close #2042"},{"lineNumber":1934,"author":{"gitId":"-"},"content":""},{"lineNumber":1935,"author":{"gitId":"-"},"content":"    * Warn if the first argument of an instance/ class method gets assigned"},{"lineNumber":1936,"author":{"gitId":"-"},"content":""},{"lineNumber":1937,"author":{"gitId":"-"},"content":"      Close #977"},{"lineNumber":1938,"author":{"gitId":"-"},"content":""},{"lineNumber":1939,"author":{"gitId":"-"},"content":"    * New check ``comparison-with-itself`` to check comparison between same value."},{"lineNumber":1940,"author":{"gitId":"-"},"content":""},{"lineNumber":1941,"author":{"gitId":"-"},"content":"      Close #2051"},{"lineNumber":1942,"author":{"gitId":"-"},"content":""},{"lineNumber":1943,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027logging-fstring-interpolation\u0027, emitted when f-string"},{"lineNumber":1944,"author":{"gitId":"-"},"content":"      is used within logging function calls."},{"lineNumber":1945,"author":{"gitId":"-"},"content":""},{"lineNumber":1946,"author":{"gitId":"-"},"content":"      Close #1998"},{"lineNumber":1947,"author":{"gitId":"-"},"content":""},{"lineNumber":1948,"author":{"gitId":"-"},"content":"    * Don\u0027t show \u0027useless-super-delegation\u0027 if the subclass method has different type annotations."},{"lineNumber":1949,"author":{"gitId":"-"},"content":""},{"lineNumber":1950,"author":{"gitId":"-"},"content":"      Close #1923"},{"lineNumber":1951,"author":{"gitId":"-"},"content":""},{"lineNumber":1952,"author":{"gitId":"-"},"content":"    * Add ``unhashable-dict-key`` check."},{"lineNumber":1953,"author":{"gitId":"-"},"content":""},{"lineNumber":1954,"author":{"gitId":"-"},"content":"      Closes #586"},{"lineNumber":1955,"author":{"gitId":"-"},"content":""},{"lineNumber":1956,"author":{"gitId":"-"},"content":"    * Don\u0027t warn that a global variable is unused if it is defined by an import"},{"lineNumber":1957,"author":{"gitId":"-"},"content":""},{"lineNumber":1958,"author":{"gitId":"-"},"content":"      Close #1453"},{"lineNumber":1959,"author":{"gitId":"-"},"content":""},{"lineNumber":1960,"author":{"gitId":"-"},"content":"    * Skip wildcard import check for ``__init__.py``."},{"lineNumber":1961,"author":{"gitId":"-"},"content":""},{"lineNumber":1962,"author":{"gitId":"-"},"content":"      Close #2026"},{"lineNumber":1963,"author":{"gitId":"-"},"content":""},{"lineNumber":1964,"author":{"gitId":"-"},"content":"    * The Python 3 porting mode can now run with Python 3 as well."},{"lineNumber":1965,"author":{"gitId":"-"},"content":""},{"lineNumber":1966,"author":{"gitId":"-"},"content":"    * ``too-few-public-methods`` is not emitted for dataclasses."},{"lineNumber":1967,"author":{"gitId":"-"},"content":""},{"lineNumber":1968,"author":{"gitId":"-"},"content":"       Close #1793"},{"lineNumber":1969,"author":{"gitId":"-"},"content":""},{"lineNumber":1970,"author":{"gitId":"-"},"content":"    * New verbose mode option, enabled with ``--verbose`` command line flag, to"},{"lineNumber":1971,"author":{"gitId":"-"},"content":"      display of extra non-checker-related output. It is disabled by default."},{"lineNumber":1972,"author":{"gitId":"-"},"content":""},{"lineNumber":1973,"author":{"gitId":"-"},"content":"      Close #1863"},{"lineNumber":1974,"author":{"gitId":"-"},"content":""},{"lineNumber":1975,"author":{"gitId":"-"},"content":"    * ``undefined-loop-variable`` takes in consideration non-empty iterred objects before emitting"},{"lineNumber":1976,"author":{"gitId":"-"},"content":""},{"lineNumber":1977,"author":{"gitId":"-"},"content":"      Close #2039"},{"lineNumber":1978,"author":{"gitId":"-"},"content":""},{"lineNumber":1979,"author":{"gitId":"-"},"content":"    * Add support for numpydoc optional return value names."},{"lineNumber":1980,"author":{"gitId":"-"},"content":""},{"lineNumber":1981,"author":{"gitId":"-"},"content":"      Close #2030"},{"lineNumber":1982,"author":{"gitId":"-"},"content":""},{"lineNumber":1983,"author":{"gitId":"-"},"content":"    * ``singleton-comparison`` accounts for negative checks"},{"lineNumber":1984,"author":{"gitId":"-"},"content":""},{"lineNumber":1985,"author":{"gitId":"-"},"content":"      Close #2037"},{"lineNumber":1986,"author":{"gitId":"-"},"content":""},{"lineNumber":1987,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-in`` for comparisons of a variable against"},{"lineNumber":1988,"author":{"gitId":"-"},"content":"      multiple values with \"\u003d\u003d\" and \"or\"s instead of checking if the variable"},{"lineNumber":1989,"author":{"gitId":"-"},"content":"      is contained \"in\" a tuple of those values."},{"lineNumber":1990,"author":{"gitId":"-"},"content":""},{"lineNumber":1991,"author":{"gitId":"-"},"content":"      Close #1977"},{"lineNumber":1992,"author":{"gitId":"-"},"content":""},{"lineNumber":1993,"author":{"gitId":"-"},"content":"    * defaultdict and subclasses of dict are now handled for dict-iter-* checks"},{"lineNumber":1994,"author":{"gitId":"-"},"content":""},{"lineNumber":1995,"author":{"gitId":"-"},"content":"      Close #2005"},{"lineNumber":1996,"author":{"gitId":"-"},"content":""},{"lineNumber":1997,"author":{"gitId":"-"},"content":"    * ``logging-format-interpolation`` also emits when f-strings are used instead of % syntax."},{"lineNumber":1998,"author":{"gitId":"-"},"content":""},{"lineNumber":1999,"author":{"gitId":"-"},"content":"      Close #1788"},{"lineNumber":2000,"author":{"gitId":"-"},"content":""},{"lineNumber":2001,"author":{"gitId":"-"},"content":"    * Don\u0027t trigger misplaced-bare-raise when the raise is in a finally clause"},{"lineNumber":2002,"author":{"gitId":"-"},"content":""},{"lineNumber":2003,"author":{"gitId":"-"},"content":"      Close #1924"},{"lineNumber":2004,"author":{"gitId":"-"},"content":""},{"lineNumber":2005,"author":{"gitId":"-"},"content":"    * Add a new check, ``possibly-unused-variable``."},{"lineNumber":2006,"author":{"gitId":"-"},"content":""},{"lineNumber":2007,"author":{"gitId":"-"},"content":"      This is similar to ``unused-variable``, the only difference is that it is"},{"lineNumber":2008,"author":{"gitId":"-"},"content":"      emitted when we detect a locals() call in the scope of the unused variable."},{"lineNumber":2009,"author":{"gitId":"-"},"content":"      The ``locals()`` call could potentially use the said variable, by consuming"},{"lineNumber":2010,"author":{"gitId":"-"},"content":"      all values that are present up to the point of the call. This new check"},{"lineNumber":2011,"author":{"gitId":"-"},"content":"      allows to disable this error when the user intentionally uses ``locals()``"},{"lineNumber":2012,"author":{"gitId":"-"},"content":"      to consume everything."},{"lineNumber":2013,"author":{"gitId":"-"},"content":""},{"lineNumber":2014,"author":{"gitId":"-"},"content":"      Close #1909."},{"lineNumber":2015,"author":{"gitId":"-"},"content":""},{"lineNumber":2016,"author":{"gitId":"-"},"content":"    * ``no-else-return`` accounts for multiple cases"},{"lineNumber":2017,"author":{"gitId":"-"},"content":""},{"lineNumber":2018,"author":{"gitId":"-"},"content":"       The check was a bit overrestrictive because we were checking for"},{"lineNumber":2019,"author":{"gitId":"-"},"content":"       return nodes in the .orelse node. At that point though the if statement"},{"lineNumber":2020,"author":{"gitId":"-"},"content":"       can be refactored to not have the orelse. This improves the detection of"},{"lineNumber":2021,"author":{"gitId":"-"},"content":"       other cases, for instance it now detects TryExcept nodes that are part of"},{"lineNumber":2022,"author":{"gitId":"-"},"content":"       the .else branch."},{"lineNumber":2023,"author":{"gitId":"-"},"content":""},{"lineNumber":2024,"author":{"gitId":"-"},"content":"       Close #1852"},{"lineNumber":2025,"author":{"gitId":"-"},"content":""},{"lineNumber":2026,"author":{"gitId":"-"},"content":"    * Added two new checks, ``invalid-envvar-value`` and ``invalid-envvar-default``."},{"lineNumber":2027,"author":{"gitId":"-"},"content":""},{"lineNumber":2028,"author":{"gitId":"-"},"content":"      The former is trigger whenever pylint detects that environment variable manipulation"},{"lineNumber":2029,"author":{"gitId":"-"},"content":"      functions uses a different type than strings, while the latter is emitted whenever"},{"lineNumber":2030,"author":{"gitId":"-"},"content":"      the said functions are using a default variable of different type than expected."},{"lineNumber":2031,"author":{"gitId":"-"},"content":""},{"lineNumber":2032,"author":{"gitId":"-"},"content":"    * Add a check ``consider-using-join`` for concatenation of strings using str.join(sequence)"},{"lineNumber":2033,"author":{"gitId":"-"},"content":""},{"lineNumber":2034,"author":{"gitId":"-"},"content":"      Close #1952"},{"lineNumber":2035,"author":{"gitId":"-"},"content":""},{"lineNumber":2036,"author":{"gitId":"-"},"content":"    * Add a check ``consider-swap-variables`` for swapping variables with tuple unpacking"},{"lineNumber":2037,"author":{"gitId":"-"},"content":""},{"lineNumber":2038,"author":{"gitId":"-"},"content":"      Close #1922"},{"lineNumber":2039,"author":{"gitId":"-"},"content":""},{"lineNumber":2040,"author":{"gitId":"-"},"content":"    * Add new checker ``try-except-raise`` that warns the user if an except handler block"},{"lineNumber":2041,"author":{"gitId":"-"},"content":"      has a ``raise`` statement as its first operator. The warning is shown when there is"},{"lineNumber":2042,"author":{"gitId":"-"},"content":"      a bare raise statement, effectively re-raising the exception that was caught or the"},{"lineNumber":2043,"author":{"gitId":"-"},"content":"      type of the exception being raised is the same as the one being handled."},{"lineNumber":2044,"author":{"gitId":"-"},"content":""},{"lineNumber":2045,"author":{"gitId":"-"},"content":"    * Don\u0027t crash on invalid strings when checking for ``logging-format-interpolation``"},{"lineNumber":2046,"author":{"gitId":"-"},"content":""},{"lineNumber":2047,"author":{"gitId":"-"},"content":"      Close #1944"},{"lineNumber":2048,"author":{"gitId":"-"},"content":""},{"lineNumber":2049,"author":{"gitId":"-"},"content":"    * Exempt ``__doc__`` from triggering a ``redefined-builtin``"},{"lineNumber":2050,"author":{"gitId":"-"},"content":""},{"lineNumber":2051,"author":{"gitId":"-"},"content":"      ``__doc__`` can be used to specify a docstring for a module without"},{"lineNumber":2052,"author":{"gitId":"-"},"content":"      passing it as a first-statement string."},{"lineNumber":2053,"author":{"gitId":"-"},"content":""},{"lineNumber":2054,"author":{"gitId":"-"},"content":"    * Fix false positive bad-whitespace from function arguments with default"},{"lineNumber":2055,"author":{"gitId":"-"},"content":"      values and annotations"},{"lineNumber":2056,"author":{"gitId":"-"},"content":""},{"lineNumber":2057,"author":{"gitId":"-"},"content":"      Close #1831"},{"lineNumber":2058,"author":{"gitId":"-"},"content":""},{"lineNumber":2059,"author":{"gitId":"-"},"content":"    * Fix stop-iteration-return false positive when next builtin has a"},{"lineNumber":2060,"author":{"gitId":"-"},"content":"      default value in a generator"},{"lineNumber":2061,"author":{"gitId":"-"},"content":""},{"lineNumber":2062,"author":{"gitId":"-"},"content":"      Close #1830"},{"lineNumber":2063,"author":{"gitId":"-"},"content":""},{"lineNumber":2064,"author":{"gitId":"-"},"content":"    * Fix emission of false positive ``no-member`` message for class with  \"private\" attributes whose name is mangled."},{"lineNumber":2065,"author":{"gitId":"-"},"content":""},{"lineNumber":2066,"author":{"gitId":"-"},"content":"      Close #1643"},{"lineNumber":2067,"author":{"gitId":"-"},"content":""},{"lineNumber":2068,"author":{"gitId":"-"},"content":"    * Fixed a crash which occurred when ``Uninferable`` wasn\u0027t properly handled in ``stop-iteration-return``"},{"lineNumber":2069,"author":{"gitId":"-"},"content":""},{"lineNumber":2070,"author":{"gitId":"-"},"content":"      Close #1779"},{"lineNumber":2071,"author":{"gitId":"-"},"content":""},{"lineNumber":2072,"author":{"gitId":"-"},"content":"    * Use the proper node to get the name for redefined functions (#1792)"},{"lineNumber":2073,"author":{"gitId":"-"},"content":""},{"lineNumber":2074,"author":{"gitId":"-"},"content":"      Close #1774"},{"lineNumber":2075,"author":{"gitId":"-"},"content":""},{"lineNumber":2076,"author":{"gitId":"-"},"content":"    * Don\u0027t crash when encountering bare raises while checking inconsistent returns"},{"lineNumber":2077,"author":{"gitId":"-"},"content":""},{"lineNumber":2078,"author":{"gitId":"-"},"content":"      Close #1773"},{"lineNumber":2079,"author":{"gitId":"-"},"content":""},{"lineNumber":2080,"author":{"gitId":"-"},"content":"    * Fix a false positive ``inconsistent-return-statements`` message when if statement is inside try/except."},{"lineNumber":2081,"author":{"gitId":"-"},"content":""},{"lineNumber":2082,"author":{"gitId":"-"},"content":"      Close #1770"},{"lineNumber":2083,"author":{"gitId":"-"},"content":""},{"lineNumber":2084,"author":{"gitId":"-"},"content":"    * Fix a false positive ``inconsistent-return-statements`` message when while loop are used."},{"lineNumber":2085,"author":{"gitId":"-"},"content":""},{"lineNumber":2086,"author":{"gitId":"-"},"content":"      Close #1772"},{"lineNumber":2087,"author":{"gitId":"-"},"content":""},{"lineNumber":2088,"author":{"gitId":"-"},"content":"    * Correct column number for whitespace conventions."},{"lineNumber":2089,"author":{"gitId":"-"},"content":""},{"lineNumber":2090,"author":{"gitId":"-"},"content":"      Previously the column was stuck at 0"},{"lineNumber":2091,"author":{"gitId":"-"},"content":""},{"lineNumber":2092,"author":{"gitId":"-"},"content":"      Close #1649"},{"lineNumber":2093,"author":{"gitId":"-"},"content":""},{"lineNumber":2094,"author":{"gitId":"-"},"content":"    * Fix ``unused-argument`` false positives with overshadowed variable in"},{"lineNumber":2095,"author":{"gitId":"-"},"content":"      dictionary comprehension."},{"lineNumber":2096,"author":{"gitId":"-"},"content":""},{"lineNumber":2097,"author":{"gitId":"-"},"content":"      Close #1731"},{"lineNumber":2098,"author":{"gitId":"-"},"content":""},{"lineNumber":2099,"author":{"gitId":"-"},"content":"    * Fix false positive ``inconsistent-return-statements`` message when never"},{"lineNumber":2100,"author":{"gitId":"-"},"content":"      returning functions are used (i.e sys.exit for example)."},{"lineNumber":2101,"author":{"gitId":"-"},"content":""},{"lineNumber":2102,"author":{"gitId":"-"},"content":"      Close #1771"},{"lineNumber":2103,"author":{"gitId":"-"},"content":""},{"lineNumber":2104,"author":{"gitId":"-"},"content":"    * Fix error when checking if function is exception, as in ``bad-exception-context``."},{"lineNumber":2105,"author":{"gitId":"-"},"content":""},{"lineNumber":2106,"author":{"gitId":"-"},"content":"    * Fix false positive ``inconsistent-return-statements`` message when a"},{"lineNumber":2107,"author":{"gitId":"-"},"content":"      function is defined under an if statement."},{"lineNumber":2108,"author":{"gitId":"-"},"content":""},{"lineNumber":2109,"author":{"gitId":"-"},"content":"      Close #1794"},{"lineNumber":2110,"author":{"gitId":"-"},"content":""},{"lineNumber":2111,"author":{"gitId":"-"},"content":"    * New ``useless-return`` message when function or method ends with a \"return\" or"},{"lineNumber":2112,"author":{"gitId":"-"},"content":"      \"return None\" statement and this is the only return statement in the body."},{"lineNumber":2113,"author":{"gitId":"-"},"content":""},{"lineNumber":2114,"author":{"gitId":"-"},"content":"    * Fix false positive ``inconsistent-return-statements`` message by"},{"lineNumber":2115,"author":{"gitId":"-"},"content":"      avoiding useless exception inference if the exception is not handled."},{"lineNumber":2116,"author":{"gitId":"-"},"content":""},{"lineNumber":2117,"author":{"gitId":"-"},"content":"      Close #1794 (second part)"},{"lineNumber":2118,"author":{"gitId":"-"},"content":""},{"lineNumber":2119,"author":{"gitId":"-"},"content":"    * Fix bad thread instantiation check when target function is provided in args."},{"lineNumber":2120,"author":{"gitId":"-"},"content":""},{"lineNumber":2121,"author":{"gitId":"-"},"content":"      Close #1840"},{"lineNumber":2122,"author":{"gitId":"-"},"content":""},{"lineNumber":2123,"author":{"gitId":"-"},"content":"    * Fixed false positive when a numpy Attributes section follows a Parameters"},{"lineNumber":2124,"author":{"gitId":"-"},"content":"      section"},{"lineNumber":2125,"author":{"gitId":"-"},"content":""},{"lineNumber":2126,"author":{"gitId":"-"},"content":"      Close #1867"},{"lineNumber":2127,"author":{"gitId":"-"},"content":""},{"lineNumber":2128,"author":{"gitId":"-"},"content":"    * Fix incorrect file path when file absolute path contains multiple ``path_strip_prefix`` strings."},{"lineNumber":2129,"author":{"gitId":"-"},"content":""},{"lineNumber":2130,"author":{"gitId":"-"},"content":"      Close #1120"},{"lineNumber":2131,"author":{"gitId":"-"},"content":""},{"lineNumber":2132,"author":{"gitId":"-"},"content":"    * Fix false positive undefined-variable for lambda argument in class definitions"},{"lineNumber":2133,"author":{"gitId":"-"},"content":""},{"lineNumber":2134,"author":{"gitId":"-"},"content":"      Close #1824"},{"lineNumber":2135,"author":{"gitId":"-"},"content":""},{"lineNumber":2136,"author":{"gitId":"-"},"content":"    * Add of a new checker that warns the user if some messages are enabled or disabled"},{"lineNumber":2137,"author":{"gitId":"-"},"content":"      by id instead of symbol."},{"lineNumber":2138,"author":{"gitId":"-"},"content":""},{"lineNumber":2139,"author":{"gitId":"-"},"content":"      Close #1599"},{"lineNumber":2140,"author":{"gitId":"-"},"content":""},{"lineNumber":2141,"author":{"gitId":"-"},"content":"    * Suppress false-positive ``not-callable`` messages from certain"},{"lineNumber":2142,"author":{"gitId":"-"},"content":"      staticmethod descriptors"},{"lineNumber":2143,"author":{"gitId":"-"},"content":""},{"lineNumber":2144,"author":{"gitId":"-"},"content":"      Close #1699"},{"lineNumber":2145,"author":{"gitId":"-"},"content":""},{"lineNumber":2146,"author":{"gitId":"-"},"content":"    * Fix indentation handling with tabs"},{"lineNumber":2147,"author":{"gitId":"-"},"content":""},{"lineNumber":2148,"author":{"gitId":"-"},"content":"      Close #1148"},{"lineNumber":2149,"author":{"gitId":"-"},"content":""},{"lineNumber":2150,"author":{"gitId":"-"},"content":"    * Fix false-positive ``bad-continuation`` error"},{"lineNumber":2151,"author":{"gitId":"-"},"content":""},{"lineNumber":2152,"author":{"gitId":"-"},"content":"      Close #638"},{"lineNumber":2153,"author":{"gitId":"-"},"content":""},{"lineNumber":2154,"author":{"gitId":"-"},"content":"    * Fix false positive unused-variable in lambda default arguments"},{"lineNumber":2155,"author":{"gitId":"-"},"content":""},{"lineNumber":2156,"author":{"gitId":"-"},"content":"      Close #1921"},{"lineNumber":2157,"author":{"gitId":"-"},"content":"      Close #1552"},{"lineNumber":2158,"author":{"gitId":"-"},"content":"      Close #1099"},{"lineNumber":2159,"author":{"gitId":"-"},"content":"      Close #210"},{"lineNumber":2160,"author":{"gitId":"-"},"content":""},{"lineNumber":2161,"author":{"gitId":"-"},"content":"    * Updated the default report format to include paths that can be clicked on in some terminals (e.g. iTerm)."},{"lineNumber":2162,"author":{"gitId":"-"},"content":""},{"lineNumber":2163,"author":{"gitId":"-"},"content":"    * Fix inline def behavior with ``too-many-statements`` checker"},{"lineNumber":2164,"author":{"gitId":"-"},"content":""},{"lineNumber":2165,"author":{"gitId":"-"},"content":"      Close #1978"},{"lineNumber":2166,"author":{"gitId":"-"},"content":""},{"lineNumber":2167,"author":{"gitId":"-"},"content":"    * Fix ``KeyError`` raised when using docparams and NotImplementedError is documented."},{"lineNumber":2168,"author":{"gitId":"-"},"content":""},{"lineNumber":2169,"author":{"gitId":"-"},"content":"      Close #2102"},{"lineNumber":2170,"author":{"gitId":"-"},"content":""},{"lineNumber":2171,"author":{"gitId":"-"},"content":"    * Fix \u0027method-hidden\u0027 raised when assigning to a property or data descriptor."},{"lineNumber":2172,"author":{"gitId":"-"},"content":""},{"lineNumber":2173,"author":{"gitId":"-"},"content":"    * Fix emitting ``useless-super-delegation`` when changing the default value of keyword arguments."},{"lineNumber":2174,"author":{"gitId":"-"},"content":""},{"lineNumber":2175,"author":{"gitId":"-"},"content":"      Close #2022"},{"lineNumber":2176,"author":{"gitId":"-"},"content":""},{"lineNumber":2177,"author":{"gitId":"-"},"content":"    * Expand ignored-argument-names include starred arguments and keyword arguments"},{"lineNumber":2178,"author":{"gitId":"-"},"content":""},{"lineNumber":2179,"author":{"gitId":"-"},"content":"      Close #2214"},{"lineNumber":2180,"author":{"gitId":"-"},"content":""},{"lineNumber":2181,"author":{"gitId":"-"},"content":"    * Fix false-positive undefined-variable in nested lambda"},{"lineNumber":2182,"author":{"gitId":"-"},"content":""},{"lineNumber":2183,"author":{"gitId":"-"},"content":"      Close #760"},{"lineNumber":2184,"author":{"gitId":"-"},"content":""},{"lineNumber":2185,"author":{"gitId":"-"},"content":"    * Fix false-positive ``bad-whitespace`` message for typing annoatations"},{"lineNumber":2186,"author":{"gitId":"-"},"content":"      with ellipses in them"},{"lineNumber":2187,"author":{"gitId":"-"},"content":""},{"lineNumber":2188,"author":{"gitId":"-"},"content":"      Close 1992"},{"lineNumber":2189,"author":{"gitId":"-"},"content":""},{"lineNumber":2190,"author":{"gitId":"-"},"content":"    * Broke down \"missing-docstrings\" between \"module\", \"class\" and \"function\""},{"lineNumber":2191,"author":{"gitId":"-"},"content":""},{"lineNumber":2192,"author":{"gitId":"-"},"content":"      For this to work we had to make multiple messages with the same old name"},{"lineNumber":2193,"author":{"gitId":"-"},"content":"      possible."},{"lineNumber":2194,"author":{"gitId":"-"},"content":""},{"lineNumber":2195,"author":{"gitId":"-"},"content":"      Closes #1164"},{"lineNumber":2196,"author":{"gitId":"-"},"content":""},{"lineNumber":2197,"author":{"gitId":"-"},"content":""},{"lineNumber":2198,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.9?"},{"lineNumber":2199,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2200,"author":{"gitId":"-"},"content":""},{"lineNumber":2201,"author":{"gitId":"-"},"content":"Release date: 2018-05-15"},{"lineNumber":2202,"author":{"gitId":"-"},"content":""},{"lineNumber":2203,"author":{"gitId":"-"},"content":"    * Added two new Python 3 porting checks, ``exception-escape`` and ``comprehension-escape``"},{"lineNumber":2204,"author":{"gitId":"-"},"content":""},{"lineNumber":2205,"author":{"gitId":"-"},"content":"      These two are emitted whenever pylint detects that a variable defined in the"},{"lineNumber":2206,"author":{"gitId":"-"},"content":"      said blocks is used outside of the given block. On Python 3 these values are deleted."},{"lineNumber":2207,"author":{"gitId":"-"},"content":""},{"lineNumber":2208,"author":{"gitId":"-"},"content":"    * Added a new ``deprecated-sys-function``, emitted when accessing removed sys members."},{"lineNumber":2209,"author":{"gitId":"-"},"content":""},{"lineNumber":2210,"author":{"gitId":"-"},"content":"    * Added ``xreadlines-attribute``, emitted when the ``xreadlines()`` attribute is accessed."},{"lineNumber":2211,"author":{"gitId":"-"},"content":""},{"lineNumber":2212,"author":{"gitId":"-"},"content":"    * The Python 3 porting mode can now run with Python 3 as well."},{"lineNumber":2213,"author":{"gitId":"-"},"content":""},{"lineNumber":2214,"author":{"gitId":"-"},"content":"    * docparams extension allows abstract methods to document what overriding"},{"lineNumber":2215,"author":{"gitId":"-"},"content":"      implementations should return, and to raise NotImplementedError without"},{"lineNumber":2216,"author":{"gitId":"-"},"content":"      documenting it."},{"lineNumber":2217,"author":{"gitId":"-"},"content":""},{"lineNumber":2218,"author":{"gitId":"-"},"content":"      Closes #2044"},{"lineNumber":2219,"author":{"gitId":"-"},"content":""},{"lineNumber":2220,"author":{"gitId":"-"},"content":"    * Special methods do not count towards ``too-few-methods``,"},{"lineNumber":2221,"author":{"gitId":"-"},"content":"      and are considered part of the public API."},{"lineNumber":2222,"author":{"gitId":"-"},"content":""},{"lineNumber":2223,"author":{"gitId":"-"},"content":"    * Enum classes do not trigger ``too-few-methods``"},{"lineNumber":2224,"author":{"gitId":"-"},"content":""},{"lineNumber":2225,"author":{"gitId":"-"},"content":"      Close #605"},{"lineNumber":2226,"author":{"gitId":"-"},"content":""},{"lineNumber":2227,"author":{"gitId":"-"},"content":"    * Added a new Python 2/3 check for accessing ``operator.div``, which is removed in Python 3"},{"lineNumber":2228,"author":{"gitId":"-"},"content":""},{"lineNumber":2229,"author":{"gitId":"-"},"content":"      Close #1936"},{"lineNumber":2230,"author":{"gitId":"-"},"content":""},{"lineNumber":2231,"author":{"gitId":"-"},"content":"    * Added a new Python 2/3 check for accessing removed urllib functions"},{"lineNumber":2232,"author":{"gitId":"-"},"content":""},{"lineNumber":2233,"author":{"gitId":"-"},"content":"      Close #1997"},{"lineNumber":2234,"author":{"gitId":"-"},"content":""},{"lineNumber":2235,"author":{"gitId":"-"},"content":""},{"lineNumber":2236,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.8.1?"},{"lineNumber":2237,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2238,"author":{"gitId":"-"},"content":""},{"lineNumber":2239,"author":{"gitId":"-"},"content":"Release date: 2017-12-15"},{"lineNumber":2240,"author":{"gitId":"-"},"content":""},{"lineNumber":2241,"author":{"gitId":"-"},"content":"    * Wrong version number in __pkginfo__."},{"lineNumber":2242,"author":{"gitId":"-"},"content":""},{"lineNumber":2243,"author":{"gitId":"-"},"content":""},{"lineNumber":2244,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.8?"},{"lineNumber":2245,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2246,"author":{"gitId":"-"},"content":""},{"lineNumber":2247,"author":{"gitId":"-"},"content":"Release date: 2017-12-15"},{"lineNumber":2248,"author":{"gitId":"-"},"content":""},{"lineNumber":2249,"author":{"gitId":"-"},"content":"    * Respect disable\u003d... in config file when running with --py3k."},{"lineNumber":2250,"author":{"gitId":"-"},"content":""},{"lineNumber":2251,"author":{"gitId":"-"},"content":"    * New warning ``shallow-copy-environ`` added"},{"lineNumber":2252,"author":{"gitId":"-"},"content":""},{"lineNumber":2253,"author":{"gitId":"-"},"content":"      Shallow copy of os.environ doesn\u0027t work as people may expect. os.environ"},{"lineNumber":2254,"author":{"gitId":"-"},"content":"      is not a dict object but rather a proxy object, so any changes made"},{"lineNumber":2255,"author":{"gitId":"-"},"content":"      on copy may have unexpected effects on os.environ"},{"lineNumber":2256,"author":{"gitId":"-"},"content":""},{"lineNumber":2257,"author":{"gitId":"-"},"content":"      Instead of copy.copy(os.environ) method os.environ.copy() should be"},{"lineNumber":2258,"author":{"gitId":"-"},"content":"      used."},{"lineNumber":2259,"author":{"gitId":"-"},"content":""},{"lineNumber":2260,"author":{"gitId":"-"},"content":"      See https://bugs.python.org/issue15373 for details."},{"lineNumber":2261,"author":{"gitId":"-"},"content":""},{"lineNumber":2262,"author":{"gitId":"-"},"content":"      Close #1301"},{"lineNumber":2263,"author":{"gitId":"-"},"content":""},{"lineNumber":2264,"author":{"gitId":"-"},"content":"    * Do not display no-absolute-import warning multiple times per file."},{"lineNumber":2265,"author":{"gitId":"-"},"content":""},{"lineNumber":2266,"author":{"gitId":"-"},"content":"    * ``trailing-comma-tuple`` refactor check now extends to assignment with"},{"lineNumber":2267,"author":{"gitId":"-"},"content":"       more than one element (such as lists)"},{"lineNumber":2268,"author":{"gitId":"-"},"content":""},{"lineNumber":2269,"author":{"gitId":"-"},"content":"      Close #1713"},{"lineNumber":2270,"author":{"gitId":"-"},"content":""},{"lineNumber":2271,"author":{"gitId":"-"},"content":"    * Fixing u\u0027\u0027 string in superfluous-parens message"},{"lineNumber":2272,"author":{"gitId":"-"},"content":""},{"lineNumber":2273,"author":{"gitId":"-"},"content":"      Close #1420"},{"lineNumber":2274,"author":{"gitId":"-"},"content":""},{"lineNumber":2275,"author":{"gitId":"-"},"content":"    * ``abstract-class-instantiated`` is now emitted for all inference paths."},{"lineNumber":2276,"author":{"gitId":"-"},"content":""},{"lineNumber":2277,"author":{"gitId":"-"},"content":"       Close #1673"},{"lineNumber":2278,"author":{"gitId":"-"},"content":""},{"lineNumber":2279,"author":{"gitId":"-"},"content":"    * Add set of predefined naming style to ease configuration of checking"},{"lineNumber":2280,"author":{"gitId":"-"},"content":"      naming conventions."},{"lineNumber":2281,"author":{"gitId":"-"},"content":""},{"lineNumber":2282,"author":{"gitId":"-"},"content":"      Closes #1013"},{"lineNumber":2283,"author":{"gitId":"-"},"content":""},{"lineNumber":2284,"author":{"gitId":"-"},"content":"    * Added a new check, ``keyword-arg-before-vararg``"},{"lineNumber":2285,"author":{"gitId":"-"},"content":""},{"lineNumber":2286,"author":{"gitId":"-"},"content":"      This is emitted for function definitions"},{"lineNumber":2287,"author":{"gitId":"-"},"content":"      in which keyword arguments are placed before variable"},{"lineNumber":2288,"author":{"gitId":"-"},"content":"      positional arguments (\\*args)."},{"lineNumber":2289,"author":{"gitId":"-"},"content":""},{"lineNumber":2290,"author":{"gitId":"-"},"content":"      This may lead to args list getting modified if keyword argument\u0027s value"},{"lineNumber":2291,"author":{"gitId":"-"},"content":"      is not provided in the function call assuming it will take default value"},{"lineNumber":2292,"author":{"gitId":"-"},"content":"      provided in the definition."},{"lineNumber":2293,"author":{"gitId":"-"},"content":""},{"lineNumber":2294,"author":{"gitId":"-"},"content":"    * The ``invalid-name`` check contains the name of the template that caused the failure"},{"lineNumber":2295,"author":{"gitId":"-"},"content":""},{"lineNumber":2296,"author":{"gitId":"-"},"content":"      Close #1176"},{"lineNumber":2297,"author":{"gitId":"-"},"content":""},{"lineNumber":2298,"author":{"gitId":"-"},"content":"    * Using the -j flag won\u0027t start more child linters than needed."},{"lineNumber":2299,"author":{"gitId":"-"},"content":""},{"lineNumber":2300,"author":{"gitId":"-"},"content":"      Contributed by Roman Ivanov in #1614"},{"lineNumber":2301,"author":{"gitId":"-"},"content":""},{"lineNumber":2302,"author":{"gitId":"-"},"content":"    * Fix a false positive with bad-python3-import on relative imports"},{"lineNumber":2303,"author":{"gitId":"-"},"content":""},{"lineNumber":2304,"author":{"gitId":"-"},"content":"      Close #1608"},{"lineNumber":2305,"author":{"gitId":"-"},"content":""},{"lineNumber":2306,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check, ``non-ascii-bytes-literals``"},{"lineNumber":2307,"author":{"gitId":"-"},"content":""},{"lineNumber":2308,"author":{"gitId":"-"},"content":"      Close #1545"},{"lineNumber":2309,"author":{"gitId":"-"},"content":""},{"lineNumber":2310,"author":{"gitId":"-"},"content":"    * Added a couple of new Python 3 checks for accessing dict methods in non-iterable context"},{"lineNumber":2311,"author":{"gitId":"-"},"content":""},{"lineNumber":2312,"author":{"gitId":"-"},"content":"    * Protocol checks (not-a-mapping, not-an-iterable and co.) aren\u0027t emitted on classes with dynamic getattr"},{"lineNumber":2313,"author":{"gitId":"-"},"content":""},{"lineNumber":2314,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027bad-thread-instantiation\u0027"},{"lineNumber":2315,"author":{"gitId":"-"},"content":""},{"lineNumber":2316,"author":{"gitId":"-"},"content":"      This message is emitted when the threading.Thread class does not"},{"lineNumber":2317,"author":{"gitId":"-"},"content":"      receive the target argument, but receives just one argument, which"},{"lineNumber":2318,"author":{"gitId":"-"},"content":"      is by default the group parameter."},{"lineNumber":2319,"author":{"gitId":"-"},"content":""},{"lineNumber":2320,"author":{"gitId":"-"},"content":"      Close #1327"},{"lineNumber":2321,"author":{"gitId":"-"},"content":""},{"lineNumber":2322,"author":{"gitId":"-"},"content":"    * In non-quiet mode, absolute path of used config file is logged to"},{"lineNumber":2323,"author":{"gitId":"-"},"content":"      standard error."},{"lineNumber":2324,"author":{"gitId":"-"},"content":"      Close #1519"},{"lineNumber":2325,"author":{"gitId":"-"},"content":""},{"lineNumber":2326,"author":{"gitId":"-"},"content":"    * Raise meaningful exception for invalid reporter class being selected"},{"lineNumber":2327,"author":{"gitId":"-"},"content":""},{"lineNumber":2328,"author":{"gitId":"-"},"content":"      When unknown reporter class will be selected as Pylint reporter,"},{"lineNumber":2329,"author":{"gitId":"-"},"content":"      meaningful error message would be raised instead of bare ``ImportError``"},{"lineNumber":2330,"author":{"gitId":"-"},"content":"      or ``AttribueError`` related to module or reporter class being not found."},{"lineNumber":2331,"author":{"gitId":"-"},"content":"      Close #1388"},{"lineNumber":2332,"author":{"gitId":"-"},"content":""},{"lineNumber":2333,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for accessing removed functions from itertools"},{"lineNumber":2334,"author":{"gitId":"-"},"content":"      like ``izip`` or ``ifilterfalse``"},{"lineNumber":2335,"author":{"gitId":"-"},"content":""},{"lineNumber":2336,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for accessing removed fields from the types"},{"lineNumber":2337,"author":{"gitId":"-"},"content":"      module like ``UnicodeType`` or ``XRangeType``"},{"lineNumber":2338,"author":{"gitId":"-"},"content":""},{"lineNumber":2339,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for declaring a method ``next`` that would have"},{"lineNumber":2340,"author":{"gitId":"-"},"content":"      been treated as an iterator in Python 2 but a normal function in Python 3."},{"lineNumber":2341,"author":{"gitId":"-"},"content":""},{"lineNumber":2342,"author":{"gitId":"-"},"content":"    * Added a new key-value pair in json output. The key is ``message-id``"},{"lineNumber":2343,"author":{"gitId":"-"},"content":"      and the value is the message id."},{"lineNumber":2344,"author":{"gitId":"-"},"content":"      Close #1512"},{"lineNumber":2345,"author":{"gitId":"-"},"content":""},{"lineNumber":2346,"author":{"gitId":"-"},"content":"    * Added a new Python 3.0 check for raising a StopIteration inside a generator."},{"lineNumber":2347,"author":{"gitId":"-"},"content":"      The check about raising a StopIteration inside a generator is also valid if the exception"},{"lineNumber":2348,"author":{"gitId":"-"},"content":"      raised inherit from StopIteration."},{"lineNumber":2349,"author":{"gitId":"-"},"content":"      Close #1385"},{"lineNumber":2350,"author":{"gitId":"-"},"content":""},{"lineNumber":2351,"author":{"gitId":"-"},"content":"    * Added a new warning, ``raising-format-tuple``, to detect multi-argument"},{"lineNumber":2352,"author":{"gitId":"-"},"content":"      exception construction instead of message string formatting."},{"lineNumber":2353,"author":{"gitId":"-"},"content":""},{"lineNumber":2354,"author":{"gitId":"-"},"content":"    * Added a new check for method of logging module that concatenate string via + operator"},{"lineNumber":2355,"author":{"gitId":"-"},"content":"      Close #1479"},{"lineNumber":2356,"author":{"gitId":"-"},"content":""},{"lineNumber":2357,"author":{"gitId":"-"},"content":"    * Added parameter for limiting number of suggestions in spellchecking checkers"},{"lineNumber":2358,"author":{"gitId":"-"},"content":""},{"lineNumber":2359,"author":{"gitId":"-"},"content":"    * Fix a corner-case in ``consider-using-ternary`` checker."},{"lineNumber":2360,"author":{"gitId":"-"},"content":""},{"lineNumber":2361,"author":{"gitId":"-"},"content":"      When object ``A`` used in  ``X and A or B`` was falsy in boolean context,"},{"lineNumber":2362,"author":{"gitId":"-"},"content":"      Pylint incorrectly emitted non-equivalent ternary-based suggestion."},{"lineNumber":2363,"author":{"gitId":"-"},"content":"      After a change message is correctly not emitted for this case."},{"lineNumber":2364,"author":{"gitId":"-"},"content":"      Close #1559"},{"lineNumber":2365,"author":{"gitId":"-"},"content":""},{"lineNumber":2366,"author":{"gitId":"-"},"content":"    * Added ``suggestion-mode`` configuration flag. When flag is enabled, informational"},{"lineNumber":2367,"author":{"gitId":"-"},"content":"      message is emitted instead of cryptic error message for attributes accessed on"},{"lineNumber":2368,"author":{"gitId":"-"},"content":"      c-extensions."},{"lineNumber":2369,"author":{"gitId":"-"},"content":"      Close #1466"},{"lineNumber":2370,"author":{"gitId":"-"},"content":""},{"lineNumber":2371,"author":{"gitId":"-"},"content":"    * Fix a false positive ``useless-super-delegation`` message when"},{"lineNumber":2372,"author":{"gitId":"-"},"content":"      parameters default values are different from those used in the base class."},{"lineNumber":2373,"author":{"gitId":"-"},"content":"      Close #1085"},{"lineNumber":2374,"author":{"gitId":"-"},"content":""},{"lineNumber":2375,"author":{"gitId":"-"},"content":"    * Disabling \u0027wrong-import-order\u0027, \u0027wrong-import-position\u0027, or"},{"lineNumber":2376,"author":{"gitId":"-"},"content":"      \u0027ungrouped-imports\u0027 for a single line now prevents that line from"},{"lineNumber":2377,"author":{"gitId":"-"},"content":"      triggering violations on subsequent lines."},{"lineNumber":2378,"author":{"gitId":"-"},"content":""},{"lineNumber":2379,"author":{"gitId":"-"},"content":"      Close #1336"},{"lineNumber":2380,"author":{"gitId":"-"},"content":""},{"lineNumber":2381,"author":{"gitId":"-"},"content":"    * Added a new Python check for inconsistent return statements inside method or function."},{"lineNumber":2382,"author":{"gitId":"-"},"content":"      Close #1267"},{"lineNumber":2383,"author":{"gitId":"-"},"content":""},{"lineNumber":2384,"author":{"gitId":"-"},"content":"    * Fix ``superfluous-parens`` false positive related to handling logical statements"},{"lineNumber":2385,"author":{"gitId":"-"},"content":"      involving ``in`` operator."},{"lineNumber":2386,"author":{"gitId":"-"},"content":""},{"lineNumber":2387,"author":{"gitId":"-"},"content":"      Close #574"},{"lineNumber":2388,"author":{"gitId":"-"},"content":""},{"lineNumber":2389,"author":{"gitId":"-"},"content":"    * ``function-redefined`` message is no longer emitted for functions and"},{"lineNumber":2390,"author":{"gitId":"-"},"content":"      methods which names matches dummy variable name regular expression."},{"lineNumber":2391,"author":{"gitId":"-"},"content":"      Close #1369"},{"lineNumber":2392,"author":{"gitId":"-"},"content":""},{"lineNumber":2393,"author":{"gitId":"-"},"content":"    * Fix ``missing-param-doc`` and ``missing-type-doc`` false positives when"},{"lineNumber":2394,"author":{"gitId":"-"},"content":"      mixing ``Args`` and ``Keyword Args`` in Google docstring."},{"lineNumber":2395,"author":{"gitId":"-"},"content":"      Close #1409"},{"lineNumber":2396,"author":{"gitId":"-"},"content":""},{"lineNumber":2397,"author":{"gitId":"-"},"content":"     * Fix ``missing-docstring`` false negatives when modules, classes, or methods"},{"lineNumber":2398,"author":{"gitId":"-"},"content":"       consist of compound statements that exceed the ``docstring-min-length``"},{"lineNumber":2399,"author":{"gitId":"-"},"content":""},{"lineNumber":2400,"author":{"gitId":"-"},"content":"    * Fix ``useless-else-on-loop`` false positives when break statements are"},{"lineNumber":2401,"author":{"gitId":"-"},"content":"      deeply nested inside loop."},{"lineNumber":2402,"author":{"gitId":"-"},"content":"      Close #1661"},{"lineNumber":2403,"author":{"gitId":"-"},"content":""},{"lineNumber":2404,"author":{"gitId":"-"},"content":"    * Fix no ``wrong-import-order`` message emitted on ordering of first and third party"},{"lineNumber":2405,"author":{"gitId":"-"},"content":"      libraries. With this fix, pylint distinguishes third and first party"},{"lineNumber":2406,"author":{"gitId":"-"},"content":"      modules when checking import order."},{"lineNumber":2407,"author":{"gitId":"-"},"content":"      Close #1702"},{"lineNumber":2408,"author":{"gitId":"-"},"content":""},{"lineNumber":2409,"author":{"gitId":"-"},"content":"    * Fix ``pylint disable\u003dfixme`` directives ignored for comments following the"},{"lineNumber":2410,"author":{"gitId":"-"},"content":"      last statement in a file."},{"lineNumber":2411,"author":{"gitId":"-"},"content":"      Close #1681"},{"lineNumber":2412,"author":{"gitId":"-"},"content":""},{"lineNumber":2413,"author":{"gitId":"-"},"content":"    * Fix ``line-too-long`` message deactivated by wrong disable directive."},{"lineNumber":2414,"author":{"gitId":"-"},"content":"      The directive ``disable\u003dfixme`` doesn\u0027t deactivate anymore the emission"},{"lineNumber":2415,"author":{"gitId":"-"},"content":"      of ``line-too-long`` message for long commented lines."},{"lineNumber":2416,"author":{"gitId":"-"},"content":"      Close #1741"},{"lineNumber":2417,"author":{"gitId":"-"},"content":""},{"lineNumber":2418,"author":{"gitId":"-"},"content":"    * If the rcfile specified on the command line doesn\u0027t exist, then an"},{"lineNumber":2419,"author":{"gitId":"-"},"content":"      IOError exception is raised."},{"lineNumber":2420,"author":{"gitId":"-"},"content":"      Close #1747"},{"lineNumber":2421,"author":{"gitId":"-"},"content":""},{"lineNumber":2422,"author":{"gitId":"-"},"content":"    * Fix the wrong scope of the ``disable\u003d`` directive after a commented line."},{"lineNumber":2423,"author":{"gitId":"-"},"content":"      For example when a ``disable\u003dline-too-long`` directive is at the end of"},{"lineNumber":2424,"author":{"gitId":"-"},"content":"      a long commented line, it no longer disables the emission of ``line-too-long``"},{"lineNumber":2425,"author":{"gitId":"-"},"content":"      message for lines that follow."},{"lineNumber":2426,"author":{"gitId":"-"},"content":"      Close #1742"},{"lineNumber":2427,"author":{"gitId":"-"},"content":""},{"lineNumber":2428,"author":{"gitId":"-"},"content":""},{"lineNumber":2429,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.7.1?"},{"lineNumber":2430,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2431,"author":{"gitId":"-"},"content":""},{"lineNumber":2432,"author":{"gitId":"-"},"content":"Release date: 2017-04-17"},{"lineNumber":2433,"author":{"gitId":"-"},"content":""},{"lineNumber":2434,"author":{"gitId":"-"},"content":"    * Fix a false positive which occurred when an exception was reraised"},{"lineNumber":2435,"author":{"gitId":"-"},"content":""},{"lineNumber":2436,"author":{"gitId":"-"},"content":"      Close #1419"},{"lineNumber":2437,"author":{"gitId":"-"},"content":""},{"lineNumber":2438,"author":{"gitId":"-"},"content":"    * Fix a false positive of ``disallow-trailing-tuple``"},{"lineNumber":2439,"author":{"gitId":"-"},"content":""},{"lineNumber":2440,"author":{"gitId":"-"},"content":"      The check was improved by verifying for non-terminating newlines, which"},{"lineNumber":2441,"author":{"gitId":"-"},"content":"      should exempt function calls and function definitions from the check"},{"lineNumber":2442,"author":{"gitId":"-"},"content":"      Close #1424"},{"lineNumber":2443,"author":{"gitId":"-"},"content":""},{"lineNumber":2444,"author":{"gitId":"-"},"content":""},{"lineNumber":2445,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.7?"},{"lineNumber":2446,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2447,"author":{"gitId":"-"},"content":""},{"lineNumber":2448,"author":{"gitId":"-"},"content":"Release date: 2017-04-13"},{"lineNumber":2449,"author":{"gitId":"-"},"content":""},{"lineNumber":2450,"author":{"gitId":"-"},"content":"    * Don\u0027t emit missing-final-newline or trailing-whitespace for formfeeds (page breaks)."},{"lineNumber":2451,"author":{"gitId":"-"},"content":""},{"lineNumber":2452,"author":{"gitId":"-"},"content":"      Close #1218 and #1219"},{"lineNumber":2453,"author":{"gitId":"-"},"content":""},{"lineNumber":2454,"author":{"gitId":"-"},"content":"    * Don\u0027t emit by default no-member if we have opaque inference objects in the inference results"},{"lineNumber":2455,"author":{"gitId":"-"},"content":""},{"lineNumber":2456,"author":{"gitId":"-"},"content":"      This is controlled through the new flag ignore-on-opaque-inference, which is by"},{"lineNumber":2457,"author":{"gitId":"-"},"content":"      default True. The inference can return  multiple potential results while"},{"lineNumber":2458,"author":{"gitId":"-"},"content":"      evaluating a Python object, but some branches might not be evaluated, which"},{"lineNumber":2459,"author":{"gitId":"-"},"content":"      results in partial inference. In that case, it might be useful to still emit"},{"lineNumber":2460,"author":{"gitId":"-"},"content":"      no-member and other checks for the rest of the inferred objects."},{"lineNumber":2461,"author":{"gitId":"-"},"content":""},{"lineNumber":2462,"author":{"gitId":"-"},"content":"    * Added new message ``assign-to-new-keyword`` to warn about assigning to names which"},{"lineNumber":2463,"author":{"gitId":"-"},"content":"      will become a keyword in future Python releases."},{"lineNumber":2464,"author":{"gitId":"-"},"content":""},{"lineNumber":2465,"author":{"gitId":"-"},"content":"      Close #1351"},{"lineNumber":2466,"author":{"gitId":"-"},"content":""},{"lineNumber":2467,"author":{"gitId":"-"},"content":"    * Split the \u0027missing or differing\u0027 in parameter documentation in different error."},{"lineNumber":2468,"author":{"gitId":"-"},"content":"      \u0027differing-param-doc\u0027 covers the differing part of the old \u0027missing-param-doc\u0027,"},{"lineNumber":2469,"author":{"gitId":"-"},"content":"      and \u0027differing-type-doc\u0027 covers the differing part of the old \u0027missing-type-doc\u0027"},{"lineNumber":2470,"author":{"gitId":"-"},"content":""},{"lineNumber":2471,"author":{"gitId":"-"},"content":"      Close #1342"},{"lineNumber":2472,"author":{"gitId":"-"},"content":""},{"lineNumber":2473,"author":{"gitId":"-"},"content":"    * Added a new error, \u0027used-prior-global-declaration\u0027, which is emitted when a name"},{"lineNumber":2474,"author":{"gitId":"-"},"content":"      is used prior a global declaration in a function. This causes a SyntaxError in"},{"lineNumber":2475,"author":{"gitId":"-"},"content":"      Python 3.6"},{"lineNumber":2476,"author":{"gitId":"-"},"content":""},{"lineNumber":2477,"author":{"gitId":"-"},"content":"      Close #1257"},{"lineNumber":2478,"author":{"gitId":"-"},"content":""},{"lineNumber":2479,"author":{"gitId":"-"},"content":"    * The protocol checks are emitting their messages when a special method is set to None."},{"lineNumber":2480,"author":{"gitId":"-"},"content":""},{"lineNumber":2481,"author":{"gitId":"-"},"content":"      Close #1263"},{"lineNumber":2482,"author":{"gitId":"-"},"content":""},{"lineNumber":2483,"author":{"gitId":"-"},"content":"    * Properly detect if imported name is assigned to same name in different"},{"lineNumber":2484,"author":{"gitId":"-"},"content":"      scope."},{"lineNumber":2485,"author":{"gitId":"-"},"content":""},{"lineNumber":2486,"author":{"gitId":"-"},"content":"      Close #636, #848, #851, and #900"},{"lineNumber":2487,"author":{"gitId":"-"},"content":""},{"lineNumber":2488,"author":{"gitId":"-"},"content":"    * Require one space for annotations with type hints, as per PEP 8."},{"lineNumber":2489,"author":{"gitId":"-"},"content":""},{"lineNumber":2490,"author":{"gitId":"-"},"content":"    * \u0027trailing-comma-tuple\u0027 check was added"},{"lineNumber":2491,"author":{"gitId":"-"},"content":""},{"lineNumber":2492,"author":{"gitId":"-"},"content":"      This message is emitted when pylint finds an one-element tuple,"},{"lineNumber":2493,"author":{"gitId":"-"},"content":"      created by a stray comma. This can suggest a potential problem in the"},{"lineNumber":2494,"author":{"gitId":"-"},"content":"      code and it is recommended to use parantheses in order to emphasise the"},{"lineNumber":2495,"author":{"gitId":"-"},"content":"      creation of a tuple, rather than relying on the comma itself."},{"lineNumber":2496,"author":{"gitId":"-"},"content":""},{"lineNumber":2497,"author":{"gitId":"-"},"content":"    * Don\u0027t emit not-callable for instances with unknown bases."},{"lineNumber":2498,"author":{"gitId":"-"},"content":""},{"lineNumber":2499,"author":{"gitId":"-"},"content":"      Close #1213"},{"lineNumber":2500,"author":{"gitId":"-"},"content":""},{"lineNumber":2501,"author":{"gitId":"-"},"content":"    * Treat keyword only arguments the same as positional arguments with regard to unused-argument check"},{"lineNumber":2502,"author":{"gitId":"-"},"content":""},{"lineNumber":2503,"author":{"gitId":"-"},"content":"    * Don\u0027t try to access variables defined in a separate scope when checking for ``protected-access``"},{"lineNumber":2504,"author":{"gitId":"-"},"content":""},{"lineNumber":2505,"author":{"gitId":"-"},"content":"    * Added new check to detect incorrect usage of len(SEQUENCE) inside"},{"lineNumber":2506,"author":{"gitId":"-"},"content":"      test conditions."},{"lineNumber":2507,"author":{"gitId":"-"},"content":""},{"lineNumber":2508,"author":{"gitId":"-"},"content":"    * Added new extension to detect comparisons against empty string constants"},{"lineNumber":2509,"author":{"gitId":"-"},"content":""},{"lineNumber":2510,"author":{"gitId":"-"},"content":"    * Added new extension to detect comparisons of integers against zero"},{"lineNumber":2511,"author":{"gitId":"-"},"content":""},{"lineNumber":2512,"author":{"gitId":"-"},"content":"    * Added new error conditions for \u0027bad-super-call\u0027"},{"lineNumber":2513,"author":{"gitId":"-"},"content":""},{"lineNumber":2514,"author":{"gitId":"-"},"content":"      Now detects ``super(type(self), self)`` and ``super(self.__class__, self)``"},{"lineNumber":2515,"author":{"gitId":"-"},"content":"      which can lead to recursion loop in derived classes."},{"lineNumber":2516,"author":{"gitId":"-"},"content":""},{"lineNumber":2517,"author":{"gitId":"-"},"content":"    * PyLinter.should_analyze_file has a new optional parameter, called ``is_argument``"},{"lineNumber":2518,"author":{"gitId":"-"},"content":""},{"lineNumber":2519,"author":{"gitId":"-"},"content":"      Close #1079"},{"lineNumber":2520,"author":{"gitId":"-"},"content":""},{"lineNumber":2521,"author":{"gitId":"-"},"content":"    * Add attribute hints for missing members"},{"lineNumber":2522,"author":{"gitId":"-"},"content":""},{"lineNumber":2523,"author":{"gitId":"-"},"content":"      Closes #1035"},{"lineNumber":2524,"author":{"gitId":"-"},"content":""},{"lineNumber":2525,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027redefined-argument-from-local\u0027"},{"lineNumber":2526,"author":{"gitId":"-"},"content":""},{"lineNumber":2527,"author":{"gitId":"-"},"content":"      Closes #649"},{"lineNumber":2528,"author":{"gitId":"-"},"content":""},{"lineNumber":2529,"author":{"gitId":"-"},"content":"    * Support inline comments for comma separated values in the config file"},{"lineNumber":2530,"author":{"gitId":"-"},"content":""},{"lineNumber":2531,"author":{"gitId":"-"},"content":"      Closes #1024"},{"lineNumber":2532,"author":{"gitId":"-"},"content":""},{"lineNumber":2533,"author":{"gitId":"-"},"content":"    * epylint.py_run\u0027s *script* parameter was removed."},{"lineNumber":2534,"author":{"gitId":"-"},"content":""},{"lineNumber":2535,"author":{"gitId":"-"},"content":"    * epylint.py_run now uses ``shell\u003dFalse`` for running the underlying process."},{"lineNumber":2536,"author":{"gitId":"-"},"content":""},{"lineNumber":2537,"author":{"gitId":"-"},"content":"      Closes #441"},{"lineNumber":2538,"author":{"gitId":"-"},"content":""},{"lineNumber":2539,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027useless-super-delegation\u0027"},{"lineNumber":2540,"author":{"gitId":"-"},"content":""},{"lineNumber":2541,"author":{"gitId":"-"},"content":"      Close 839."},{"lineNumber":2542,"author":{"gitId":"-"},"content":""},{"lineNumber":2543,"author":{"gitId":"-"},"content":"    * Added a new error, \u0027invalid-metaclass\u0027, raised when"},{"lineNumber":2544,"author":{"gitId":"-"},"content":"      we can detect that a class is using an improper metaclass."},{"lineNumber":2545,"author":{"gitId":"-"},"content":""},{"lineNumber":2546,"author":{"gitId":"-"},"content":"      Close #579"},{"lineNumber":2547,"author":{"gitId":"-"},"content":""},{"lineNumber":2548,"author":{"gitId":"-"},"content":"    * Added a new refactoring message, \u0027literal-comparison\u0027."},{"lineNumber":2549,"author":{"gitId":"-"},"content":""},{"lineNumber":2550,"author":{"gitId":"-"},"content":"      Close #786"},{"lineNumber":2551,"author":{"gitId":"-"},"content":""},{"lineNumber":2552,"author":{"gitId":"-"},"content":"    * arguments-differ takes in consideration kwonlyargs and variadics"},{"lineNumber":2553,"author":{"gitId":"-"},"content":""},{"lineNumber":2554,"author":{"gitId":"-"},"content":"      Close #983"},{"lineNumber":2555,"author":{"gitId":"-"},"content":""},{"lineNumber":2556,"author":{"gitId":"-"},"content":"    * Removed --optimized-ast. Part of #975."},{"lineNumber":2557,"author":{"gitId":"-"},"content":""},{"lineNumber":2558,"author":{"gitId":"-"},"content":"    * Removed --files-output option. Part of #975."},{"lineNumber":2559,"author":{"gitId":"-"},"content":""},{"lineNumber":2560,"author":{"gitId":"-"},"content":"    * Removed pylint-gui from the package."},{"lineNumber":2561,"author":{"gitId":"-"},"content":""},{"lineNumber":2562,"author":{"gitId":"-"},"content":"    * Removed the HTML reporter. Part of #975."},{"lineNumber":2563,"author":{"gitId":"-"},"content":""},{"lineNumber":2564,"author":{"gitId":"-"},"content":"    * ignored-argument-names is now used for ignoring arguments for unused-variable check."},{"lineNumber":2565,"author":{"gitId":"-"},"content":""},{"lineNumber":2566,"author":{"gitId":"-"},"content":"      This option was used for ignoring arguments when computing the correct number of arguments"},{"lineNumber":2567,"author":{"gitId":"-"},"content":"      a function should have, but for handling the arguments with regard"},{"lineNumber":2568,"author":{"gitId":"-"},"content":"      to unused-variable check, dummy-variables-rgx was used instead. Now, ignored-argument-names"},{"lineNumber":2569,"author":{"gitId":"-"},"content":"      is used for its original purpose and also for ignoring the matched arguments for"},{"lineNumber":2570,"author":{"gitId":"-"},"content":"      the unused-variable check. This offers a better control of what should be ignored"},{"lineNumber":2571,"author":{"gitId":"-"},"content":"      and how."},{"lineNumber":2572,"author":{"gitId":"-"},"content":"      Also, the same option was moved from the design checker to the variables checker,"},{"lineNumber":2573,"author":{"gitId":"-"},"content":"      which means that the option now appears under the ``[VARIABLES]`` section inside"},{"lineNumber":2574,"author":{"gitId":"-"},"content":"      the configuration file."},{"lineNumber":2575,"author":{"gitId":"-"},"content":"      Close #862."},{"lineNumber":2576,"author":{"gitId":"-"},"content":""},{"lineNumber":2577,"author":{"gitId":"-"},"content":"    * Fix a false positive for keyword variadics with regard to keyword only arguments."},{"lineNumber":2578,"author":{"gitId":"-"},"content":""},{"lineNumber":2579,"author":{"gitId":"-"},"content":"      If a keyword only argument was necessary for a function, but that function was called"},{"lineNumber":2580,"author":{"gitId":"-"},"content":"      with keyword variadics (\\**kwargs), then we were emitting a missing-kwoa false positive,"},{"lineNumber":2581,"author":{"gitId":"-"},"content":"      which is now fixed."},{"lineNumber":2582,"author":{"gitId":"-"},"content":""},{"lineNumber":2583,"author":{"gitId":"-"},"content":"      Close #934."},{"lineNumber":2584,"author":{"gitId":"-"},"content":""},{"lineNumber":2585,"author":{"gitId":"-"},"content":"    * Fix some false positives with unknown sized variadics."},{"lineNumber":2586,"author":{"gitId":"-"},"content":""},{"lineNumber":2587,"author":{"gitId":"-"},"content":"      Close #878"},{"lineNumber":2588,"author":{"gitId":"-"},"content":""},{"lineNumber":2589,"author":{"gitId":"-"},"content":"    * Added a new extension, check_docstring, for checking PEP 257 conventions."},{"lineNumber":2590,"author":{"gitId":"-"},"content":""},{"lineNumber":2591,"author":{"gitId":"-"},"content":"      Closes #868."},{"lineNumber":2592,"author":{"gitId":"-"},"content":""},{"lineNumber":2593,"author":{"gitId":"-"},"content":"    * config files with BOM markers can now be read."},{"lineNumber":2594,"author":{"gitId":"-"},"content":""},{"lineNumber":2595,"author":{"gitId":"-"},"content":"      Close #864."},{"lineNumber":2596,"author":{"gitId":"-"},"content":""},{"lineNumber":2597,"author":{"gitId":"-"},"content":"    * epylint.py_run does not crash on big files, using .communicate() instead of .wait()"},{"lineNumber":2598,"author":{"gitId":"-"},"content":""},{"lineNumber":2599,"author":{"gitId":"-"},"content":"      Close #599"},{"lineNumber":2600,"author":{"gitId":"-"},"content":""},{"lineNumber":2601,"author":{"gitId":"-"},"content":"    * Disable reports by default and show the evaluation score by default"},{"lineNumber":2602,"author":{"gitId":"-"},"content":""},{"lineNumber":2603,"author":{"gitId":"-"},"content":"      As per discussion from issue #746, the reports were disabled by"},{"lineNumber":2604,"author":{"gitId":"-"},"content":"      default in order to simplify the interaction between the tool"},{"lineNumber":2605,"author":{"gitId":"-"},"content":"      and the users. The score is still shown by default, as a way of"},{"lineNumber":2606,"author":{"gitId":"-"},"content":"      closely measuring when it increases or decreases due to changes"},{"lineNumber":2607,"author":{"gitId":"-"},"content":"      brought to the code."},{"lineNumber":2608,"author":{"gitId":"-"},"content":""},{"lineNumber":2609,"author":{"gitId":"-"},"content":"    * Disable the information category messages by default."},{"lineNumber":2610,"author":{"gitId":"-"},"content":""},{"lineNumber":2611,"author":{"gitId":"-"},"content":"      This is a step towards making pylint more sane, as"},{"lineNumber":2612,"author":{"gitId":"-"},"content":"      per the discussion from issue #746."},{"lineNumber":2613,"author":{"gitId":"-"},"content":""},{"lineNumber":2614,"author":{"gitId":"-"},"content":"    * Catch more cases as not proper iterables for __slots__ with"},{"lineNumber":2615,"author":{"gitId":"-"},"content":"      regard to invalid-slots pattern. Closes issue #775."},{"lineNumber":2616,"author":{"gitId":"-"},"content":""},{"lineNumber":2617,"author":{"gitId":"-"},"content":"    * empty indent strings are rejected."},{"lineNumber":2618,"author":{"gitId":"-"},"content":""},{"lineNumber":2619,"author":{"gitId":"-"},"content":"    * Added a new error, \u0027relative-beyond-top-level\u0027, which is emitted"},{"lineNumber":2620,"author":{"gitId":"-"},"content":"      when a relative import was attempted beyond the top level package."},{"lineNumber":2621,"author":{"gitId":"-"},"content":""},{"lineNumber":2622,"author":{"gitId":"-"},"content":"      Closes issue #588."},{"lineNumber":2623,"author":{"gitId":"-"},"content":""},{"lineNumber":2624,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027unsupported-assignment-operation\u0027, which is"},{"lineNumber":2625,"author":{"gitId":"-"},"content":"      emitted when item assignment is tried on an object which doesn\u0027t"},{"lineNumber":2626,"author":{"gitId":"-"},"content":"      have this ability. Closes issue #591."},{"lineNumber":2627,"author":{"gitId":"-"},"content":""},{"lineNumber":2628,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027unsupported-delete-operation\u0027, which is"},{"lineNumber":2629,"author":{"gitId":"-"},"content":"      emitted when item deletion is tried on an object which doesn\u0027t"},{"lineNumber":2630,"author":{"gitId":"-"},"content":"      have this ability. Closes issue #592."},{"lineNumber":2631,"author":{"gitId":"-"},"content":""},{"lineNumber":2632,"author":{"gitId":"-"},"content":"    * Fix a false positive of \u0027redundant-returns-doc\u0027, occurred when the documented"},{"lineNumber":2633,"author":{"gitId":"-"},"content":"      function was using *yield* instead of *return*."},{"lineNumber":2634,"author":{"gitId":"-"},"content":""},{"lineNumber":2635,"author":{"gitId":"-"},"content":"      Closes issue #984."},{"lineNumber":2636,"author":{"gitId":"-"},"content":""},{"lineNumber":2637,"author":{"gitId":"-"},"content":"    * Fix false positives of \u0027missing-[raises|params|type]-doc\u0027 due to not"},{"lineNumber":2638,"author":{"gitId":"-"},"content":"      recognizing keyword synonyms supported by Sphinx."},{"lineNumber":2639,"author":{"gitId":"-"},"content":""},{"lineNumber":2640,"author":{"gitId":"-"},"content":"    * Added a new refactoring message, \u0027consider-merging-isinstance\u0027, which is"},{"lineNumber":2641,"author":{"gitId":"-"},"content":"      emitted whenever we can detect that consecutive isinstance calls can be"},{"lineNumber":2642,"author":{"gitId":"-"},"content":"      merged together."},{"lineNumber":2643,"author":{"gitId":"-"},"content":""},{"lineNumber":2644,"author":{"gitId":"-"},"content":"      Closes issue #968"},{"lineNumber":2645,"author":{"gitId":"-"},"content":""},{"lineNumber":2646,"author":{"gitId":"-"},"content":"    * Fix a false positive of \u0027missing-param-doc\u0027 and \u0027missing-type-doc\u0027,"},{"lineNumber":2647,"author":{"gitId":"-"},"content":"      occurred when a class docstring uses the \u0027For the parameters, see\u0027"},{"lineNumber":2648,"author":{"gitId":"-"},"content":"      magic string but the class __init__ docstring does not, or vice versa."},{"lineNumber":2649,"author":{"gitId":"-"},"content":""},{"lineNumber":2650,"author":{"gitId":"-"},"content":"    * ``redefined-outer-name`` is now also emitted when a nested loop\u0027s target"},{"lineNumber":2651,"author":{"gitId":"-"},"content":"      variable is the same as a target variable in an outer loop."},{"lineNumber":2652,"author":{"gitId":"-"},"content":""},{"lineNumber":2653,"author":{"gitId":"-"},"content":"      Closes issue #911."},{"lineNumber":2654,"author":{"gitId":"-"},"content":""},{"lineNumber":2655,"author":{"gitId":"-"},"content":"    * Added proper exception type inference for \u0027missing-raises-doc\u0027."},{"lineNumber":2656,"author":{"gitId":"-"},"content":""},{"lineNumber":2657,"author":{"gitId":"-"},"content":"    * Added InvalidMessageError exception class to replace asserts in"},{"lineNumber":2658,"author":{"gitId":"-"},"content":"      pylint.utils."},{"lineNumber":2659,"author":{"gitId":"-"},"content":""},{"lineNumber":2660,"author":{"gitId":"-"},"content":"    * More thorough validation in MessagesStore.register_messages() to avoid"},{"lineNumber":2661,"author":{"gitId":"-"},"content":"      one message accidentally overwriting another."},{"lineNumber":2662,"author":{"gitId":"-"},"content":""},{"lineNumber":2663,"author":{"gitId":"-"},"content":"    * InvalidMessageError, UnknownMessage, and EmptyReport exceptions are"},{"lineNumber":2664,"author":{"gitId":"-"},"content":"      moved to the new pylint.exceptions submodule."},{"lineNumber":2665,"author":{"gitId":"-"},"content":""},{"lineNumber":2666,"author":{"gitId":"-"},"content":"    * UnknownMessage and EmptyReport are renamed to UnknownMessageError and"},{"lineNumber":2667,"author":{"gitId":"-"},"content":"      EmptyReportError."},{"lineNumber":2668,"author":{"gitId":"-"},"content":""},{"lineNumber":2669,"author":{"gitId":"-"},"content":"    * Warnings \u0027missing-returns-type-doc\u0027 and \u0027missing-yields-type-doc\u0027"},{"lineNumber":2670,"author":{"gitId":"-"},"content":"      have each been split into two warnings - \u0027missing-[return|yield]-doc\u0027"},{"lineNumber":2671,"author":{"gitId":"-"},"content":"      and \u0027missing-[return|yield]-type-doc\u0027."},{"lineNumber":2672,"author":{"gitId":"-"},"content":""},{"lineNumber":2673,"author":{"gitId":"-"},"content":"    * Added epytext support to docparams extension."},{"lineNumber":2674,"author":{"gitId":"-"},"content":""},{"lineNumber":2675,"author":{"gitId":"-"},"content":"      Closes #1029."},{"lineNumber":2676,"author":{"gitId":"-"},"content":""},{"lineNumber":2677,"author":{"gitId":"-"},"content":"    * Support having plugins with the same name and with options defined"},{"lineNumber":2678,"author":{"gitId":"-"},"content":""},{"lineNumber":2679,"author":{"gitId":"-"},"content":"      Closes #1018"},{"lineNumber":2680,"author":{"gitId":"-"},"content":""},{"lineNumber":2681,"author":{"gitId":"-"},"content":"    * Sort configuration options in a section"},{"lineNumber":2682,"author":{"gitId":"-"},"content":""},{"lineNumber":2683,"author":{"gitId":"-"},"content":"      Closes #1087"},{"lineNumber":2684,"author":{"gitId":"-"},"content":""},{"lineNumber":2685,"author":{"gitId":"-"},"content":"    * Added a new Python 3 warning around implementing \u0027__div__\u0027, \u0027__idiv__\u0027, or"},{"lineNumber":2686,"author":{"gitId":"-"},"content":"      \u0027__rdiv__\u0027 as those methods are phased out in Python 3."},{"lineNumber":2687,"author":{"gitId":"-"},"content":""},{"lineNumber":2688,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027overlapping-except\u0027, which is"},{"lineNumber":2689,"author":{"gitId":"-"},"content":"      emitted when two exceptions in the same except-clause are aliases"},{"lineNumber":2690,"author":{"gitId":"-"},"content":"      for each other or one exceptions is an ancestor of another."},{"lineNumber":2691,"author":{"gitId":"-"},"content":""},{"lineNumber":2692,"author":{"gitId":"-"},"content":"    * Avoid crashing on ill-formatted strings when checking for string formatting errors."},{"lineNumber":2693,"author":{"gitId":"-"},"content":""},{"lineNumber":2694,"author":{"gitId":"-"},"content":"    * Added a new Python 3 warning for calling \u0027str.encode\u0027 or \u0027str.decode\u0027 with a non-text"},{"lineNumber":2695,"author":{"gitId":"-"},"content":"      encoding."},{"lineNumber":2696,"author":{"gitId":"-"},"content":""},{"lineNumber":2697,"author":{"gitId":"-"},"content":"    * Added new coding convention message, \u0027single-string-used-for-slots\u0027."},{"lineNumber":2698,"author":{"gitId":"-"},"content":""},{"lineNumber":2699,"author":{"gitId":"-"},"content":"      Closes #1166"},{"lineNumber":2700,"author":{"gitId":"-"},"content":""},{"lineNumber":2701,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for accessing \u0027sys.maxint\u0027 which was removed in Python 3 in favor"},{"lineNumber":2702,"author":{"gitId":"-"},"content":"      of \u0027sys.maxsize\u0027"},{"lineNumber":2703,"author":{"gitId":"-"},"content":""},{"lineNumber":2704,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for bad imports."},{"lineNumber":2705,"author":{"gitId":"-"},"content":""},{"lineNumber":2706,"author":{"gitId":"-"},"content":"    * Added a new Python 3 check for accessing deprecated string functions."},{"lineNumber":2707,"author":{"gitId":"-"},"content":""},{"lineNumber":2708,"author":{"gitId":"-"},"content":"    * Do not warn about unused arguments or function being redefined in singledispatch"},{"lineNumber":2709,"author":{"gitId":"-"},"content":"      registered implementations."},{"lineNumber":2710,"author":{"gitId":"-"},"content":""},{"lineNumber":2711,"author":{"gitId":"-"},"content":"      Closes #1032 and #1034"},{"lineNumber":2712,"author":{"gitId":"-"},"content":""},{"lineNumber":2713,"author":{"gitId":"-"},"content":"    * Added refactoring message \u0027no-else-return\u0027."},{"lineNumber":2714,"author":{"gitId":"-"},"content":""},{"lineNumber":2715,"author":{"gitId":"-"},"content":"    * Improve unused-variable checker to warn about unused variables in module scope."},{"lineNumber":2716,"author":{"gitId":"-"},"content":""},{"lineNumber":2717,"author":{"gitId":"-"},"content":"      Closes #919"},{"lineNumber":2718,"author":{"gitId":"-"},"content":""},{"lineNumber":2719,"author":{"gitId":"-"},"content":"    * Ignore modules import as _ when checking for unused imports."},{"lineNumber":2720,"author":{"gitId":"-"},"content":""},{"lineNumber":2721,"author":{"gitId":"-"},"content":"      Closes #1190"},{"lineNumber":2722,"author":{"gitId":"-"},"content":""},{"lineNumber":2723,"author":{"gitId":"-"},"content":"    * Improve handing of Python 3 classes with metaclasses declared in nested scopes."},{"lineNumber":2724,"author":{"gitId":"-"},"content":""},{"lineNumber":2725,"author":{"gitId":"-"},"content":"      Closes #1177"},{"lineNumber":2726,"author":{"gitId":"-"},"content":""},{"lineNumber":2727,"author":{"gitId":"-"},"content":"    * Added refactoring message \u0027consider-using-ternary\u0027."},{"lineNumber":2728,"author":{"gitId":"-"},"content":""},{"lineNumber":2729,"author":{"gitId":"-"},"content":"      Closes #1204"},{"lineNumber":2730,"author":{"gitId":"-"},"content":""},{"lineNumber":2731,"author":{"gitId":"-"},"content":"    * Bug-fix for false-positive logging-format-interpolation` when format specifications"},{"lineNumber":2732,"author":{"gitId":"-"},"content":"      are used in formatted string."},{"lineNumber":2733,"author":{"gitId":"-"},"content":""},{"lineNumber":2734,"author":{"gitId":"-"},"content":"      Fixes #572"},{"lineNumber":2735,"author":{"gitId":"-"},"content":""},{"lineNumber":2736,"author":{"gitId":"-"},"content":"    * Added a new switch ``single-line-class-stmt`` to allow single-line declaration"},{"lineNumber":2737,"author":{"gitId":"-"},"content":"      of empty class bodies."},{"lineNumber":2738,"author":{"gitId":"-"},"content":""},{"lineNumber":2739,"author":{"gitId":"-"},"content":"      Closes #738"},{"lineNumber":2740,"author":{"gitId":"-"},"content":""},{"lineNumber":2741,"author":{"gitId":"-"},"content":"    * Protected access in form ``type(self)._attribute`` are now allowed."},{"lineNumber":2742,"author":{"gitId":"-"},"content":""},{"lineNumber":2743,"author":{"gitId":"-"},"content":"      Fixes #1031"},{"lineNumber":2744,"author":{"gitId":"-"},"content":""},{"lineNumber":2745,"author":{"gitId":"-"},"content":"    * Let the user modify msg-template when Pylint is called from a Python script"},{"lineNumber":2746,"author":{"gitId":"-"},"content":""},{"lineNumber":2747,"author":{"gitId":"-"},"content":"      Fixes #1269"},{"lineNumber":2748,"author":{"gitId":"-"},"content":""},{"lineNumber":2749,"author":{"gitId":"-"},"content":"    * Imports checker supports new switch ``allow-wildcard-with-all`` which disables"},{"lineNumber":2750,"author":{"gitId":"-"},"content":"      warning on wildcard import when imported module defines ``__all__`` variable."},{"lineNumber":2751,"author":{"gitId":"-"},"content":""},{"lineNumber":2752,"author":{"gitId":"-"},"content":"      Fixes #831"},{"lineNumber":2753,"author":{"gitId":"-"},"content":""},{"lineNumber":2754,"author":{"gitId":"-"},"content":"    * ``too-many-format-args`` and ``too-few-format-args`` are emitted correctly when"},{"lineNumber":2755,"author":{"gitId":"-"},"content":"      starred expression are used in RHS tuple."},{"lineNumber":2756,"author":{"gitId":"-"},"content":""},{"lineNumber":2757,"author":{"gitId":"-"},"content":"      Fixes #957"},{"lineNumber":2758,"author":{"gitId":"-"},"content":""},{"lineNumber":2759,"author":{"gitId":"-"},"content":"    * ``cyclic-import`` checker supports local disable clauses. When one"},{"lineNumber":2760,"author":{"gitId":"-"},"content":"      of cycle imports was done in scope where disable clause was active,"},{"lineNumber":2761,"author":{"gitId":"-"},"content":"      cycle is not reported as violation."},{"lineNumber":2762,"author":{"gitId":"-"},"content":""},{"lineNumber":2763,"author":{"gitId":"-"},"content":"      Fixes #59"},{"lineNumber":2764,"author":{"gitId":"-"},"content":""},{"lineNumber":2765,"author":{"gitId":"-"},"content":""},{"lineNumber":2766,"author":{"gitId":"-"},"content":"What\u0027s new in Pylint 1.6.3?"},{"lineNumber":2767,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2768,"author":{"gitId":"-"},"content":""},{"lineNumber":2769,"author":{"gitId":"-"},"content":"Release date: 2016-07-18"},{"lineNumber":2770,"author":{"gitId":"-"},"content":""},{"lineNumber":2771,"author":{"gitId":"-"},"content":"    * Do not crash when inferring uninferable exception types for docparams extension"},{"lineNumber":2772,"author":{"gitId":"-"},"content":""},{"lineNumber":2773,"author":{"gitId":"-"},"content":"      Close #998"},{"lineNumber":2774,"author":{"gitId":"-"},"content":""},{"lineNumber":2775,"author":{"gitId":"-"},"content":""},{"lineNumber":2776,"author":{"gitId":"-"},"content":"What\u0027s new in Pylint 1.6.2?"},{"lineNumber":2777,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2778,"author":{"gitId":"-"},"content":""},{"lineNumber":2779,"author":{"gitId":"-"},"content":"Release date: TBA"},{"lineNumber":2780,"author":{"gitId":"-"},"content":""},{"lineNumber":2781,"author":{"gitId":"-"},"content":"    * Do not crash when printing the help of options with default regular expressions"},{"lineNumber":2782,"author":{"gitId":"-"},"content":""},{"lineNumber":2783,"author":{"gitId":"-"},"content":"      Close #990"},{"lineNumber":2784,"author":{"gitId":"-"},"content":""},{"lineNumber":2785,"author":{"gitId":"-"},"content":"    * More granular versions for deprecated modules."},{"lineNumber":2786,"author":{"gitId":"-"},"content":""},{"lineNumber":2787,"author":{"gitId":"-"},"content":"      Close #991"},{"lineNumber":2788,"author":{"gitId":"-"},"content":""},{"lineNumber":2789,"author":{"gitId":"-"},"content":""},{"lineNumber":2790,"author":{"gitId":"-"},"content":"What\u0027s new in Pylint 1.6.1?"},{"lineNumber":2791,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2792,"author":{"gitId":"-"},"content":""},{"lineNumber":2793,"author":{"gitId":"-"},"content":"Release date: 2016-07-07"},{"lineNumber":2794,"author":{"gitId":"-"},"content":""},{"lineNumber":2795,"author":{"gitId":"-"},"content":"    * Use environment markers for supporting conditional dependencies."},{"lineNumber":2796,"author":{"gitId":"-"},"content":""},{"lineNumber":2797,"author":{"gitId":"-"},"content":""},{"lineNumber":2798,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.6.0?"},{"lineNumber":2799,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2800,"author":{"gitId":"-"},"content":""},{"lineNumber":2801,"author":{"gitId":"-"},"content":"Release date: 2016-07-03"},{"lineNumber":2802,"author":{"gitId":"-"},"content":""},{"lineNumber":2803,"author":{"gitId":"-"},"content":"    * Added a new extension, ``pylint.extensions.mccabe``, for warning"},{"lineNumber":2804,"author":{"gitId":"-"},"content":"      about complexity in code."},{"lineNumber":2805,"author":{"gitId":"-"},"content":""},{"lineNumber":2806,"author":{"gitId":"-"},"content":"    * Deprecate support for --optimize-ast. Part of #975."},{"lineNumber":2807,"author":{"gitId":"-"},"content":""},{"lineNumber":2808,"author":{"gitId":"-"},"content":"    * Deprecate support for the HTML output. Part of #975."},{"lineNumber":2809,"author":{"gitId":"-"},"content":""},{"lineNumber":2810,"author":{"gitId":"-"},"content":"    * Deprecate support for --output-files. Part of #975."},{"lineNumber":2811,"author":{"gitId":"-"},"content":""},{"lineNumber":2812,"author":{"gitId":"-"},"content":"    * Fixed a documentation error for the check_docs extension. Fixes #735."},{"lineNumber":2813,"author":{"gitId":"-"},"content":""},{"lineNumber":2814,"author":{"gitId":"-"},"content":"    * Made the list of property-defining decorators configurable."},{"lineNumber":2815,"author":{"gitId":"-"},"content":""},{"lineNumber":2816,"author":{"gitId":"-"},"content":"    * Fix a bug where the top name of a qualified import was detected as unused variable."},{"lineNumber":2817,"author":{"gitId":"-"},"content":""},{"lineNumber":2818,"author":{"gitId":"-"},"content":"      Close #923."},{"lineNumber":2819,"author":{"gitId":"-"},"content":""},{"lineNumber":2820,"author":{"gitId":"-"},"content":"    * bad-builtin is now an extension check."},{"lineNumber":2821,"author":{"gitId":"-"},"content":""},{"lineNumber":2822,"author":{"gitId":"-"},"content":"    * generated-members support qualified name through regular expressions."},{"lineNumber":2823,"author":{"gitId":"-"},"content":""},{"lineNumber":2824,"author":{"gitId":"-"},"content":"      For instance, one can specify a regular expression as --generated-members\u003dastroid.node_classes.*"},{"lineNumber":2825,"author":{"gitId":"-"},"content":"      for ignoring every no-member error that is accessed as in ``astroid.node_classes.missing.object``."},{"lineNumber":2826,"author":{"gitId":"-"},"content":""},{"lineNumber":2827,"author":{"gitId":"-"},"content":"    * Add the ability to ignore files based on regex matching, with the new ``--ignore-patterns``"},{"lineNumber":2828,"author":{"gitId":"-"},"content":"      option."},{"lineNumber":2829,"author":{"gitId":"-"},"content":""},{"lineNumber":2830,"author":{"gitId":"-"},"content":"      This addresses issue #156 by allowing for multiple ignore patterns"},{"lineNumber":2831,"author":{"gitId":"-"},"content":"      to be specified. Rather than clobber the existing ignore option, we"},{"lineNumber":2832,"author":{"gitId":"-"},"content":"      introduced a new one called ignore-patterns."},{"lineNumber":2833,"author":{"gitId":"-"},"content":""},{"lineNumber":2834,"author":{"gitId":"-"},"content":"    * Added a new error, \u0027trailing-newlines\u0027, which is emitted when a file"},{"lineNumber":2835,"author":{"gitId":"-"},"content":"      has trailing new lines."},{"lineNumber":2836,"author":{"gitId":"-"},"content":""},{"lineNumber":2837,"author":{"gitId":"-"},"content":"      Closes issue #682."},{"lineNumber":2838,"author":{"gitId":"-"},"content":""},{"lineNumber":2839,"author":{"gitId":"-"},"content":"    * Add a new option, \u0027redefining-builtins-modules\u0027, for controlling the modules"},{"lineNumber":2840,"author":{"gitId":"-"},"content":"      which can redefine builtins, such as six.moves and future.builtins."},{"lineNumber":2841,"author":{"gitId":"-"},"content":""},{"lineNumber":2842,"author":{"gitId":"-"},"content":"      Close #464."},{"lineNumber":2843,"author":{"gitId":"-"},"content":""},{"lineNumber":2844,"author":{"gitId":"-"},"content":"    * \u0027reimported\u0027 is emitted when the same name is imported from different module."},{"lineNumber":2845,"author":{"gitId":"-"},"content":""},{"lineNumber":2846,"author":{"gitId":"-"},"content":"      Close #162."},{"lineNumber":2847,"author":{"gitId":"-"},"content":""},{"lineNumber":2848,"author":{"gitId":"-"},"content":"    * Add a new recommendation checker, \u0027consider-iterating-dictionary\u0027, which is emitted"},{"lineNumber":2849,"author":{"gitId":"-"},"content":"      which is emitted when a dictionary is iterated through .keys()."},{"lineNumber":2850,"author":{"gitId":"-"},"content":""},{"lineNumber":2851,"author":{"gitId":"-"},"content":"      Close #699"},{"lineNumber":2852,"author":{"gitId":"-"},"content":""},{"lineNumber":2853,"author":{"gitId":"-"},"content":"    * Use the configparser backport for Python 2"},{"lineNumber":2854,"author":{"gitId":"-"},"content":""},{"lineNumber":2855,"author":{"gitId":"-"},"content":"      This fixes a problem we were having with comments inside values, which is fixed"},{"lineNumber":2856,"author":{"gitId":"-"},"content":"      in Python 3\u0027s configparser."},{"lineNumber":2857,"author":{"gitId":"-"},"content":"      Close #828"},{"lineNumber":2858,"author":{"gitId":"-"},"content":""},{"lineNumber":2859,"author":{"gitId":"-"},"content":"    * A new error was added, \u0027invalid-length-returned\u0027, when the ``__len__``"},{"lineNumber":2860,"author":{"gitId":"-"},"content":"      special method returned something else than a non-negative number."},{"lineNumber":2861,"author":{"gitId":"-"},"content":""},{"lineNumber":2862,"author":{"gitId":"-"},"content":"      Close issue #557"},{"lineNumber":2863,"author":{"gitId":"-"},"content":""},{"lineNumber":2864,"author":{"gitId":"-"},"content":"    * Switch to using isort internally for wrong-import-order."},{"lineNumber":2865,"author":{"gitId":"-"},"content":""},{"lineNumber":2866,"author":{"gitId":"-"},"content":"      Closes #879."},{"lineNumber":2867,"author":{"gitId":"-"},"content":""},{"lineNumber":2868,"author":{"gitId":"-"},"content":"    * check_docs extension can find constructor parameters in __init__."},{"lineNumber":2869,"author":{"gitId":"-"},"content":""},{"lineNumber":2870,"author":{"gitId":"-"},"content":"      Closes #887."},{"lineNumber":2871,"author":{"gitId":"-"},"content":""},{"lineNumber":2872,"author":{"gitId":"-"},"content":"    * Don\u0027t warn about invalid-sequence-index if the indexed object has unknown base"},{"lineNumber":2873,"author":{"gitId":"-"},"content":"      classes."},{"lineNumber":2874,"author":{"gitId":"-"},"content":""},{"lineNumber":2875,"author":{"gitId":"-"},"content":"      Closes #867"},{"lineNumber":2876,"author":{"gitId":"-"},"content":""},{"lineNumber":2877,"author":{"gitId":"-"},"content":"    * Don\u0027t crash when checking, for super-init-not-called, a method defined in an if block."},{"lineNumber":2878,"author":{"gitId":"-"},"content":""},{"lineNumber":2879,"author":{"gitId":"-"},"content":"    * Do not emit import-error or no-name-in-module for fallback import blocks by default."},{"lineNumber":2880,"author":{"gitId":"-"},"content":""},{"lineNumber":2881,"author":{"gitId":"-"},"content":"      Until now, we warned with these errors when a fallback import block (a TryExcept block"},{"lineNumber":2882,"author":{"gitId":"-"},"content":"      that contained imports for Python 2 and 3) was found, but this gets cumbersome when"},{"lineNumber":2883,"author":{"gitId":"-"},"content":"      trying to write compatible code. As such, we don\u0027t check these blocks by default,"},{"lineNumber":2884,"author":{"gitId":"-"},"content":"      but the analysis can be enforced by using the new ``--analyse-fallback-block`` flag."},{"lineNumber":2885,"author":{"gitId":"-"},"content":""},{"lineNumber":2886,"author":{"gitId":"-"},"content":"      Close #769."},{"lineNumber":2887,"author":{"gitId":"-"},"content":""},{"lineNumber":2888,"author":{"gitId":"-"},"content":""},{"lineNumber":2889,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.5?"},{"lineNumber":2890,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2891,"author":{"gitId":"-"},"content":""},{"lineNumber":2892,"author":{"gitId":"-"},"content":"Release date: 2016-03-21"},{"lineNumber":2893,"author":{"gitId":"-"},"content":""},{"lineNumber":2894,"author":{"gitId":"-"},"content":""},{"lineNumber":2895,"author":{"gitId":"-"},"content":"    * Let visit_importfrom from Python 3 porting checker be called when everything is disabled"},{"lineNumber":2896,"author":{"gitId":"-"},"content":""},{"lineNumber":2897,"author":{"gitId":"-"},"content":"      Because the visit method was filtering the patterns it was expecting to be activated,"},{"lineNumber":2898,"author":{"gitId":"-"},"content":"      it didn\u0027t run when everything but one pattern was disabled, leading to spurious false"},{"lineNumber":2899,"author":{"gitId":"-"},"content":"      positives"},{"lineNumber":2900,"author":{"gitId":"-"},"content":""},{"lineNumber":2901,"author":{"gitId":"-"},"content":"      Close #852"},{"lineNumber":2902,"author":{"gitId":"-"},"content":""},{"lineNumber":2903,"author":{"gitId":"-"},"content":"    * Don\u0027t emit unsubscriptable-value for classes with unknown"},{"lineNumber":2904,"author":{"gitId":"-"},"content":"      base classes."},{"lineNumber":2905,"author":{"gitId":"-"},"content":""},{"lineNumber":2906,"author":{"gitId":"-"},"content":"      Close #776."},{"lineNumber":2907,"author":{"gitId":"-"},"content":""},{"lineNumber":2908,"author":{"gitId":"-"},"content":"    * Use an OrderedDict for storing the configuration elements"},{"lineNumber":2909,"author":{"gitId":"-"},"content":""},{"lineNumber":2910,"author":{"gitId":"-"},"content":"      This fixes an issue related to impredictible order of the disable / enable"},{"lineNumber":2911,"author":{"gitId":"-"},"content":"      elements from a config file. In certain cases, the disable was coming before"},{"lineNumber":2912,"author":{"gitId":"-"},"content":"      the enable which resulted in classes of errors to be enabled, even though the intention"},{"lineNumber":2913,"author":{"gitId":"-"},"content":"      was to disable them. The best example for this was in the context of running multiple"},{"lineNumber":2914,"author":{"gitId":"-"},"content":"      processes, each one of it having different enables / disables that affected the output."},{"lineNumber":2915,"author":{"gitId":"-"},"content":""},{"lineNumber":2916,"author":{"gitId":"-"},"content":"      Close #815"},{"lineNumber":2917,"author":{"gitId":"-"},"content":""},{"lineNumber":2918,"author":{"gitId":"-"},"content":"    * Don\u0027t consider bare and broad except handlers as ignoring NameError,"},{"lineNumber":2919,"author":{"gitId":"-"},"content":"      AttributeError and similar exceptions, in the context of checkers for"},{"lineNumber":2920,"author":{"gitId":"-"},"content":"      these issues."},{"lineNumber":2921,"author":{"gitId":"-"},"content":""},{"lineNumber":2922,"author":{"gitId":"-"},"content":"      Closes issue #826"},{"lineNumber":2923,"author":{"gitId":"-"},"content":""},{"lineNumber":2924,"author":{"gitId":"-"},"content":""},{"lineNumber":2925,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.4?"},{"lineNumber":2926,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2927,"author":{"gitId":"-"},"content":""},{"lineNumber":2928,"author":{"gitId":"-"},"content":"Release date: 2016-01-15"},{"lineNumber":2929,"author":{"gitId":"-"},"content":""},{"lineNumber":2930,"author":{"gitId":"-"},"content":""},{"lineNumber":2931,"author":{"gitId":"-"},"content":"    * Merge StringMethodChecker with StringFormatChecker. This fixes a"},{"lineNumber":2932,"author":{"gitId":"-"},"content":"      bug where disabling all the messages and enabling only a handful of"},{"lineNumber":2933,"author":{"gitId":"-"},"content":"      messages from the StringFormatChecker would have resulted in no"},{"lineNumber":2934,"author":{"gitId":"-"},"content":"      messages at all."},{"lineNumber":2935,"author":{"gitId":"-"},"content":""},{"lineNumber":2936,"author":{"gitId":"-"},"content":"    * Don\u0027t apply unneeded-not over sets."},{"lineNumber":2937,"author":{"gitId":"-"},"content":""},{"lineNumber":2938,"author":{"gitId":"-"},"content":""},{"lineNumber":2939,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.3?"},{"lineNumber":2940,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2941,"author":{"gitId":"-"},"content":""},{"lineNumber":2942,"author":{"gitId":"-"},"content":"Release date: 2016-01-11"},{"lineNumber":2943,"author":{"gitId":"-"},"content":""},{"lineNumber":2944,"author":{"gitId":"-"},"content":"    * Handle the import fallback idiom with regard to wrong-import-order."},{"lineNumber":2945,"author":{"gitId":"-"},"content":""},{"lineNumber":2946,"author":{"gitId":"-"},"content":"      Closes issue #750."},{"lineNumber":2947,"author":{"gitId":"-"},"content":""},{"lineNumber":2948,"author":{"gitId":"-"},"content":"    * Decouple the displaying of reports from the displaying of messages"},{"lineNumber":2949,"author":{"gitId":"-"},"content":""},{"lineNumber":2950,"author":{"gitId":"-"},"content":"      Some reporters are aggregating the messages instead of displaying"},{"lineNumber":2951,"author":{"gitId":"-"},"content":"      them when they are available. The actual displaying was conflatted"},{"lineNumber":2952,"author":{"gitId":"-"},"content":"      in the generate_reports. Unfortunately this behaviour was flaky"},{"lineNumber":2953,"author":{"gitId":"-"},"content":"      and in the case of the JSON reporter, the messages weren\u0027t shown"},{"lineNumber":2954,"author":{"gitId":"-"},"content":"      at all if a file had syntax errors or if it was missing."},{"lineNumber":2955,"author":{"gitId":"-"},"content":"      In order to fix this, the aggregated messages can now be"},{"lineNumber":2956,"author":{"gitId":"-"},"content":"      displayed with Reporter.display_message, while the reports are"},{"lineNumber":2957,"author":{"gitId":"-"},"content":"      displayed with display_reports."},{"lineNumber":2958,"author":{"gitId":"-"},"content":""},{"lineNumber":2959,"author":{"gitId":"-"},"content":"      Closes issues #766 and #765."},{"lineNumber":2960,"author":{"gitId":"-"},"content":""},{"lineNumber":2961,"author":{"gitId":"-"},"content":"    * Ignore function calls with variadic arguments without a context."},{"lineNumber":2962,"author":{"gitId":"-"},"content":""},{"lineNumber":2963,"author":{"gitId":"-"},"content":"      Inferring variadic positional arguments and keyword arguments"},{"lineNumber":2964,"author":{"gitId":"-"},"content":"      will result into empty Tuples and Dicts, which can lead in"},{"lineNumber":2965,"author":{"gitId":"-"},"content":"      some cases to false positives with regard to no-value-for-parameter."},{"lineNumber":2966,"author":{"gitId":"-"},"content":"      In order to avoid this, until we\u0027ll have support for call context"},{"lineNumber":2967,"author":{"gitId":"-"},"content":"      propagation, we\u0027re ignoring such cases if detected."},{"lineNumber":2968,"author":{"gitId":"-"},"content":"      Closes issue #722."},{"lineNumber":2969,"author":{"gitId":"-"},"content":""},{"lineNumber":2970,"author":{"gitId":"-"},"content":"    * Treat AsyncFunctionDef just like FunctionDef nodes,"},{"lineNumber":2971,"author":{"gitId":"-"},"content":"      by implementing visit_asyncfunctiondef in terms of"},{"lineNumber":2972,"author":{"gitId":"-"},"content":"      visit_functiondef."},{"lineNumber":2973,"author":{"gitId":"-"},"content":""},{"lineNumber":2974,"author":{"gitId":"-"},"content":"      Closes issue #767."},{"lineNumber":2975,"author":{"gitId":"-"},"content":""},{"lineNumber":2976,"author":{"gitId":"-"},"content":"    * Take in account kwonlyargs when verifying that arguments"},{"lineNumber":2977,"author":{"gitId":"-"},"content":"      are defined with the check_docs extension."},{"lineNumber":2978,"author":{"gitId":"-"},"content":""},{"lineNumber":2979,"author":{"gitId":"-"},"content":"      Closes issue #745."},{"lineNumber":2980,"author":{"gitId":"-"},"content":""},{"lineNumber":2981,"author":{"gitId":"-"},"content":"    * Suppress reporting \u0027unneeded-not\u0027 inside ``__ne__`` methods"},{"lineNumber":2982,"author":{"gitId":"-"},"content":""},{"lineNumber":2983,"author":{"gitId":"-"},"content":"      Closes issue #749."},{"lineNumber":2984,"author":{"gitId":"-"},"content":""},{"lineNumber":2985,"author":{"gitId":"-"},"content":""},{"lineNumber":2986,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.2?"},{"lineNumber":2987,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":2988,"author":{"gitId":"-"},"content":""},{"lineNumber":2989,"author":{"gitId":"-"},"content":"Release date: 2015-12-21"},{"lineNumber":2990,"author":{"gitId":"-"},"content":""},{"lineNumber":2991,"author":{"gitId":"-"},"content":"    * Don\u0027t crash if graphviz is not installed, instead emit a"},{"lineNumber":2992,"author":{"gitId":"-"},"content":"      warning letting the user to know."},{"lineNumber":2993,"author":{"gitId":"-"},"content":""},{"lineNumber":2994,"author":{"gitId":"-"},"content":"      Closes issue #168."},{"lineNumber":2995,"author":{"gitId":"-"},"content":""},{"lineNumber":2996,"author":{"gitId":"-"},"content":"    * Accept only functions and methods for the deprecated-method checker."},{"lineNumber":2997,"author":{"gitId":"-"},"content":""},{"lineNumber":2998,"author":{"gitId":"-"},"content":"      This prevents a crash which can occur when an object doesn\u0027t have"},{"lineNumber":2999,"author":{"gitId":"-"},"content":"      .qname() method after the inference."},{"lineNumber":3000,"author":{"gitId":"-"},"content":""},{"lineNumber":3001,"author":{"gitId":"-"},"content":"    * Don\u0027t emit super-on-old-class on classes with unknown bases."},{"lineNumber":3002,"author":{"gitId":"-"},"content":"      Closes issue #721."},{"lineNumber":3003,"author":{"gitId":"-"},"content":""},{"lineNumber":3004,"author":{"gitId":"-"},"content":"    * Allow statements in ``if`` or ``try`` blocks containing imports."},{"lineNumber":3005,"author":{"gitId":"-"},"content":""},{"lineNumber":3006,"author":{"gitId":"-"},"content":"      Closes issue #714."},{"lineNumber":3007,"author":{"gitId":"-"},"content":""},{"lineNumber":3008,"author":{"gitId":"-"},"content":""},{"lineNumber":3009,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.1?"},{"lineNumber":3010,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3011,"author":{"gitId":"-"},"content":""},{"lineNumber":3012,"author":{"gitId":"-"},"content":"Release date: 2015-12-02"},{"lineNumber":3013,"author":{"gitId":"-"},"content":""},{"lineNumber":3014,"author":{"gitId":"-"},"content":""},{"lineNumber":3015,"author":{"gitId":"-"},"content":"    * Fix a crash which occurred when old visit methods are encountered"},{"lineNumber":3016,"author":{"gitId":"-"},"content":"      in plugin modules. Closes issue #711."},{"lineNumber":3017,"author":{"gitId":"-"},"content":""},{"lineNumber":3018,"author":{"gitId":"-"},"content":"    * Add wrong-import-position to check_messages\u0027s decorator arguments"},{"lineNumber":3019,"author":{"gitId":"-"},"content":"      for ImportChecker.leave_module"},{"lineNumber":3020,"author":{"gitId":"-"},"content":"      This fixes an esoteric bug which occurs when ungrouped-imports and"},{"lineNumber":3021,"author":{"gitId":"-"},"content":"      wrong-import-order are disabled and pylint is executed on multiple files."},{"lineNumber":3022,"author":{"gitId":"-"},"content":"      What happens is that without wrong-import-position in check_messages,"},{"lineNumber":3023,"author":{"gitId":"-"},"content":"      leave_module will never be called, which means that the first non-import node"},{"lineNumber":3024,"author":{"gitId":"-"},"content":"      from other files might leak into the current file,"},{"lineNumber":3025,"author":{"gitId":"-"},"content":"      leading to wrong-import-position being emitted by pylint."},{"lineNumber":3026,"author":{"gitId":"-"},"content":""},{"lineNumber":3027,"author":{"gitId":"-"},"content":"    * Fix a crash which occurred when old visit methods are encountered"},{"lineNumber":3028,"author":{"gitId":"-"},"content":"      in plugin modules. Closes issue #711."},{"lineNumber":3029,"author":{"gitId":"-"},"content":""},{"lineNumber":3030,"author":{"gitId":"-"},"content":"    * Don\u0027t emit import-self and cyclic-import for relative imports"},{"lineNumber":3031,"author":{"gitId":"-"},"content":"      of modules with the same name as the package itself."},{"lineNumber":3032,"author":{"gitId":"-"},"content":"      Closes issues #708 and #706."},{"lineNumber":3033,"author":{"gitId":"-"},"content":""},{"lineNumber":3034,"author":{"gitId":"-"},"content":""},{"lineNumber":3035,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.5.0?"},{"lineNumber":3036,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3037,"author":{"gitId":"-"},"content":""},{"lineNumber":3038,"author":{"gitId":"-"},"content":"Release date: 2015-11-29"},{"lineNumber":3039,"author":{"gitId":"-"},"content":""},{"lineNumber":3040,"author":{"gitId":"-"},"content":""},{"lineNumber":3041,"author":{"gitId":"-"},"content":"    * Added multiple warnings related to imports. \u0027wrong-import-order\u0027"},{"lineNumber":3042,"author":{"gitId":"-"},"content":"      is emitted when PEP 8 recommendations regarding imports are not"},{"lineNumber":3043,"author":{"gitId":"-"},"content":"      respected (that is, standard imports should be followed by third-party"},{"lineNumber":3044,"author":{"gitId":"-"},"content":"      imports and then by local imports). \u0027ungrouped-imports\u0027 is emitted"},{"lineNumber":3045,"author":{"gitId":"-"},"content":"      when imports from the same package or module are not placed"},{"lineNumber":3046,"author":{"gitId":"-"},"content":"      together, but scattered around in the code. \u0027wrong-import-position\u0027"},{"lineNumber":3047,"author":{"gitId":"-"},"content":"      is emitted when code is mixed with imports, being recommended for the"},{"lineNumber":3048,"author":{"gitId":"-"},"content":"      latter to be at the top of the file, in order to figure out easier by"},{"lineNumber":3049,"author":{"gitId":"-"},"content":"      a human reader what dependencies a module has."},{"lineNumber":3050,"author":{"gitId":"-"},"content":"      Closes issue #692."},{"lineNumber":3051,"author":{"gitId":"-"},"content":""},{"lineNumber":3052,"author":{"gitId":"-"},"content":"    * Added a new refactoring warning, \u0027unneeded-not\u0027, emitted"},{"lineNumber":3053,"author":{"gitId":"-"},"content":"      when an expression with the not operator could be simplified."},{"lineNumber":3054,"author":{"gitId":"-"},"content":"      Closes issue #670."},{"lineNumber":3055,"author":{"gitId":"-"},"content":""},{"lineNumber":3056,"author":{"gitId":"-"},"content":"    * Added a new refactoring warning, \u0027simplifiable-if-statement\u0027,"},{"lineNumber":3057,"author":{"gitId":"-"},"content":"      used when an if statement could be reduced to a boolean evaluation"},{"lineNumber":3058,"author":{"gitId":"-"},"content":"      of its test. Closes issue #698."},{"lineNumber":3059,"author":{"gitId":"-"},"content":""},{"lineNumber":3060,"author":{"gitId":"-"},"content":"    * Added a new refactoring warning, \u0027too-many-boolean-expressions\u0027,"},{"lineNumber":3061,"author":{"gitId":"-"},"content":"      used when an if statement contains too many boolean expressions,"},{"lineNumber":3062,"author":{"gitId":"-"},"content":"      which makes the code less maintainable and harder to understand."},{"lineNumber":3063,"author":{"gitId":"-"},"content":"      Closes issue #677."},{"lineNumber":3064,"author":{"gitId":"-"},"content":""},{"lineNumber":3065,"author":{"gitId":"-"},"content":"    * Property methods are shown as attributes instead of functions in"},{"lineNumber":3066,"author":{"gitId":"-"},"content":"      pyreverse class diagrams. Closes Issue #284"},{"lineNumber":3067,"author":{"gitId":"-"},"content":""},{"lineNumber":3068,"author":{"gitId":"-"},"content":"    * Add a new refactoring error, \u0027too-many-nested-blocks\u0027, which is emitted"},{"lineNumber":3069,"author":{"gitId":"-"},"content":"      when a function or a method has too many nested blocks, which makes the"},{"lineNumber":3070,"author":{"gitId":"-"},"content":"      code less readable and harder to understand. Closes issue #668."},{"lineNumber":3071,"author":{"gitId":"-"},"content":""},{"lineNumber":3072,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027unsubscriptable-object\u0027, that is emitted when"},{"lineNumber":3073,"author":{"gitId":"-"},"content":"      value used in subscription expression doesn\u0027t support subscription"},{"lineNumber":3074,"author":{"gitId":"-"},"content":"      (i.e. doesn\u0027t define __getitem__ method)."},{"lineNumber":3075,"author":{"gitId":"-"},"content":""},{"lineNumber":3076,"author":{"gitId":"-"},"content":"    * Don\u0027t warn about abstract classes instantiated in their own"},{"lineNumber":3077,"author":{"gitId":"-"},"content":"      body. Closes issue #627."},{"lineNumber":3078,"author":{"gitId":"-"},"content":""},{"lineNumber":3079,"author":{"gitId":"-"},"content":"    * Obsolete options are not present by default in the generated"},{"lineNumber":3080,"author":{"gitId":"-"},"content":"      configuration file. Closes issue #632."},{"lineNumber":3081,"author":{"gitId":"-"},"content":""},{"lineNumber":3082,"author":{"gitId":"-"},"content":"    * non-iterator-returned can detect classes with iterator-metaclasses."},{"lineNumber":3083,"author":{"gitId":"-"},"content":"      Closes issue #679."},{"lineNumber":3084,"author":{"gitId":"-"},"content":""},{"lineNumber":3085,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027unsupported-membership-test\u0027, emitted when value"},{"lineNumber":3086,"author":{"gitId":"-"},"content":"      to the right of the \u0027in\u0027 operator doesn\u0027t support membership test"},{"lineNumber":3087,"author":{"gitId":"-"},"content":"      protocol (i.e. doesn\u0027t define __contains__/__iter__/__getitem__)"},{"lineNumber":3088,"author":{"gitId":"-"},"content":""},{"lineNumber":3089,"author":{"gitId":"-"},"content":"    * Add new errors, \u0027not-an-iterable\u0027, emitted when non-iterable value"},{"lineNumber":3090,"author":{"gitId":"-"},"content":"      is used in an iterating context (starargs, for-statement,"},{"lineNumber":3091,"author":{"gitId":"-"},"content":"      comprehensions, etc), and \u0027not-a-mapping\u0027, emitted when non-mapping"},{"lineNumber":3092,"author":{"gitId":"-"},"content":"      value is used in a mapping context. Closes issue #563."},{"lineNumber":3093,"author":{"gitId":"-"},"content":""},{"lineNumber":3094,"author":{"gitId":"-"},"content":"    * Make \u0027no-self-use\u0027 checker not emit a warning if there is a \u0027super()\u0027"},{"lineNumber":3095,"author":{"gitId":"-"},"content":"      call inside the method."},{"lineNumber":3096,"author":{"gitId":"-"},"content":"      Closes issue #667."},{"lineNumber":3097,"author":{"gitId":"-"},"content":""},{"lineNumber":3098,"author":{"gitId":"-"},"content":"    * Add checker to identify multiple imports on one line."},{"lineNumber":3099,"author":{"gitId":"-"},"content":"      Closes issue #598."},{"lineNumber":3100,"author":{"gitId":"-"},"content":""},{"lineNumber":3101,"author":{"gitId":"-"},"content":"    * Fix unused-argument false positive when the \"+\u003d\" operator is used."},{"lineNumber":3102,"author":{"gitId":"-"},"content":"      Closes issue #518."},{"lineNumber":3103,"author":{"gitId":"-"},"content":""},{"lineNumber":3104,"author":{"gitId":"-"},"content":"    * Don\u0027t emit import-error for ignored modules. PyLint will not emit import"},{"lineNumber":3105,"author":{"gitId":"-"},"content":"      errors for any import which is, or is a subpackage of, a module in"},{"lineNumber":3106,"author":{"gitId":"-"},"content":"      the ignored-modules list. Closes issue #223."},{"lineNumber":3107,"author":{"gitId":"-"},"content":""},{"lineNumber":3108,"author":{"gitId":"-"},"content":"    * Fix unused-import false positive when the import is used in a"},{"lineNumber":3109,"author":{"gitId":"-"},"content":"      class assignment. Closes issue #475"},{"lineNumber":3110,"author":{"gitId":"-"},"content":""},{"lineNumber":3111,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027not-context-manager\u0027, emitted when something"},{"lineNumber":3112,"author":{"gitId":"-"},"content":"      that doesn\u0027t implement __enter__ and __exit__ is used in a with"},{"lineNumber":3113,"author":{"gitId":"-"},"content":"      statement."},{"lineNumber":3114,"author":{"gitId":"-"},"content":""},{"lineNumber":3115,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027confusing-with-statement\u0027, emitted by the"},{"lineNumber":3116,"author":{"gitId":"-"},"content":"      base checker, when an ambiguous looking with statement is used."},{"lineNumber":3117,"author":{"gitId":"-"},"content":"      For example `with open() as first, second` which looks like a"},{"lineNumber":3118,"author":{"gitId":"-"},"content":"      tuple assignment but is actually 2 context managers."},{"lineNumber":3119,"author":{"gitId":"-"},"content":""},{"lineNumber":3120,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027duplicate-except\u0027, emitted when there is an"},{"lineNumber":3121,"author":{"gitId":"-"},"content":"      exception handler which handles an exception type that was handled"},{"lineNumber":3122,"author":{"gitId":"-"},"content":"      before. Closes issue #485."},{"lineNumber":3123,"author":{"gitId":"-"},"content":""},{"lineNumber":3124,"author":{"gitId":"-"},"content":"    * A couple of warnings got promoted to errors, since they could uncover"},{"lineNumber":3125,"author":{"gitId":"-"},"content":"      potential bugs in the code. These warnings are: assignment-from-none,"},{"lineNumber":3126,"author":{"gitId":"-"},"content":"      unbalanced-tuple-unpacking, unpacking-non-sequence, non-iterator-returned."},{"lineNumber":3127,"author":{"gitId":"-"},"content":"      Closes issue #388."},{"lineNumber":3128,"author":{"gitId":"-"},"content":""},{"lineNumber":3129,"author":{"gitId":"-"},"content":"    * Allow ending a pragma control with a semicolon. In this way, users"},{"lineNumber":3130,"author":{"gitId":"-"},"content":"      can continue a pragma control with a reason for why it is used,"},{"lineNumber":3131,"author":{"gitId":"-"},"content":"      as in `# pylint: disable\u003dold-style-class;reason\u003d...`."},{"lineNumber":3132,"author":{"gitId":"-"},"content":"      Closes issue #449."},{"lineNumber":3133,"author":{"gitId":"-"},"content":""},{"lineNumber":3134,"author":{"gitId":"-"},"content":"    * --jobs can be used with --load-plugins now. Closes issue #456."},{"lineNumber":3135,"author":{"gitId":"-"},"content":""},{"lineNumber":3136,"author":{"gitId":"-"},"content":"    * Improve the performance of --jobs when dealing only with a package"},{"lineNumber":3137,"author":{"gitId":"-"},"content":"      name. Closes issue #479."},{"lineNumber":3138,"author":{"gitId":"-"},"content":""},{"lineNumber":3139,"author":{"gitId":"-"},"content":"    * Don\u0027t emit an unused-wildcard-import when the imported name comes"},{"lineNumber":3140,"author":{"gitId":"-"},"content":"      from another module and it is in fact a __future__ name."},{"lineNumber":3141,"author":{"gitId":"-"},"content":""},{"lineNumber":3142,"author":{"gitId":"-"},"content":"    * The colorized reporter now works on Windows. Closes issue #96."},{"lineNumber":3143,"author":{"gitId":"-"},"content":""},{"lineNumber":3144,"author":{"gitId":"-"},"content":"    * Remove pointless-except warning. It was previously disabled by"},{"lineNumber":3145,"author":{"gitId":"-"},"content":"      default and it wasn\u0027t very useful. Closes issue #506."},{"lineNumber":3146,"author":{"gitId":"-"},"content":""},{"lineNumber":3147,"author":{"gitId":"-"},"content":"    * Fix a crash on Python 3 related to the string checker, which"},{"lineNumber":3148,"author":{"gitId":"-"},"content":"      crashed when it encountered a bytes string with a .format"},{"lineNumber":3149,"author":{"gitId":"-"},"content":"      method called."},{"lineNumber":3150,"author":{"gitId":"-"},"content":""},{"lineNumber":3151,"author":{"gitId":"-"},"content":"    * Don\u0027t warn about no-self-use for builtin properties."},{"lineNumber":3152,"author":{"gitId":"-"},"content":""},{"lineNumber":3153,"author":{"gitId":"-"},"content":"    * Fix a false positive for bad-reversed-sequence, when a subclass"},{"lineNumber":3154,"author":{"gitId":"-"},"content":"      of a ``dict`` provides a __reversed__ method."},{"lineNumber":3155,"author":{"gitId":"-"},"content":""},{"lineNumber":3156,"author":{"gitId":"-"},"content":"    * Change the default no-docstring-rgx so missing-docstring isn\u0027t"},{"lineNumber":3157,"author":{"gitId":"-"},"content":"      emitted for private functions."},{"lineNumber":3158,"author":{"gitId":"-"},"content":""},{"lineNumber":3159,"author":{"gitId":"-"},"content":"    * Don\u0027t emit redefined-outer-name for __future__ directives."},{"lineNumber":3160,"author":{"gitId":"-"},"content":"      Closes issue #520."},{"lineNumber":3161,"author":{"gitId":"-"},"content":""},{"lineNumber":3162,"author":{"gitId":"-"},"content":"    * Provide some hints for the bad-builtin message. Closes issue #522."},{"lineNumber":3163,"author":{"gitId":"-"},"content":""},{"lineNumber":3164,"author":{"gitId":"-"},"content":"    * When checking for invalid arguments to a callable, in typecheck.py,"},{"lineNumber":3165,"author":{"gitId":"-"},"content":"      look up for the __init__ in case the found __new__ comes from builtins."},{"lineNumber":3166,"author":{"gitId":"-"},"content":""},{"lineNumber":3167,"author":{"gitId":"-"},"content":"      Since the __new__ comes from builtins, it will not have attached any"},{"lineNumber":3168,"author":{"gitId":"-"},"content":"      information regarding what parameters it expects, so the check"},{"lineNumber":3169,"author":{"gitId":"-"},"content":"      will be useless. Retrieving __init__ in that case will at least"},{"lineNumber":3170,"author":{"gitId":"-"},"content":"      detect a couple of false negatives. Closes issue #429."},{"lineNumber":3171,"author":{"gitId":"-"},"content":""},{"lineNumber":3172,"author":{"gitId":"-"},"content":"    * Don\u0027t emit no-member for classes with unknown bases."},{"lineNumber":3173,"author":{"gitId":"-"},"content":""},{"lineNumber":3174,"author":{"gitId":"-"},"content":"      Since we don\u0027t know what those bases might add, we simply ignore"},{"lineNumber":3175,"author":{"gitId":"-"},"content":"      the error in this case."},{"lineNumber":3176,"author":{"gitId":"-"},"content":""},{"lineNumber":3177,"author":{"gitId":"-"},"content":"    * Lookup in the implicit metaclass when checking for no-member,"},{"lineNumber":3178,"author":{"gitId":"-"},"content":"      if the class in question has an implicit metaclass, which is"},{"lineNumber":3179,"author":{"gitId":"-"},"content":"      True for new style classes. Closes issue #438."},{"lineNumber":3180,"author":{"gitId":"-"},"content":""},{"lineNumber":3181,"author":{"gitId":"-"},"content":"    * Add two new warnings, duplicate-bases and inconsistent-mro."},{"lineNumber":3182,"author":{"gitId":"-"},"content":""},{"lineNumber":3183,"author":{"gitId":"-"},"content":"      duplicate-bases is emitted when a class has the same bases"},{"lineNumber":3184,"author":{"gitId":"-"},"content":"      listed more than once in its bases definition, while inconsistent-mro"},{"lineNumber":3185,"author":{"gitId":"-"},"content":"      is emitted when no sane mro hierarchy can be determined. Closes issue #526."},{"lineNumber":3186,"author":{"gitId":"-"},"content":""},{"lineNumber":3187,"author":{"gitId":"-"},"content":"    * Remove interface-not-implemented warning. Closes issue #532."},{"lineNumber":3188,"author":{"gitId":"-"},"content":""},{"lineNumber":3189,"author":{"gitId":"-"},"content":"    * Remove the rest of interface checks: interface-is-not-class,"},{"lineNumber":3190,"author":{"gitId":"-"},"content":"      missing-interface-method, unresolved-interface. The reason is that"},{"lineNumber":3191,"author":{"gitId":"-"},"content":"      its better to start recommending ABCs instead of the old Zope era"},{"lineNumber":3192,"author":{"gitId":"-"},"content":"      of interfaces. One side effect of this change is that ignore-iface-methods"},{"lineNumber":3193,"author":{"gitId":"-"},"content":"      becomes a noop, it\u0027s deprecated and it will be removed at some time."},{"lineNumber":3194,"author":{"gitId":"-"},"content":""},{"lineNumber":3195,"author":{"gitId":"-"},"content":"    * Emit a proper deprecation warning for reporters.BaseReporter.add_message."},{"lineNumber":3196,"author":{"gitId":"-"},"content":""},{"lineNumber":3197,"author":{"gitId":"-"},"content":"      The alternative way is to use handle_message. add_message will be removed in"},{"lineNumber":3198,"author":{"gitId":"-"},"content":"      Pylint 1.6."},{"lineNumber":3199,"author":{"gitId":"-"},"content":""},{"lineNumber":3200,"author":{"gitId":"-"},"content":"    * Added new module \u0027extensions\u0027 for optional checkers with the test"},{"lineNumber":3201,"author":{"gitId":"-"},"content":"      directory \u0027test/extensions\u0027 and documentation file \u0027doc/extensions.rst\u0027."},{"lineNumber":3202,"author":{"gitId":"-"},"content":""},{"lineNumber":3203,"author":{"gitId":"-"},"content":"    * Added new checker \u0027extensions.check_docs\u0027 that verifies parameter"},{"lineNumber":3204,"author":{"gitId":"-"},"content":"      documention in Sphinx, Google, and Numpy style."},{"lineNumber":3205,"author":{"gitId":"-"},"content":""},{"lineNumber":3206,"author":{"gitId":"-"},"content":"    * Detect undefined variable cases, where the \"definition\" of an undefined"},{"lineNumber":3207,"author":{"gitId":"-"},"content":"      variable was in del statement. Instead of emitting used-before-assignment,"},{"lineNumber":3208,"author":{"gitId":"-"},"content":"      which is totally misleading, it now emits undefined-variable."},{"lineNumber":3209,"author":{"gitId":"-"},"content":"      Closes issue #528."},{"lineNumber":3210,"author":{"gitId":"-"},"content":""},{"lineNumber":3211,"author":{"gitId":"-"},"content":"    * Don\u0027t emit attribute-defined-outside-init and access-member-before-definition"},{"lineNumber":3212,"author":{"gitId":"-"},"content":"      for mixin classes. Actual errors can occur in mixin classes, but this is"},{"lineNumber":3213,"author":{"gitId":"-"},"content":"      controlled by the ignore-mixin-members option. Closes issue #412."},{"lineNumber":3214,"author":{"gitId":"-"},"content":""},{"lineNumber":3215,"author":{"gitId":"-"},"content":"    * Improve the detection of undefined variables and variables used before"},{"lineNumber":3216,"author":{"gitId":"-"},"content":"      assignment for variables used as default arguments to function,"},{"lineNumber":3217,"author":{"gitId":"-"},"content":"      where the variable was first defined in the class scope."},{"lineNumber":3218,"author":{"gitId":"-"},"content":"      Closes issue #342 and issue #404."},{"lineNumber":3219,"author":{"gitId":"-"},"content":""},{"lineNumber":3220,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027unexpected-special-method-signature\u0027, which is emitted"},{"lineNumber":3221,"author":{"gitId":"-"},"content":"      when a special method (dunder method) doesn\u0027t have the expected signature,"},{"lineNumber":3222,"author":{"gitId":"-"},"content":"      which can lead to actual errors in the application code."},{"lineNumber":3223,"author":{"gitId":"-"},"content":"      Closes issue #253."},{"lineNumber":3224,"author":{"gitId":"-"},"content":""},{"lineNumber":3225,"author":{"gitId":"-"},"content":"    * Remove \u0027bad-context-manager\u0027 due to the inclusion of \u0027unexpected-special-method-signature\u0027."},{"lineNumber":3226,"author":{"gitId":"-"},"content":""},{"lineNumber":3227,"author":{"gitId":"-"},"content":"    * Don\u0027t emit no-name-in-module if the import is guarded by an ImportError, Exception or"},{"lineNumber":3228,"author":{"gitId":"-"},"content":"      a bare except clause."},{"lineNumber":3229,"author":{"gitId":"-"},"content":""},{"lineNumber":3230,"author":{"gitId":"-"},"content":"    * Don\u0027t emit no-member if the attribute access node is protected by an"},{"lineNumber":3231,"author":{"gitId":"-"},"content":"      except handler, which handles AttributeError, Exception or it is a"},{"lineNumber":3232,"author":{"gitId":"-"},"content":"      bare except."},{"lineNumber":3233,"author":{"gitId":"-"},"content":""},{"lineNumber":3234,"author":{"gitId":"-"},"content":"    * Don\u0027t emit import-error if the import is guarded by an ImportError, Exception or a"},{"lineNumber":3235,"author":{"gitId":"-"},"content":"      bare except clause."},{"lineNumber":3236,"author":{"gitId":"-"},"content":""},{"lineNumber":3237,"author":{"gitId":"-"},"content":"    * Don\u0027t emit undefined-variable if the node is guarded by a NameError, Exception"},{"lineNumber":3238,"author":{"gitId":"-"},"content":"      or bare except clause."},{"lineNumber":3239,"author":{"gitId":"-"},"content":""},{"lineNumber":3240,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027using-constant-test\u0027, which is emitted when a conditional"},{"lineNumber":3241,"author":{"gitId":"-"},"content":"      statement (If, IfExp) uses a test which is always constant, such as numbers,"},{"lineNumber":3242,"author":{"gitId":"-"},"content":"      classes, functions etc. This is most likely an error from the user\u0027s part."},{"lineNumber":3243,"author":{"gitId":"-"},"content":"      Closes issue #524."},{"lineNumber":3244,"author":{"gitId":"-"},"content":""},{"lineNumber":3245,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027raising-non-exception\u0027 when the exception has unknown"},{"lineNumber":3246,"author":{"gitId":"-"},"content":"      bases. We don\u0027t know what those bases actually are and it\u0027s better"},{"lineNumber":3247,"author":{"gitId":"-"},"content":"      to assume that the user knows what he is doing rather than emitting"},{"lineNumber":3248,"author":{"gitId":"-"},"content":"      a message which can be considered a false positive."},{"lineNumber":3249,"author":{"gitId":"-"},"content":""},{"lineNumber":3250,"author":{"gitId":"-"},"content":"    * Look for a .pylintrc configuration file in the current folder,"},{"lineNumber":3251,"author":{"gitId":"-"},"content":"      if pylintrc is not found. Dotted pylintrc files will not be searched"},{"lineNumber":3252,"author":{"gitId":"-"},"content":"      in the parents of the current folder, as it is done for pylintrc."},{"lineNumber":3253,"author":{"gitId":"-"},"content":""},{"lineNumber":3254,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027invalid-unary-type-operand\u0027, emitted when"},{"lineNumber":3255,"author":{"gitId":"-"},"content":"      an unary operand is used on something which doesn\u0027t support that"},{"lineNumber":3256,"author":{"gitId":"-"},"content":"      operation (for instance, using the unary bitwise inversion operator"},{"lineNumber":3257,"author":{"gitId":"-"},"content":"      on an instance which doesn\u0027t implement __invert__)."},{"lineNumber":3258,"author":{"gitId":"-"},"content":""},{"lineNumber":3259,"author":{"gitId":"-"},"content":"    * Take in consideration differences between arguments of various"},{"lineNumber":3260,"author":{"gitId":"-"},"content":"      type of functions (classmethods, staticmethods, properties)"},{"lineNumber":3261,"author":{"gitId":"-"},"content":"      when checking for ``arguments-differ``. Closes issue #548."},{"lineNumber":3262,"author":{"gitId":"-"},"content":""},{"lineNumber":3263,"author":{"gitId":"-"},"content":"    * astroid.inspector was moved to pylint.pyreverse, since it belongs"},{"lineNumber":3264,"author":{"gitId":"-"},"content":"      there and it doesn\u0027t need to be in astroid."},{"lineNumber":3265,"author":{"gitId":"-"},"content":""},{"lineNumber":3266,"author":{"gitId":"-"},"content":"    * astroid.utils.LocalsVisitor was moved to pylint.pyreverse.LocalsVisitor."},{"lineNumber":3267,"author":{"gitId":"-"},"content":""},{"lineNumber":3268,"author":{"gitId":"-"},"content":"    * pylint.checkers.utils.excepts_import_error was removed."},{"lineNumber":3269,"author":{"gitId":"-"},"content":"      Use pylint.chekcers.utils.error_of_type instead."},{"lineNumber":3270,"author":{"gitId":"-"},"content":""},{"lineNumber":3271,"author":{"gitId":"-"},"content":"    * Don\u0027t emit undefined-all-variables for nodes which can\u0027t be"},{"lineNumber":3272,"author":{"gitId":"-"},"content":"      inferred (YES nodes)."},{"lineNumber":3273,"author":{"gitId":"-"},"content":""},{"lineNumber":3274,"author":{"gitId":"-"},"content":"    * yield-outside-func is also emitted for ``yield from``."},{"lineNumber":3275,"author":{"gitId":"-"},"content":""},{"lineNumber":3276,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027too-many-star-expressions\u0027, emitted when"},{"lineNumber":3277,"author":{"gitId":"-"},"content":"      there are more than one starred expression (`*x`) in an assignment."},{"lineNumber":3278,"author":{"gitId":"-"},"content":"      The warning is emitted only on Python 3."},{"lineNumber":3279,"author":{"gitId":"-"},"content":""},{"lineNumber":3280,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027invalid-star-assignment-target\u0027, emitted when"},{"lineNumber":3281,"author":{"gitId":"-"},"content":"      a starred expression (`*x`) is used as the lhs side of an assignment,"},{"lineNumber":3282,"author":{"gitId":"-"},"content":"      as in `*x \u003d [1, 2]`. This is not a SyntaxError on Python 3 though."},{"lineNumber":3283,"author":{"gitId":"-"},"content":""},{"lineNumber":3284,"author":{"gitId":"-"},"content":"    * Detect a couple of objects which can\u0027t be base classes (bool,"},{"lineNumber":3285,"author":{"gitId":"-"},"content":"      slice, range and memoryview, which weren\u0027t detected until now)."},{"lineNumber":3286,"author":{"gitId":"-"},"content":""},{"lineNumber":3287,"author":{"gitId":"-"},"content":"    * Add a new error for the Python 3 porting checker, ``import-star-module-level``,"},{"lineNumber":3288,"author":{"gitId":"-"},"content":"      which is used when a star import is detected in another scope than the"},{"lineNumber":3289,"author":{"gitId":"-"},"content":"      module level, which is an error on Python 3. Using this will emit a"},{"lineNumber":3290,"author":{"gitId":"-"},"content":"      SyntaxWarning on Python 2."},{"lineNumber":3291,"author":{"gitId":"-"},"content":""},{"lineNumber":3292,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027star-needs-assignment-target\u0027, emitted on Python 3 when"},{"lineNumber":3293,"author":{"gitId":"-"},"content":"      a Starred expression (`*x`) is not used in an assignment target. This is not"},{"lineNumber":3294,"author":{"gitId":"-"},"content":"      caught when parsing the AST on Python 3, so it needs to be a separate check."},{"lineNumber":3295,"author":{"gitId":"-"},"content":""},{"lineNumber":3296,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027unsupported-binary-operation\u0027, emitted when"},{"lineNumber":3297,"author":{"gitId":"-"},"content":"      two a binary arithmetic operation is executed between two objects"},{"lineNumber":3298,"author":{"gitId":"-"},"content":"      which don\u0027t support it (a number plus a string for instance)."},{"lineNumber":3299,"author":{"gitId":"-"},"content":"      This is currently disabled, since the it exhibits way too many false"},{"lineNumber":3300,"author":{"gitId":"-"},"content":"      positives, but it will be reenabled as soon as possible."},{"lineNumber":3301,"author":{"gitId":"-"},"content":""},{"lineNumber":3302,"author":{"gitId":"-"},"content":"    * New imported features from astroid into pyreverse: pyreverse.inspector.Project,"},{"lineNumber":3303,"author":{"gitId":"-"},"content":"      pyreverse.inspector.project_from_files and pyreverse.inspector.interfaces."},{"lineNumber":3304,"author":{"gitId":"-"},"content":""},{"lineNumber":3305,"author":{"gitId":"-"},"content":"      These were moved since they didn\u0027t belong in astroid."},{"lineNumber":3306,"author":{"gitId":"-"},"content":""},{"lineNumber":3307,"author":{"gitId":"-"},"content":"    * Enable misplaced-future for Python 3. Closes issue #580."},{"lineNumber":3308,"author":{"gitId":"-"},"content":""},{"lineNumber":3309,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027nonlocal-and-global\u0027, which is emitted when a"},{"lineNumber":3310,"author":{"gitId":"-"},"content":"      name is found to be both nonlocal and global in the same scope."},{"lineNumber":3311,"author":{"gitId":"-"},"content":"      Closes issue #581."},{"lineNumber":3312,"author":{"gitId":"-"},"content":""},{"lineNumber":3313,"author":{"gitId":"-"},"content":"    * ignored-classes option can work with qualified names (ignored-classes\u003doptparse.Values)"},{"lineNumber":3314,"author":{"gitId":"-"},"content":"      Closes issue #297."},{"lineNumber":3315,"author":{"gitId":"-"},"content":""},{"lineNumber":3316,"author":{"gitId":"-"},"content":"    * ignored-modules can work with qualified names as well as with Unix pattern"},{"lineNumber":3317,"author":{"gitId":"-"},"content":"      matching for recursive ignoring. Closes issues #244."},{"lineNumber":3318,"author":{"gitId":"-"},"content":""},{"lineNumber":3319,"author":{"gitId":"-"},"content":"    * Improve detection of relative imports in non-packages, as well as importing"},{"lineNumber":3320,"author":{"gitId":"-"},"content":"      missing modules with a relative import from a package."},{"lineNumber":3321,"author":{"gitId":"-"},"content":""},{"lineNumber":3322,"author":{"gitId":"-"},"content":"    * Don\u0027t emit no-init if not all the bases from a class are known."},{"lineNumber":3323,"author":{"gitId":"-"},"content":"      Closes issue #604."},{"lineNumber":3324,"author":{"gitId":"-"},"content":""},{"lineNumber":3325,"author":{"gitId":"-"},"content":"    * --no-space-check option accepts ``empty-line`` as a possible option."},{"lineNumber":3326,"author":{"gitId":"-"},"content":"      Closes issue #541."},{"lineNumber":3327,"author":{"gitId":"-"},"content":""},{"lineNumber":3328,"author":{"gitId":"-"},"content":"    * --generate-rcfile generates by default human readable symbols"},{"lineNumber":3329,"author":{"gitId":"-"},"content":"      for the --disable option. Closes issue #608."},{"lineNumber":3330,"author":{"gitId":"-"},"content":""},{"lineNumber":3331,"author":{"gitId":"-"},"content":"    * Improved the not-in-loop checker to properly detect more cases."},{"lineNumber":3332,"author":{"gitId":"-"},"content":""},{"lineNumber":3333,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027continue-in-finally\u0027, which is emitted when"},{"lineNumber":3334,"author":{"gitId":"-"},"content":"      the ``continue`` keyword is found inside a ``finally`` clause, which"},{"lineNumber":3335,"author":{"gitId":"-"},"content":"      is a SyntaxError."},{"lineNumber":3336,"author":{"gitId":"-"},"content":""},{"lineNumber":3337,"author":{"gitId":"-"},"content":"    * The --zope flag is deprecated and it is slated for removal"},{"lineNumber":3338,"author":{"gitId":"-"},"content":"      in Pylint 1.6."},{"lineNumber":3339,"author":{"gitId":"-"},"content":""},{"lineNumber":3340,"author":{"gitId":"-"},"content":"      The reason behind this removal is the fact that it\u0027s a specialized"},{"lineNumber":3341,"author":{"gitId":"-"},"content":"      flag and there are solutions for the original problem:"},{"lineNumber":3342,"author":{"gitId":"-"},"content":"      use --generated-members with the members that causes problems"},{"lineNumber":3343,"author":{"gitId":"-"},"content":"      when using Zope or add AST transforms tailored to the zope"},{"lineNumber":3344,"author":{"gitId":"-"},"content":"      project."},{"lineNumber":3345,"author":{"gitId":"-"},"content":""},{"lineNumber":3346,"author":{"gitId":"-"},"content":"      At the same time, --include-ids and --symbols will also be removed"},{"lineNumber":3347,"author":{"gitId":"-"},"content":"      in Pylint 1.6. Closes issue #570."},{"lineNumber":3348,"author":{"gitId":"-"},"content":""},{"lineNumber":3349,"author":{"gitId":"-"},"content":"    * missing-module-attribute was removed and the corresponding"},{"lineNumber":3350,"author":{"gitId":"-"},"content":"      CLI option, required-attributes, which is slated for removal"},{"lineNumber":3351,"author":{"gitId":"-"},"content":"      in Pylint 1.6."},{"lineNumber":3352,"author":{"gitId":"-"},"content":""},{"lineNumber":3353,"author":{"gitId":"-"},"content":"    * missing-reversed-argument was removed."},{"lineNumber":3354,"author":{"gitId":"-"},"content":""},{"lineNumber":3355,"author":{"gitId":"-"},"content":"      The reason behind this is that this kind of errors should be"},{"lineNumber":3356,"author":{"gitId":"-"},"content":"      detected by the type checker for *all* the builtins and not"},{"lineNumber":3357,"author":{"gitId":"-"},"content":"      as a special case for the reversed builtin. This will happen"},{"lineNumber":3358,"author":{"gitId":"-"},"content":"      shortly in the future."},{"lineNumber":3359,"author":{"gitId":"-"},"content":""},{"lineNumber":3360,"author":{"gitId":"-"},"content":"    * --comment flag is obsolete and it will be removed in Pylint 1.6."},{"lineNumber":3361,"author":{"gitId":"-"},"content":""},{"lineNumber":3362,"author":{"gitId":"-"},"content":"    * --profile flag is obsolete and it will be removed in Pylint 1.6."},{"lineNumber":3363,"author":{"gitId":"-"},"content":""},{"lineNumber":3364,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027misplaced-bare-raise\u0027."},{"lineNumber":3365,"author":{"gitId":"-"},"content":""},{"lineNumber":3366,"author":{"gitId":"-"},"content":"      The error is used when a bare raise is not used inside an except clause."},{"lineNumber":3367,"author":{"gitId":"-"},"content":"      This can generate a RuntimeError in Python, if there are no active exceptions"},{"lineNumber":3368,"author":{"gitId":"-"},"content":"      to be reraised. While it works in Python 2 due to the fact that the exception"},{"lineNumber":3369,"author":{"gitId":"-"},"content":"      leaks outside of the except block, it\u0027s nevertheless a behaviour that"},{"lineNumber":3370,"author":{"gitId":"-"},"content":"      a user shouldn\u0027t depend upon, since it\u0027s not obvious to the reader of the code"},{"lineNumber":3371,"author":{"gitId":"-"},"content":"      what exception will be raised and it will not be compatible with Python 3 anyhow."},{"lineNumber":3372,"author":{"gitId":"-"},"content":"      Closes issue #633."},{"lineNumber":3373,"author":{"gitId":"-"},"content":""},{"lineNumber":3374,"author":{"gitId":"-"},"content":"    * Bring logilab-common\u0027s ureports into pylint.reporters."},{"lineNumber":3375,"author":{"gitId":"-"},"content":""},{"lineNumber":3376,"author":{"gitId":"-"},"content":"      With this change, we moved away from depending on logilab-common,"},{"lineNumber":3377,"author":{"gitId":"-"},"content":"      having in Pylint all the components that were used from logilab-common."},{"lineNumber":3378,"author":{"gitId":"-"},"content":"      The API should be considered an implementation detail and can change at"},{"lineNumber":3379,"author":{"gitId":"-"},"content":"      some point in the future."},{"lineNumber":3380,"author":{"gitId":"-"},"content":"      Closes issue #621."},{"lineNumber":3381,"author":{"gitId":"-"},"content":""},{"lineNumber":3382,"author":{"gitId":"-"},"content":"    * ``reimported`` is emitted for reimported objects on the same line."},{"lineNumber":3383,"author":{"gitId":"-"},"content":""},{"lineNumber":3384,"author":{"gitId":"-"},"content":"      Closes issue #639."},{"lineNumber":3385,"author":{"gitId":"-"},"content":""},{"lineNumber":3386,"author":{"gitId":"-"},"content":"    * Abbreviations of command line options are not supported anymore."},{"lineNumber":3387,"author":{"gitId":"-"},"content":""},{"lineNumber":3388,"author":{"gitId":"-"},"content":"      Using abbreviations for CLI options was never considered to be"},{"lineNumber":3389,"author":{"gitId":"-"},"content":"      a feature of pylint, this fact being only a side effect of using optparse."},{"lineNumber":3390,"author":{"gitId":"-"},"content":"      As this was the case, using --load-plugin or other abbreviation"},{"lineNumber":3391,"author":{"gitId":"-"},"content":"      for --load-plugins never actually worked, while it also didn\u0027t raise"},{"lineNumber":3392,"author":{"gitId":"-"},"content":"      an error. Closes issue #424."},{"lineNumber":3393,"author":{"gitId":"-"},"content":""},{"lineNumber":3394,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027nonlocal-without-binding\u0027"},{"lineNumber":3395,"author":{"gitId":"-"},"content":""},{"lineNumber":3396,"author":{"gitId":"-"},"content":"      The error is emitted on Python 3 when a nonlocal name is not bound"},{"lineNumber":3397,"author":{"gitId":"-"},"content":"      to any variable in the parents scopes. Closes issue #582."},{"lineNumber":3398,"author":{"gitId":"-"},"content":""},{"lineNumber":3399,"author":{"gitId":"-"},"content":"    * \u0027deprecated-module\u0027 can be shown for modules which aren\u0027t"},{"lineNumber":3400,"author":{"gitId":"-"},"content":"       available. Closes issue #362."},{"lineNumber":3401,"author":{"gitId":"-"},"content":""},{"lineNumber":3402,"author":{"gitId":"-"},"content":"    * Don\u0027t consider a class abstract if its members can\u0027t"},{"lineNumber":3403,"author":{"gitId":"-"},"content":"      be properly inferred."},{"lineNumber":3404,"author":{"gitId":"-"},"content":""},{"lineNumber":3405,"author":{"gitId":"-"},"content":"      This fixes a false positive related to abstract-class-instantiated."},{"lineNumber":3406,"author":{"gitId":"-"},"content":"      Closes issue #648."},{"lineNumber":3407,"author":{"gitId":"-"},"content":""},{"lineNumber":3408,"author":{"gitId":"-"},"content":"    * Add a new checker for the async features added by PEP 492."},{"lineNumber":3409,"author":{"gitId":"-"},"content":""},{"lineNumber":3410,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027yield-inside-async-function\u0027, emitted on"},{"lineNumber":3411,"author":{"gitId":"-"},"content":"      Python 3.5 and upwards when the ``yield`` statement is found inside"},{"lineNumber":3412,"author":{"gitId":"-"},"content":"      a new coroutine function (PEP 492)."},{"lineNumber":3413,"author":{"gitId":"-"},"content":""},{"lineNumber":3414,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027not-async-context-manager\u0027, emitted when"},{"lineNumber":3415,"author":{"gitId":"-"},"content":"      an async context manager block is used with an object which doesn\u0027t"},{"lineNumber":3416,"author":{"gitId":"-"},"content":"      support this protocol (PEP 492)."},{"lineNumber":3417,"author":{"gitId":"-"},"content":""},{"lineNumber":3418,"author":{"gitId":"-"},"content":"    * Add a new convention warning, \u0027singleton-comparison\u0027, emitted when"},{"lineNumber":3419,"author":{"gitId":"-"},"content":"      comparison to True, False or None is found."},{"lineNumber":3420,"author":{"gitId":"-"},"content":""},{"lineNumber":3421,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027assigning-non-slot\u0027 for descriptors. Closes issue #652."},{"lineNumber":3422,"author":{"gitId":"-"},"content":""},{"lineNumber":3423,"author":{"gitId":"-"},"content":"    * Add a new error, \u0027repeated-keyword\u0027, when a keyword argument is passed"},{"lineNumber":3424,"author":{"gitId":"-"},"content":"      multiple times into a function call."},{"lineNumber":3425,"author":{"gitId":"-"},"content":""},{"lineNumber":3426,"author":{"gitId":"-"},"content":"      This is similar with redundant-keyword-arg, but it\u0027s mildly different"},{"lineNumber":3427,"author":{"gitId":"-"},"content":"      that it needs to be a separate error."},{"lineNumber":3428,"author":{"gitId":"-"},"content":""},{"lineNumber":3429,"author":{"gitId":"-"},"content":"    * --enable\u003dall can now be used. Closes issue #142."},{"lineNumber":3430,"author":{"gitId":"-"},"content":""},{"lineNumber":3431,"author":{"gitId":"-"},"content":"    * Add a new convention message, \u0027misplaced-comparison-constant\u0027,"},{"lineNumber":3432,"author":{"gitId":"-"},"content":"      emitted when a constant is placed in the left hand side of a comparison,"},{"lineNumber":3433,"author":{"gitId":"-"},"content":"      as in \u00275 \u003d\u003d func()\u0027. This is also called Yoda condition, since the"},{"lineNumber":3434,"author":{"gitId":"-"},"content":"      flow of code reminds of the Star Wars green character, conditions usually"},{"lineNumber":3435,"author":{"gitId":"-"},"content":"      encountered in languages with variabile assignments in conditional"},{"lineNumber":3436,"author":{"gitId":"-"},"content":"      statements."},{"lineNumber":3437,"author":{"gitId":"-"},"content":""},{"lineNumber":3438,"author":{"gitId":"-"},"content":"    * Add a new convention message, \u0027consider-using-enumerate\u0027, which is"},{"lineNumber":3439,"author":{"gitId":"-"},"content":"      emitted when code that uses ``range`` and ``len`` for iterating is encountered."},{"lineNumber":3440,"author":{"gitId":"-"},"content":"      Closes issue #684."},{"lineNumber":3441,"author":{"gitId":"-"},"content":""},{"lineNumber":3442,"author":{"gitId":"-"},"content":"    * Added two new refactoring messages, \u0027no-classmethod-decorator\u0027 and"},{"lineNumber":3443,"author":{"gitId":"-"},"content":"      \u0027no-staticmethod-decorator\u0027, which are emitted when a static method or a class"},{"lineNumber":3444,"author":{"gitId":"-"},"content":"      method is declared without using decorators syntax."},{"lineNumber":3445,"author":{"gitId":"-"},"content":""},{"lineNumber":3446,"author":{"gitId":"-"},"content":"      Closes issue #675."},{"lineNumber":3447,"author":{"gitId":"-"},"content":""},{"lineNumber":3448,"author":{"gitId":"-"},"content":""},{"lineNumber":3449,"author":{"gitId":"-"},"content":""},{"lineNumber":3450,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.4.3?"},{"lineNumber":3451,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3452,"author":{"gitId":"-"},"content":""},{"lineNumber":3453,"author":{"gitId":"-"},"content":"Release date: 2015-03-14"},{"lineNumber":3454,"author":{"gitId":"-"},"content":""},{"lineNumber":3455,"author":{"gitId":"-"},"content":""},{"lineNumber":3456,"author":{"gitId":"-"},"content":"    * Remove three warnings: star-args, abstract-class-little-used,"},{"lineNumber":3457,"author":{"gitId":"-"},"content":"      abstract-class-not-used. These warnings don\u0027t add any real value"},{"lineNumber":3458,"author":{"gitId":"-"},"content":"      and they don\u0027t imply errors or problems in the code."},{"lineNumber":3459,"author":{"gitId":"-"},"content":""},{"lineNumber":3460,"author":{"gitId":"-"},"content":"    * Added a new option for controlling the peephole optimizer in astroid."},{"lineNumber":3461,"author":{"gitId":"-"},"content":"      The option ``--optimize-ast`` will control the peephole optimizer,"},{"lineNumber":3462,"author":{"gitId":"-"},"content":"      which is used to optimize a couple of AST subtrees. The current problem"},{"lineNumber":3463,"author":{"gitId":"-"},"content":"      solved by the peephole optimizer is when multiple joined strings,"},{"lineNumber":3464,"author":{"gitId":"-"},"content":"      with the addition operator, are encountered. If the numbers of such"},{"lineNumber":3465,"author":{"gitId":"-"},"content":"      strings is high enough, Pylint will then fail with a maximum recursion"},{"lineNumber":3466,"author":{"gitId":"-"},"content":"      depth exceeded error, due to its visitor architecture. The peephole"},{"lineNumber":3467,"author":{"gitId":"-"},"content":"      just transforms such calls, if it can, into the final resulting string"},{"lineNumber":3468,"author":{"gitId":"-"},"content":"      and this exhibit a problem, because the visit_binop method stops being"},{"lineNumber":3469,"author":{"gitId":"-"},"content":"      called (in the optimized AST it will be a Const node)."},{"lineNumber":3470,"author":{"gitId":"-"},"content":""},{"lineNumber":3471,"author":{"gitId":"-"},"content":""},{"lineNumber":3472,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.4.2?"},{"lineNumber":3473,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3474,"author":{"gitId":"-"},"content":""},{"lineNumber":3475,"author":{"gitId":"-"},"content":"Release date: 2015-03-11"},{"lineNumber":3476,"author":{"gitId":"-"},"content":""},{"lineNumber":3477,"author":{"gitId":"-"},"content":"    * Don\u0027t require a docstring for empty modules. Closes issue #261."},{"lineNumber":3478,"author":{"gitId":"-"},"content":""},{"lineNumber":3479,"author":{"gitId":"-"},"content":"    * Fix a false positive with ``too-few-format-args`` string warning,"},{"lineNumber":3480,"author":{"gitId":"-"},"content":"      emitted when the string format contained a normal positional"},{"lineNumber":3481,"author":{"gitId":"-"},"content":"      argument (\u0027{0}\u0027), mixed with a positional argument which did"},{"lineNumber":3482,"author":{"gitId":"-"},"content":"      an attribute access (\u0027{0.__class__}\u0027)."},{"lineNumber":3483,"author":{"gitId":"-"},"content":"      Closes issue #463."},{"lineNumber":3484,"author":{"gitId":"-"},"content":""},{"lineNumber":3485,"author":{"gitId":"-"},"content":"    * Take in account all the methods from the ancestors"},{"lineNumber":3486,"author":{"gitId":"-"},"content":"      when checking for too-few-public-methods. Closes issue #471."},{"lineNumber":3487,"author":{"gitId":"-"},"content":""},{"lineNumber":3488,"author":{"gitId":"-"},"content":"    * Catch enchant errors and emit \u0027invalid-characters-in-docstring\u0027"},{"lineNumber":3489,"author":{"gitId":"-"},"content":"      when checking for spelling errors. Closes issue #469."},{"lineNumber":3490,"author":{"gitId":"-"},"content":""},{"lineNumber":3491,"author":{"gitId":"-"},"content":"    * Use all the inferred statements for the super-init-not-called"},{"lineNumber":3492,"author":{"gitId":"-"},"content":"      check. Closes issue #389."},{"lineNumber":3493,"author":{"gitId":"-"},"content":""},{"lineNumber":3494,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027unichr-builtin\u0027, emitted by the Python 3"},{"lineNumber":3495,"author":{"gitId":"-"},"content":"      porting checker, when the unichr builtin is found. Closes issue #472."},{"lineNumber":3496,"author":{"gitId":"-"},"content":""},{"lineNumber":3497,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027intern-builtin\u0027, emitted by the Python 3"},{"lineNumber":3498,"author":{"gitId":"-"},"content":"      porting checker, when the intern builtin is found. Closes issue #473."},{"lineNumber":3499,"author":{"gitId":"-"},"content":""},{"lineNumber":3500,"author":{"gitId":"-"},"content":"    * Add support for editable installations."},{"lineNumber":3501,"author":{"gitId":"-"},"content":""},{"lineNumber":3502,"author":{"gitId":"-"},"content":"    * The HTML output accepts the ``--msg-template`` option. Patch by"},{"lineNumber":3503,"author":{"gitId":"-"},"content":"      Dan Goldsmith."},{"lineNumber":3504,"author":{"gitId":"-"},"content":""},{"lineNumber":3505,"author":{"gitId":"-"},"content":"    * Add \u0027map-builtin-not-iterating\u0027 (replacing \u0027implicit-map-evaluation\u0027),"},{"lineNumber":3506,"author":{"gitId":"-"},"content":"      \u0027zip-builtin-not-iterating\u0027, \u0027range-builtin-not-iterating\u0027, and"},{"lineNumber":3507,"author":{"gitId":"-"},"content":"      \u0027filter-builtin-not-iterating\u0027 which are emitted by ``--py3k`` when the"},{"lineNumber":3508,"author":{"gitId":"-"},"content":"      appropriate built-in is not used in an iterating context (semantics"},{"lineNumber":3509,"author":{"gitId":"-"},"content":"      taken from 2to3)."},{"lineNumber":3510,"author":{"gitId":"-"},"content":""},{"lineNumber":3511,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027unidiomatic-typecheck\u0027, emitted when an explicit"},{"lineNumber":3512,"author":{"gitId":"-"},"content":"      typecheck uses type() instead of isinstance(). For example,"},{"lineNumber":3513,"author":{"gitId":"-"},"content":"      `type(x) \u003d\u003d Y` instead of `isinstance(x, Y)`. Patch by Chris Rebert."},{"lineNumber":3514,"author":{"gitId":"-"},"content":"      Closes issue #299."},{"lineNumber":3515,"author":{"gitId":"-"},"content":""},{"lineNumber":3516,"author":{"gitId":"-"},"content":"    * Add support for combining the Python 3 checker mode with the --jobs"},{"lineNumber":3517,"author":{"gitId":"-"},"content":"      flag (--py3k and --jobs). Closes issue #467."},{"lineNumber":3518,"author":{"gitId":"-"},"content":""},{"lineNumber":3519,"author":{"gitId":"-"},"content":"    * Add a new warning for the Python 3 porting checker, \u0027using-cmp-argument\u0027,"},{"lineNumber":3520,"author":{"gitId":"-"},"content":"      emitted when the ``cmp`` argument for the ``list.sort`` or ``sorted builtin``"},{"lineNumber":3521,"author":{"gitId":"-"},"content":"      is encountered."},{"lineNumber":3522,"author":{"gitId":"-"},"content":""},{"lineNumber":3523,"author":{"gitId":"-"},"content":"    * Make the --py3k flag commutative with the -E flag. Also, this patch"},{"lineNumber":3524,"author":{"gitId":"-"},"content":"      fixes the leaks of error messages from the Python 3 checker when"},{"lineNumber":3525,"author":{"gitId":"-"},"content":"      the errors mode was activated. Closes issue #437."},{"lineNumber":3526,"author":{"gitId":"-"},"content":""},{"lineNumber":3527,"author":{"gitId":"-"},"content":""},{"lineNumber":3528,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.4.1?"},{"lineNumber":3529,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3530,"author":{"gitId":"-"},"content":""},{"lineNumber":3531,"author":{"gitId":"-"},"content":"Release date: 2015-01-16"},{"lineNumber":3532,"author":{"gitId":"-"},"content":""},{"lineNumber":3533,"author":{"gitId":"-"},"content":"    * Look only in the current function\u0027s scope for bad-super-call."},{"lineNumber":3534,"author":{"gitId":"-"},"content":"      Closes issue #403."},{"lineNumber":3535,"author":{"gitId":"-"},"content":""},{"lineNumber":3536,"author":{"gitId":"-"},"content":"    * Check the return of properties when checking for not-callable."},{"lineNumber":3537,"author":{"gitId":"-"},"content":"      Closes issue #406."},{"lineNumber":3538,"author":{"gitId":"-"},"content":""},{"lineNumber":3539,"author":{"gitId":"-"},"content":"    * Warn about using the input() or round() built-ins for Python 3."},{"lineNumber":3540,"author":{"gitId":"-"},"content":"      Closes issue #411."},{"lineNumber":3541,"author":{"gitId":"-"},"content":""},{"lineNumber":3542,"author":{"gitId":"-"},"content":"    * Proper abstract method lookup while checking for"},{"lineNumber":3543,"author":{"gitId":"-"},"content":"      abstract-class-instantiated. Closes issue #401."},{"lineNumber":3544,"author":{"gitId":"-"},"content":""},{"lineNumber":3545,"author":{"gitId":"-"},"content":"    * Use a mro traversal for finding abstract methods. Closes issue #415."},{"lineNumber":3546,"author":{"gitId":"-"},"content":""},{"lineNumber":3547,"author":{"gitId":"-"},"content":"    * Fix a false positive with catching-non-exception and tuples of"},{"lineNumber":3548,"author":{"gitId":"-"},"content":"      exceptions."},{"lineNumber":3549,"author":{"gitId":"-"},"content":""},{"lineNumber":3550,"author":{"gitId":"-"},"content":"    * Fix a false negative with raising-non-exception, when the raise used"},{"lineNumber":3551,"author":{"gitId":"-"},"content":"      an uninferrable exception context."},{"lineNumber":3552,"author":{"gitId":"-"},"content":""},{"lineNumber":3553,"author":{"gitId":"-"},"content":"    * Fix a false positive on Python 2 for raising-bad-type, when"},{"lineNumber":3554,"author":{"gitId":"-"},"content":"      raising tuples in the form \u0027raise (ZeroDivisionError, None)\u0027."},{"lineNumber":3555,"author":{"gitId":"-"},"content":""},{"lineNumber":3556,"author":{"gitId":"-"},"content":"    * Fix a false positive with invalid-slots-objects, where the slot entry"},{"lineNumber":3557,"author":{"gitId":"-"},"content":"      was a unicode string on Python 2. Closes issue #421."},{"lineNumber":3558,"author":{"gitId":"-"},"content":""},{"lineNumber":3559,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027redundant-unittest-assert\u0027, emitted when using"},{"lineNumber":3560,"author":{"gitId":"-"},"content":"      unittest\u0027s methods assertTrue and assertFalse with constant value"},{"lineNumber":3561,"author":{"gitId":"-"},"content":"      as argument. Patch by Vlad Temian."},{"lineNumber":3562,"author":{"gitId":"-"},"content":""},{"lineNumber":3563,"author":{"gitId":"-"},"content":"    * Add a new JSON reporter, usable through -f flag."},{"lineNumber":3564,"author":{"gitId":"-"},"content":""},{"lineNumber":3565,"author":{"gitId":"-"},"content":"    * Add the method names for the \u0027signature-differs\u0027 and \u0027argument-differs\u0027"},{"lineNumber":3566,"author":{"gitId":"-"},"content":"      warnings. Closes issue #433."},{"lineNumber":3567,"author":{"gitId":"-"},"content":""},{"lineNumber":3568,"author":{"gitId":"-"},"content":"    * Don\u0027t compile test files when installing."},{"lineNumber":3569,"author":{"gitId":"-"},"content":""},{"lineNumber":3570,"author":{"gitId":"-"},"content":"    * Fix a crash which occurred when using multiple jobs and the files"},{"lineNumber":3571,"author":{"gitId":"-"},"content":"      given as argument didn\u0027t exist at all."},{"lineNumber":3572,"author":{"gitId":"-"},"content":""},{"lineNumber":3573,"author":{"gitId":"-"},"content":""},{"lineNumber":3574,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.4.0?"},{"lineNumber":3575,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3576,"author":{"gitId":"-"},"content":""},{"lineNumber":3577,"author":{"gitId":"-"},"content":"Release date: 2014-11-23"},{"lineNumber":3578,"author":{"gitId":"-"},"content":""},{"lineNumber":3579,"author":{"gitId":"-"},"content":""},{"lineNumber":3580,"author":{"gitId":"-"},"content":"    * Added new options for controlling the loading of C extensions."},{"lineNumber":3581,"author":{"gitId":"-"},"content":"      By default, only C extensions from the stdlib will be loaded"},{"lineNumber":3582,"author":{"gitId":"-"},"content":"      into the active Python interpreter for inspection, because they"},{"lineNumber":3583,"author":{"gitId":"-"},"content":"      can run arbitrary code on import. The option"},{"lineNumber":3584,"author":{"gitId":"-"},"content":"      ``--extension-pkg-whitelist`` can be used to specify modules"},{"lineNumber":3585,"author":{"gitId":"-"},"content":"      or packages that are safe to load."},{"lineNumber":3586,"author":{"gitId":"-"},"content":""},{"lineNumber":3587,"author":{"gitId":"-"},"content":"    * Change default max-line-length to 100 rather than 80"},{"lineNumber":3588,"author":{"gitId":"-"},"content":""},{"lineNumber":3589,"author":{"gitId":"-"},"content":"    * Drop BaseRawChecker class which were only there for backward"},{"lineNumber":3590,"author":{"gitId":"-"},"content":"      compat for a while now"},{"lineNumber":3591,"author":{"gitId":"-"},"content":""},{"lineNumber":3592,"author":{"gitId":"-"},"content":"    * Don\u0027t try to analyze string formatting with objects coming from"},{"lineNumber":3593,"author":{"gitId":"-"},"content":"      function arguments. Closes issue #373."},{"lineNumber":3594,"author":{"gitId":"-"},"content":""},{"lineNumber":3595,"author":{"gitId":"-"},"content":"    * Port source code to be Python 2/3 compatible. This drops the"},{"lineNumber":3596,"author":{"gitId":"-"},"content":"      need for 2to3, but does drop support for Python 2.5."},{"lineNumber":3597,"author":{"gitId":"-"},"content":""},{"lineNumber":3598,"author":{"gitId":"-"},"content":"    * Each message now comes with a confidence level attached, and"},{"lineNumber":3599,"author":{"gitId":"-"},"content":"      can be filtered base on this level. This allows to filter out"},{"lineNumber":3600,"author":{"gitId":"-"},"content":"      all messages that were emitted even though an inference failure"},{"lineNumber":3601,"author":{"gitId":"-"},"content":"      happened during checking."},{"lineNumber":3602,"author":{"gitId":"-"},"content":""},{"lineNumber":3603,"author":{"gitId":"-"},"content":"    * Improved presenting unused-import message. Closes issue #293."},{"lineNumber":3604,"author":{"gitId":"-"},"content":""},{"lineNumber":3605,"author":{"gitId":"-"},"content":"    * Add new checker for finding spelling errors. New messages:"},{"lineNumber":3606,"author":{"gitId":"-"},"content":"      wrong-spelling-in-comment, wrong-spelling-in-docstring."},{"lineNumber":3607,"author":{"gitId":"-"},"content":"      New options: spelling-dict, spelling-ignore-words."},{"lineNumber":3608,"author":{"gitId":"-"},"content":""},{"lineNumber":3609,"author":{"gitId":"-"},"content":"    * Add new \u0027-j\u0027 option for running checks in sub-processes."},{"lineNumber":3610,"author":{"gitId":"-"},"content":""},{"lineNumber":3611,"author":{"gitId":"-"},"content":"    * Added new checks for line endings if they are mixed (LF vs CRLF)"},{"lineNumber":3612,"author":{"gitId":"-"},"content":"      or if they are not as expected. New messages: mixed-line-endings,"},{"lineNumber":3613,"author":{"gitId":"-"},"content":"      unexpected-line-ending-format. New option: expected-line-ending-format."},{"lineNumber":3614,"author":{"gitId":"-"},"content":""},{"lineNumber":3615,"author":{"gitId":"-"},"content":"    * \u0027dangerous-default-value\u0027 no longer evaluates the value of the arguments,"},{"lineNumber":3616,"author":{"gitId":"-"},"content":"      which could result in long error messages or sensitive data being leaked."},{"lineNumber":3617,"author":{"gitId":"-"},"content":"      Closes issue #282"},{"lineNumber":3618,"author":{"gitId":"-"},"content":""},{"lineNumber":3619,"author":{"gitId":"-"},"content":"    * Fix a false positive with string formatting checker, when"},{"lineNumber":3620,"author":{"gitId":"-"},"content":"      encountering a string which uses only position-based arguments."},{"lineNumber":3621,"author":{"gitId":"-"},"content":"      Closes issue #285."},{"lineNumber":3622,"author":{"gitId":"-"},"content":""},{"lineNumber":3623,"author":{"gitId":"-"},"content":"    * Fix a false positive with string formatting checker, when using"},{"lineNumber":3624,"author":{"gitId":"-"},"content":"      keyword argument packing. Closes issue #288."},{"lineNumber":3625,"author":{"gitId":"-"},"content":""},{"lineNumber":3626,"author":{"gitId":"-"},"content":"    * Proper handle class level scope for lambdas."},{"lineNumber":3627,"author":{"gitId":"-"},"content":""},{"lineNumber":3628,"author":{"gitId":"-"},"content":"    * Handle \u0027too-few-format-args\u0027 or \u0027too-many-format-args\u0027 for format"},{"lineNumber":3629,"author":{"gitId":"-"},"content":"      strings with both named and positional fields. Closes issue #286."},{"lineNumber":3630,"author":{"gitId":"-"},"content":""},{"lineNumber":3631,"author":{"gitId":"-"},"content":"    * Analyze only strings by the string format checker. Closes issue #287."},{"lineNumber":3632,"author":{"gitId":"-"},"content":""},{"lineNumber":3633,"author":{"gitId":"-"},"content":"    * Properly handle nested format string fields. Closes issue #294."},{"lineNumber":3634,"author":{"gitId":"-"},"content":""},{"lineNumber":3635,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027attribute-defined-outside-init\u0027 if the attribute"},{"lineNumber":3636,"author":{"gitId":"-"},"content":"      was set by a function call in a defining method. Closes issue #192."},{"lineNumber":3637,"author":{"gitId":"-"},"content":""},{"lineNumber":3638,"author":{"gitId":"-"},"content":"    * Properly handle unicode format strings for Python 2."},{"lineNumber":3639,"author":{"gitId":"-"},"content":"      Closes issue #296."},{"lineNumber":3640,"author":{"gitId":"-"},"content":""},{"lineNumber":3641,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027import-error\u0027 if an import was protected by a try-except,"},{"lineNumber":3642,"author":{"gitId":"-"},"content":"      which excepted ImportError."},{"lineNumber":3643,"author":{"gitId":"-"},"content":""},{"lineNumber":3644,"author":{"gitId":"-"},"content":"    * Fix an \u0027unused-import\u0027 false positive, when the error was emitted"},{"lineNumber":3645,"author":{"gitId":"-"},"content":"      for all the members imported with \u0027from import\u0027 form."},{"lineNumber":3646,"author":{"gitId":"-"},"content":"      Closes issue #304."},{"lineNumber":3647,"author":{"gitId":"-"},"content":""},{"lineNumber":3648,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027invalid-name\u0027 when assigning a name in an"},{"lineNumber":3649,"author":{"gitId":"-"},"content":"      ImportError handler. Closes issue #302."},{"lineNumber":3650,"author":{"gitId":"-"},"content":""},{"lineNumber":3651,"author":{"gitId":"-"},"content":"    * Don\u0027t count branches from nested functions."},{"lineNumber":3652,"author":{"gitId":"-"},"content":""},{"lineNumber":3653,"author":{"gitId":"-"},"content":"    * Fix a false positive with \u0027too-few-format-args\u0027, when the format"},{"lineNumber":3654,"author":{"gitId":"-"},"content":"      strings contains duplicate manual position arguments."},{"lineNumber":3655,"author":{"gitId":"-"},"content":"      Closes issue #310."},{"lineNumber":3656,"author":{"gitId":"-"},"content":""},{"lineNumber":3657,"author":{"gitId":"-"},"content":"    * fixme regex handles comments without spaces after the hash."},{"lineNumber":3658,"author":{"gitId":"-"},"content":"      Closes issue #311."},{"lineNumber":3659,"author":{"gitId":"-"},"content":""},{"lineNumber":3660,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027unused-import\u0027 when a special object is imported"},{"lineNumber":3661,"author":{"gitId":"-"},"content":"      (__all__, __doc__ etc.). Closes issue #309."},{"lineNumber":3662,"author":{"gitId":"-"},"content":""},{"lineNumber":3663,"author":{"gitId":"-"},"content":"    * Look in the metaclass, if defined, for members not found in the current"},{"lineNumber":3664,"author":{"gitId":"-"},"content":"      class. Closes issue #306."},{"lineNumber":3665,"author":{"gitId":"-"},"content":""},{"lineNumber":3666,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027protected-access\u0027 if the attribute is accessed using"},{"lineNumber":3667,"author":{"gitId":"-"},"content":"      a property defined at the class level."},{"lineNumber":3668,"author":{"gitId":"-"},"content":""},{"lineNumber":3669,"author":{"gitId":"-"},"content":"    * Detect calls of the parent\u0027s __init__, through a binded super() call."},{"lineNumber":3670,"author":{"gitId":"-"},"content":""},{"lineNumber":3671,"author":{"gitId":"-"},"content":"    * Check that a class has an explicitly defined metaclass before"},{"lineNumber":3672,"author":{"gitId":"-"},"content":"      emitting \u0027old-style-class\u0027 for Python 2."},{"lineNumber":3673,"author":{"gitId":"-"},"content":""},{"lineNumber":3674,"author":{"gitId":"-"},"content":"    * Emit \u0027catching-non-exception\u0027 for non-class nodes. Closes issue #303."},{"lineNumber":3675,"author":{"gitId":"-"},"content":""},{"lineNumber":3676,"author":{"gitId":"-"},"content":"    * Order of reporting is consistent."},{"lineNumber":3677,"author":{"gitId":"-"},"content":""},{"lineNumber":3678,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027boolean-datetime\u0027, emitted when an instance"},{"lineNumber":3679,"author":{"gitId":"-"},"content":"      of \u0027datetime.time\u0027 is used in a boolean context. Closes issue #239."},{"lineNumber":3680,"author":{"gitId":"-"},"content":""},{"lineNumber":3681,"author":{"gitId":"-"},"content":"    * Fix a crash which occurred while checking for \u0027method-hidden\u0027,"},{"lineNumber":3682,"author":{"gitId":"-"},"content":"      when the parent frame was something different than a function."},{"lineNumber":3683,"author":{"gitId":"-"},"content":""},{"lineNumber":3684,"author":{"gitId":"-"},"content":"    * Generate html output for missing files. Closes issue #320."},{"lineNumber":3685,"author":{"gitId":"-"},"content":""},{"lineNumber":3686,"author":{"gitId":"-"},"content":"    * Fix a false positive with \u0027too-many-format-args\u0027, when the format"},{"lineNumber":3687,"author":{"gitId":"-"},"content":"      string contains mixed attribute access arguments and manual"},{"lineNumber":3688,"author":{"gitId":"-"},"content":"      fields. Closes issue #322."},{"lineNumber":3689,"author":{"gitId":"-"},"content":""},{"lineNumber":3690,"author":{"gitId":"-"},"content":"    * Extend the cases where \u0027undefined-variable\u0027 and \u0027used-before-assignment\u0027"},{"lineNumber":3691,"author":{"gitId":"-"},"content":"      can be detected. Closes issue #291."},{"lineNumber":3692,"author":{"gitId":"-"},"content":""},{"lineNumber":3693,"author":{"gitId":"-"},"content":"    * Add support for customising callback identifiers, by adding a new"},{"lineNumber":3694,"author":{"gitId":"-"},"content":"      \u0027--callbacks\u0027 command line option. Closes issue #326."},{"lineNumber":3695,"author":{"gitId":"-"},"content":""},{"lineNumber":3696,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027logging-format-interpolation\u0027, emitted when .format()"},{"lineNumber":3697,"author":{"gitId":"-"},"content":"      string interpolation is used within logging function calls."},{"lineNumber":3698,"author":{"gitId":"-"},"content":""},{"lineNumber":3699,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027unbalanced-tuple-unpacking\u0027 when the rhs of the assignment"},{"lineNumber":3700,"author":{"gitId":"-"},"content":"      is a variable length argument. Closes issue #329."},{"lineNumber":3701,"author":{"gitId":"-"},"content":""},{"lineNumber":3702,"author":{"gitId":"-"},"content":"    * Add a new warning, \u0027inherit-non-class\u0027, emitted when a class inherits"},{"lineNumber":3703,"author":{"gitId":"-"},"content":"      from something which is not a class. Closes issue #331."},{"lineNumber":3704,"author":{"gitId":"-"},"content":""},{"lineNumber":3705,"author":{"gitId":"-"},"content":"    * Fix another false positives with \u0027undefined-variable\u0027, where the variable"},{"lineNumber":3706,"author":{"gitId":"-"},"content":"      can be found as a class assignment and used in a function annotation."},{"lineNumber":3707,"author":{"gitId":"-"},"content":"      Closes issue #342."},{"lineNumber":3708,"author":{"gitId":"-"},"content":""},{"lineNumber":3709,"author":{"gitId":"-"},"content":"    * Handle assignment of the string format method to a variable."},{"lineNumber":3710,"author":{"gitId":"-"},"content":"      Closes issue #351."},{"lineNumber":3711,"author":{"gitId":"-"},"content":""},{"lineNumber":3712,"author":{"gitId":"-"},"content":"    * Support wheel packaging format for PyPi. Closes issue #334."},{"lineNumber":3713,"author":{"gitId":"-"},"content":""},{"lineNumber":3714,"author":{"gitId":"-"},"content":"    * Check that various built-ins that do not exist in Python 3 are not"},{"lineNumber":3715,"author":{"gitId":"-"},"content":"      used: apply, basestring, buffer, cmp, coerce, execfile, file, long"},{"lineNumber":3716,"author":{"gitId":"-"},"content":"      raw_input, reduce, StandardError, unicode, reload and xrange."},{"lineNumber":3717,"author":{"gitId":"-"},"content":""},{"lineNumber":3718,"author":{"gitId":"-"},"content":"    * Warn for magic methods which are not used in any way in Python 3:"},{"lineNumber":3719,"author":{"gitId":"-"},"content":"      __coerce__, __delslice__, __getslice__, __setslice__, __cmp__,"},{"lineNumber":3720,"author":{"gitId":"-"},"content":"      __oct__, __nonzero__ and __hex__."},{"lineNumber":3721,"author":{"gitId":"-"},"content":""},{"lineNumber":3722,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027assigning-non-slot\u0027 when the assignment is for a property."},{"lineNumber":3723,"author":{"gitId":"-"},"content":"      Closes issue #359."},{"lineNumber":3724,"author":{"gitId":"-"},"content":""},{"lineNumber":3725,"author":{"gitId":"-"},"content":"    * Fix for regression: \u0027{path}\u0027 was no longer accepted in \u0027--msg-template\u0027."},{"lineNumber":3726,"author":{"gitId":"-"},"content":""},{"lineNumber":3727,"author":{"gitId":"-"},"content":"    * Report the percentage of all messages, not just for errors and warnings."},{"lineNumber":3728,"author":{"gitId":"-"},"content":"      Closes issue #319."},{"lineNumber":3729,"author":{"gitId":"-"},"content":""},{"lineNumber":3730,"author":{"gitId":"-"},"content":"    * \u0027too-many-public-methods\u0027 is reported only for methods defined in a class,"},{"lineNumber":3731,"author":{"gitId":"-"},"content":"      not in its ancestors. Closes issue #248."},{"lineNumber":3732,"author":{"gitId":"-"},"content":""},{"lineNumber":3733,"author":{"gitId":"-"},"content":"    * \u0027too-many-lines\u0027 disable pragma can be located on any line, not only the"},{"lineNumber":3734,"author":{"gitId":"-"},"content":"      first. Closes issue #321."},{"lineNumber":3735,"author":{"gitId":"-"},"content":""},{"lineNumber":3736,"author":{"gitId":"-"},"content":"    * Warn in Python 2 when an import statement is found without a"},{"lineNumber":3737,"author":{"gitId":"-"},"content":"      corresponding ``from __future__ import absolute_import``."},{"lineNumber":3738,"author":{"gitId":"-"},"content":""},{"lineNumber":3739,"author":{"gitId":"-"},"content":"    * Warn in Python 2 when a non-floor division operation is found without"},{"lineNumber":3740,"author":{"gitId":"-"},"content":"      a corresponding ``from __future__ import division``."},{"lineNumber":3741,"author":{"gitId":"-"},"content":""},{"lineNumber":3742,"author":{"gitId":"-"},"content":"    * Add a new option, \u0027exclude-protected\u0027, for excluding members"},{"lineNumber":3743,"author":{"gitId":"-"},"content":"      from the protected-access warning. Closes issue #48."},{"lineNumber":3744,"author":{"gitId":"-"},"content":""},{"lineNumber":3745,"author":{"gitId":"-"},"content":"    * Warn in Python 2 when using dict.iter*(), dict.view*(); none of these"},{"lineNumber":3746,"author":{"gitId":"-"},"content":"      methods are available in Python 3."},{"lineNumber":3747,"author":{"gitId":"-"},"content":""},{"lineNumber":3748,"author":{"gitId":"-"},"content":"    * Warn in Python 2 when calling an object\u0027s next() method; Python 3 uses"},{"lineNumber":3749,"author":{"gitId":"-"},"content":"      __next__() instead."},{"lineNumber":3750,"author":{"gitId":"-"},"content":""},{"lineNumber":3751,"author":{"gitId":"-"},"content":"    * Warn when assigning to __metaclass__ at a class scope; in Python 3 a"},{"lineNumber":3752,"author":{"gitId":"-"},"content":"      metaclass is specified as an argument to the \u0027class\u0027 statement."},{"lineNumber":3753,"author":{"gitId":"-"},"content":""},{"lineNumber":3754,"author":{"gitId":"-"},"content":"    * Warn when performing parameter tuple unpacking; it is not supported in"},{"lineNumber":3755,"author":{"gitId":"-"},"content":"      Python 3."},{"lineNumber":3756,"author":{"gitId":"-"},"content":""},{"lineNumber":3757,"author":{"gitId":"-"},"content":"    * \u0027abstract-class-instantiated\u0027 is also emitted for Python 2."},{"lineNumber":3758,"author":{"gitId":"-"},"content":"      It was previously disabled."},{"lineNumber":3759,"author":{"gitId":"-"},"content":""},{"lineNumber":3760,"author":{"gitId":"-"},"content":"    * Add \u0027long-suffix\u0027 error, emitted when encountering the long suffix"},{"lineNumber":3761,"author":{"gitId":"-"},"content":"      on numbers."},{"lineNumber":3762,"author":{"gitId":"-"},"content":""},{"lineNumber":3763,"author":{"gitId":"-"},"content":"    * Add support for disabling a checker, by specifying an \u0027enabled\u0027"},{"lineNumber":3764,"author":{"gitId":"-"},"content":"      attribute on the checker class."},{"lineNumber":3765,"author":{"gitId":"-"},"content":""},{"lineNumber":3766,"author":{"gitId":"-"},"content":"    * Add a new CLI option, --py3k, for enabling Python 3 porting mode. This"},{"lineNumber":3767,"author":{"gitId":"-"},"content":"      mode will disable all other checkers and will emit warnings and"},{"lineNumber":3768,"author":{"gitId":"-"},"content":"      errors for constructs which are invalid or removed in Python 3."},{"lineNumber":3769,"author":{"gitId":"-"},"content":""},{"lineNumber":3770,"author":{"gitId":"-"},"content":"    * Add \u0027old-octal-literal\u0027 to Python 3 porting checker, emitted when"},{"lineNumber":3771,"author":{"gitId":"-"},"content":"      encountering octals with the old syntax."},{"lineNumber":3772,"author":{"gitId":"-"},"content":""},{"lineNumber":3773,"author":{"gitId":"-"},"content":"    * Add \u0027implicit-map-evaluation\u0027 to Python 3 porting checker, emitted"},{"lineNumber":3774,"author":{"gitId":"-"},"content":"      when encountering the use of map builtin, without explicit evaluation."},{"lineNumber":3775,"author":{"gitId":"-"},"content":""},{"lineNumber":3776,"author":{"gitId":"-"},"content":""},{"lineNumber":3777,"author":{"gitId":"-"},"content":""},{"lineNumber":3778,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.3.0?"},{"lineNumber":3779,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3780,"author":{"gitId":"-"},"content":""},{"lineNumber":3781,"author":{"gitId":"-"},"content":"Release date: 2014-07-26"},{"lineNumber":3782,"author":{"gitId":"-"},"content":""},{"lineNumber":3783,"author":{"gitId":"-"},"content":"    * Allow hanging continued indentation for implicitly concatenated"},{"lineNumber":3784,"author":{"gitId":"-"},"content":"      strings. Closes issue #232."},{"lineNumber":3785,"author":{"gitId":"-"},"content":""},{"lineNumber":3786,"author":{"gitId":"-"},"content":"    * Pylint works under Python 2.5 again, and its test suite passes."},{"lineNumber":3787,"author":{"gitId":"-"},"content":""},{"lineNumber":3788,"author":{"gitId":"-"},"content":"    * Fix some false positives for the cellvar-from-loop warnings."},{"lineNumber":3789,"author":{"gitId":"-"},"content":"      Closes issue #233."},{"lineNumber":3790,"author":{"gitId":"-"},"content":""},{"lineNumber":3791,"author":{"gitId":"-"},"content":"    * Return new astroid class nodes when the inferencer can detect that"},{"lineNumber":3792,"author":{"gitId":"-"},"content":"      that result of a function invocation on a type (like ``type`` or"},{"lineNumber":3793,"author":{"gitId":"-"},"content":"      `abc.ABCMeta`) is requested. Closes #205."},{"lineNumber":3794,"author":{"gitId":"-"},"content":""},{"lineNumber":3795,"author":{"gitId":"-"},"content":"    * Emit \u0027undefined-variable\u0027 for undefined names when using the"},{"lineNumber":3796,"author":{"gitId":"-"},"content":"      Python 3 ``metaclass\u003d`` argument."},{"lineNumber":3797,"author":{"gitId":"-"},"content":""},{"lineNumber":3798,"author":{"gitId":"-"},"content":"    * Checkers respect priority now. Close issue #229."},{"lineNumber":3799,"author":{"gitId":"-"},"content":""},{"lineNumber":3800,"author":{"gitId":"-"},"content":"    * Fix a false positive regarding W0511. Closes issue #149."},{"lineNumber":3801,"author":{"gitId":"-"},"content":""},{"lineNumber":3802,"author":{"gitId":"-"},"content":"    * Fix unused-import false positive with Python 3 metaclasses (#143)."},{"lineNumber":3803,"author":{"gitId":"-"},"content":""},{"lineNumber":3804,"author":{"gitId":"-"},"content":"    * Don\u0027t warn with \u0027bad-format-character\u0027 when encountering"},{"lineNumber":3805,"author":{"gitId":"-"},"content":"      the \u0027a\u0027 format on Python 3."},{"lineNumber":3806,"author":{"gitId":"-"},"content":""},{"lineNumber":3807,"author":{"gitId":"-"},"content":"    * Add multiple checks for PEP 3101 advanced string formatting:"},{"lineNumber":3808,"author":{"gitId":"-"},"content":"      \u0027bad-format-string\u0027, \u0027missing-format-argument-key\u0027,"},{"lineNumber":3809,"author":{"gitId":"-"},"content":"      \u0027unused-format-string-argument\u0027, \u0027format-combined-specification\u0027,"},{"lineNumber":3810,"author":{"gitId":"-"},"content":"      \u0027missing-format-attribute\u0027 and \u0027invalid-format-index\u0027."},{"lineNumber":3811,"author":{"gitId":"-"},"content":""},{"lineNumber":3812,"author":{"gitId":"-"},"content":"    * Issue broad-except and bare-except even if the number"},{"lineNumber":3813,"author":{"gitId":"-"},"content":"      of except handlers is different than 1. Fixes issue #113."},{"lineNumber":3814,"author":{"gitId":"-"},"content":""},{"lineNumber":3815,"author":{"gitId":"-"},"content":"    * Issue attribute-defined-outside-init for all cases, not just"},{"lineNumber":3816,"author":{"gitId":"-"},"content":"      for the last assignment. Closes issue #262."},{"lineNumber":3817,"author":{"gitId":"-"},"content":""},{"lineNumber":3818,"author":{"gitId":"-"},"content":"    * Emit \u0027not-callable\u0027 when calling properties. Closes issue #268."},{"lineNumber":3819,"author":{"gitId":"-"},"content":""},{"lineNumber":3820,"author":{"gitId":"-"},"content":"    * Fix a false positive with unbalanced iterable unpacking,"},{"lineNumber":3821,"author":{"gitId":"-"},"content":"      when encountering starred nodes. Closes issue #273."},{"lineNumber":3822,"author":{"gitId":"-"},"content":""},{"lineNumber":3823,"author":{"gitId":"-"},"content":"    * Add new checks, \u0027invalid-slice-index\u0027 and \u0027invalid-sequence-index\u0027"},{"lineNumber":3824,"author":{"gitId":"-"},"content":"      for invalid sequence and slice indices."},{"lineNumber":3825,"author":{"gitId":"-"},"content":""},{"lineNumber":3826,"author":{"gitId":"-"},"content":"    * Add \u0027assigning-non-slot\u0027 warning, which detects assignments to"},{"lineNumber":3827,"author":{"gitId":"-"},"content":"      attributes not defined in slots."},{"lineNumber":3828,"author":{"gitId":"-"},"content":""},{"lineNumber":3829,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027no-name-in-module\u0027 for ignored modules."},{"lineNumber":3830,"author":{"gitId":"-"},"content":"      Closes issue #223."},{"lineNumber":3831,"author":{"gitId":"-"},"content":""},{"lineNumber":3832,"author":{"gitId":"-"},"content":"    * Fix an \u0027unused-variable\u0027 false positive, where the variable is"},{"lineNumber":3833,"author":{"gitId":"-"},"content":"      assigned through an import. Closes issue #196."},{"lineNumber":3834,"author":{"gitId":"-"},"content":""},{"lineNumber":3835,"author":{"gitId":"-"},"content":"    * Definition order is considered for classes, function arguments"},{"lineNumber":3836,"author":{"gitId":"-"},"content":"      and annotations. Closes issue #257."},{"lineNumber":3837,"author":{"gitId":"-"},"content":""},{"lineNumber":3838,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027unused-variable\u0027 when assigning to a nonlocal."},{"lineNumber":3839,"author":{"gitId":"-"},"content":"      Closes issue #275."},{"lineNumber":3840,"author":{"gitId":"-"},"content":""},{"lineNumber":3841,"author":{"gitId":"-"},"content":"    * Do not let ImportError propagate from the import checker, leading to crash"},{"lineNumber":3842,"author":{"gitId":"-"},"content":"      in some namespace package related cases. Closes issue #203."},{"lineNumber":3843,"author":{"gitId":"-"},"content":""},{"lineNumber":3844,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027pointless-string-statement\u0027 for attribute docstrings."},{"lineNumber":3845,"author":{"gitId":"-"},"content":"      Closes issue #193."},{"lineNumber":3846,"author":{"gitId":"-"},"content":""},{"lineNumber":3847,"author":{"gitId":"-"},"content":"    * Use the proper mode for pickle when opening and writing the stats file."},{"lineNumber":3848,"author":{"gitId":"-"},"content":"      Closes issue #148."},{"lineNumber":3849,"author":{"gitId":"-"},"content":""},{"lineNumber":3850,"author":{"gitId":"-"},"content":"    * Don\u0027t emit hidden-method message when the attribute has been"},{"lineNumber":3851,"author":{"gitId":"-"},"content":"      monkey-patched, you\u0027re on your own when you do that."},{"lineNumber":3852,"author":{"gitId":"-"},"content":""},{"lineNumber":3853,"author":{"gitId":"-"},"content":"    * Only emit attribute-defined-outside-init for definition within the same"},{"lineNumber":3854,"author":{"gitId":"-"},"content":"      module as the offended class, avoiding to mangle the output in some cases."},{"lineNumber":3855,"author":{"gitId":"-"},"content":""},{"lineNumber":3856,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027unnecessary-lambda\u0027 if the body of the lambda call contains"},{"lineNumber":3857,"author":{"gitId":"-"},"content":"      call chaining. Closes issue #243."},{"lineNumber":3858,"author":{"gitId":"-"},"content":""},{"lineNumber":3859,"author":{"gitId":"-"},"content":"    * Don\u0027t emit \u0027missing-docstring\u0027 when the actual docstring uses ``.format``."},{"lineNumber":3860,"author":{"gitId":"-"},"content":"      Closes issue #281."},{"lineNumber":3861,"author":{"gitId":"-"},"content":""},{"lineNumber":3862,"author":{"gitId":"-"},"content":""},{"lineNumber":3863,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.2.1?"},{"lineNumber":3864,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3865,"author":{"gitId":"-"},"content":""},{"lineNumber":3866,"author":{"gitId":"-"},"content":"Release date: 2014-04-30"},{"lineNumber":3867,"author":{"gitId":"-"},"content":""},{"lineNumber":3868,"author":{"gitId":"-"},"content":"    * Restore the ability to specify the init-hook option via the"},{"lineNumber":3869,"author":{"gitId":"-"},"content":"      configuration file, which was accidentally broken in 1.2.0."},{"lineNumber":3870,"author":{"gitId":"-"},"content":""},{"lineNumber":3871,"author":{"gitId":"-"},"content":"    * Add a new warning [bad-continuation] for badly indentend continued"},{"lineNumber":3872,"author":{"gitId":"-"},"content":"      lines."},{"lineNumber":3873,"author":{"gitId":"-"},"content":""},{"lineNumber":3874,"author":{"gitId":"-"},"content":"    * Emit [assignment-from-none] when the function contains bare returns."},{"lineNumber":3875,"author":{"gitId":"-"},"content":"      Fixes BitBucket issue #191."},{"lineNumber":3876,"author":{"gitId":"-"},"content":""},{"lineNumber":3877,"author":{"gitId":"-"},"content":"    * Added a new warning for closing over variables that are"},{"lineNumber":3878,"author":{"gitId":"-"},"content":"      defined in loops. Fixes Bitbucket issue #176."},{"lineNumber":3879,"author":{"gitId":"-"},"content":""},{"lineNumber":3880,"author":{"gitId":"-"},"content":"    * Do not warn about \\u escapes in string literals when Unicode literals"},{"lineNumber":3881,"author":{"gitId":"-"},"content":"      are used for Python 2.*. Fixes BitBucket issue #151."},{"lineNumber":3882,"author":{"gitId":"-"},"content":""},{"lineNumber":3883,"author":{"gitId":"-"},"content":"    * Extend the checking for unbalanced-tuple-unpacking and"},{"lineNumber":3884,"author":{"gitId":"-"},"content":"      unpacking-non-sequence to instance attribute unpacking as well."},{"lineNumber":3885,"author":{"gitId":"-"},"content":""},{"lineNumber":3886,"author":{"gitId":"-"},"content":"    * Fix explicit checking of python script (1.2 regression, #219)"},{"lineNumber":3887,"author":{"gitId":"-"},"content":""},{"lineNumber":3888,"author":{"gitId":"-"},"content":"    * Restore --init-hook, renamed accidentally into --init-hooks in 1.2.0"},{"lineNumber":3889,"author":{"gitId":"-"},"content":"      (#211)"},{"lineNumber":3890,"author":{"gitId":"-"},"content":""},{"lineNumber":3891,"author":{"gitId":"-"},"content":"    * Add \u0027indexing-exception\u0027 warning, which detects that indexing"},{"lineNumber":3892,"author":{"gitId":"-"},"content":"      an exception occurs in Python 2 (behaviour removed in Python 3)."},{"lineNumber":3893,"author":{"gitId":"-"},"content":""},{"lineNumber":3894,"author":{"gitId":"-"},"content":""},{"lineNumber":3895,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.2.0?"},{"lineNumber":3896,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3897,"author":{"gitId":"-"},"content":""},{"lineNumber":3898,"author":{"gitId":"-"},"content":"Release date: 2014-04-18"},{"lineNumber":3899,"author":{"gitId":"-"},"content":""},{"lineNumber":3900,"author":{"gitId":"-"},"content":"    * Pass the current python paths to pylint process when invoked via"},{"lineNumber":3901,"author":{"gitId":"-"},"content":"      epylint.  Fixes BitBucket issue #133."},{"lineNumber":3902,"author":{"gitId":"-"},"content":""},{"lineNumber":3903,"author":{"gitId":"-"},"content":"    * Add -i / --include-ids and -s / --symbols back as completely ignored"},{"lineNumber":3904,"author":{"gitId":"-"},"content":"      options. Fixes BitBucket issue #180."},{"lineNumber":3905,"author":{"gitId":"-"},"content":""},{"lineNumber":3906,"author":{"gitId":"-"},"content":"    * Extend the number of cases in which logging calls are detected. Fixes"},{"lineNumber":3907,"author":{"gitId":"-"},"content":"      bitbucket issue #182."},{"lineNumber":3908,"author":{"gitId":"-"},"content":""},{"lineNumber":3909,"author":{"gitId":"-"},"content":"    * Improve pragma handling to not detect pylint:* strings in non-comments."},{"lineNumber":3910,"author":{"gitId":"-"},"content":"      Fixes BitBucket issue #79."},{"lineNumber":3911,"author":{"gitId":"-"},"content":""},{"lineNumber":3912,"author":{"gitId":"-"},"content":"    * Do not crash with UnknownMessage if an unknown message ID/name appears"},{"lineNumber":3913,"author":{"gitId":"-"},"content":"      in disable or enable in the configuration. Patch by Cole Robinson."},{"lineNumber":3914,"author":{"gitId":"-"},"content":"      Fixes bitbucket issue #170."},{"lineNumber":3915,"author":{"gitId":"-"},"content":""},{"lineNumber":3916,"author":{"gitId":"-"},"content":"    * Add new warning \u0027eval-used\u0027, checking that the builtin function ``eval``"},{"lineNumber":3917,"author":{"gitId":"-"},"content":"      was used."},{"lineNumber":3918,"author":{"gitId":"-"},"content":""},{"lineNumber":3919,"author":{"gitId":"-"},"content":"    * Make it possible to show a naming hint for invalid name by setting"},{"lineNumber":3920,"author":{"gitId":"-"},"content":"      include-naming-hint. Also make the naming hints configurable. Fixes"},{"lineNumber":3921,"author":{"gitId":"-"},"content":"      BitBucket issue #138."},{"lineNumber":3922,"author":{"gitId":"-"},"content":""},{"lineNumber":3923,"author":{"gitId":"-"},"content":"    * Added support for enforcing multiple, but consistent name styles for"},{"lineNumber":3924,"author":{"gitId":"-"},"content":"      different name types inside a single module; based on a patch written"},{"lineNumber":3925,"author":{"gitId":"-"},"content":"      by morbo@google.com."},{"lineNumber":3926,"author":{"gitId":"-"},"content":""},{"lineNumber":3927,"author":{"gitId":"-"},"content":"    * Also warn about empty docstrings on overridden methods; contributed"},{"lineNumber":3928,"author":{"gitId":"-"},"content":"      by sebastianu@google.com."},{"lineNumber":3929,"author":{"gitId":"-"},"content":""},{"lineNumber":3930,"author":{"gitId":"-"},"content":"    * Also inspect arguments to constructor calls, and emit relevant"},{"lineNumber":3931,"author":{"gitId":"-"},"content":"      warnings; contributed by sebastianu@google.com."},{"lineNumber":3932,"author":{"gitId":"-"},"content":""},{"lineNumber":3933,"author":{"gitId":"-"},"content":"    * Added a new configuration option logging-modules to make the list"},{"lineNumber":3934,"author":{"gitId":"-"},"content":"      of module names that can be checked for \u0027logging-not-lazy\u0027 et. al."},{"lineNumber":3935,"author":{"gitId":"-"},"content":"      configurable; contributed by morbo@google.com."},{"lineNumber":3936,"author":{"gitId":"-"},"content":""},{"lineNumber":3937,"author":{"gitId":"-"},"content":"    * ensure init-hooks is evaluated before other options, notably load-plugins"},{"lineNumber":3938,"author":{"gitId":"-"},"content":"      (#166)"},{"lineNumber":3939,"author":{"gitId":"-"},"content":""},{"lineNumber":3940,"author":{"gitId":"-"},"content":"    * Python 2.5 support restored: fixed small issues preventing pylint to run"},{"lineNumber":3941,"author":{"gitId":"-"},"content":"      on python 2.5. Bitbucket issues #50 and #62."},{"lineNumber":3942,"author":{"gitId":"-"},"content":""},{"lineNumber":3943,"author":{"gitId":"-"},"content":"    * bitbucket #128: pylint doesn\u0027t crash when looking"},{"lineNumber":3944,"author":{"gitId":"-"},"content":"      for used-before-assignment in context manager"},{"lineNumber":3945,"author":{"gitId":"-"},"content":"      assignments."},{"lineNumber":3946,"author":{"gitId":"-"},"content":""},{"lineNumber":3947,"author":{"gitId":"-"},"content":"    * Add new warning, \u0027bad-reversed-sequence\u0027, for checking that the"},{"lineNumber":3948,"author":{"gitId":"-"},"content":"      reversed() builtin receive a sequence (implements __getitem__ and __len__,"},{"lineNumber":3949,"author":{"gitId":"-"},"content":"      without being a dict or a dict subclass) or an instance which implements"},{"lineNumber":3950,"author":{"gitId":"-"},"content":"      __reversed__."},{"lineNumber":3951,"author":{"gitId":"-"},"content":""},{"lineNumber":3952,"author":{"gitId":"-"},"content":"    * Mark ``file`` as a bad function when using python2 (closes #8)."},{"lineNumber":3953,"author":{"gitId":"-"},"content":""},{"lineNumber":3954,"author":{"gitId":"-"},"content":"    * Add new warning \u0027bad-exception-context\u0027, checking"},{"lineNumber":3955,"author":{"gitId":"-"},"content":"      that ``raise ... from ...`` uses a proper exception context"},{"lineNumber":3956,"author":{"gitId":"-"},"content":"      (None or an exception)."},{"lineNumber":3957,"author":{"gitId":"-"},"content":""},{"lineNumber":3958,"author":{"gitId":"-"},"content":"    * Enhance the check for \u0027used-before-assignment\u0027 to look"},{"lineNumber":3959,"author":{"gitId":"-"},"content":"      for \u0027nonlocal\u0027 uses."},{"lineNumber":3960,"author":{"gitId":"-"},"content":""},{"lineNumber":3961,"author":{"gitId":"-"},"content":"    * Emit \u0027undefined-all-variable\u0027 if a package\u0027s __all__"},{"lineNumber":3962,"author":{"gitId":"-"},"content":"      variable contains a missing submodule (closes #126)."},{"lineNumber":3963,"author":{"gitId":"-"},"content":""},{"lineNumber":3964,"author":{"gitId":"-"},"content":"    * Add a new warning \u0027abstract-class-instantiated\u0027 for checking"},{"lineNumber":3965,"author":{"gitId":"-"},"content":"      that abstract classes created with ``abc`` module and"},{"lineNumber":3966,"author":{"gitId":"-"},"content":"      with abstract methods are instantied."},{"lineNumber":3967,"author":{"gitId":"-"},"content":""},{"lineNumber":3968,"author":{"gitId":"-"},"content":"    * Do not warn about \u0027return-arg-in-generator\u0027 in Python 3.3+."},{"lineNumber":3969,"author":{"gitId":"-"},"content":""},{"lineNumber":3970,"author":{"gitId":"-"},"content":"    * Do not warn about \u0027abstract-method\u0027 when the abstract method"},{"lineNumber":3971,"author":{"gitId":"-"},"content":"      is implemented through assignment (#155)."},{"lineNumber":3972,"author":{"gitId":"-"},"content":""},{"lineNumber":3973,"author":{"gitId":"-"},"content":"    * Improve cyclic import detection in the case of packages, patch by Buck"},{"lineNumber":3974,"author":{"gitId":"-"},"content":"      Golemon"},{"lineNumber":3975,"author":{"gitId":"-"},"content":""},{"lineNumber":3976,"author":{"gitId":"-"},"content":"    * Add new warnings for checking proper class __slots__:"},{"lineNumber":3977,"author":{"gitId":"-"},"content":"      ``invalid-slots-object`` and ``invalid-slots``."},{"lineNumber":3978,"author":{"gitId":"-"},"content":""},{"lineNumber":3979,"author":{"gitId":"-"},"content":"    * Search for rc file in `~/.config/pylintrc` if `~/.pylintrc`"},{"lineNumber":3980,"author":{"gitId":"-"},"content":"      doesn\u0027t exists (#121)"},{"lineNumber":3981,"author":{"gitId":"-"},"content":""},{"lineNumber":3982,"author":{"gitId":"-"},"content":"    * Don\u0027t register the newstyle checker w/ python \u003e\u003d 3"},{"lineNumber":3983,"author":{"gitId":"-"},"content":""},{"lineNumber":3984,"author":{"gitId":"-"},"content":"    * Fix unused-import false positive w/ augment assignment (#78)"},{"lineNumber":3985,"author":{"gitId":"-"},"content":""},{"lineNumber":3986,"author":{"gitId":"-"},"content":"    * Fix access-member-before-definition false negative wrt aug assign (#164)"},{"lineNumber":3987,"author":{"gitId":"-"},"content":""},{"lineNumber":3988,"author":{"gitId":"-"},"content":"    * Do not attempt to analyze non python file, eg .so file (#122)"},{"lineNumber":3989,"author":{"gitId":"-"},"content":""},{"lineNumber":3990,"author":{"gitId":"-"},"content":""},{"lineNumber":3991,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.1.0?"},{"lineNumber":3992,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3993,"author":{"gitId":"-"},"content":""},{"lineNumber":3994,"author":{"gitId":"-"},"content":"Release date: 2013-12-22"},{"lineNumber":3995,"author":{"gitId":"-"},"content":""},{"lineNumber":3996,"author":{"gitId":"-"},"content":"    * Add new check for use of deprecated pragma directives \"pylint:disable-msg\""},{"lineNumber":3997,"author":{"gitId":"-"},"content":"      or \"pylint:enable-msg\" (I0022, deprecated-pragma) which was previously"},{"lineNumber":3998,"author":{"gitId":"-"},"content":"      emitted as a regular warn()."},{"lineNumber":3999,"author":{"gitId":"-"},"content":""},{"lineNumber":4000,"author":{"gitId":"-"},"content":"    * Avoid false used-before-assignment for except handler defined"},{"lineNumber":4001,"author":{"gitId":"-"},"content":"      identifier used on the same line (#111)."},{"lineNumber":4002,"author":{"gitId":"-"},"content":""},{"lineNumber":4003,"author":{"gitId":"-"},"content":"    * Combine \u0027no-space-after-operator\u0027, \u0027no-space-after-comma\u0027 and"},{"lineNumber":4004,"author":{"gitId":"-"},"content":"      \u0027no-space-before-operator\u0027 into a new warning \u0027bad-whitespace\u0027."},{"lineNumber":4005,"author":{"gitId":"-"},"content":""},{"lineNumber":4006,"author":{"gitId":"-"},"content":"    * Add a new warning \u0027superfluous-parens\u0027 for unnecessary"},{"lineNumber":4007,"author":{"gitId":"-"},"content":"      parentheses after certain keywords."},{"lineNumber":4008,"author":{"gitId":"-"},"content":""},{"lineNumber":4009,"author":{"gitId":"-"},"content":"    * Fix a potential crash in the redefine-in-handler warning"},{"lineNumber":4010,"author":{"gitId":"-"},"content":"      if the redefined name is a nested getattr node."},{"lineNumber":4011,"author":{"gitId":"-"},"content":""},{"lineNumber":4012,"author":{"gitId":"-"},"content":"    * Add a new option for the multi-statement warning to"},{"lineNumber":4013,"author":{"gitId":"-"},"content":"      allow single-line if statements."},{"lineNumber":4014,"author":{"gitId":"-"},"content":""},{"lineNumber":4015,"author":{"gitId":"-"},"content":"    * Add \u0027bad-context-manager\u0027 error, checking that \u0027__exit__\u0027"},{"lineNumber":4016,"author":{"gitId":"-"},"content":"      special method accepts the right number of arguments."},{"lineNumber":4017,"author":{"gitId":"-"},"content":""},{"lineNumber":4018,"author":{"gitId":"-"},"content":"    * Run pylint as a python module \u0027python -m pylint\u0027 (anatoly techtonik)."},{"lineNumber":4019,"author":{"gitId":"-"},"content":""},{"lineNumber":4020,"author":{"gitId":"-"},"content":"    * Check for non-exception classes inside an except clause."},{"lineNumber":4021,"author":{"gitId":"-"},"content":""},{"lineNumber":4022,"author":{"gitId":"-"},"content":"    * epylint support options to give to pylint after the file to analyze and"},{"lineNumber":4023,"author":{"gitId":"-"},"content":"      have basic input validation (bitbucket #53 and #54), patches provided by"},{"lineNumber":4024,"author":{"gitId":"-"},"content":"      felipeochoa and Brian Lane."},{"lineNumber":4025,"author":{"gitId":"-"},"content":""},{"lineNumber":4026,"author":{"gitId":"-"},"content":"    * Added a new warning, \u0027non-iterator-returned\u0027, for non-iterators"},{"lineNumber":4027,"author":{"gitId":"-"},"content":"      returned by \u0027__iter__\u0027."},{"lineNumber":4028,"author":{"gitId":"-"},"content":""},{"lineNumber":4029,"author":{"gitId":"-"},"content":"    * Add new checks for unpacking non-sequences in assignments"},{"lineNumber":4030,"author":{"gitId":"-"},"content":"      (unpacking-non-sequence) as well as unbalanced tuple unpacking"},{"lineNumber":4031,"author":{"gitId":"-"},"content":"      (unbalanced-tuple-unpacking)."},{"lineNumber":4032,"author":{"gitId":"-"},"content":""},{"lineNumber":4033,"author":{"gitId":"-"},"content":"    * useless-else-on-loop not emitted if there is a break in the"},{"lineNumber":4034,"author":{"gitId":"-"},"content":"      else clause of inner loop (#117)."},{"lineNumber":4035,"author":{"gitId":"-"},"content":""},{"lineNumber":4036,"author":{"gitId":"-"},"content":"    * don\u0027t mark ``input`` as a bad function when using python3 (#110)."},{"lineNumber":4037,"author":{"gitId":"-"},"content":""},{"lineNumber":4038,"author":{"gitId":"-"},"content":"    * badly-implemented-container caused several problems in its"},{"lineNumber":4039,"author":{"gitId":"-"},"content":"      current implementation. Deactivate it until we have something"},{"lineNumber":4040,"author":{"gitId":"-"},"content":"      better. See #112 for instance."},{"lineNumber":4041,"author":{"gitId":"-"},"content":""},{"lineNumber":4042,"author":{"gitId":"-"},"content":"    * Use attribute regexp for properties in python3, as in python2"},{"lineNumber":4043,"author":{"gitId":"-"},"content":""},{"lineNumber":4044,"author":{"gitId":"-"},"content":"    * Create the PYLINTHOME directory when needed, it might fail and lead to"},{"lineNumber":4045,"author":{"gitId":"-"},"content":"      spurious warnings on import of pylint.config."},{"lineNumber":4046,"author":{"gitId":"-"},"content":""},{"lineNumber":4047,"author":{"gitId":"-"},"content":"    * Fix setup.py so that pylint properly install on Windows when using python3"},{"lineNumber":4048,"author":{"gitId":"-"},"content":""},{"lineNumber":4049,"author":{"gitId":"-"},"content":"    * Various documentation fixes and enhancements"},{"lineNumber":4050,"author":{"gitId":"-"},"content":""},{"lineNumber":4051,"author":{"gitId":"-"},"content":"    * Fix issue #55 (false-positive trailing-whitespace on Windows)"},{"lineNumber":4052,"author":{"gitId":"-"},"content":""},{"lineNumber":4053,"author":{"gitId":"-"},"content":""},{"lineNumber":4054,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 1.0.0?"},{"lineNumber":4055,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4056,"author":{"gitId":"-"},"content":""},{"lineNumber":4057,"author":{"gitId":"-"},"content":"Release date: 2013-08-06"},{"lineNumber":4058,"author":{"gitId":"-"},"content":""},{"lineNumber":4059,"author":{"gitId":"-"},"content":""},{"lineNumber":4060,"author":{"gitId":"-"},"content":"    * Add check for the use of \u0027exec\u0027 function"},{"lineNumber":4061,"author":{"gitId":"-"},"content":""},{"lineNumber":4062,"author":{"gitId":"-"},"content":"    * New --msg-template option to control output, deprecating \"msvc\" and"},{"lineNumber":4063,"author":{"gitId":"-"},"content":"      \"parseable\" output formats as well as killing ``--include-ids`` and ``--symbols``"},{"lineNumber":4064,"author":{"gitId":"-"},"content":"      options"},{"lineNumber":4065,"author":{"gitId":"-"},"content":""},{"lineNumber":4066,"author":{"gitId":"-"},"content":"    * Do not emit [fixme] for every line if the config value \u0027notes\u0027"},{"lineNumber":4067,"author":{"gitId":"-"},"content":"      is empty, but [fixme] is enabled."},{"lineNumber":4068,"author":{"gitId":"-"},"content":""},{"lineNumber":4069,"author":{"gitId":"-"},"content":"    * Emit warnings about lines exceeding the column limit when"},{"lineNumber":4070,"author":{"gitId":"-"},"content":"      those lines are inside multiline docstrings."},{"lineNumber":4071,"author":{"gitId":"-"},"content":""},{"lineNumber":4072,"author":{"gitId":"-"},"content":"    * Do not double-check parameter names with the regex for parameters and"},{"lineNumber":4073,"author":{"gitId":"-"},"content":"      inline variables."},{"lineNumber":4074,"author":{"gitId":"-"},"content":""},{"lineNumber":4075,"author":{"gitId":"-"},"content":"    * Added a new warning missing-final-newline (C0304) for files missing"},{"lineNumber":4076,"author":{"gitId":"-"},"content":"      the final newline."},{"lineNumber":4077,"author":{"gitId":"-"},"content":""},{"lineNumber":4078,"author":{"gitId":"-"},"content":"    * Methods that are decorated as properties are now treated as attributes"},{"lineNumber":4079,"author":{"gitId":"-"},"content":"      for the purposes of name checking."},{"lineNumber":4080,"author":{"gitId":"-"},"content":""},{"lineNumber":4081,"author":{"gitId":"-"},"content":"    * Names of derived instance class member are not checked any more."},{"lineNumber":4082,"author":{"gitId":"-"},"content":""},{"lineNumber":4083,"author":{"gitId":"-"},"content":"    * Names in global statements are now checked against the regular"},{"lineNumber":4084,"author":{"gitId":"-"},"content":"      expression for constants."},{"lineNumber":4085,"author":{"gitId":"-"},"content":""},{"lineNumber":4086,"author":{"gitId":"-"},"content":"    * For toplevel name assignment, the class name regex will be used if"},{"lineNumber":4087,"author":{"gitId":"-"},"content":"      pylint can detect that value on the right-hand side is a class"},{"lineNumber":4088,"author":{"gitId":"-"},"content":"      (like collections.namedtuple())."},{"lineNumber":4089,"author":{"gitId":"-"},"content":""},{"lineNumber":4090,"author":{"gitId":"-"},"content":"    * Simplified invalid-name message"},{"lineNumber":4091,"author":{"gitId":"-"},"content":""},{"lineNumber":4092,"author":{"gitId":"-"},"content":"    * Added a new warning invalid-encoded-data (W0512) for files that"},{"lineNumber":4093,"author":{"gitId":"-"},"content":"      contain data that cannot be decoded with the specified or"},{"lineNumber":4094,"author":{"gitId":"-"},"content":"      default encoding."},{"lineNumber":4095,"author":{"gitId":"-"},"content":""},{"lineNumber":4096,"author":{"gitId":"-"},"content":"    * New warning bad-open-mode (W1501) for calls to open (or file) that"},{"lineNumber":4097,"author":{"gitId":"-"},"content":"      specify invalid open modes (Original implementation by Sasha Issayev)."},{"lineNumber":4098,"author":{"gitId":"-"},"content":""},{"lineNumber":4099,"author":{"gitId":"-"},"content":"    * New warning old-style-class (C1001) for classes that do not have any"},{"lineNumber":4100,"author":{"gitId":"-"},"content":"      base class."},{"lineNumber":4101,"author":{"gitId":"-"},"content":""},{"lineNumber":4102,"author":{"gitId":"-"},"content":"    * Add new name type \u0027class_attribute\u0027 for attributes defined"},{"lineNumber":4103,"author":{"gitId":"-"},"content":"      in class scope. By default, allow both const and variable names."},{"lineNumber":4104,"author":{"gitId":"-"},"content":""},{"lineNumber":4105,"author":{"gitId":"-"},"content":"    * New warning trailing-whitespace (C0303) that warns about"},{"lineNumber":4106,"author":{"gitId":"-"},"content":"      trailing whitespace."},{"lineNumber":4107,"author":{"gitId":"-"},"content":""},{"lineNumber":4108,"author":{"gitId":"-"},"content":"    * Added a new warning unpacking-in-except (W0712) about unpacking"},{"lineNumber":4109,"author":{"gitId":"-"},"content":"      exceptions in handlers, which is unsupported in Python 3."},{"lineNumber":4110,"author":{"gitId":"-"},"content":""},{"lineNumber":4111,"author":{"gitId":"-"},"content":"    * Add a configuration option for missing-docstring to"},{"lineNumber":4112,"author":{"gitId":"-"},"content":"      optionally exempt short functions/methods/classes from"},{"lineNumber":4113,"author":{"gitId":"-"},"content":"      the check."},{"lineNumber":4114,"author":{"gitId":"-"},"content":""},{"lineNumber":4115,"author":{"gitId":"-"},"content":"    * Add the type of the offending node to missing-docstring"},{"lineNumber":4116,"author":{"gitId":"-"},"content":"      and empty-docstring."},{"lineNumber":4117,"author":{"gitId":"-"},"content":""},{"lineNumber":4118,"author":{"gitId":"-"},"content":"    * New utility classes for per-checker unittests in testutils.py"},{"lineNumber":4119,"author":{"gitId":"-"},"content":""},{"lineNumber":4120,"author":{"gitId":"-"},"content":"    * Do not warn about redefinitions of variables that match the"},{"lineNumber":4121,"author":{"gitId":"-"},"content":"      dummy regex."},{"lineNumber":4122,"author":{"gitId":"-"},"content":""},{"lineNumber":4123,"author":{"gitId":"-"},"content":"    * Do not treat all variables starting with _ as dummy variables,"},{"lineNumber":4124,"author":{"gitId":"-"},"content":"      only _ itself."},{"lineNumber":4125,"author":{"gitId":"-"},"content":""},{"lineNumber":4126,"author":{"gitId":"-"},"content":"    * Make the line-too-long warning configurable by adding a regex for lines"},{"lineNumber":4127,"author":{"gitId":"-"},"content":"      for with the length limit should not be enforced"},{"lineNumber":4128,"author":{"gitId":"-"},"content":""},{"lineNumber":4129,"author":{"gitId":"-"},"content":"    * Do not warn about a long line if a pylint disable"},{"lineNumber":4130,"author":{"gitId":"-"},"content":"      option brings it above the length limit"},{"lineNumber":4131,"author":{"gitId":"-"},"content":""},{"lineNumber":4132,"author":{"gitId":"-"},"content":"    * Do not flag names in nested with statements as undefined."},{"lineNumber":4133,"author":{"gitId":"-"},"content":""},{"lineNumber":4134,"author":{"gitId":"-"},"content":"    * Added a new warning \u0027old-raise-syntax\u0027 for the deprecated syntax"},{"lineNumber":4135,"author":{"gitId":"-"},"content":"      raise Exception, args"},{"lineNumber":4136,"author":{"gitId":"-"},"content":""},{"lineNumber":4137,"author":{"gitId":"-"},"content":"    * Support for PEP 3102 and new missing-kwoa (E1125) message for missing"},{"lineNumber":4138,"author":{"gitId":"-"},"content":"      mandatory keyword argument (logilab.org\u0027s #107788)"},{"lineNumber":4139,"author":{"gitId":"-"},"content":""},{"lineNumber":4140,"author":{"gitId":"-"},"content":"    * Fix spelling of max-branchs option, now max-branches"},{"lineNumber":4141,"author":{"gitId":"-"},"content":""},{"lineNumber":4142,"author":{"gitId":"-"},"content":"    * Added a new base class and interface for checkers that work on the"},{"lineNumber":4143,"author":{"gitId":"-"},"content":"      tokens rather than the syntax, and only tokenize the input file"},{"lineNumber":4144,"author":{"gitId":"-"},"content":"      once."},{"lineNumber":4145,"author":{"gitId":"-"},"content":""},{"lineNumber":4146,"author":{"gitId":"-"},"content":"    * Follow astng renaming to astroid"},{"lineNumber":4147,"author":{"gitId":"-"},"content":""},{"lineNumber":4148,"author":{"gitId":"-"},"content":"    * bitbucket #37: check for unbalanced unpacking in assignments"},{"lineNumber":4149,"author":{"gitId":"-"},"content":""},{"lineNumber":4150,"author":{"gitId":"-"},"content":"    * bitbucket #25: fix incomplete-protocol false positive for read-only"},{"lineNumber":4151,"author":{"gitId":"-"},"content":"      containers like tuple"},{"lineNumber":4152,"author":{"gitId":"-"},"content":""},{"lineNumber":4153,"author":{"gitId":"-"},"content":"    * bitbucket #16: fix False positive E1003 on Python 3 for argument-less super()"},{"lineNumber":4154,"author":{"gitId":"-"},"content":""},{"lineNumber":4155,"author":{"gitId":"-"},"content":"    * bitbucket #6: put back documentation in source distribution"},{"lineNumber":4156,"author":{"gitId":"-"},"content":""},{"lineNumber":4157,"author":{"gitId":"-"},"content":"    * bitbucket #15: epylint shouldn\u0027t hang anymore when there is a large"},{"lineNumber":4158,"author":{"gitId":"-"},"content":"      output on pylint\u0027stderr"},{"lineNumber":4159,"author":{"gitId":"-"},"content":""},{"lineNumber":4160,"author":{"gitId":"-"},"content":"    * bitbucket #7: fix epylint w/ python3"},{"lineNumber":4161,"author":{"gitId":"-"},"content":""},{"lineNumber":4162,"author":{"gitId":"-"},"content":"    * bitbucket #3: remove string module from the default list of deprecated"},{"lineNumber":4163,"author":{"gitId":"-"},"content":"      modules"},{"lineNumber":4164,"author":{"gitId":"-"},"content":""},{"lineNumber":4165,"author":{"gitId":"-"},"content":""},{"lineNumber":4166,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.28.0?"},{"lineNumber":4167,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4168,"author":{"gitId":"-"},"content":""},{"lineNumber":4169,"author":{"gitId":"-"},"content":"Release date: 2013-04-25"},{"lineNumber":4170,"author":{"gitId":"-"},"content":""},{"lineNumber":4171,"author":{"gitId":"-"},"content":"    * bitbucket #1: fix \"dictionary changed size during iteration\" crash"},{"lineNumber":4172,"author":{"gitId":"-"},"content":""},{"lineNumber":4173,"author":{"gitId":"-"},"content":"    * #74013: new E1310[bad-str-strip-call] message warning when a call to a"},{"lineNumber":4174,"author":{"gitId":"-"},"content":"      {l,r,}strip method contains duplicate characters (patch by Torsten Marek)"},{"lineNumber":4175,"author":{"gitId":"-"},"content":""},{"lineNumber":4176,"author":{"gitId":"-"},"content":"    * #123233: new E0108[duplicate-argument-name] message reporting duplicate"},{"lineNumber":4177,"author":{"gitId":"-"},"content":"      argument names"},{"lineNumber":4178,"author":{"gitId":"-"},"content":""},{"lineNumber":4179,"author":{"gitId":"-"},"content":"    * #81378: emit W0120[useless-else-on-loop] for loops without break"},{"lineNumber":4180,"author":{"gitId":"-"},"content":""},{"lineNumber":4181,"author":{"gitId":"-"},"content":"    * #124660: internal dependencies should not appear in external dependencies"},{"lineNumber":4182,"author":{"gitId":"-"},"content":"      report"},{"lineNumber":4183,"author":{"gitId":"-"},"content":""},{"lineNumber":4184,"author":{"gitId":"-"},"content":"    * #124662: fix name error causing crash when symbols are included in output"},{"lineNumber":4185,"author":{"gitId":"-"},"content":"      messages"},{"lineNumber":4186,"author":{"gitId":"-"},"content":""},{"lineNumber":4187,"author":{"gitId":"-"},"content":"    * #123285: apply pragmas for warnings attached to lines to physical source"},{"lineNumber":4188,"author":{"gitId":"-"},"content":"      code lines"},{"lineNumber":4189,"author":{"gitId":"-"},"content":""},{"lineNumber":4190,"author":{"gitId":"-"},"content":"    * #123259: do not emit E0105 for yield expressions inside lambdas"},{"lineNumber":4191,"author":{"gitId":"-"},"content":""},{"lineNumber":4192,"author":{"gitId":"-"},"content":"    * #123892: don\u0027t crash when attempting to show source code line that can\u0027t"},{"lineNumber":4193,"author":{"gitId":"-"},"content":"      be encoded with the current locale settings"},{"lineNumber":4194,"author":{"gitId":"-"},"content":""},{"lineNumber":4195,"author":{"gitId":"-"},"content":"    * Simplify checks for dangerous default values by unifying tests for all"},{"lineNumber":4196,"author":{"gitId":"-"},"content":"      different mutable compound literals."},{"lineNumber":4197,"author":{"gitId":"-"},"content":""},{"lineNumber":4198,"author":{"gitId":"-"},"content":"    * Improve the description for E1124[redundant-keyword-arg]"},{"lineNumber":4199,"author":{"gitId":"-"},"content":""},{"lineNumber":4200,"author":{"gitId":"-"},"content":""},{"lineNumber":4201,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.27.0?"},{"lineNumber":4202,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4203,"author":{"gitId":"-"},"content":""},{"lineNumber":4204,"author":{"gitId":"-"},"content":"Release date: 2013-02-26"},{"lineNumber":4205,"author":{"gitId":"-"},"content":""},{"lineNumber":4206,"author":{"gitId":"-"},"content":"    * #20693: replace pylint.el by Ian Eure version (patch by J.Kotta)"},{"lineNumber":4207,"author":{"gitId":"-"},"content":""},{"lineNumber":4208,"author":{"gitId":"-"},"content":"    * #105327: add support for --disable\u003dall option and deprecate the"},{"lineNumber":4209,"author":{"gitId":"-"},"content":"      \u0027disable-all\u0027 inline directive in favour of \u0027skip-file\u0027 (patch by"},{"lineNumber":4210,"author":{"gitId":"-"},"content":"      A.Fayolle)"},{"lineNumber":4211,"author":{"gitId":"-"},"content":""},{"lineNumber":4212,"author":{"gitId":"-"},"content":"    * #110840: add messages I0020 and I0021 for reporting of suppressed"},{"lineNumber":4213,"author":{"gitId":"-"},"content":"      messages and useless suppression pragmas. (patch by Torsten Marek)"},{"lineNumber":4214,"author":{"gitId":"-"},"content":""},{"lineNumber":4215,"author":{"gitId":"-"},"content":"    * #112728: add warning E0604 for non-string objects in __all__"},{"lineNumber":4216,"author":{"gitId":"-"},"content":"      (patch by Torsten Marek)"},{"lineNumber":4217,"author":{"gitId":"-"},"content":""},{"lineNumber":4218,"author":{"gitId":"-"},"content":"    * #120657: add warning W0110/deprecated-lambda when a map/filter"},{"lineNumber":4219,"author":{"gitId":"-"},"content":"      of a lambda could be a comprehension (patch by Martin Pool)"},{"lineNumber":4220,"author":{"gitId":"-"},"content":""},{"lineNumber":4221,"author":{"gitId":"-"},"content":"    * #113231: logging checker now looks at instances of Logger classes"},{"lineNumber":4222,"author":{"gitId":"-"},"content":"      in addition to the base logging module. (patch by Mike Bryant)"},{"lineNumber":4223,"author":{"gitId":"-"},"content":""},{"lineNumber":4224,"author":{"gitId":"-"},"content":"    * #111799: don\u0027t warn about octal escape sequence, but warn about \\o"},{"lineNumber":4225,"author":{"gitId":"-"},"content":"      which is not octal in Python (patch by Martin Pool)"},{"lineNumber":4226,"author":{"gitId":"-"},"content":""},{"lineNumber":4227,"author":{"gitId":"-"},"content":"    * #110839: bind \u003cF5\u003e to Run button in pylint-gui"},{"lineNumber":4228,"author":{"gitId":"-"},"content":""},{"lineNumber":4229,"author":{"gitId":"-"},"content":"    * #115580: fix erroneous W0212 (access to protected member) on super call"},{"lineNumber":4230,"author":{"gitId":"-"},"content":"      (patch by Martin Pool)"},{"lineNumber":4231,"author":{"gitId":"-"},"content":""},{"lineNumber":4232,"author":{"gitId":"-"},"content":"    * #110853: fix a crash when an __init__ method in a base class has been"},{"lineNumber":4233,"author":{"gitId":"-"},"content":"      created by assignment rather than direct function definition (patch by"},{"lineNumber":4234,"author":{"gitId":"-"},"content":"      Torsten Marek)"},{"lineNumber":4235,"author":{"gitId":"-"},"content":""},{"lineNumber":4236,"author":{"gitId":"-"},"content":"    * #110838: fix pylint-gui crash when include-ids is activated (patch by"},{"lineNumber":4237,"author":{"gitId":"-"},"content":"      Omega Weapon)"},{"lineNumber":4238,"author":{"gitId":"-"},"content":""},{"lineNumber":4239,"author":{"gitId":"-"},"content":"    * #112667: fix emission of reimport warnings for mixed imports and extend"},{"lineNumber":4240,"author":{"gitId":"-"},"content":"      the testcase (patch by Torsten Marek)"},{"lineNumber":4241,"author":{"gitId":"-"},"content":""},{"lineNumber":4242,"author":{"gitId":"-"},"content":"    * #112698: fix crash related to non-inferable __all__ attributes and"},{"lineNumber":4243,"author":{"gitId":"-"},"content":"      invalid __all__ contents (patch by Torsten Marek)"},{"lineNumber":4244,"author":{"gitId":"-"},"content":""},{"lineNumber":4245,"author":{"gitId":"-"},"content":"    * Python 3 related fixes:"},{"lineNumber":4246,"author":{"gitId":"-"},"content":""},{"lineNumber":4247,"author":{"gitId":"-"},"content":"    * #110213: fix import of checkers broken with python 3.3, causing"},{"lineNumber":4248,"author":{"gitId":"-"},"content":"        \"No such message id W0704\" breakage"},{"lineNumber":4249,"author":{"gitId":"-"},"content":""},{"lineNumber":4250,"author":{"gitId":"-"},"content":"    * #120635: redefine cmp function used in pylint.reporters"},{"lineNumber":4251,"author":{"gitId":"-"},"content":""},{"lineNumber":4252,"author":{"gitId":"-"},"content":"    * Include full warning id for I0020 and I0021 and make sure to flush"},{"lineNumber":4253,"author":{"gitId":"-"},"content":"      warnings after each module, not at the end of the pylint run."},{"lineNumber":4254,"author":{"gitId":"-"},"content":"      (patch by Torsten Marek)"},{"lineNumber":4255,"author":{"gitId":"-"},"content":""},{"lineNumber":4256,"author":{"gitId":"-"},"content":"    * Changed the regular expression for inline options so that it must be"},{"lineNumber":4257,"author":{"gitId":"-"},"content":"      preceded by a # (patch by Torsten Marek)"},{"lineNumber":4258,"author":{"gitId":"-"},"content":""},{"lineNumber":4259,"author":{"gitId":"-"},"content":"    * Make dot output for import graph predictable and not depend"},{"lineNumber":4260,"author":{"gitId":"-"},"content":"      on ordering of strings in hashes. (patch by Torsten Marek)"},{"lineNumber":4261,"author":{"gitId":"-"},"content":""},{"lineNumber":4262,"author":{"gitId":"-"},"content":"    * Add hooks for import path setup and move pylint\u0027s sys.path"},{"lineNumber":4263,"author":{"gitId":"-"},"content":"      modifications into them. (patch by Torsten Marek)"},{"lineNumber":4264,"author":{"gitId":"-"},"content":""},{"lineNumber":4265,"author":{"gitId":"-"},"content":""},{"lineNumber":4266,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.26.0?"},{"lineNumber":4267,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4268,"author":{"gitId":"-"},"content":""},{"lineNumber":4269,"author":{"gitId":"-"},"content":"Release date: 2012-10-05"},{"lineNumber":4270,"author":{"gitId":"-"},"content":""},{"lineNumber":4271,"author":{"gitId":"-"},"content":"    * #106534: add --ignore-imports option to code similarity checking"},{"lineNumber":4272,"author":{"gitId":"-"},"content":"      and \u0027symilar\u0027 command line tool (patch by Ry4an Brase)"},{"lineNumber":4273,"author":{"gitId":"-"},"content":""},{"lineNumber":4274,"author":{"gitId":"-"},"content":"    * #104571: check for anomalous backslash escape, introducing new"},{"lineNumber":4275,"author":{"gitId":"-"},"content":"      W1401 and W1402 messages (patch by Martin Pool)"},{"lineNumber":4276,"author":{"gitId":"-"},"content":""},{"lineNumber":4277,"author":{"gitId":"-"},"content":"    * #100707: check for boolop being used as exception class, introducing"},{"lineNumber":4278,"author":{"gitId":"-"},"content":"      new W0711 message (patch by Tim Hatch)"},{"lineNumber":4279,"author":{"gitId":"-"},"content":""},{"lineNumber":4280,"author":{"gitId":"-"},"content":"    * #4014: improve checking of metaclass methods first args, introducing"},{"lineNumber":4281,"author":{"gitId":"-"},"content":"      new C0204 message (patch by lothiraldan@gmail.com finalized by sthenault)"},{"lineNumber":4282,"author":{"gitId":"-"},"content":""},{"lineNumber":4283,"author":{"gitId":"-"},"content":"    * #4685: check for consistency of a module\u0027s __all__ variable,"},{"lineNumber":4284,"author":{"gitId":"-"},"content":"      introducing new E0603 message"},{"lineNumber":4285,"author":{"gitId":"-"},"content":""},{"lineNumber":4286,"author":{"gitId":"-"},"content":"    * #105337: allow custom reporter in output-format (patch by Kevin Jing Qiu)"},{"lineNumber":4287,"author":{"gitId":"-"},"content":""},{"lineNumber":4288,"author":{"gitId":"-"},"content":"    * #104420: check for protocol completness and avoid false R0903"},{"lineNumber":4289,"author":{"gitId":"-"},"content":"      (patch by Peter Hammond)"},{"lineNumber":4290,"author":{"gitId":"-"},"content":""},{"lineNumber":4291,"author":{"gitId":"-"},"content":"    * #100654: fix grammatical error for W0332 message (using \u0027l\u0027 as"},{"lineNumber":4292,"author":{"gitId":"-"},"content":"      long int identifier)"},{"lineNumber":4293,"author":{"gitId":"-"},"content":""},{"lineNumber":4294,"author":{"gitId":"-"},"content":"    * #103656: fix W0231 false positive for missing call to object.__init__"},{"lineNumber":4295,"author":{"gitId":"-"},"content":"      (patch by lothiraldan@gmail.com)"},{"lineNumber":4296,"author":{"gitId":"-"},"content":""},{"lineNumber":4297,"author":{"gitId":"-"},"content":"    * #63424: fix similarity report disabling by properly renaming it to RP0801"},{"lineNumber":4298,"author":{"gitId":"-"},"content":""},{"lineNumber":4299,"author":{"gitId":"-"},"content":"    * #103949: create a console_scripts entry point to be used by"},{"lineNumber":4300,"author":{"gitId":"-"},"content":"      easy_install, buildout and pip"},{"lineNumber":4301,"author":{"gitId":"-"},"content":""},{"lineNumber":4302,"author":{"gitId":"-"},"content":"    * fix cross-interpreter issue (non compatible access to __builtins__)"},{"lineNumber":4303,"author":{"gitId":"-"},"content":""},{"lineNumber":4304,"author":{"gitId":"-"},"content":"    * stop including tests files in distribution, they causes crash when"},{"lineNumber":4305,"author":{"gitId":"-"},"content":"      installed with python3 (#72022, #82417, #76910)"},{"lineNumber":4306,"author":{"gitId":"-"},"content":""},{"lineNumber":4307,"author":{"gitId":"-"},"content":""},{"lineNumber":4308,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.25.2?"},{"lineNumber":4309,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4310,"author":{"gitId":"-"},"content":""},{"lineNumber":4311,"author":{"gitId":"-"},"content":"Release date: 2012-07-17"},{"lineNumber":4312,"author":{"gitId":"-"},"content":""},{"lineNumber":4313,"author":{"gitId":"-"},"content":"    * #93591: Correctly emit warnings about clobbered variable names when an"},{"lineNumber":4314,"author":{"gitId":"-"},"content":"      except handler contains a tuple of names instead of a single name."},{"lineNumber":4315,"author":{"gitId":"-"},"content":"      (patch by tmarek@google.com)"},{"lineNumber":4316,"author":{"gitId":"-"},"content":""},{"lineNumber":4317,"author":{"gitId":"-"},"content":"    * #7394: W0212 (access to protected member) not emitted on assigments"},{"lineNumber":4318,"author":{"gitId":"-"},"content":"      (patch by lothiraldan@gmail.com)"},{"lineNumber":4319,"author":{"gitId":"-"},"content":""},{"lineNumber":4320,"author":{"gitId":"-"},"content":"    * #18772; no prototype consistency check for mangled methods (patch by"},{"lineNumber":4321,"author":{"gitId":"-"},"content":"      lothiraldan@gmail.com)"},{"lineNumber":4322,"author":{"gitId":"-"},"content":""},{"lineNumber":4323,"author":{"gitId":"-"},"content":"    * #92911: emit W0102 when sets are used as default arguments in functions"},{"lineNumber":4324,"author":{"gitId":"-"},"content":"      (patch by tmarek@google.com)"},{"lineNumber":4325,"author":{"gitId":"-"},"content":""},{"lineNumber":4326,"author":{"gitId":"-"},"content":"    * #77982: do not emit E0602 for loop variables of comprehensions"},{"lineNumber":4327,"author":{"gitId":"-"},"content":"      used as argument values inside a decorator (patch by tmarek@google.com)"},{"lineNumber":4328,"author":{"gitId":"-"},"content":""},{"lineNumber":4329,"author":{"gitId":"-"},"content":"    * #89092: don\u0027t emit E0202 (attribute hiding a method) on @property methods"},{"lineNumber":4330,"author":{"gitId":"-"},"content":""},{"lineNumber":4331,"author":{"gitId":"-"},"content":"    * #92584: fix pylint-gui crash due to internal API change"},{"lineNumber":4332,"author":{"gitId":"-"},"content":""},{"lineNumber":4333,"author":{"gitId":"-"},"content":"    * #87192: fix crash when decorators are accessed through more than one dot"},{"lineNumber":4334,"author":{"gitId":"-"},"content":"      (for instance @a.b is fine, @a.b.c crash)"},{"lineNumber":4335,"author":{"gitId":"-"},"content":""},{"lineNumber":4336,"author":{"gitId":"-"},"content":"    * #88914: fix parsing of --generated-members options, leading to crash"},{"lineNumber":4337,"author":{"gitId":"-"},"content":"      when using a regexp value set"},{"lineNumber":4338,"author":{"gitId":"-"},"content":""},{"lineNumber":4339,"author":{"gitId":"-"},"content":"    * fix potential crashes with utils.safe_infer raising InferenceError"},{"lineNumber":4340,"author":{"gitId":"-"},"content":""},{"lineNumber":4341,"author":{"gitId":"-"},"content":""},{"lineNumber":4342,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.25.1?"},{"lineNumber":4343,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4344,"author":{"gitId":"-"},"content":""},{"lineNumber":4345,"author":{"gitId":"-"},"content":"Release date: 2011-12-08"},{"lineNumber":4346,"author":{"gitId":"-"},"content":""},{"lineNumber":4347,"author":{"gitId":"-"},"content":"    * #81078: Warn if names in  exception handlers clobber overwrite"},{"lineNumber":4348,"author":{"gitId":"-"},"content":"      existing names (patch by tmarek@google.com)"},{"lineNumber":4349,"author":{"gitId":"-"},"content":""},{"lineNumber":4350,"author":{"gitId":"-"},"content":"    * #81113: Fix W0702 messages appearing with the wrong line number."},{"lineNumber":4351,"author":{"gitId":"-"},"content":"      (patch by tmarek@google.com)"},{"lineNumber":4352,"author":{"gitId":"-"},"content":""},{"lineNumber":4353,"author":{"gitId":"-"},"content":"    * #50461, #52020, #51222: Do not issue warnings when using 2.6\u0027s"},{"lineNumber":4354,"author":{"gitId":"-"},"content":"      property.setter/deleter functionality (patch by dneil@google.com)"},{"lineNumber":4355,"author":{"gitId":"-"},"content":""},{"lineNumber":4356,"author":{"gitId":"-"},"content":"    * #9188, #4024: Do not trigger W0631 if a loop variable is assigned"},{"lineNumber":4357,"author":{"gitId":"-"},"content":"      in the else branch of a for loop."},{"lineNumber":4358,"author":{"gitId":"-"},"content":""},{"lineNumber":4359,"author":{"gitId":"-"},"content":""},{"lineNumber":4360,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.25.0?"},{"lineNumber":4361,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4362,"author":{"gitId":"-"},"content":""},{"lineNumber":4363,"author":{"gitId":"-"},"content":"Release date: 2011-10-7"},{"lineNumber":4364,"author":{"gitId":"-"},"content":""},{"lineNumber":4365,"author":{"gitId":"-"},"content":"    * #74742: make allowed name for first argument of class method configurable"},{"lineNumber":4366,"author":{"gitId":"-"},"content":"      (patch by Google)"},{"lineNumber":4367,"author":{"gitId":"-"},"content":""},{"lineNumber":4368,"author":{"gitId":"-"},"content":"    * #74087: handle case where inference of a module return YES; this avoid"},{"lineNumber":4369,"author":{"gitId":"-"},"content":"      some cases of \"TypeError: \u0027_Yes\u0027 object does not support indexing\" (patch"},{"lineNumber":4370,"author":{"gitId":"-"},"content":"      by Google)"},{"lineNumber":4371,"author":{"gitId":"-"},"content":""},{"lineNumber":4372,"author":{"gitId":"-"},"content":"    * #74745: make \"too general\" exception names configurable (patch by Google)"},{"lineNumber":4373,"author":{"gitId":"-"},"content":""},{"lineNumber":4374,"author":{"gitId":"-"},"content":"    * #74747: crash occurs when lookup up a special attribute in class scope"},{"lineNumber":4375,"author":{"gitId":"-"},"content":"      (patch by google)"},{"lineNumber":4376,"author":{"gitId":"-"},"content":""},{"lineNumber":4377,"author":{"gitId":"-"},"content":"    * #76920: crash if on eg \"pylint --rcfile\" (patch by Torsten Marek)"},{"lineNumber":4378,"author":{"gitId":"-"},"content":""},{"lineNumber":4379,"author":{"gitId":"-"},"content":"    * #77237: warning for E0202 may be very misleading"},{"lineNumber":4380,"author":{"gitId":"-"},"content":""},{"lineNumber":4381,"author":{"gitId":"-"},"content":"    * #73941: HTML report messages table is badly rendered"},{"lineNumber":4382,"author":{"gitId":"-"},"content":""},{"lineNumber":4383,"author":{"gitId":"-"},"content":""},{"lineNumber":4384,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.24.0?"},{"lineNumber":4385,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4386,"author":{"gitId":"-"},"content":""},{"lineNumber":4387,"author":{"gitId":"-"},"content":"Release date: 2011-07-18"},{"lineNumber":4388,"author":{"gitId":"-"},"content":""},{"lineNumber":4389,"author":{"gitId":"-"},"content":"    * #69738: add regular expressions support for \"generated-members\""},{"lineNumber":4390,"author":{"gitId":"-"},"content":""},{"lineNumber":4391,"author":{"gitId":"-"},"content":"    * ids of logging and string_format checkers have been changed:"},{"lineNumber":4392,"author":{"gitId":"-"},"content":"      logging: 65 -\u003e 12, string_format: 99 -\u003e 13"},{"lineNumber":4393,"author":{"gitId":"-"},"content":"      Also add documentation to say that ids of range 1-50 shall be reserved"},{"lineNumber":4394,"author":{"gitId":"-"},"content":"      to pylint internal checkers"},{"lineNumber":4395,"author":{"gitId":"-"},"content":""},{"lineNumber":4396,"author":{"gitId":"-"},"content":"    * #69993: Additional string format checks for logging module:"},{"lineNumber":4397,"author":{"gitId":"-"},"content":"      check for missing arguments, too many arguments, or invalid string"},{"lineNumber":4398,"author":{"gitId":"-"},"content":"      formats in the logging checker module. Contributed by Daniel Arena"},{"lineNumber":4399,"author":{"gitId":"-"},"content":""},{"lineNumber":4400,"author":{"gitId":"-"},"content":"    * #69220: add column offset to the reports. If you\u0027ve a custom reporter,"},{"lineNumber":4401,"author":{"gitId":"-"},"content":"      this change may break it has now location gain a new item giving the"},{"lineNumber":4402,"author":{"gitId":"-"},"content":"      column offset."},{"lineNumber":4403,"author":{"gitId":"-"},"content":""},{"lineNumber":4404,"author":{"gitId":"-"},"content":"    * #60828: Fix false positive in reimport check"},{"lineNumber":4405,"author":{"gitId":"-"},"content":""},{"lineNumber":4406,"author":{"gitId":"-"},"content":"    * #70495: absolute imports fail depending on module path (patch by Jacek Konieczny)"},{"lineNumber":4407,"author":{"gitId":"-"},"content":""},{"lineNumber":4408,"author":{"gitId":"-"},"content":"    * #22273: Fix --ignore option documentation to match reality"},{"lineNumber":4409,"author":{"gitId":"-"},"content":""},{"lineNumber":4410,"author":{"gitId":"-"},"content":""},{"lineNumber":4411,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.23.0?"},{"lineNumber":4412,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4413,"author":{"gitId":"-"},"content":""},{"lineNumber":4414,"author":{"gitId":"-"},"content":"Release date: 2011-01-11"},{"lineNumber":4415,"author":{"gitId":"-"},"content":""},{"lineNumber":4416,"author":{"gitId":"-"},"content":"    * documentation update, add manpages"},{"lineNumber":4417,"author":{"gitId":"-"},"content":""},{"lineNumber":4418,"author":{"gitId":"-"},"content":"    * several performance improvements"},{"lineNumber":4419,"author":{"gitId":"-"},"content":""},{"lineNumber":4420,"author":{"gitId":"-"},"content":"    * finalize python3 support"},{"lineNumber":4421,"author":{"gitId":"-"},"content":""},{"lineNumber":4422,"author":{"gitId":"-"},"content":"    * new W0106 warning \u0027Expression \"%s\" is assigned to nothing\u0027"},{"lineNumber":4423,"author":{"gitId":"-"},"content":""},{"lineNumber":4424,"author":{"gitId":"-"},"content":"    * drop E0501 and E0502 messages about wrong source encoding: not anymore"},{"lineNumber":4425,"author":{"gitId":"-"},"content":"      interesting since it\u0027s a syntax error for python \u003e\u003d 2.5 and we now only"},{"lineNumber":4426,"author":{"gitId":"-"},"content":"      support this python version and above."},{"lineNumber":4427,"author":{"gitId":"-"},"content":""},{"lineNumber":4428,"author":{"gitId":"-"},"content":"    * don\u0027t emit W0221 or W0222 when methods as variable arguments (eg \\*arg"},{"lineNumber":4429,"author":{"gitId":"-"},"content":"      and/or \\*\\*args). Patch submitted by Charles Duffy."},{"lineNumber":4430,"author":{"gitId":"-"},"content":""},{"lineNumber":4431,"author":{"gitId":"-"},"content":""},{"lineNumber":4432,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.22.0?"},{"lineNumber":4433,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4434,"author":{"gitId":"-"},"content":""},{"lineNumber":4435,"author":{"gitId":"-"},"content":"Release date: 2010-11-15"},{"lineNumber":4436,"author":{"gitId":"-"},"content":""},{"lineNumber":4437,"author":{"gitId":"-"},"content":"    * python versions: minimal python3.x support; drop python \u003c 2.5 support"},{"lineNumber":4438,"author":{"gitId":"-"},"content":""},{"lineNumber":4439,"author":{"gitId":"-"},"content":""},{"lineNumber":4440,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.21.4?"},{"lineNumber":4441,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4442,"author":{"gitId":"-"},"content":""},{"lineNumber":4443,"author":{"gitId":"-"},"content":"Release date: 2010-10-27"},{"lineNumber":4444,"author":{"gitId":"-"},"content":""},{"lineNumber":4445,"author":{"gitId":"-"},"content":"    * fix #48066: pylint crashes when redirecting output containing non-ascii characters"},{"lineNumber":4446,"author":{"gitId":"-"},"content":""},{"lineNumber":4447,"author":{"gitId":"-"},"content":"    * fix #19799: \"pylint -blah\" exit with status 2"},{"lineNumber":4448,"author":{"gitId":"-"},"content":""},{"lineNumber":4449,"author":{"gitId":"-"},"content":"    * update documentation"},{"lineNumber":4450,"author":{"gitId":"-"},"content":""},{"lineNumber":4451,"author":{"gitId":"-"},"content":""},{"lineNumber":4452,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.21.3?"},{"lineNumber":4453,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4454,"author":{"gitId":"-"},"content":""},{"lineNumber":4455,"author":{"gitId":"-"},"content":"Release date: 2010-09-28"},{"lineNumber":4456,"author":{"gitId":"-"},"content":""},{"lineNumber":4457,"author":{"gitId":"-"},"content":"    * restored python 2.3 compatibility. Along with logilab-astng"},{"lineNumber":4458,"author":{"gitId":"-"},"content":"      0.21.3 and logilab-common 0.52, this will much probably be the"},{"lineNumber":4459,"author":{"gitId":"-"},"content":"      latest release supporting python \u003c 2.5."},{"lineNumber":4460,"author":{"gitId":"-"},"content":""},{"lineNumber":4461,"author":{"gitId":"-"},"content":""},{"lineNumber":4462,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.21.2?"},{"lineNumber":4463,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4464,"author":{"gitId":"-"},"content":""},{"lineNumber":4465,"author":{"gitId":"-"},"content":"Release date: 2010-08-26"},{"lineNumber":4466,"author":{"gitId":"-"},"content":""},{"lineNumber":4467,"author":{"gitId":"-"},"content":"    * fix #36193: import checker raise exception on cyclic import"},{"lineNumber":4468,"author":{"gitId":"-"},"content":""},{"lineNumber":4469,"author":{"gitId":"-"},"content":"    * fix #28796: regression in --generated-members introduced pylint 0.20"},{"lineNumber":4470,"author":{"gitId":"-"},"content":""},{"lineNumber":4471,"author":{"gitId":"-"},"content":"    * some documentation cleanups"},{"lineNumber":4472,"author":{"gitId":"-"},"content":""},{"lineNumber":4473,"author":{"gitId":"-"},"content":""},{"lineNumber":4474,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.21.1?"},{"lineNumber":4475,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4476,"author":{"gitId":"-"},"content":""},{"lineNumber":4477,"author":{"gitId":"-"},"content":"Release date: 2010-06-04"},{"lineNumber":4478,"author":{"gitId":"-"},"content":""},{"lineNumber":4479,"author":{"gitId":"-"},"content":"    * fix #28962: pylint crash with new options, due to missing stats data while"},{"lineNumber":4480,"author":{"gitId":"-"},"content":"      writing the Statistics by types report"},{"lineNumber":4481,"author":{"gitId":"-"},"content":""},{"lineNumber":4482,"author":{"gitId":"-"},"content":"    * updated man page to 0.21 or greater command line usage (fix debian #582494)"},{"lineNumber":4483,"author":{"gitId":"-"},"content":""},{"lineNumber":4484,"author":{"gitId":"-"},"content":""},{"lineNumber":4485,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.21.0?"},{"lineNumber":4486,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4487,"author":{"gitId":"-"},"content":""},{"lineNumber":4488,"author":{"gitId":"-"},"content":"Release date: 2010-05-11"},{"lineNumber":4489,"author":{"gitId":"-"},"content":""},{"lineNumber":4490,"author":{"gitId":"-"},"content":"    * command line updated (closes #9774, #9787, #9992, #22962):"},{"lineNumber":4491,"author":{"gitId":"-"},"content":""},{"lineNumber":4492,"author":{"gitId":"-"},"content":"    * all enable-* / disable-* options have been merged into --enable / --disable"},{"lineNumber":4493,"author":{"gitId":"-"},"content":""},{"lineNumber":4494,"author":{"gitId":"-"},"content":"    * BACKWARD INCOMPATIBLE CHANGE: short name of --errors-only becomes -E, -e being"},{"lineNumber":4495,"author":{"gitId":"-"},"content":"      affected to --enable"},{"lineNumber":4496,"author":{"gitId":"-"},"content":""},{"lineNumber":4497,"author":{"gitId":"-"},"content":"    * pylint --help output much simplified, with --long-help available to get the"},{"lineNumber":4498,"author":{"gitId":"-"},"content":"      complete one"},{"lineNumber":4499,"author":{"gitId":"-"},"content":""},{"lineNumber":4500,"author":{"gitId":"-"},"content":"    * revisited gui, thanks to students from Toronto university (they are great"},{"lineNumber":4501,"author":{"gitId":"-"},"content":"      contributors to this release!)"},{"lineNumber":4502,"author":{"gitId":"-"},"content":""},{"lineNumber":4503,"author":{"gitId":"-"},"content":"    * fix #21591: html reporter produces no output if reports is set to \u0027no\u0027"},{"lineNumber":4504,"author":{"gitId":"-"},"content":""},{"lineNumber":4505,"author":{"gitId":"-"},"content":"    * fix #4581: not Missing docstring (C0111) warning if a method is overridden"},{"lineNumber":4506,"author":{"gitId":"-"},"content":""},{"lineNumber":4507,"author":{"gitId":"-"},"content":"    * fix #4683: Non-ASCII characters count double if utf8 encode"},{"lineNumber":4508,"author":{"gitId":"-"},"content":""},{"lineNumber":4509,"author":{"gitId":"-"},"content":"    * fix #9018: when using defining-attr-method, method order matters"},{"lineNumber":4510,"author":{"gitId":"-"},"content":""},{"lineNumber":4511,"author":{"gitId":"-"},"content":"    * fix #4595: Comma not followed by a space should not occurs on trailing comma"},{"lineNumber":4512,"author":{"gitId":"-"},"content":"      in list/tuple/dict definition"},{"lineNumber":4513,"author":{"gitId":"-"},"content":""},{"lineNumber":4514,"author":{"gitId":"-"},"content":"    * fix #22585: [Patch] fix man warnings for pyreverse.1 manpage"},{"lineNumber":4515,"author":{"gitId":"-"},"content":""},{"lineNumber":4516,"author":{"gitId":"-"},"content":"    * fix #20067: AttributeError: \u0027NoneType\u0027 object has no attribute \u0027name\u0027 with with"},{"lineNumber":4517,"author":{"gitId":"-"},"content":""},{"lineNumber":4518,"author":{"gitId":"-"},"content":""},{"lineNumber":4519,"author":{"gitId":"-"},"content":""},{"lineNumber":4520,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.20.0?"},{"lineNumber":4521,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4522,"author":{"gitId":"-"},"content":""},{"lineNumber":4523,"author":{"gitId":"-"},"content":"Release date: 2010-03-01"},{"lineNumber":4524,"author":{"gitId":"-"},"content":""},{"lineNumber":4525,"author":{"gitId":"-"},"content":"    * fix #19498: fix windows batch file"},{"lineNumber":4526,"author":{"gitId":"-"},"content":""},{"lineNumber":4527,"author":{"gitId":"-"},"content":"    * fix #19339: pylint.el : non existing py-mod-map"},{"lineNumber":4528,"author":{"gitId":"-"},"content":"      (closes Debian Bug report logs - #475939)"},{"lineNumber":4529,"author":{"gitId":"-"},"content":""},{"lineNumber":4530,"author":{"gitId":"-"},"content":"    * implement #18860, new W0199 message on assert (a, b)"},{"lineNumber":4531,"author":{"gitId":"-"},"content":""},{"lineNumber":4532,"author":{"gitId":"-"},"content":"    * implement #9776, \u0027W0150\u0027 break or return statement in finally block may"},{"lineNumber":4533,"author":{"gitId":"-"},"content":"      swallow exception."},{"lineNumber":4534,"author":{"gitId":"-"},"content":""},{"lineNumber":4535,"author":{"gitId":"-"},"content":"    * fix #9263, __init__ and __new__ are checked for unused arguments"},{"lineNumber":4536,"author":{"gitId":"-"},"content":""},{"lineNumber":4537,"author":{"gitId":"-"},"content":"    * fix #20991, class scope definitions ignored in a genexpr"},{"lineNumber":4538,"author":{"gitId":"-"},"content":""},{"lineNumber":4539,"author":{"gitId":"-"},"content":"    * fix #5975, Abstract intermediate class not recognized as such"},{"lineNumber":4540,"author":{"gitId":"-"},"content":""},{"lineNumber":4541,"author":{"gitId":"-"},"content":"    * fix #5977, yield and return statement have their own counters, no more R0911"},{"lineNumber":4542,"author":{"gitId":"-"},"content":"      (Too many return statements) when a function have many yield stamtements"},{"lineNumber":4543,"author":{"gitId":"-"},"content":""},{"lineNumber":4544,"author":{"gitId":"-"},"content":"    * implement #5564, function / method arguments with leading \"_\" are ignored in"},{"lineNumber":4545,"author":{"gitId":"-"},"content":"      arguments / local variables count."},{"lineNumber":4546,"author":{"gitId":"-"},"content":""},{"lineNumber":4547,"author":{"gitId":"-"},"content":"    * implement #9982, E0711 specific error message when raising NotImplemented"},{"lineNumber":4548,"author":{"gitId":"-"},"content":""},{"lineNumber":4549,"author":{"gitId":"-"},"content":"    * remove --cache-size option"},{"lineNumber":4550,"author":{"gitId":"-"},"content":""},{"lineNumber":4551,"author":{"gitId":"-"},"content":""},{"lineNumber":4552,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.19.0?"},{"lineNumber":4553,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4554,"author":{"gitId":"-"},"content":""},{"lineNumber":4555,"author":{"gitId":"-"},"content":"Release date: 2009-12-18"},{"lineNumber":4556,"author":{"gitId":"-"},"content":""},{"lineNumber":4557,"author":{"gitId":"-"},"content":"    * implement #18947, #5561: checker for function arguments"},{"lineNumber":4558,"author":{"gitId":"-"},"content":""},{"lineNumber":4559,"author":{"gitId":"-"},"content":"    * include James Lingard string format checker"},{"lineNumber":4560,"author":{"gitId":"-"},"content":""},{"lineNumber":4561,"author":{"gitId":"-"},"content":"    * include simple message (ids) listing by Vincent Ferotin (#9791)"},{"lineNumber":4562,"author":{"gitId":"-"},"content":""},{"lineNumber":4563,"author":{"gitId":"-"},"content":"    * --errors-only does not hide fatal error anymore"},{"lineNumber":4564,"author":{"gitId":"-"},"content":""},{"lineNumber":4565,"author":{"gitId":"-"},"content":"    * include james Lingard patches for ++/-- and duplicate key in dicts"},{"lineNumber":4566,"author":{"gitId":"-"},"content":""},{"lineNumber":4567,"author":{"gitId":"-"},"content":"    * include James Lingard patches for function call arguments checker"},{"lineNumber":4568,"author":{"gitId":"-"},"content":""},{"lineNumber":4569,"author":{"gitId":"-"},"content":"    * improved flymake code and doc provided by Derek Harland"},{"lineNumber":4570,"author":{"gitId":"-"},"content":""},{"lineNumber":4571,"author":{"gitId":"-"},"content":"    * refactor and fix the imports checker"},{"lineNumber":4572,"author":{"gitId":"-"},"content":""},{"lineNumber":4573,"author":{"gitId":"-"},"content":"    * fix #18862: E0601 false positive with lambda functions"},{"lineNumber":4574,"author":{"gitId":"-"},"content":""},{"lineNumber":4575,"author":{"gitId":"-"},"content":"    * fix #8764: More than one statement on a single line false positive with"},{"lineNumber":4576,"author":{"gitId":"-"},"content":"      try/except/finally"},{"lineNumber":4577,"author":{"gitId":"-"},"content":""},{"lineNumber":4578,"author":{"gitId":"-"},"content":"    * fix #9215: false undefined variable error in lambda function"},{"lineNumber":4579,"author":{"gitId":"-"},"content":""},{"lineNumber":4580,"author":{"gitId":"-"},"content":"    * fix for w0108 false positive (Nathaniel)"},{"lineNumber":4581,"author":{"gitId":"-"},"content":""},{"lineNumber":4582,"author":{"gitId":"-"},"content":"    * fix test/fulltest.sh"},{"lineNumber":4583,"author":{"gitId":"-"},"content":""},{"lineNumber":4584,"author":{"gitId":"-"},"content":"    * #5821 added a utility function to run pylint in another process (patch provide by Vincent Ferotin)"},{"lineNumber":4585,"author":{"gitId":"-"},"content":""},{"lineNumber":4586,"author":{"gitId":"-"},"content":""},{"lineNumber":4587,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.18.0?"},{"lineNumber":4588,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4589,"author":{"gitId":"-"},"content":""},{"lineNumber":4590,"author":{"gitId":"-"},"content":"Release date: 2009-03-25"},{"lineNumber":4591,"author":{"gitId":"-"},"content":""},{"lineNumber":4592,"author":{"gitId":"-"},"content":"    * tests ok with python 2.4, 2.5, 2.6. 2.3 not tested"},{"lineNumber":4593,"author":{"gitId":"-"},"content":""},{"lineNumber":4594,"author":{"gitId":"-"},"content":"    * fix #8687, W0613 false positive on inner function"},{"lineNumber":4595,"author":{"gitId":"-"},"content":""},{"lineNumber":4596,"author":{"gitId":"-"},"content":"    * fix #8350, C0322 false positive on multi-line string"},{"lineNumber":4597,"author":{"gitId":"-"},"content":""},{"lineNumber":4598,"author":{"gitId":"-"},"content":"    * fix #8332: set E0501 line no to the first line where non ascii character"},{"lineNumber":4599,"author":{"gitId":"-"},"content":"      has been found"},{"lineNumber":4600,"author":{"gitId":"-"},"content":""},{"lineNumber":4601,"author":{"gitId":"-"},"content":"    * avoid some E0203 / E0602 false negatives by detecting respectively"},{"lineNumber":4602,"author":{"gitId":"-"},"content":"      AttributeError / NameError"},{"lineNumber":4603,"author":{"gitId":"-"},"content":""},{"lineNumber":4604,"author":{"gitId":"-"},"content":"    * implements #4037: don\u0027t issue W0142 (* or ** magic) when they are barely"},{"lineNumber":4605,"author":{"gitId":"-"},"content":"      passed from */** arguments"},{"lineNumber":4606,"author":{"gitId":"-"},"content":""},{"lineNumber":4607,"author":{"gitId":"-"},"content":"    * complete #5573: more complete list of special methods, also skip W0613"},{"lineNumber":4608,"author":{"gitId":"-"},"content":"      for python internal method"},{"lineNumber":4609,"author":{"gitId":"-"},"content":""},{"lineNumber":4610,"author":{"gitId":"-"},"content":"    * don\u0027t show information messages by default"},{"lineNumber":4611,"author":{"gitId":"-"},"content":""},{"lineNumber":4612,"author":{"gitId":"-"},"content":"    * integration of Yuen Ho Wong\u0027s patches on emacs lisp files"},{"lineNumber":4613,"author":{"gitId":"-"},"content":""},{"lineNumber":4614,"author":{"gitId":"-"},"content":""},{"lineNumber":4615,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.17.0?"},{"lineNumber":4616,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4617,"author":{"gitId":"-"},"content":""},{"lineNumber":4618,"author":{"gitId":"-"},"content":"Release date: 2009-03-19"},{"lineNumber":4619,"author":{"gitId":"-"},"content":""},{"lineNumber":4620,"author":{"gitId":"-"},"content":"    * semicolon check : move W0601 to W0301"},{"lineNumber":4621,"author":{"gitId":"-"},"content":""},{"lineNumber":4622,"author":{"gitId":"-"},"content":"    * remove rpython : remove all rpython checker, modules and tests"},{"lineNumber":4623,"author":{"gitId":"-"},"content":""},{"lineNumber":4624,"author":{"gitId":"-"},"content":"    * astng 0.18 compatibility: support for _ast module modifies interfaces"},{"lineNumber":4625,"author":{"gitId":"-"},"content":""},{"lineNumber":4626,"author":{"gitId":"-"},"content":""},{"lineNumber":4627,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.16.0?"},{"lineNumber":4628,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4629,"author":{"gitId":"-"},"content":""},{"lineNumber":4630,"author":{"gitId":"-"},"content":"Release date: 2009-01-28"},{"lineNumber":4631,"author":{"gitId":"-"},"content":""},{"lineNumber":4632,"author":{"gitId":"-"},"content":"    * change [en|dis]able-msg-cat options: only accept message categories"},{"lineNumber":4633,"author":{"gitId":"-"},"content":"      identified by their first letter (eg IRCWEF) without the need for comma"},{"lineNumber":4634,"author":{"gitId":"-"},"content":"      as separator"},{"lineNumber":4635,"author":{"gitId":"-"},"content":""},{"lineNumber":4636,"author":{"gitId":"-"},"content":"    * add epylint.bat script to fix Windows installation"},{"lineNumber":4637,"author":{"gitId":"-"},"content":""},{"lineNumber":4638,"author":{"gitId":"-"},"content":"    * setuptools/easy_install support"},{"lineNumber":4639,"author":{"gitId":"-"},"content":""},{"lineNumber":4640,"author":{"gitId":"-"},"content":"    * include a modified version of Maarten ter Huurne patch to avoid W0613"},{"lineNumber":4641,"author":{"gitId":"-"},"content":"      warning on arguments from overridden method"},{"lineNumber":4642,"author":{"gitId":"-"},"content":""},{"lineNumber":4643,"author":{"gitId":"-"},"content":"    * implement #5575  drop dumb W0704 message) by adding W0704 to ignored"},{"lineNumber":4644,"author":{"gitId":"-"},"content":"      messages by default"},{"lineNumber":4645,"author":{"gitId":"-"},"content":""},{"lineNumber":4646,"author":{"gitId":"-"},"content":"    * new W0108 message, checking for suspicious lambda (provided by  Nathaniel"},{"lineNumber":4647,"author":{"gitId":"-"},"content":"      Manista)"},{"lineNumber":4648,"author":{"gitId":"-"},"content":""},{"lineNumber":4649,"author":{"gitId":"-"},"content":"    * fix W0631, false positive reported by Paul Hachmann"},{"lineNumber":4650,"author":{"gitId":"-"},"content":""},{"lineNumber":4651,"author":{"gitId":"-"},"content":"    * fix #6951: false positive with W0104"},{"lineNumber":4652,"author":{"gitId":"-"},"content":""},{"lineNumber":4653,"author":{"gitId":"-"},"content":"    * fix #6949"},{"lineNumber":4654,"author":{"gitId":"-"},"content":""},{"lineNumber":4655,"author":{"gitId":"-"},"content":"    * patches by Mads Kiilerich:"},{"lineNumber":4656,"author":{"gitId":"-"},"content":""},{"lineNumber":4657,"author":{"gitId":"-"},"content":"    * implement #4691, make pylint exits with a non zero return"},{"lineNumber":4658,"author":{"gitId":"-"},"content":"      status if any messages other then Information are issued"},{"lineNumber":4659,"author":{"gitId":"-"},"content":""},{"lineNumber":4660,"author":{"gitId":"-"},"content":"    * fix #3711, #5626 (name resolution bug w/ decorator and class members)"},{"lineNumber":4661,"author":{"gitId":"-"},"content":""},{"lineNumber":4662,"author":{"gitId":"-"},"content":"    * fix #6954"},{"lineNumber":4663,"author":{"gitId":"-"},"content":""},{"lineNumber":4664,"author":{"gitId":"-"},"content":""},{"lineNumber":4665,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.15.2?"},{"lineNumber":4666,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4667,"author":{"gitId":"-"},"content":""},{"lineNumber":4668,"author":{"gitId":"-"},"content":"Release date: 2008-10-13"},{"lineNumber":4669,"author":{"gitId":"-"},"content":""},{"lineNumber":4670,"author":{"gitId":"-"},"content":"    * fix #5672: W0706 weirdness ( W0706 removed )"},{"lineNumber":4671,"author":{"gitId":"-"},"content":""},{"lineNumber":4672,"author":{"gitId":"-"},"content":"    * fix #5998: documentation points to wrong url for mailing list"},{"lineNumber":4673,"author":{"gitId":"-"},"content":""},{"lineNumber":4674,"author":{"gitId":"-"},"content":"    * fix #6022: no error message on wrong module names"},{"lineNumber":4675,"author":{"gitId":"-"},"content":""},{"lineNumber":4676,"author":{"gitId":"-"},"content":"    * fix #6040: pytest doesn\u0027t run test/func_test.py"},{"lineNumber":4677,"author":{"gitId":"-"},"content":""},{"lineNumber":4678,"author":{"gitId":"-"},"content":""},{"lineNumber":4679,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.15.1?"},{"lineNumber":4680,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4681,"author":{"gitId":"-"},"content":""},{"lineNumber":4682,"author":{"gitId":"-"},"content":"Release date: 2008-09-15"},{"lineNumber":4683,"author":{"gitId":"-"},"content":""},{"lineNumber":4684,"author":{"gitId":"-"},"content":"    * fix #4910: default values are missing in manpage"},{"lineNumber":4685,"author":{"gitId":"-"},"content":""},{"lineNumber":4686,"author":{"gitId":"-"},"content":"    * fix #5991: missing files in 0.15.0 tarball"},{"lineNumber":4687,"author":{"gitId":"-"},"content":""},{"lineNumber":4688,"author":{"gitId":"-"},"content":"    * fix #5993: epylint should work with python 2.3"},{"lineNumber":4689,"author":{"gitId":"-"},"content":""},{"lineNumber":4690,"author":{"gitId":"-"},"content":""},{"lineNumber":4691,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.15.0?"},{"lineNumber":4692,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4693,"author":{"gitId":"-"},"content":""},{"lineNumber":4694,"author":{"gitId":"-"},"content":"Release date: 2008-09-10"},{"lineNumber":4695,"author":{"gitId":"-"},"content":""},{"lineNumber":4696,"author":{"gitId":"-"},"content":"    * include pyreverse package and class diagram generation"},{"lineNumber":4697,"author":{"gitId":"-"},"content":""},{"lineNumber":4698,"author":{"gitId":"-"},"content":"    * included Stefan Rank\u0027s patch to deal with 2.4 relative import"},{"lineNumber":4699,"author":{"gitId":"-"},"content":""},{"lineNumber":4700,"author":{"gitId":"-"},"content":"    * included Robert Kirkpatrick\u0027s tutorial and typos fixes"},{"lineNumber":4701,"author":{"gitId":"-"},"content":""},{"lineNumber":4702,"author":{"gitId":"-"},"content":"    * fix bug in reenabling message"},{"lineNumber":4703,"author":{"gitId":"-"},"content":""},{"lineNumber":4704,"author":{"gitId":"-"},"content":"    * fix #2473: invoking pylint on __init__.py (hopefully)"},{"lineNumber":4705,"author":{"gitId":"-"},"content":""},{"lineNumber":4706,"author":{"gitId":"-"},"content":"    * typecheck: acquired-members option has been dropped in favor of the more"},{"lineNumber":4707,"author":{"gitId":"-"},"content":"      generic generated-members option. If the zope option is set, the behaviour"},{"lineNumber":4708,"author":{"gitId":"-"},"content":"      is now to add some default values to generated-members."},{"lineNumber":4709,"author":{"gitId":"-"},"content":""},{"lineNumber":4710,"author":{"gitId":"-"},"content":"    * flymake integration: added bin/epylint and elisp/pylint-flymake.el"},{"lineNumber":4711,"author":{"gitId":"-"},"content":""},{"lineNumber":4712,"author":{"gitId":"-"},"content":""},{"lineNumber":4713,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.14.0?"},{"lineNumber":4714,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4715,"author":{"gitId":"-"},"content":""},{"lineNumber":4716,"author":{"gitId":"-"},"content":"Release date: 2008-01-14"},{"lineNumber":4717,"author":{"gitId":"-"},"content":""},{"lineNumber":4718,"author":{"gitId":"-"},"content":"    * fix #3733: Messages (dis)appear depending on order of file names"},{"lineNumber":4719,"author":{"gitId":"-"},"content":""},{"lineNumber":4720,"author":{"gitId":"-"},"content":"    * fix #4026: pylint.el should require compile"},{"lineNumber":4721,"author":{"gitId":"-"},"content":""},{"lineNumber":4722,"author":{"gitId":"-"},"content":"    * fix a bug in colorized reporter, spotted by Dave Borowitz"},{"lineNumber":4723,"author":{"gitId":"-"},"content":""},{"lineNumber":4724,"author":{"gitId":"-"},"content":"    * applied patch from Stefan Rank to avoid W0410 false positive when"},{"lineNumber":4725,"author":{"gitId":"-"},"content":"      multiple \"from __future__\" import statements"},{"lineNumber":4726,"author":{"gitId":"-"},"content":""},{"lineNumber":4727,"author":{"gitId":"-"},"content":"    * implement #4012: flag back tick as deprecated (new W0333 message)"},{"lineNumber":4728,"author":{"gitId":"-"},"content":""},{"lineNumber":4729,"author":{"gitId":"-"},"content":"    * new ignored-class option on typecheck checker allowing to skip members"},{"lineNumber":4730,"author":{"gitId":"-"},"content":"      checking based on class name (patch provided by Thomas W Barr)"},{"lineNumber":4731,"author":{"gitId":"-"},"content":""},{"lineNumber":4732,"author":{"gitId":"-"},"content":""},{"lineNumber":4733,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.13.2?"},{"lineNumber":4734,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4735,"author":{"gitId":"-"},"content":""},{"lineNumber":4736,"author":{"gitId":"-"},"content":"Release date: 2007-06-07"},{"lineNumber":4737,"author":{"gitId":"-"},"content":""},{"lineNumber":4738,"author":{"gitId":"-"},"content":"    * fix disable-checker option so that it won\u0027t accidentally enable the"},{"lineNumber":4739,"author":{"gitId":"-"},"content":"      rpython checker which is disabled by default"},{"lineNumber":4740,"author":{"gitId":"-"},"content":""},{"lineNumber":4741,"author":{"gitId":"-"},"content":"    * added note about the gedit plugin into documentation"},{"lineNumber":4742,"author":{"gitId":"-"},"content":""},{"lineNumber":4743,"author":{"gitId":"-"},"content":""},{"lineNumber":4744,"author":{"gitId":"-"},"content":""},{"lineNumber":4745,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.13.1?"},{"lineNumber":4746,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4747,"author":{"gitId":"-"},"content":""},{"lineNumber":4748,"author":{"gitId":"-"},"content":"Release date: 2007-03-02"},{"lineNumber":4749,"author":{"gitId":"-"},"content":""},{"lineNumber":4750,"author":{"gitId":"-"},"content":"    * fix some unexplained 0.13.0 packaging issue which led to a bunch of"},{"lineNumber":4751,"author":{"gitId":"-"},"content":"      files missing from the distribution"},{"lineNumber":4752,"author":{"gitId":"-"},"content":""},{"lineNumber":4753,"author":{"gitId":"-"},"content":""},{"lineNumber":4754,"author":{"gitId":"-"},"content":""},{"lineNumber":4755,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.13.0?"},{"lineNumber":4756,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4757,"author":{"gitId":"-"},"content":""},{"lineNumber":4758,"author":{"gitId":"-"},"content":"Release date: 2007-02-28"},{"lineNumber":4759,"author":{"gitId":"-"},"content":""},{"lineNumber":4760,"author":{"gitId":"-"},"content":"    * new RPython (Restricted Python) checker for PyPy fellow or people"},{"lineNumber":4761,"author":{"gitId":"-"},"content":"      wanting to get a compiled version of their python program using the"},{"lineNumber":4762,"author":{"gitId":"-"},"content":"      translator of the PyPy project. For more information about PyPy or"},{"lineNumber":4763,"author":{"gitId":"-"},"content":"      RPython, visit http://codespeak.net/pypy/"},{"lineNumber":4764,"author":{"gitId":"-"},"content":""},{"lineNumber":4765,"author":{"gitId":"-"},"content":"    * new E0104 and E0105 messages introduced to respectively warn about"},{"lineNumber":4766,"author":{"gitId":"-"},"content":"      \"return\" and \"yield\" outside function or method"},{"lineNumber":4767,"author":{"gitId":"-"},"content":""},{"lineNumber":4768,"author":{"gitId":"-"},"content":"    * new E0106 message when \"yield\" and \"return something\" are mixed in a"},{"lineNumber":4769,"author":{"gitId":"-"},"content":"      function or method"},{"lineNumber":4770,"author":{"gitId":"-"},"content":""},{"lineNumber":4771,"author":{"gitId":"-"},"content":"    * new W0107 message for unnecessary pass statement"},{"lineNumber":4772,"author":{"gitId":"-"},"content":""},{"lineNumber":4773,"author":{"gitId":"-"},"content":"    * new W0614 message to differentiate between unused ``import X`` and"},{"lineNumber":4774,"author":{"gitId":"-"},"content":"      unused `from X import *` (#3209, patch submitted by Daniel Drake)"},{"lineNumber":4775,"author":{"gitId":"-"},"content":""},{"lineNumber":4776,"author":{"gitId":"-"},"content":"    * included Daniel Drake\u0027s patch to have a different message E1003 instead of"},{"lineNumber":4777,"author":{"gitId":"-"},"content":"      E1001 when a missing member is found but an inference failure has been"},{"lineNumber":4778,"author":{"gitId":"-"},"content":"      detected"},{"lineNumber":4779,"author":{"gitId":"-"},"content":""},{"lineNumber":4780,"author":{"gitId":"-"},"content":"    * msvs reporter for Visual Studio line number reporting (#3285)"},{"lineNumber":4781,"author":{"gitId":"-"},"content":""},{"lineNumber":4782,"author":{"gitId":"-"},"content":"    * allow disable-all option inline (#3218, patch submitted by Daniel Drake)"},{"lineNumber":4783,"author":{"gitId":"-"},"content":""},{"lineNumber":4784,"author":{"gitId":"-"},"content":"    * --init-hook option to call arbitrary code necessary to set"},{"lineNumber":4785,"author":{"gitId":"-"},"content":"      environment (eg sys.path) (#3156)"},{"lineNumber":4786,"author":{"gitId":"-"},"content":""},{"lineNumber":4787,"author":{"gitId":"-"},"content":"    * One more Daniel\u0027s patch fixing a command line option parsing"},{"lineNumber":4788,"author":{"gitId":"-"},"content":"      problem, this\u0027ll definitely be the DDrake release :)"},{"lineNumber":4789,"author":{"gitId":"-"},"content":""},{"lineNumber":4790,"author":{"gitId":"-"},"content":"    * fix #3184: crashes on \"return\" outside function"},{"lineNumber":4791,"author":{"gitId":"-"},"content":""},{"lineNumber":4792,"author":{"gitId":"-"},"content":"    * fix #3205: W0704 false positive"},{"lineNumber":4793,"author":{"gitId":"-"},"content":""},{"lineNumber":4794,"author":{"gitId":"-"},"content":"    * fix #3123: W0212 false positive on static method"},{"lineNumber":4795,"author":{"gitId":"-"},"content":""},{"lineNumber":4796,"author":{"gitId":"-"},"content":"    * fix #2485: W0222 false positive"},{"lineNumber":4797,"author":{"gitId":"-"},"content":""},{"lineNumber":4798,"author":{"gitId":"-"},"content":"    * fix #3259: when a message is explicitly enabled, check the checker"},{"lineNumber":4799,"author":{"gitId":"-"},"content":"      emitting it is enabled"},{"lineNumber":4800,"author":{"gitId":"-"},"content":""},{"lineNumber":4801,"author":{"gitId":"-"},"content":""},{"lineNumber":4802,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.12.2?"},{"lineNumber":4803,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4804,"author":{"gitId":"-"},"content":""},{"lineNumber":4805,"author":{"gitId":"-"},"content":"Release date: 2006-11-23"},{"lineNumber":4806,"author":{"gitId":"-"},"content":""},{"lineNumber":4807,"author":{"gitId":"-"},"content":"    * fix #3143: W0233 bug w/ YES objects"},{"lineNumber":4808,"author":{"gitId":"-"},"content":""},{"lineNumber":4809,"author":{"gitId":"-"},"content":"    * fix #3119: Off-by-one error counting lines in a file"},{"lineNumber":4810,"author":{"gitId":"-"},"content":""},{"lineNumber":4811,"author":{"gitId":"-"},"content":"    * fix #3117: ease sys.stdout overriding for reporters"},{"lineNumber":4812,"author":{"gitId":"-"},"content":""},{"lineNumber":4813,"author":{"gitId":"-"},"content":"    * fix #2508: E0601 false positive with lambda"},{"lineNumber":4814,"author":{"gitId":"-"},"content":""},{"lineNumber":4815,"author":{"gitId":"-"},"content":"    * fix #3125: E1101 false positive and a message duplication. Only the last part"},{"lineNumber":4816,"author":{"gitId":"-"},"content":"      is actually fixed since the initial false positive is due to dynamic setting of"},{"lineNumber":4817,"author":{"gitId":"-"},"content":"      attributes on the decimal.Context class."},{"lineNumber":4818,"author":{"gitId":"-"},"content":""},{"lineNumber":4819,"author":{"gitId":"-"},"content":"    * fix #3149: E0101 false positives and introduced E0100 for generator __init__"},{"lineNumber":4820,"author":{"gitId":"-"},"content":"      methods"},{"lineNumber":4821,"author":{"gitId":"-"},"content":""},{"lineNumber":4822,"author":{"gitId":"-"},"content":"    * fixed some format checker false positives"},{"lineNumber":4823,"author":{"gitId":"-"},"content":""},{"lineNumber":4824,"author":{"gitId":"-"},"content":""},{"lineNumber":4825,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.12.1?"},{"lineNumber":4826,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4827,"author":{"gitId":"-"},"content":""},{"lineNumber":4828,"author":{"gitId":"-"},"content":""},{"lineNumber":4829,"author":{"gitId":"-"},"content":"Release date: 2006-09-25"},{"lineNumber":4830,"author":{"gitId":"-"},"content":""},{"lineNumber":4831,"author":{"gitId":"-"},"content":"    * fixed python \u003e\u003d 2.4 format false positive with multiple lines statement"},{"lineNumber":4832,"author":{"gitId":"-"},"content":""},{"lineNumber":4833,"author":{"gitId":"-"},"content":"    * fixed some 2.5 issues"},{"lineNumber":4834,"author":{"gitId":"-"},"content":""},{"lineNumber":4835,"author":{"gitId":"-"},"content":"    * fixed generator expression scope bug (depends on astng 0.16.1)"},{"lineNumber":4836,"author":{"gitId":"-"},"content":""},{"lineNumber":4837,"author":{"gitId":"-"},"content":"    * stop requiring __revision__"},{"lineNumber":4838,"author":{"gitId":"-"},"content":""},{"lineNumber":4839,"author":{"gitId":"-"},"content":""},{"lineNumber":4840,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.12.0?"},{"lineNumber":4841,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4842,"author":{"gitId":"-"},"content":""},{"lineNumber":4843,"author":{"gitId":"-"},"content":""},{"lineNumber":4844,"author":{"gitId":"-"},"content":"Release date: 2006-08-10"},{"lineNumber":4845,"author":{"gitId":"-"},"content":""},{"lineNumber":4846,"author":{"gitId":"-"},"content":"    * usability changes:"},{"lineNumber":4847,"author":{"gitId":"-"},"content":""},{"lineNumber":4848,"author":{"gitId":"-"},"content":"        * parseable, html and color options are now handled by a single"},{"lineNumber":4849,"author":{"gitId":"-"},"content":"          output-format option"},{"lineNumber":4850,"author":{"gitId":"-"},"content":""},{"lineNumber":4851,"author":{"gitId":"-"},"content":"        * enable-\u003ccheckerid\u003e and disable-all options are now handled by"},{"lineNumber":4852,"author":{"gitId":"-"},"content":"          two (exclusive) enable-checker and disable-checker options"},{"lineNumber":4853,"author":{"gitId":"-"},"content":"          taking a comma separated list of checker names as value"},{"lineNumber":4854,"author":{"gitId":"-"},"content":""},{"lineNumber":4855,"author":{"gitId":"-"},"content":"        * renamed debug-mode option to errors-only"},{"lineNumber":4856,"author":{"gitId":"-"},"content":""},{"lineNumber":4857,"author":{"gitId":"-"},"content":"    * started a reference user manual"},{"lineNumber":4858,"author":{"gitId":"-"},"content":""},{"lineNumber":4859,"author":{"gitId":"-"},"content":"    * new W0212 message for access to protected member from client code"},{"lineNumber":4860,"author":{"gitId":"-"},"content":"      (close #14081)"},{"lineNumber":4861,"author":{"gitId":"-"},"content":""},{"lineNumber":4862,"author":{"gitId":"-"},"content":"    * new W0105 and W0106 messages extracted from W0104 (statement seems"},{"lineNumber":4863,"author":{"gitId":"-"},"content":"      to have no effect) respectively when the statement is actually string"},{"lineNumber":4864,"author":{"gitId":"-"},"content":"      (that\u0027s sometimes used instead of comments for documentation) or an"},{"lineNumber":4865,"author":{"gitId":"-"},"content":"      empty  statement generated by a useless semicolon"},{"lineNumber":4866,"author":{"gitId":"-"},"content":""},{"lineNumber":4867,"author":{"gitId":"-"},"content":"    * reclassified W0302 to C0302"},{"lineNumber":4868,"author":{"gitId":"-"},"content":""},{"lineNumber":4869,"author":{"gitId":"-"},"content":"    * fix so that global messages are not anymore connected to the last"},{"lineNumber":4870,"author":{"gitId":"-"},"content":"      analyzed module (close #10106)"},{"lineNumber":4871,"author":{"gitId":"-"},"content":""},{"lineNumber":4872,"author":{"gitId":"-"},"content":"    * fix some bugs related to local disabling of messages"},{"lineNumber":4873,"author":{"gitId":"-"},"content":""},{"lineNumber":4874,"author":{"gitId":"-"},"content":"    * fix cr/lf pb when generating the rc file on windows platforms"},{"lineNumber":4875,"author":{"gitId":"-"},"content":""},{"lineNumber":4876,"author":{"gitId":"-"},"content":""},{"lineNumber":4877,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.11.0?"},{"lineNumber":4878,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4879,"author":{"gitId":"-"},"content":""},{"lineNumber":4880,"author":{"gitId":"-"},"content":"Release date: 2006-04-19"},{"lineNumber":4881,"author":{"gitId":"-"},"content":""},{"lineNumber":4882,"author":{"gitId":"-"},"content":"    * fix crash caused by the exceptions checker in some case"},{"lineNumber":4883,"author":{"gitId":"-"},"content":""},{"lineNumber":4884,"author":{"gitId":"-"},"content":"    * fix some E1101 false positive with abstract method or classes defining"},{"lineNumber":4885,"author":{"gitId":"-"},"content":"      __getattr__"},{"lineNumber":4886,"author":{"gitId":"-"},"content":""},{"lineNumber":4887,"author":{"gitId":"-"},"content":"    * dirty fix to avoid \"_socketobject\" has not \"connect\" member. The actual"},{"lineNumber":4888,"author":{"gitId":"-"},"content":"      problem is that astng isn\u0027t able to understand the code used to create"},{"lineNumber":4889,"author":{"gitId":"-"},"content":"      socket.socket object with exec"},{"lineNumber":4890,"author":{"gitId":"-"},"content":""},{"lineNumber":4891,"author":{"gitId":"-"},"content":"    * added an option in the similarity checker to ignore docstrings, enabled"},{"lineNumber":4892,"author":{"gitId":"-"},"content":"      by default"},{"lineNumber":4893,"author":{"gitId":"-"},"content":""},{"lineNumber":4894,"author":{"gitId":"-"},"content":"    * included patch from Benjamin Niemann to allow block level"},{"lineNumber":4895,"author":{"gitId":"-"},"content":"      enabling/disabling of messages"},{"lineNumber":4896,"author":{"gitId":"-"},"content":""},{"lineNumber":4897,"author":{"gitId":"-"},"content":""},{"lineNumber":4898,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.10.0?"},{"lineNumber":4899,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4900,"author":{"gitId":"-"},"content":""},{"lineNumber":4901,"author":{"gitId":"-"},"content":"Release date: 2006-03-06"},{"lineNumber":4902,"author":{"gitId":"-"},"content":""},{"lineNumber":4903,"author":{"gitId":"-"},"content":"    * WARNING, this release include some configuration changes (see below),"},{"lineNumber":4904,"author":{"gitId":"-"},"content":"      so you may have to check and update your own configuration file(s) if"},{"lineNumber":4905,"author":{"gitId":"-"},"content":"      you use one"},{"lineNumber":4906,"author":{"gitId":"-"},"content":""},{"lineNumber":4907,"author":{"gitId":"-"},"content":"    * this release require the 0.15 version of astng or superior (it will save"},{"lineNumber":4908,"author":{"gitId":"-"},"content":"      you a lot of pylint crashes...)"},{"lineNumber":4909,"author":{"gitId":"-"},"content":""},{"lineNumber":4910,"author":{"gitId":"-"},"content":"    * W0705 has been reclassified to E0701, and is now detecting more"},{"lineNumber":4911,"author":{"gitId":"-"},"content":"      inheriting problem, and a false positive when empty except clause is"},{"lineNumber":4912,"author":{"gitId":"-"},"content":"      following an Exception catch has been fixed (close #10422)"},{"lineNumber":4913,"author":{"gitId":"-"},"content":""},{"lineNumber":4914,"author":{"gitId":"-"},"content":"    * E0212 and E0214 (metaclass/class method should have mcs/cls as first"},{"lineNumber":4915,"author":{"gitId":"-"},"content":"      argument have been reclassified to C0202 and C0203 since this not as"},{"lineNumber":4916,"author":{"gitId":"-"},"content":"      well established as \"self\" for instance method (E0213)"},{"lineNumber":4917,"author":{"gitId":"-"},"content":""},{"lineNumber":4918,"author":{"gitId":"-"},"content":"    * W0224 has been reclassified into F0220 (failed to resolve interfaces"},{"lineNumber":4919,"author":{"gitId":"-"},"content":"      implemented by a class)"},{"lineNumber":4920,"author":{"gitId":"-"},"content":""},{"lineNumber":4921,"author":{"gitId":"-"},"content":"    * a new typecheck checker, introducing the following checks:"},{"lineNumber":4922,"author":{"gitId":"-"},"content":""},{"lineNumber":4923,"author":{"gitId":"-"},"content":"        - E1101, access to unexistent member (implements #10430), remove"},{"lineNumber":4924,"author":{"gitId":"-"},"content":"          the need of E0201 and so some options has been moved from the"},{"lineNumber":4925,"author":{"gitId":"-"},"content":"          classes checker to this one"},{"lineNumber":4926,"author":{"gitId":"-"},"content":"        - E1102, calling a non callable object"},{"lineNumber":4927,"author":{"gitId":"-"},"content":"        - E1111 and W1111 when an assignment is done on a function call but the"},{"lineNumber":4928,"author":{"gitId":"-"},"content":"          inferred function returns None (implements #10431)"},{"lineNumber":4929,"author":{"gitId":"-"},"content":""},{"lineNumber":4930,"author":{"gitId":"-"},"content":"    * change in the base checker:"},{"lineNumber":4931,"author":{"gitId":"-"},"content":""},{"lineNumber":4932,"author":{"gitId":"-"},"content":"        - checks module level and instance attribute names (new const-rgx"},{"lineNumber":4933,"author":{"gitId":"-"},"content":"          and attr-rgx configuration option) (implements #10209  and"},{"lineNumber":4934,"author":{"gitId":"-"},"content":"          #10440)"},{"lineNumber":4935,"author":{"gitId":"-"},"content":"        - list comprehension and generator expression variables have their"},{"lineNumber":4936,"author":{"gitId":"-"},"content":"          own regular expression  (the inlinevar-rgx option) (implements"},{"lineNumber":4937,"author":{"gitId":"-"},"content":"          #9146)"},{"lineNumber":4938,"author":{"gitId":"-"},"content":"        - the C0101 check with its min-name-length option has"},{"lineNumber":4939,"author":{"gitId":"-"},"content":"          been removed (this can be specified in the regxp after all...)"},{"lineNumber":4940,"author":{"gitId":"-"},"content":"        - W0103 and W0121 are now handled by the variables checker"},{"lineNumber":4941,"author":{"gitId":"-"},"content":"          (W0103 is now W0603 and W0604 has been splitted into different messages)"},{"lineNumber":4942,"author":{"gitId":"-"},"content":"        - W0131 and W0132 messages  have been reclassified to C0111 and"},{"lineNumber":4943,"author":{"gitId":"-"},"content":"          C0112 respectively"},{"lineNumber":4944,"author":{"gitId":"-"},"content":"        - new W0104 message on statement without effect"},{"lineNumber":4945,"author":{"gitId":"-"},"content":""},{"lineNumber":4946,"author":{"gitId":"-"},"content":"    * regexp support for dummy-variables (dummy-variables-rgx option"},{"lineNumber":4947,"author":{"gitId":"-"},"content":"      replace dummy-variables) (implements #10027)"},{"lineNumber":4948,"author":{"gitId":"-"},"content":""},{"lineNumber":4949,"author":{"gitId":"-"},"content":"    * better global statement handling, see W0602, W0603, W0604 messages"},{"lineNumber":4950,"author":{"gitId":"-"},"content":"      (implements #10344 and #10236)"},{"lineNumber":4951,"author":{"gitId":"-"},"content":""},{"lineNumber":4952,"author":{"gitId":"-"},"content":"    * --debug-mode option, disabling all checkers without error message"},{"lineNumber":4953,"author":{"gitId":"-"},"content":"      and filtering others to only display error"},{"lineNumber":4954,"author":{"gitId":"-"},"content":""},{"lineNumber":4955,"author":{"gitId":"-"},"content":"    * fixed some R0201 (method could be a function) false positive"},{"lineNumber":4956,"author":{"gitId":"-"},"content":""},{"lineNumber":4957,"author":{"gitId":"-"},"content":""},{"lineNumber":4958,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.9.0?"},{"lineNumber":4959,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":4960,"author":{"gitId":"-"},"content":""},{"lineNumber":4961,"author":{"gitId":"-"},"content":"Release date: 2006-01-10"},{"lineNumber":4962,"author":{"gitId":"-"},"content":""},{"lineNumber":4963,"author":{"gitId":"-"},"content":"    * a lot of updates to follow astng 0.14 API changes, so install"},{"lineNumber":4964,"author":{"gitId":"-"},"content":"      logilab-astng  0.14 or greater before using this version of pylint"},{"lineNumber":4965,"author":{"gitId":"-"},"content":""},{"lineNumber":4966,"author":{"gitId":"-"},"content":"    * checker number 10 ! newstyle will search for problems regarding old"},{"lineNumber":4967,"author":{"gitId":"-"},"content":"      style / new style classes usage problems (rely on astng 0.14 new"},{"lineNumber":4968,"author":{"gitId":"-"},"content":"      style detection feature)"},{"lineNumber":4969,"author":{"gitId":"-"},"content":""},{"lineNumber":4970,"author":{"gitId":"-"},"content":"    * new \u0027load-plugins\u0027 options to load additional pylint plugins (usable"},{"lineNumber":4971,"author":{"gitId":"-"},"content":"      from the command line or from a configuration file) (implements"},{"lineNumber":4972,"author":{"gitId":"-"},"content":"      #10031)"},{"lineNumber":4973,"author":{"gitId":"-"},"content":""},{"lineNumber":4974,"author":{"gitId":"-"},"content":"    * check if a \"pylintrc\" file exists in the current working directory"},{"lineNumber":4975,"author":{"gitId":"-"},"content":"      before using the one specified in the PYLINTRC environment variable"},{"lineNumber":4976,"author":{"gitId":"-"},"content":"      or the default ~/.pylintrc or /etc/pylintrc"},{"lineNumber":4977,"author":{"gitId":"-"},"content":""},{"lineNumber":4978,"author":{"gitId":"-"},"content":"    * fixed W0706 (Identifier used to raise an exception is assigned...)"},{"lineNumber":4979,"author":{"gitId":"-"},"content":"      false positive and reraising a catched exception instance"},{"lineNumber":4980,"author":{"gitId":"-"},"content":""},{"lineNumber":4981,"author":{"gitId":"-"},"content":"    * fixed E0611 (No name get in module blabla) false positive when accessing"},{"lineNumber":4982,"author":{"gitId":"-"},"content":"      to a class\u0027__dict__"},{"lineNumber":4983,"author":{"gitId":"-"},"content":""},{"lineNumber":4984,"author":{"gitId":"-"},"content":"    * fixed some E0203 (\"access to member before its definition\") false"},{"lineNumber":4985,"author":{"gitId":"-"},"content":"      positive"},{"lineNumber":4986,"author":{"gitId":"-"},"content":""},{"lineNumber":4987,"author":{"gitId":"-"},"content":"    * fixed E0214 (\"metaclass method first argument should be mcs) false"},{"lineNumber":4988,"author":{"gitId":"-"},"content":"      positive with staticmethod used on a metaclass"},{"lineNumber":4989,"author":{"gitId":"-"},"content":""},{"lineNumber":4990,"author":{"gitId":"-"},"content":"    * fixed packaging which was missing the test/regrtest_data directory"},{"lineNumber":4991,"author":{"gitId":"-"},"content":""},{"lineNumber":4992,"author":{"gitId":"-"},"content":"    * W0212 (method could be a function) has been reclassified in the"},{"lineNumber":4993,"author":{"gitId":"-"},"content":"      REFACTOR category as R0201, and is no more considerer when a method"},{"lineNumber":4994,"author":{"gitId":"-"},"content":"      overrides an abstract method from an ancestor class"},{"lineNumber":4995,"author":{"gitId":"-"},"content":""},{"lineNumber":4996,"author":{"gitId":"-"},"content":"    * include module name in W0401 (wildcard import), as suggested by"},{"lineNumber":4997,"author":{"gitId":"-"},"content":"      Amaury"},{"lineNumber":4998,"author":{"gitId":"-"},"content":""},{"lineNumber":4999,"author":{"gitId":"-"},"content":"    * when using the \u0027--parseable\u0027, path are written relative to the"},{"lineNumber":5000,"author":{"gitId":"-"},"content":"      current working directory if in a sub-directory of it (#9789)"},{"lineNumber":5001,"author":{"gitId":"-"},"content":""},{"lineNumber":5002,"author":{"gitId":"-"},"content":"    * \u0027pylint --version\u0027 shows logilab-astng and logilab-common versions"},{"lineNumber":5003,"author":{"gitId":"-"},"content":""},{"lineNumber":5004,"author":{"gitId":"-"},"content":"    * fixed pylint.el to handle space in file names"},{"lineNumber":5005,"author":{"gitId":"-"},"content":""},{"lineNumber":5006,"author":{"gitId":"-"},"content":"    * misc lint style fixes"},{"lineNumber":5007,"author":{"gitId":"-"},"content":""},{"lineNumber":5008,"author":{"gitId":"-"},"content":""},{"lineNumber":5009,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.8.1?"},{"lineNumber":5010,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5011,"author":{"gitId":"-"},"content":""},{"lineNumber":5012,"author":{"gitId":"-"},"content":""},{"lineNumber":5013,"author":{"gitId":"-"},"content":"Release date: 2005-11-07"},{"lineNumber":5014,"author":{"gitId":"-"},"content":""},{"lineNumber":5015,"author":{"gitId":"-"},"content":"    * fix \"deprecated module\" false positive when the code imports a"},{"lineNumber":5016,"author":{"gitId":"-"},"content":"      module whose name starts with a deprecated module\u0027s name (close"},{"lineNumber":5017,"author":{"gitId":"-"},"content":"      #10061)"},{"lineNumber":5018,"author":{"gitId":"-"},"content":""},{"lineNumber":5019,"author":{"gitId":"-"},"content":"    * fix \"module has no name __dict__\" false positive (close #10039)"},{"lineNumber":5020,"author":{"gitId":"-"},"content":""},{"lineNumber":5021,"author":{"gitId":"-"},"content":"    * fix \"access to undefined variable __path__\" false positive (close"},{"lineNumber":5022,"author":{"gitId":"-"},"content":"      #10065)"},{"lineNumber":5023,"author":{"gitId":"-"},"content":""},{"lineNumber":5024,"author":{"gitId":"-"},"content":"    * fix \"explicit return in __init__\" false positive when return is"},{"lineNumber":5025,"author":{"gitId":"-"},"content":"      actually in an inner function (close #10075)"},{"lineNumber":5026,"author":{"gitId":"-"},"content":""},{"lineNumber":5027,"author":{"gitId":"-"},"content":""},{"lineNumber":5028,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.8.0?"},{"lineNumber":5029,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5030,"author":{"gitId":"-"},"content":""},{"lineNumber":5031,"author":{"gitId":"-"},"content":"Release date: 2005-10-21"},{"lineNumber":5032,"author":{"gitId":"-"},"content":""},{"lineNumber":5033,"author":{"gitId":"-"},"content":"    * check names imported from a module exists in the module (E0611),"},{"lineNumber":5034,"author":{"gitId":"-"},"content":"      patch contributed by Amaury Forgeot d\u0027Arc"},{"lineNumber":5035,"author":{"gitId":"-"},"content":""},{"lineNumber":5036,"author":{"gitId":"-"},"content":"    * print a warning (W0212) for methods that could be a function"},{"lineNumber":5037,"author":{"gitId":"-"},"content":"      (implements #9100)"},{"lineNumber":5038,"author":{"gitId":"-"},"content":""},{"lineNumber":5039,"author":{"gitId":"-"},"content":"    * new --defining-attr-methods option on classes checker"},{"lineNumber":5040,"author":{"gitId":"-"},"content":""},{"lineNumber":5041,"author":{"gitId":"-"},"content":"    * new --acquired-members option on the classes checker, used when"},{"lineNumber":5042,"author":{"gitId":"-"},"content":"      --zope\u003dyes to avoid false positive on acquired attributes (listed"},{"lineNumber":5043,"author":{"gitId":"-"},"content":"      using this new option) (close #8616)"},{"lineNumber":5044,"author":{"gitId":"-"},"content":""},{"lineNumber":5045,"author":{"gitId":"-"},"content":"    * generate one E0602 for each use of an undefined variable"},{"lineNumber":5046,"author":{"gitId":"-"},"content":"      (previously, only one for the first use but not for the following)"},{"lineNumber":5047,"author":{"gitId":"-"},"content":"      (implements #1000)"},{"lineNumber":5048,"author":{"gitId":"-"},"content":""},{"lineNumber":5049,"author":{"gitId":"-"},"content":"    * make profile option saveable"},{"lineNumber":5050,"author":{"gitId":"-"},"content":""},{"lineNumber":5051,"author":{"gitId":"-"},"content":"    * fix Windows .bat file,  patch contributed by Amaury Forgeot d\u0027Arc"},{"lineNumber":5052,"author":{"gitId":"-"},"content":""},{"lineNumber":5053,"author":{"gitId":"-"},"content":"    * fix one more false positive for E0601 (access before definition)"},{"lineNumber":5054,"author":{"gitId":"-"},"content":"      with for loop such as \"for i in range(10): print i\" (test"},{"lineNumber":5055,"author":{"gitId":"-"},"content":"      func_noerror_defined_and_used_on_same_line)"},{"lineNumber":5056,"author":{"gitId":"-"},"content":""},{"lineNumber":5057,"author":{"gitId":"-"},"content":"    * fix false positive for E0201 (undefined member) when accessing to"},{"lineNumber":5058,"author":{"gitId":"-"},"content":"      __name__ on a class object"},{"lineNumber":5059,"author":{"gitId":"-"},"content":""},{"lineNumber":5060,"author":{"gitId":"-"},"content":"    * fix astng checkers traversal order"},{"lineNumber":5061,"author":{"gitId":"-"},"content":""},{"lineNumber":5062,"author":{"gitId":"-"},"content":"    * fix bug in format checker when parsing a file from a platform"},{"lineNumber":5063,"author":{"gitId":"-"},"content":"      using different new line characters (close #9239)"},{"lineNumber":5064,"author":{"gitId":"-"},"content":""},{"lineNumber":5065,"author":{"gitId":"-"},"content":"    * fix encoding detection regexp"},{"lineNumber":5066,"author":{"gitId":"-"},"content":""},{"lineNumber":5067,"author":{"gitId":"-"},"content":"    * fix --rcfile handling (support for --rcfile\u003dfile, close #9590)"},{"lineNumber":5068,"author":{"gitId":"-"},"content":""},{"lineNumber":5069,"author":{"gitId":"-"},"content":""},{"lineNumber":5070,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.7.0?"},{"lineNumber":5071,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5072,"author":{"gitId":"-"},"content":""},{"lineNumber":5073,"author":{"gitId":"-"},"content":""},{"lineNumber":5074,"author":{"gitId":"-"},"content":"Release date: 2005-05-27"},{"lineNumber":5075,"author":{"gitId":"-"},"content":""},{"lineNumber":5076,"author":{"gitId":"-"},"content":"    * WARNING: pylint is no longer a logilab subpackage. Users may have to"},{"lineNumber":5077,"author":{"gitId":"-"},"content":"      manually remove the old logilab/pylint directory."},{"lineNumber":5078,"author":{"gitId":"-"},"content":""},{"lineNumber":5079,"author":{"gitId":"-"},"content":"    * introduce a new --additional-builtins option to handle user defined"},{"lineNumber":5080,"author":{"gitId":"-"},"content":"      builtins"},{"lineNumber":5081,"author":{"gitId":"-"},"content":""},{"lineNumber":5082,"author":{"gitId":"-"},"content":"    * --reports option has now -r as short alias, and -i for --include-ids"},{"lineNumber":5083,"author":{"gitId":"-"},"content":""},{"lineNumber":5084,"author":{"gitId":"-"},"content":"    * fix a bug in the variables checker which may causing some false"},{"lineNumber":5085,"author":{"gitId":"-"},"content":"      positives when variables are defined and used within the same"},{"lineNumber":5086,"author":{"gitId":"-"},"content":"      statement (test func_noerror_defined_and_used_on_same_line)"},{"lineNumber":5087,"author":{"gitId":"-"},"content":""},{"lineNumber":5088,"author":{"gitId":"-"},"content":"    * this time, real fix of the \"disable-msg in the config file\" problem,"},{"lineNumber":5089,"author":{"gitId":"-"},"content":"      test added to unittest_lint"},{"lineNumber":5090,"author":{"gitId":"-"},"content":""},{"lineNumber":5091,"author":{"gitId":"-"},"content":"    * fix bug with --list-messages and python -OO"},{"lineNumber":5092,"author":{"gitId":"-"},"content":""},{"lineNumber":5093,"author":{"gitId":"-"},"content":"    * fix possible false positive for W0201"},{"lineNumber":5094,"author":{"gitId":"-"},"content":""},{"lineNumber":5095,"author":{"gitId":"-"},"content":""},{"lineNumber":5096,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.6.4?"},{"lineNumber":5097,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5098,"author":{"gitId":"-"},"content":""},{"lineNumber":5099,"author":{"gitId":"-"},"content":""},{"lineNumber":5100,"author":{"gitId":"-"},"content":"Release date: 2005-04-14"},{"lineNumber":5101,"author":{"gitId":"-"},"content":""},{"lineNumber":5102,"author":{"gitId":"-"},"content":"    * allow to parse files without extension when a path is given on the"},{"lineNumber":5103,"author":{"gitId":"-"},"content":"      command line (test noext)"},{"lineNumber":5104,"author":{"gitId":"-"},"content":""},{"lineNumber":5105,"author":{"gitId":"-"},"content":"    * don\u0027t fail if we are unable to read an inline option  (e.g. inside a"},{"lineNumber":5106,"author":{"gitId":"-"},"content":"      module), just produce an information message (test func_i0010)"},{"lineNumber":5107,"author":{"gitId":"-"},"content":""},{"lineNumber":5108,"author":{"gitId":"-"},"content":"    * new message E0103 for break or continue outside loop (close #8883,"},{"lineNumber":5109,"author":{"gitId":"-"},"content":"      test func_continue_not_in_loop)"},{"lineNumber":5110,"author":{"gitId":"-"},"content":""},{"lineNumber":5111,"author":{"gitId":"-"},"content":"    * fix bug in the variables checker, causing non detection of some"},{"lineNumber":5112,"author":{"gitId":"-"},"content":"      actual name error (close #8884, test"},{"lineNumber":5113,"author":{"gitId":"-"},"content":"      func_nameerror_on_string_substitution)"},{"lineNumber":5114,"author":{"gitId":"-"},"content":""},{"lineNumber":5115,"author":{"gitId":"-"},"content":"    * fix bug in the classes checker which was making pylint crash if"},{"lineNumber":5116,"author":{"gitId":"-"},"content":"      \"object\" is assigned in a class inheriting from it (test"},{"lineNumber":5117,"author":{"gitId":"-"},"content":"      func_noerror_object_as_class_attribute)"},{"lineNumber":5118,"author":{"gitId":"-"},"content":""},{"lineNumber":5119,"author":{"gitId":"-"},"content":"    * fix problem with the similar checker when related options are"},{"lineNumber":5120,"author":{"gitId":"-"},"content":"      defined in a configuration file"},{"lineNumber":5121,"author":{"gitId":"-"},"content":""},{"lineNumber":5122,"author":{"gitId":"-"},"content":"    * new --generate-man option to generate pylint\u0027s man page (require the"},{"lineNumber":5123,"author":{"gitId":"-"},"content":"      latest logilab.common (\u003e\u003d 0.9.3)"},{"lineNumber":5124,"author":{"gitId":"-"},"content":""},{"lineNumber":5125,"author":{"gitId":"-"},"content":"    * packaged (generated...) man page"},{"lineNumber":5126,"author":{"gitId":"-"},"content":""},{"lineNumber":5127,"author":{"gitId":"-"},"content":""},{"lineNumber":5128,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.6.3?"},{"lineNumber":5129,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5130,"author":{"gitId":"-"},"content":""},{"lineNumber":5131,"author":{"gitId":"-"},"content":"Release date: 2005-02-24"},{"lineNumber":5132,"author":{"gitId":"-"},"content":""},{"lineNumber":5133,"author":{"gitId":"-"},"content":"    * fix scope problem which may cause false positive and true negative"},{"lineNumber":5134,"author":{"gitId":"-"},"content":"      on E0602"},{"lineNumber":5135,"author":{"gitId":"-"},"content":""},{"lineNumber":5136,"author":{"gitId":"-"},"content":"    * fix problem with some options such as disable-msg causing error when"},{"lineNumber":5137,"author":{"gitId":"-"},"content":"      they are coming from the configuration file"},{"lineNumber":5138,"author":{"gitId":"-"},"content":""},{"lineNumber":5139,"author":{"gitId":"-"},"content":""},{"lineNumber":5140,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.6.2?"},{"lineNumber":5141,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5142,"author":{"gitId":"-"},"content":""},{"lineNumber":5143,"author":{"gitId":"-"},"content":""},{"lineNumber":5144,"author":{"gitId":"-"},"content":"Release date: 2005-02-16"},{"lineNumber":5145,"author":{"gitId":"-"},"content":""},{"lineNumber":5146,"author":{"gitId":"-"},"content":"    * fix false positive on E0201 (\"access to undefined member\") with"},{"lineNumber":5147,"author":{"gitId":"-"},"content":"      metaclasses"},{"lineNumber":5148,"author":{"gitId":"-"},"content":""},{"lineNumber":5149,"author":{"gitId":"-"},"content":"    * fix false positive on E0203 (\"access to member before its"},{"lineNumber":5150,"author":{"gitId":"-"},"content":"      definition\") when attributes are defined in a parent class"},{"lineNumber":5151,"author":{"gitId":"-"},"content":""},{"lineNumber":5152,"author":{"gitId":"-"},"content":"    * fix false positive on W0706 (\"identifier used to raise an exception"},{"lineNumber":5153,"author":{"gitId":"-"},"content":"      assigned to...\")"},{"lineNumber":5154,"author":{"gitId":"-"},"content":""},{"lineNumber":5155,"author":{"gitId":"-"},"content":"    * fix interpretation of \"\\t\" as value for the indent-string"},{"lineNumber":5156,"author":{"gitId":"-"},"content":"      configuration variable"},{"lineNumber":5157,"author":{"gitId":"-"},"content":""},{"lineNumber":5158,"author":{"gitId":"-"},"content":"    * fix --rcfile so that --rcfile\u003dpylintrc (only --rcfile pylintrc was"},{"lineNumber":5159,"author":{"gitId":"-"},"content":"      working in earlier release)"},{"lineNumber":5160,"author":{"gitId":"-"},"content":""},{"lineNumber":5161,"author":{"gitId":"-"},"content":"    * new raw checker example in the examples/ directory"},{"lineNumber":5162,"author":{"gitId":"-"},"content":""},{"lineNumber":5163,"author":{"gitId":"-"},"content":""},{"lineNumber":5164,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.6.1?"},{"lineNumber":5165,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5166,"author":{"gitId":"-"},"content":""},{"lineNumber":5167,"author":{"gitId":"-"},"content":"Release date: 2005-02-04"},{"lineNumber":5168,"author":{"gitId":"-"},"content":""},{"lineNumber":5169,"author":{"gitId":"-"},"content":"    * new --rcfile option to specify the configuration file without the"},{"lineNumber":5170,"author":{"gitId":"-"},"content":"      PYLINTRC environment variable"},{"lineNumber":5171,"author":{"gitId":"-"},"content":""},{"lineNumber":5172,"author":{"gitId":"-"},"content":"    * added an example module for a custom pylint checker (see the"},{"lineNumber":5173,"author":{"gitId":"-"},"content":"      example/ directory)"},{"lineNumber":5174,"author":{"gitId":"-"},"content":""},{"lineNumber":5175,"author":{"gitId":"-"},"content":"    * some fixes to handle fixes in common 0.9.1 (should however still working"},{"lineNumber":5176,"author":{"gitId":"-"},"content":"      with common 0.9.0, even if upgrade is recommended)"},{"lineNumber":5177,"author":{"gitId":"-"},"content":""},{"lineNumber":5178,"author":{"gitId":"-"},"content":""},{"lineNumber":5179,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.6.0?"},{"lineNumber":5180,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5181,"author":{"gitId":"-"},"content":""},{"lineNumber":5182,"author":{"gitId":"-"},"content":"Release date: 2005-01-20"},{"lineNumber":5183,"author":{"gitId":"-"},"content":""},{"lineNumber":5184,"author":{"gitId":"-"},"content":"    * refix pylint emacs mode"},{"lineNumber":5185,"author":{"gitId":"-"},"content":""},{"lineNumber":5186,"author":{"gitId":"-"},"content":"    * no more traceback when just typing \"pylint\""},{"lineNumber":5187,"author":{"gitId":"-"},"content":""},{"lineNumber":5188,"author":{"gitId":"-"},"content":"    * fix a bug which may cause crashes on resolving parent classes"},{"lineNumber":5189,"author":{"gitId":"-"},"content":""},{"lineNumber":5190,"author":{"gitId":"-"},"content":"    * fix problems with the format checker: don\u0027t chock on files"},{"lineNumber":5191,"author":{"gitId":"-"},"content":"      containing multiple CR, avoid C0322, C0323, C0324 false positives"},{"lineNumber":5192,"author":{"gitId":"-"},"content":"      with triple quoted string with quote inside"},{"lineNumber":5193,"author":{"gitId":"-"},"content":""},{"lineNumber":5194,"author":{"gitId":"-"},"content":"    * correctly detect access to member defined latter in __init__ method"},{"lineNumber":5195,"author":{"gitId":"-"},"content":""},{"lineNumber":5196,"author":{"gitId":"-"},"content":"    * now depends on common 0.8.1 to fix problem with interface resolution"},{"lineNumber":5197,"author":{"gitId":"-"},"content":"      (close #8606)"},{"lineNumber":5198,"author":{"gitId":"-"},"content":""},{"lineNumber":5199,"author":{"gitId":"-"},"content":"    * new --list-msgs option describing available checkers and their"},{"lineNumber":5200,"author":{"gitId":"-"},"content":"      messages"},{"lineNumber":5201,"author":{"gitId":"-"},"content":""},{"lineNumber":5202,"author":{"gitId":"-"},"content":"    * added windows specific documentation to the README file, contributed"},{"lineNumber":5203,"author":{"gitId":"-"},"content":"      by Brian van den Broek"},{"lineNumber":5204,"author":{"gitId":"-"},"content":""},{"lineNumber":5205,"author":{"gitId":"-"},"content":"    * updated doc/features.txt (actually this file is now generated using"},{"lineNumber":5206,"author":{"gitId":"-"},"content":"      the --list-msgs option), more entries into the FAQ"},{"lineNumber":5207,"author":{"gitId":"-"},"content":""},{"lineNumber":5208,"author":{"gitId":"-"},"content":"    * improved tests coverage"},{"lineNumber":5209,"author":{"gitId":"-"},"content":""},{"lineNumber":5210,"author":{"gitId":"-"},"content":""},{"lineNumber":5211,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.5.0?"},{"lineNumber":5212,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5213,"author":{"gitId":"-"},"content":""},{"lineNumber":5214,"author":{"gitId":"-"},"content":"Release date: 2004-10-19"},{"lineNumber":5215,"author":{"gitId":"-"},"content":""},{"lineNumber":5216,"author":{"gitId":"-"},"content":"    * avoid importing analyzed modules !"},{"lineNumber":5217,"author":{"gitId":"-"},"content":""},{"lineNumber":5218,"author":{"gitId":"-"},"content":"    * new Refactor and Convention message categories. Some Warnings have been"},{"lineNumber":5219,"author":{"gitId":"-"},"content":"      remaped into those new categories"},{"lineNumber":5220,"author":{"gitId":"-"},"content":""},{"lineNumber":5221,"author":{"gitId":"-"},"content":"    * added \"similar\", a tool to find copied and pasted lines of code,"},{"lineNumber":5222,"author":{"gitId":"-"},"content":"      both using a specific command line tool and integrated as a"},{"lineNumber":5223,"author":{"gitId":"-"},"content":"      pylint\u0027s checker"},{"lineNumber":5224,"author":{"gitId":"-"},"content":""},{"lineNumber":5225,"author":{"gitId":"-"},"content":"    * imports checker may report import dependencies as a dot graph"},{"lineNumber":5226,"author":{"gitId":"-"},"content":""},{"lineNumber":5227,"author":{"gitId":"-"},"content":"    * new checker regrouping most Refactor detection (with some new metrics)"},{"lineNumber":5228,"author":{"gitId":"-"},"content":""},{"lineNumber":5229,"author":{"gitId":"-"},"content":"    * more command line options storable in the configuration file"},{"lineNumber":5230,"author":{"gitId":"-"},"content":""},{"lineNumber":5231,"author":{"gitId":"-"},"content":"    * fix bug with total / undocumented number of methods"},{"lineNumber":5232,"author":{"gitId":"-"},"content":""},{"lineNumber":5233,"author":{"gitId":"-"},"content":""},{"lineNumber":5234,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.4.2?"},{"lineNumber":5235,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5236,"author":{"gitId":"-"},"content":""},{"lineNumber":5237,"author":{"gitId":"-"},"content":"Release date: 2004-07-08"},{"lineNumber":5238,"author":{"gitId":"-"},"content":""},{"lineNumber":5239,"author":{"gitId":"-"},"content":"    * fix pylint emacs mode"},{"lineNumber":5240,"author":{"gitId":"-"},"content":""},{"lineNumber":5241,"author":{"gitId":"-"},"content":"    * fix classes checkers to handler twisted interfaces"},{"lineNumber":5242,"author":{"gitId":"-"},"content":""},{"lineNumber":5243,"author":{"gitId":"-"},"content":""},{"lineNumber":5244,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.4.1?"},{"lineNumber":5245,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5246,"author":{"gitId":"-"},"content":""},{"lineNumber":5247,"author":{"gitId":"-"},"content":"Release date: 2004-05-14"},{"lineNumber":5248,"author":{"gitId":"-"},"content":""},{"lineNumber":5249,"author":{"gitId":"-"},"content":"    * fix the setup.py script to allow bdist_winst (well, the generated"},{"lineNumber":5250,"author":{"gitId":"-"},"content":"      installer has not been tested...) with the necessary"},{"lineNumber":5251,"author":{"gitId":"-"},"content":"      logilab/__init__.py file"},{"lineNumber":5252,"author":{"gitId":"-"},"content":""},{"lineNumber":5253,"author":{"gitId":"-"},"content":"    * fix file naming convention as suggested by Andreas Amoroso"},{"lineNumber":5254,"author":{"gitId":"-"},"content":""},{"lineNumber":5255,"author":{"gitId":"-"},"content":"    * fix stupid crash bug with bad method names"},{"lineNumber":5256,"author":{"gitId":"-"},"content":""},{"lineNumber":5257,"author":{"gitId":"-"},"content":""},{"lineNumber":5258,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.4.0?"},{"lineNumber":5259,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5260,"author":{"gitId":"-"},"content":""},{"lineNumber":5261,"author":{"gitId":"-"},"content":"Release date: 2004-05-10"},{"lineNumber":5262,"author":{"gitId":"-"},"content":""},{"lineNumber":5263,"author":{"gitId":"-"},"content":"    * fix file path with --parsable"},{"lineNumber":5264,"author":{"gitId":"-"},"content":""},{"lineNumber":5265,"author":{"gitId":"-"},"content":"    * --parsable option has been renamed to --parseable"},{"lineNumber":5266,"author":{"gitId":"-"},"content":""},{"lineNumber":5267,"author":{"gitId":"-"},"content":"    * added patch from Andreas Amoroso to output message to files instead"},{"lineNumber":5268,"author":{"gitId":"-"},"content":"      of standard output"},{"lineNumber":5269,"author":{"gitId":"-"},"content":""},{"lineNumber":5270,"author":{"gitId":"-"},"content":"    * added Run to the list of correct variable names"},{"lineNumber":5271,"author":{"gitId":"-"},"content":""},{"lineNumber":5272,"author":{"gitId":"-"},"content":"    * fix variable names regexp and checking of local classes names"},{"lineNumber":5273,"author":{"gitId":"-"},"content":""},{"lineNumber":5274,"author":{"gitId":"-"},"content":"    * some basic handling of metaclasses"},{"lineNumber":5275,"author":{"gitId":"-"},"content":""},{"lineNumber":5276,"author":{"gitId":"-"},"content":"    * no-docstring-rgx apply now on classes too"},{"lineNumber":5277,"author":{"gitId":"-"},"content":""},{"lineNumber":5278,"author":{"gitId":"-"},"content":"    * new option to specify a different regexp for methods than for"},{"lineNumber":5279,"author":{"gitId":"-"},"content":"      functions"},{"lineNumber":5280,"author":{"gitId":"-"},"content":""},{"lineNumber":5281,"author":{"gitId":"-"},"content":"    * do not display the evaluation report when no statements has been"},{"lineNumber":5282,"author":{"gitId":"-"},"content":"      analysed"},{"lineNumber":5283,"author":{"gitId":"-"},"content":""},{"lineNumber":5284,"author":{"gitId":"-"},"content":"    * fixed crash with a class nested in a method"},{"lineNumber":5285,"author":{"gitId":"-"},"content":""},{"lineNumber":5286,"author":{"gitId":"-"},"content":"    * fixed format checker to deals with triple quoted string and"},{"lineNumber":5287,"author":{"gitId":"-"},"content":"      lines with code and comment mixed"},{"lineNumber":5288,"author":{"gitId":"-"},"content":""},{"lineNumber":5289,"author":{"gitId":"-"},"content":"    * use logilab.common.ureports to layout reports"},{"lineNumber":5290,"author":{"gitId":"-"},"content":""},{"lineNumber":5291,"author":{"gitId":"-"},"content":""},{"lineNumber":5292,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.3.3?"},{"lineNumber":5293,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5294,"author":{"gitId":"-"},"content":""},{"lineNumber":5295,"author":{"gitId":"-"},"content":"Release date: 2004-02-17"},{"lineNumber":5296,"author":{"gitId":"-"},"content":""},{"lineNumber":5297,"author":{"gitId":"-"},"content":"    * added a parsable text output, used when the --parsable option is"},{"lineNumber":5298,"author":{"gitId":"-"},"content":"      provided"},{"lineNumber":5299,"author":{"gitId":"-"},"content":""},{"lineNumber":5300,"author":{"gitId":"-"},"content":"    * added an emacs mode using this output, available in the distrib\u0027s"},{"lineNumber":5301,"author":{"gitId":"-"},"content":"      elisp directory"},{"lineNumber":5302,"author":{"gitId":"-"},"content":""},{"lineNumber":5303,"author":{"gitId":"-"},"content":"    * fixed some typos in messages"},{"lineNumber":5304,"author":{"gitId":"-"},"content":""},{"lineNumber":5305,"author":{"gitId":"-"},"content":"    * change include-ids options to yn, and allow it to be in the"},{"lineNumber":5306,"author":{"gitId":"-"},"content":"      configuration file"},{"lineNumber":5307,"author":{"gitId":"-"},"content":""},{"lineNumber":5308,"author":{"gitId":"-"},"content":"    * do not chock on corrupted stats files"},{"lineNumber":5309,"author":{"gitId":"-"},"content":""},{"lineNumber":5310,"author":{"gitId":"-"},"content":"    * fixed bug in the format checker which may stop pylint execution"},{"lineNumber":5311,"author":{"gitId":"-"},"content":""},{"lineNumber":5312,"author":{"gitId":"-"},"content":"    * provide scripts for unix and windows to wrap the minimal pylint tk"},{"lineNumber":5313,"author":{"gitId":"-"},"content":"      gui"},{"lineNumber":5314,"author":{"gitId":"-"},"content":""},{"lineNumber":5315,"author":{"gitId":"-"},"content":""},{"lineNumber":5316,"author":{"gitId":"-"},"content":""},{"lineNumber":5317,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.3.2?"},{"lineNumber":5318,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5319,"author":{"gitId":"-"},"content":""},{"lineNumber":5320,"author":{"gitId":"-"},"content":"Release date: 2003-12-23"},{"lineNumber":5321,"author":{"gitId":"-"},"content":""},{"lineNumber":5322,"author":{"gitId":"-"},"content":"    * html-escape messages in the HTML reporter (bug reported by Juergen"},{"lineNumber":5323,"author":{"gitId":"-"},"content":"      Hermann)"},{"lineNumber":5324,"author":{"gitId":"-"},"content":""},{"lineNumber":5325,"author":{"gitId":"-"},"content":"    * added \"TODO\" to the list of default note tags"},{"lineNumber":5326,"author":{"gitId":"-"},"content":""},{"lineNumber":5327,"author":{"gitId":"-"},"content":"    * added \"rexec\" to the list of default deprecated modules"},{"lineNumber":5328,"author":{"gitId":"-"},"content":""},{"lineNumber":5329,"author":{"gitId":"-"},"content":"    * fixed typos in some messages"},{"lineNumber":5330,"author":{"gitId":"-"},"content":""},{"lineNumber":5331,"author":{"gitId":"-"},"content":""},{"lineNumber":5332,"author":{"gitId":"-"},"content":""},{"lineNumber":5333,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.3.1?"},{"lineNumber":5334,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5335,"author":{"gitId":"-"},"content":""},{"lineNumber":5336,"author":{"gitId":"-"},"content":""},{"lineNumber":5337,"author":{"gitId":"-"},"content":"Release date: 2003-12-05"},{"lineNumber":5338,"author":{"gitId":"-"},"content":""},{"lineNumber":5339,"author":{"gitId":"-"},"content":"    * bug fix in format and classes checkers"},{"lineNumber":5340,"author":{"gitId":"-"},"content":""},{"lineNumber":5341,"author":{"gitId":"-"},"content":"    * remove print statement from imports checkers"},{"lineNumber":5342,"author":{"gitId":"-"},"content":""},{"lineNumber":5343,"author":{"gitId":"-"},"content":"    * provide a simple tk gui, essentially useful for windows users"},{"lineNumber":5344,"author":{"gitId":"-"},"content":""},{"lineNumber":5345,"author":{"gitId":"-"},"content":""},{"lineNumber":5346,"author":{"gitId":"-"},"content":""},{"lineNumber":5347,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.3.0?"},{"lineNumber":5348,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5349,"author":{"gitId":"-"},"content":""},{"lineNumber":5350,"author":{"gitId":"-"},"content":""},{"lineNumber":5351,"author":{"gitId":"-"},"content":"Release date: 2003-11-20"},{"lineNumber":5352,"author":{"gitId":"-"},"content":""},{"lineNumber":5353,"author":{"gitId":"-"},"content":"    * new exceptions checker, checking for string exception and empty"},{"lineNumber":5354,"author":{"gitId":"-"},"content":"      except clauses."},{"lineNumber":5355,"author":{"gitId":"-"},"content":""},{"lineNumber":5356,"author":{"gitId":"-"},"content":"    * imports checker checks for reimport of modules"},{"lineNumber":5357,"author":{"gitId":"-"},"content":""},{"lineNumber":5358,"author":{"gitId":"-"},"content":"    * classes checker checks for calls to ancestor\u0027s __init__ and abstract"},{"lineNumber":5359,"author":{"gitId":"-"},"content":"      method not overridden. It doesn\u0027t complain anymore for unused import in"},{"lineNumber":5360,"author":{"gitId":"-"},"content":"      __init__ files, and provides a new option ignore-interface-methods,"},{"lineNumber":5361,"author":{"gitId":"-"},"content":"      useful when you\u0027re using zope Interface implementation in your project"},{"lineNumber":5362,"author":{"gitId":"-"},"content":""},{"lineNumber":5363,"author":{"gitId":"-"},"content":"    * base checker checks for disallowed builtins call (controlled by the"},{"lineNumber":5364,"author":{"gitId":"-"},"content":"      bad-functions option) and for use of * and **"},{"lineNumber":5365,"author":{"gitId":"-"},"content":""},{"lineNumber":5366,"author":{"gitId":"-"},"content":"    * format checker checks for use of \u003c\u003e and \"l\" as long int marker"},{"lineNumber":5367,"author":{"gitId":"-"},"content":""},{"lineNumber":5368,"author":{"gitId":"-"},"content":"    * major internal API changes"},{"lineNumber":5369,"author":{"gitId":"-"},"content":""},{"lineNumber":5370,"author":{"gitId":"-"},"content":"    * use the rewrite of astng, based on compiler.ast"},{"lineNumber":5371,"author":{"gitId":"-"},"content":""},{"lineNumber":5372,"author":{"gitId":"-"},"content":"    * added unique id for messages, as suggested by Wolfgang Grafen"},{"lineNumber":5373,"author":{"gitId":"-"},"content":""},{"lineNumber":5374,"author":{"gitId":"-"},"content":"    * added unique id for reports"},{"lineNumber":5375,"author":{"gitId":"-"},"content":""},{"lineNumber":5376,"author":{"gitId":"-"},"content":"    * can take multiple modules or files as argument"},{"lineNumber":5377,"author":{"gitId":"-"},"content":""},{"lineNumber":5378,"author":{"gitId":"-"},"content":"    * new options command line options : --disable-msg, --enable-msg,"},{"lineNumber":5379,"author":{"gitId":"-"},"content":"      --help-msg, --include-ids, --reports, --disable-report, --cache-size"},{"lineNumber":5380,"author":{"gitId":"-"},"content":""},{"lineNumber":5381,"author":{"gitId":"-"},"content":"    * --version shows the version of the python interpreter"},{"lineNumber":5382,"author":{"gitId":"-"},"content":""},{"lineNumber":5383,"author":{"gitId":"-"},"content":"    * removed some options which are now replaced by [en|dis]able-msg, or"},{"lineNumber":5384,"author":{"gitId":"-"},"content":"      disable-report"},{"lineNumber":5385,"author":{"gitId":"-"},"content":""},{"lineNumber":5386,"author":{"gitId":"-"},"content":"    * read disable-msg and enable-msg options in source files (should be"},{"lineNumber":5387,"author":{"gitId":"-"},"content":"      in comments on the top of the file, in the form"},{"lineNumber":5388,"author":{"gitId":"-"},"content":"      \"# pylint: disable-msg\u003dW0402\""},{"lineNumber":5389,"author":{"gitId":"-"},"content":""},{"lineNumber":5390,"author":{"gitId":"-"},"content":"    * new message for modules importing themselves instead of the \"cyclic"},{"lineNumber":5391,"author":{"gitId":"-"},"content":"      import\" message"},{"lineNumber":5392,"author":{"gitId":"-"},"content":""},{"lineNumber":5393,"author":{"gitId":"-"},"content":"    * fix bug with relative and cyclic imports"},{"lineNumber":5394,"author":{"gitId":"-"},"content":""},{"lineNumber":5395,"author":{"gitId":"-"},"content":"    * fix bug in imports checker (cycle was not always detected)"},{"lineNumber":5396,"author":{"gitId":"-"},"content":""},{"lineNumber":5397,"author":{"gitId":"-"},"content":"    * still fixes in format checker : don\u0027t check comment and docstring,"},{"lineNumber":5398,"author":{"gitId":"-"},"content":"      check first line after an indent"},{"lineNumber":5399,"author":{"gitId":"-"},"content":""},{"lineNumber":5400,"author":{"gitId":"-"},"content":"    * allowed/prohibited names now apply to all identifiers, not only"},{"lineNumber":5401,"author":{"gitId":"-"},"content":"      variables,  so changed the configuration option from"},{"lineNumber":5402,"author":{"gitId":"-"},"content":"      (good|bad)-variable-names to (good|bad)-names"},{"lineNumber":5403,"author":{"gitId":"-"},"content":""},{"lineNumber":5404,"author":{"gitId":"-"},"content":"    * added string, rexec and Bastion to the default list of deprecated"},{"lineNumber":5405,"author":{"gitId":"-"},"content":"      modules"},{"lineNumber":5406,"author":{"gitId":"-"},"content":""},{"lineNumber":5407,"author":{"gitId":"-"},"content":"    * do not print redefinition warning for function/class/method defined"},{"lineNumber":5408,"author":{"gitId":"-"},"content":"      in mutually exclusive branches"},{"lineNumber":5409,"author":{"gitId":"-"},"content":""},{"lineNumber":5410,"author":{"gitId":"-"},"content":""},{"lineNumber":5411,"author":{"gitId":"-"},"content":""},{"lineNumber":5412,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.2.1?"},{"lineNumber":5413,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5414,"author":{"gitId":"-"},"content":""},{"lineNumber":5415,"author":{"gitId":"-"},"content":""},{"lineNumber":5416,"author":{"gitId":"-"},"content":"Release date: 2003-10-10"},{"lineNumber":5417,"author":{"gitId":"-"},"content":""},{"lineNumber":5418,"author":{"gitId":"-"},"content":"    * added some documentation, fixed some typos"},{"lineNumber":5419,"author":{"gitId":"-"},"content":""},{"lineNumber":5420,"author":{"gitId":"-"},"content":"    * set environment variable PYLINT_IMPORT to 1 during pylint execution."},{"lineNumber":5421,"author":{"gitId":"-"},"content":""},{"lineNumber":5422,"author":{"gitId":"-"},"content":"    * check that variables \"imported\" using the global statement exist"},{"lineNumber":5423,"author":{"gitId":"-"},"content":""},{"lineNumber":5424,"author":{"gitId":"-"},"content":"    * indentation problems are now warning instead of errors"},{"lineNumber":5425,"author":{"gitId":"-"},"content":""},{"lineNumber":5426,"author":{"gitId":"-"},"content":"    * fix checkers.initialize to try to load all files with a known python"},{"lineNumber":5427,"author":{"gitId":"-"},"content":"      extension (patch from wrobell)"},{"lineNumber":5428,"author":{"gitId":"-"},"content":""},{"lineNumber":5429,"author":{"gitId":"-"},"content":"    * fix a bunch of messages"},{"lineNumber":5430,"author":{"gitId":"-"},"content":""},{"lineNumber":5431,"author":{"gitId":"-"},"content":"    * fix sample configuration file"},{"lineNumber":5432,"author":{"gitId":"-"},"content":""},{"lineNumber":5433,"author":{"gitId":"-"},"content":"    * fix the bad-construction option"},{"lineNumber":5434,"author":{"gitId":"-"},"content":""},{"lineNumber":5435,"author":{"gitId":"-"},"content":"    * fix encoding checker"},{"lineNumber":5436,"author":{"gitId":"-"},"content":""},{"lineNumber":5437,"author":{"gitId":"-"},"content":"    * fix format checker"},{"lineNumber":5438,"author":{"gitId":"-"},"content":""},{"lineNumber":5439,"author":{"gitId":"-"},"content":""},{"lineNumber":5440,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.2.0?"},{"lineNumber":5441,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5442,"author":{"gitId":"-"},"content":""},{"lineNumber":5443,"author":{"gitId":"-"},"content":""},{"lineNumber":5444,"author":{"gitId":"-"},"content":"Release date: 2003-09-12"},{"lineNumber":5445,"author":{"gitId":"-"},"content":""},{"lineNumber":5446,"author":{"gitId":"-"},"content":"    * new source encoding / FIXME checker (pep 263)"},{"lineNumber":5447,"author":{"gitId":"-"},"content":""},{"lineNumber":5448,"author":{"gitId":"-"},"content":"    * new --zope option which trigger Zope import. Useful to check Zope"},{"lineNumber":5449,"author":{"gitId":"-"},"content":"      products code."},{"lineNumber":5450,"author":{"gitId":"-"},"content":""},{"lineNumber":5451,"author":{"gitId":"-"},"content":"    * new --comment option which enable the evaluation note comment"},{"lineNumber":5452,"author":{"gitId":"-"},"content":"      (disabled by default)."},{"lineNumber":5453,"author":{"gitId":"-"},"content":""},{"lineNumber":5454,"author":{"gitId":"-"},"content":"    * a ton of bug fixes"},{"lineNumber":5455,"author":{"gitId":"-"},"content":""},{"lineNumber":5456,"author":{"gitId":"-"},"content":"    * easy functional test infrastructure"},{"lineNumber":5457,"author":{"gitId":"-"},"content":""},{"lineNumber":5458,"author":{"gitId":"-"},"content":""},{"lineNumber":5459,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.1.2?"},{"lineNumber":5460,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5461,"author":{"gitId":"-"},"content":""},{"lineNumber":5462,"author":{"gitId":"-"},"content":""},{"lineNumber":5463,"author":{"gitId":"-"},"content":"Release date: 2003-06-18"},{"lineNumber":5464,"author":{"gitId":"-"},"content":""},{"lineNumber":5465,"author":{"gitId":"-"},"content":"    * bug fix release"},{"lineNumber":5466,"author":{"gitId":"-"},"content":""},{"lineNumber":5467,"author":{"gitId":"-"},"content":"    * remove dependency to pyreverse"},{"lineNumber":5468,"author":{"gitId":"-"},"content":""},{"lineNumber":5469,"author":{"gitId":"-"},"content":""},{"lineNumber":5470,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.1.1?"},{"lineNumber":5471,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5472,"author":{"gitId":"-"},"content":""},{"lineNumber":5473,"author":{"gitId":"-"},"content":""},{"lineNumber":5474,"author":{"gitId":"-"},"content":"Release date: 2003-06-01"},{"lineNumber":5475,"author":{"gitId":"-"},"content":""},{"lineNumber":5476,"author":{"gitId":"-"},"content":"    * much more functionalities !"},{"lineNumber":5477,"author":{"gitId":"-"},"content":""},{"lineNumber":5478,"author":{"gitId":"-"},"content":""},{"lineNumber":5479,"author":{"gitId":"-"},"content":"What\u0027s New in Pylint 0.1?"},{"lineNumber":5480,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":5481,"author":{"gitId":"-"},"content":""},{"lineNumber":5482,"author":{"gitId":"-"},"content":"Release date: 2003-05-19"},{"lineNumber":5483,"author":{"gitId":"-"},"content":""},{"lineNumber":5484,"author":{"gitId":"-"},"content":"    * initial release"}],"authorContributionMap":{"anubh-v":10,"-":5474}},{"path":"doc/whatsnew/2.5.rst","fileType":"rst","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"**************************"},{"lineNumber":2,"author":{"gitId":"-"},"content":" What\u0027s New in Pylint 2.5"},{"lineNumber":3,"author":{"gitId":"-"},"content":"**************************"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":":Release: 2.5"},{"lineNumber":6,"author":{"gitId":"-"},"content":":Date: 2020-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Summary -- Release highlights"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"New checkers"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"* A new check ``isinstance-second-argument-not-valid-type`` was added."},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"   This check is emitted whenever **pylint** finds a call to the ``isinstance``"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"   function with a second argument that is not a type. Such code is likely"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"   unintended as it will cause a TypeError to be thrown at runtime error."},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"* A new check ``assert-on-string-literal`` was added."},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"   This check is emitted whenever **pylint** finds an assert statement"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"   with a string literal as its first argument. Such assert statements"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"   are probably unintended as they will always pass."},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* A new check ``f-string-without-interpolation`` was added."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"   This check is emitted whenever **pylint** detects the use of an"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   f-string without having any interpolated values in it, which means"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   that the f-string can be a normal string."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Multiple checks for invalid return types of protocol functions were added:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * ``invalid-bool-returned``: ``__bool__`` did not return a bool"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * ``invalid-index-returned``: ``__index__`` did not return an integer"},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * ``invalid-repr-returned)``: ``__repr__`` did not return a string"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * ``invalid-str-returned)``: ``__str__`` did not return a string"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   * ``invalid-bytes-returned)``: ``__bytes__`` did not return a string"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * ``invalid-hash-returned)``: ``__hash__`` did not return an integer"},{"lineNumber":42,"author":{"gitId":"-"},"content":"   * ``invalid-length-hint-returned)``: ``__length_hint__`` did not return a non-negative integer"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   * ``invalid-format-returned)``: ``__format__`` did not return a string"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   * ``invalid-getnewargs-returned)``: ``__getnewargs__`` did not return a tuple"},{"lineNumber":45,"author":{"gitId":"-"},"content":"   * ``invalid-getnewargs-ex-returned)``: ``__getnewargs_ex__`` did not return a tuple of the form (tuple, dict)"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* A new check ``inconsistent-quotes`` was added."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"   This check is emitted when quotes delimiters (``\"`` and ``\u0027``) are not used"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   consistently throughout a module.  It allows avoiding unnecessary escaping,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   allowing, for example, ``\"Don\u0027t error\"`` in a module in which single-quotes"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   otherwise delimit strings so that the single quote in ``Don\u0027t`` doesn\u0027t need to be escaped."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* A new check ``non-str-assignment-to-dunder-name`` was added to ensure that only strings are assigned to ``__name__`` attributes."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Other Changes"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Configuration can be read from a setup.cfg or pyproject.toml file in the current directory."},{"lineNumber":61,"author":{"gitId":"-"},"content":"  A setup.cfg must prepend pylintrc section names with ``pylint.``, for example ``[pylint.MESSAGES CONTROL]``."},{"lineNumber":62,"author":{"gitId":"-"},"content":"  A pyproject.toml file must prepend section names with ``tool.pylint.``, for example ``[tool.pylint.\u0027MESSAGES CONTROL\u0027]``."},{"lineNumber":63,"author":{"gitId":"-"},"content":"  These files can also be passed in on the command line."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Add new ``good-names-rgx`` and ``bad-names-rgx`` to enable permitting or disallowing of names via regular expressions"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  To enable better handling of permitted/disallowed names, we added two new config options: good-names-rgxs: a comma-"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  separated list of regexes, that if a name matches will be exempt of naming-checking. bad-names-rgxs: a comma-"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  separated list of regexes, that if a name matches will be always marked as a disallowed name."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Mutable ``collections.*`` are now flagged as dangerous defaults."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Add new ``--fail-under`` flag for setting the threshold for the score to fail overall tests. If the score is over the fail-under threshold, pylint will complete SystemExit with value 0 to indicate no errors."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"* Added a new option ``notes-rgx`` to make fixme warnings more flexible. Now either ``notes`` or ``notes-rgx`` option can be used to detect fixme warnings."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Non-ASCII characters are now allowed by ``invalid-name``."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"* ``pylint`` no longer emits ``invalid-name`` for non-constants found at module level."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  Pylint was considering all module level variables as constants, which is not what PEP 8 is actually mandating."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"* A new check ``non-ascii-name`` was added to detect identifiers with non-ASCII characters."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"* Overloaded typing functions no longer trigger ``no-self-use``, ``unused-argument``, ``missing-docstring`` and similar checks"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  that assumed that overloaded functions are normal functions."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"* ``python -m pylint`` can no longer be made to import files from the local directory."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"anubh-v"},"content":"* A new command ``--list-extensions`` was added."},{"lineNumber":91,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":92,"author":{"gitId":"anubh-v"},"content":"  This command lists all extensions present in ``pylint.extensions``."},{"lineNumber":93,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"* Various false positives have been fixed which you can read more about in the Changelog files."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"* Multiple types of string formatting are allowed in logging functions."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"The ``logging-fstring-interpolation`` message has been brought back to allow"},{"lineNumber":99,"author":{"gitId":"-"},"content":"multiple types of string formatting to be used."},{"lineNumber":100,"author":{"gitId":"-"},"content":"The type of formatting to use is chosen through enabling and disabling messages"},{"lineNumber":101,"author":{"gitId":"-"},"content":"rather than through the logging-format-style option."},{"lineNumber":102,"author":{"gitId":"-"},"content":"The fstr value of the logging-format-style option is not valid."}],"authorContributionMap":{"anubh-v":14,"-":88}},{"path":"pylint/checkers/base.py","fileType":"py","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Copyright (c) 2006-2016 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# Copyright (c) 2010 Daniel Harding \u003cdharding@gmail.com\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# Copyright (c) 2012-2014 Google, Inc."},{"lineNumber":4,"author":{"gitId":"-"},"content":"# Copyright (c) 2013-2020 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 Brett Cannon \u003cbrett@python.org\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Nick Bastin \u003cnick.bastin@gmail.com\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Michael Kefeder \u003coss@multiwave.ch\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Stephane Wirtel \u003cstephane@wirtel.be\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Cosmin Poieana \u003ccmin@ropython.org\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Florian Bruhin \u003cme@the-compiler.org\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Radu Ciorba \u003cradu@devrandom.ro\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# Copyright (c) 2016, 2019 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"# Copyright (c) 2016, 2018 Jakub Wilk \u003cjwilk@jwilk.net\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"# Copyright (c) 2016-2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Glenn Matthews \u003cglenn@e-dad.net\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Elias Dorneles \u003celiasdorneles@gmail.com\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Yannack \u003cyannack@users.noreply.github.com\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Alex Jurkiewicz \u003calex@jurkiewi.cz\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# Copyright (c) 2017, 2019-2021 Pierre Sassoulas \u003cpierre.sassoulas@gmail.com\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"# Copyright (c) 2017, 2019-2021 hippo91 \u003cguillaume.peillex@gmail.com\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 danields \u003cdanields761@gmail.com\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 Jacques Kvam \u003cjwkvam@gmail.com\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 ttenhoeve-aa \u003cttenhoeve@appannie.com\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# Copyright (c) 2018-2019 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# Copyright (c) 2018-2019 Ville Skyttä \u003cville.skytta@iki.fi\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Sergei Lebedev \u003c185856+superbobry@users.noreply.github.com\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Lucas Cimon \u003clucas.cimon@gmail.com\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 ssolanki \u003csushobhitsolanki@gmail.com\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Natalie Serebryakova \u003cnatalie.serebryakova@Natalies-MacBook-Pro.local\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Sushobhit \u003c31987769+sushobhit27@users.noreply.github.com\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 SergeyKosarchuk \u003csergeykosarchuk@gmail.com\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Steven M. Vascellaro \u003csvascellaro@gmail.com\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Chris Lamb \u003cchris@chris-lamb.co.uk\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 glmdgrielson \u003c32415403+glmdgrielson@users.noreply.github.com\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Daniel Draper \u003cGermandrummer92@users.noreply.github.com\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Hugo van Kemenade \u003chugovk@users.noreply.github.com\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Niko Wenselowski \u003cniko@nerdno.de\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Nikita Sobolev \u003cmail@sobolevn.me\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Oisín Moran \u003cOisinMoran@users.noreply.github.com\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Fantix King \u003cfantix@uchicago.edu\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Peter Kolbus \u003cpeter.kolbus@gmail.com\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 ethan-leba \u003cethanleba5@gmail.com\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 へーさん \u003chira9603859504@gmail.com\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Damien Baty \u003cdamien.baty@polyconseil.fr\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Ram Rachum \u003cram@rachum.com\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Anthony Sottile \u003casottile@umich.edu\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 bernie gray \u003cbfgray3@users.noreply.github.com\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Gabriel R Sezefredo \u003cg@briel.dev\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Benny \u003cbenny.mueller91@gmail.com\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Anubhav \u003c35621759+anubh-v@users.noreply.github.com\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Marc Mueller \u003c30130371+cdce8p@users.noreply.github.com\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Andreas Finkler \u003candi.finkler@gmail.com\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Or Bahari \u003corbahari@mail.tau.ac.il\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"},{"lineNumber":60,"author":{"gitId":"-"},"content":"# For details: https://github.com/PyCQA/pylint/blob/master/LICENSE"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"\"\"\"basic checker for Python code\"\"\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"import builtins"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import collections"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import itertools"},{"lineNumber":66,"author":{"gitId":"-"},"content":"import re"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import sys"},{"lineNumber":68,"author":{"gitId":"-"},"content":"from typing import Pattern"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"import astroid"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"from pylint import checkers, exceptions, interfaces"},{"lineNumber":73,"author":{"gitId":"-"},"content":"from pylint import utils as lint_utils"},{"lineNumber":74,"author":{"gitId":"-"},"content":"from pylint.checkers import utils"},{"lineNumber":75,"author":{"gitId":"-"},"content":"from pylint.checkers.utils import ("},{"lineNumber":76,"author":{"gitId":"-"},"content":"    is_overload_stub,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    is_property_deleter,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    is_property_setter,"},{"lineNumber":79,"author":{"gitId":"-"},"content":")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"from pylint.reporters.ureports import nodes as reporter_nodes"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"class NamingStyle:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    \"\"\"It may seem counterintuitive that single naming style has multiple \"accepted\""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    forms of regular expressions, but we need to special-case stuff like dunder names"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    in method names.\"\"\""},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    ANY: Pattern[str] \u003d re.compile(\".*\")"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    CLASS_NAME_RGX: Pattern[str] \u003d ANY"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    MOD_NAME_RGX: Pattern[str] \u003d ANY"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    CONST_NAME_RGX: Pattern[str] \u003d ANY"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    COMP_VAR_RGX: Pattern[str] \u003d ANY"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    DEFAULT_NAME_RGX: Pattern[str] \u003d ANY"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    CLASS_ATTRIBUTE_RGX: Pattern[str] \u003d ANY"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @classmethod"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    def get_regex(cls, name_type):"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \"module\": cls.MOD_NAME_RGX,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \"const\": cls.CONST_NAME_RGX,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \"class\": cls.CLASS_NAME_RGX,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            \"function\": cls.DEFAULT_NAME_RGX,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \"method\": cls.DEFAULT_NAME_RGX,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            \"attr\": cls.DEFAULT_NAME_RGX,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            \"argument\": cls.DEFAULT_NAME_RGX,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            \"variable\": cls.DEFAULT_NAME_RGX,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \"class_attribute\": cls.CLASS_ATTRIBUTE_RGX,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \"class_const\": cls.CONST_NAME_RGX,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            \"inlinevar\": cls.COMP_VAR_RGX,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }[name_type]"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"class SnakeCaseStyle(NamingStyle):"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    \"\"\"Regex rules for snake_case naming style.\"\"\""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    CLASS_NAME_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\WA-Z]+$\")"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    MOD_NAME_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\WA-Z]*$\")"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    CONST_NAME_RGX \u003d re.compile(r\"([^\\W\\dA-Z][^\\WA-Z]*|__.*__)$\")"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    COMP_VAR_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\WA-Z]*$\")"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    DEFAULT_NAME_RGX \u003d re.compile("},{"lineNumber":121,"author":{"gitId":"-"},"content":"        r\"([^\\W\\dA-Z][^\\WA-Z]{2,}|_[^\\WA-Z]*|__[^\\WA-Z\\d_][^\\WA-Z]+__)$\""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"([^\\W\\dA-Z][^\\WA-Z]{2,}|__.*__)$\")"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"class CamelCaseStyle(NamingStyle):"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \"\"\"Regex rules for camelCase naming style.\"\"\""},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    CLASS_NAME_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\W_]+$\")"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    MOD_NAME_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\W_]*$\")"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    CONST_NAME_RGX \u003d re.compile(r\"([^\\W\\dA-Z][^\\W_]*|__.*__)$\")"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    COMP_VAR_RGX \u003d re.compile(r\"[^\\W\\dA-Z][^\\W_]*$\")"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    DEFAULT_NAME_RGX \u003d re.compile(r\"([^\\W\\dA-Z][^\\W_]{2,}|__[^\\W\\dA-Z_]\\w+__)$\")"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"([^\\W\\dA-Z][^\\W_]{2,}|__.*__)$\")"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"class PascalCaseStyle(NamingStyle):"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \"\"\"Regex rules for PascalCase naming style.\"\"\""},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    CLASS_NAME_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\W_]+$\")"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    MOD_NAME_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\W_]+$\")"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    CONST_NAME_RGX \u003d re.compile(r\"([^\\W\\da-z][^\\W_]*|__.*__)$\")"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    COMP_VAR_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\W_]+$\")"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    DEFAULT_NAME_RGX \u003d re.compile(r\"([^\\W\\da-z][^\\W_]{2,}|__[^\\W\\dA-Z_]\\w+__)$\")"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\W_]{2,}$\")"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"class UpperCaseStyle(NamingStyle):"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \"\"\"Regex rules for UPPER_CASE naming style.\"\"\""},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    CLASS_NAME_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\Wa-z]+$\")"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    MOD_NAME_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\Wa-z]+$\")"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    CONST_NAME_RGX \u003d re.compile(r\"([^\\W\\da-z][^\\Wa-z]*|__.*__)$\")"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    COMP_VAR_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\Wa-z]+$\")"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    DEFAULT_NAME_RGX \u003d re.compile(r\"([^\\W\\da-z][^\\Wa-z]{2,}|__[^\\W\\dA-Z_]\\w+__)$\")"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    CLASS_ATTRIBUTE_RGX \u003d re.compile(r\"[^\\W\\da-z][^\\Wa-z]{2,}$\")"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"class AnyStyle(NamingStyle):"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    pass"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"NAMING_STYLES \u003d {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    \"snake_case\": SnakeCaseStyle,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \"camelCase\": CamelCaseStyle,"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    \"PascalCase\": PascalCaseStyle,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \"UPPER_CASE\": UpperCaseStyle,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    \"any\": AnyStyle,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"# do not require a doc string on private/system methods"},{"lineNumber":172,"author":{"gitId":"-"},"content":"NO_REQUIRED_DOC_RGX \u003d re.compile(\"^_\")"},{"lineNumber":173,"author":{"gitId":"-"},"content":"REVERSED_PROTOCOL_METHOD \u003d \"__reversed__\""},{"lineNumber":174,"author":{"gitId":"-"},"content":"SEQUENCE_PROTOCOL_METHODS \u003d (\"__getitem__\", \"__len__\")"},{"lineNumber":175,"author":{"gitId":"-"},"content":"REVERSED_METHODS \u003d (SEQUENCE_PROTOCOL_METHODS, (REVERSED_PROTOCOL_METHOD,))"},{"lineNumber":176,"author":{"gitId":"-"},"content":"TYPECHECK_COMPARISON_OPERATORS \u003d frozenset((\"is\", \"is not\", \"\u003d\u003d\", \"!\u003d\"))"},{"lineNumber":177,"author":{"gitId":"-"},"content":"LITERAL_NODE_TYPES \u003d (astroid.Const, astroid.Dict, astroid.List, astroid.Set)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"UNITTEST_CASE \u003d \"unittest.case\""},{"lineNumber":179,"author":{"gitId":"-"},"content":"BUILTINS \u003d builtins.__name__"},{"lineNumber":180,"author":{"gitId":"-"},"content":"TYPE_QNAME \u003d \"%s.type\" % BUILTINS"},{"lineNumber":181,"author":{"gitId":"-"},"content":"ABC_METACLASSES \u003d {\"_py_abc.ABCMeta\", \"abc.ABCMeta\"}  # Python 3.7+,"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"# Name categories that are always consistent with all naming conventions."},{"lineNumber":184,"author":{"gitId":"-"},"content":"EXEMPT_NAME_CATEGORIES \u003d {\"exempt\", \"ignore\"}"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"# A mapping from qname -\u003e symbol, to be used when generating messages"},{"lineNumber":187,"author":{"gitId":"-"},"content":"# about dangerous default values as arguments"},{"lineNumber":188,"author":{"gitId":"-"},"content":"DEFAULT_ARGUMENT_SYMBOLS \u003d dict("},{"lineNumber":189,"author":{"gitId":"-"},"content":"    zip("},{"lineNumber":190,"author":{"gitId":"-"},"content":"        [\".\".join([BUILTINS, x]) for x in (\"set\", \"dict\", \"list\")],"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        [\"set()\", \"{}\", \"[]\"],"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    **{"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        x: \"%s()\" % x"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        for x in ("},{"lineNumber":196,"author":{"gitId":"-"},"content":"            \"collections.deque\","},{"lineNumber":197,"author":{"gitId":"-"},"content":"            \"collections.ChainMap\","},{"lineNumber":198,"author":{"gitId":"-"},"content":"            \"collections.Counter\","},{"lineNumber":199,"author":{"gitId":"-"},"content":"            \"collections.OrderedDict\","},{"lineNumber":200,"author":{"gitId":"-"},"content":"            \"collections.defaultdict\","},{"lineNumber":201,"author":{"gitId":"-"},"content":"            \"collections.UserDict\","},{"lineNumber":202,"author":{"gitId":"-"},"content":"            \"collections.UserList\","},{"lineNumber":203,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":205,"author":{"gitId":"-"},"content":")"},{"lineNumber":206,"author":{"gitId":"-"},"content":"REVERSED_COMPS \u003d {\"\u003c\": \"\u003e\", \"\u003c\u003d\": \"\u003e\u003d\", \"\u003e\": \"\u003c\", \"\u003e\u003d\": \"\u003c\u003d\"}"},{"lineNumber":207,"author":{"gitId":"-"},"content":"COMPARISON_OPERATORS \u003d frozenset((\"\u003d\u003d\", \"!\u003d\", \"\u003c\", \"\u003e\", \"\u003c\u003d\", \"\u003e\u003d\"))"},{"lineNumber":208,"author":{"gitId":"-"},"content":"# List of methods which can be redefined"},{"lineNumber":209,"author":{"gitId":"-"},"content":"REDEFINABLE_METHODS \u003d frozenset((\"__module__\",))"},{"lineNumber":210,"author":{"gitId":"-"},"content":"TYPING_FORWARD_REF_QNAME \u003d \"typing.ForwardRef\""},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"def _redefines_import(node):"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    \"\"\"Detect that the given node (AssignName) is inside an"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    exception handler and redefines an import from the tryexcept body."},{"lineNumber":216,"author":{"gitId":"-"},"content":"    Returns True if the node redefines an import, False otherwise."},{"lineNumber":217,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    current \u003d node"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    while current and not isinstance(current.parent, astroid.ExceptHandler):"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        current \u003d current.parent"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    if not current or not utils.error_of_type(current.parent, ImportError):"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    try_block \u003d current.parent.parent"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    for import_node in try_block.nodes_of_class((astroid.ImportFrom, astroid.Import)):"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        for name, alias in import_node.names:"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if alias:"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                if alias \u003d\u003d node.name:"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    return True"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            elif name \u003d\u003d node.name:"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"def in_loop(node):"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \"\"\"return True if the node is inside a kind of for loop\"\"\""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    parent \u003d node.parent"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    while parent is not None:"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        if isinstance("},{"lineNumber":239,"author":{"gitId":"-"},"content":"            parent,"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            ("},{"lineNumber":241,"author":{"gitId":"-"},"content":"                astroid.For,"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                astroid.ListComp,"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                astroid.SetComp,"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                astroid.DictComp,"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                astroid.GeneratorExp,"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            ),"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        parent \u003d parent.parent"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"def in_nested_list(nested_list, obj):"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \"\"\"return true if the object is an element of \u003cnested_list\u003e or of a nested"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    list"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    for elmt in nested_list:"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        if isinstance(elmt, (list, tuple)):"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            if in_nested_list(elmt, obj):"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        elif elmt \u003d\u003d obj:"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"def _get_break_loop_node(break_node):"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    Returns the loop node that holds the break node in arguments."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    Args:"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        break_node (astroid.Break): the break node of interest."},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    Returns:"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        astroid.For or astroid.While: the loop node holding the break node."},{"lineNumber":275,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    loop_nodes \u003d (astroid.For, astroid.While)"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    parent \u003d break_node.parent"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    while not isinstance(parent, loop_nodes) or break_node in getattr("},{"lineNumber":279,"author":{"gitId":"-"},"content":"        parent, \"orelse\", []"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        break_node \u003d parent"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        parent \u003d parent.parent"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        if parent is None:"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            break"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    return parent"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"def _loop_exits_early(loop):"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    Returns true if a loop may ends up in a break statement."},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    Args:"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        loop (astroid.For, astroid.While): the loop node inspected."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    Returns:"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        bool: True if the loop may ends up in a break statement, False otherwise."},{"lineNumber":297,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    loop_nodes \u003d (astroid.For, astroid.While)"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    definition_nodes \u003d (astroid.FunctionDef, astroid.ClassDef)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    inner_loop_nodes \u003d ["},{"lineNumber":301,"author":{"gitId":"-"},"content":"        _node"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        for _node in loop.nodes_of_class(loop_nodes, skip_klass\u003ddefinition_nodes)"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        if _node !\u003d loop"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    return any("},{"lineNumber":306,"author":{"gitId":"-"},"content":"        _node"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        for _node in loop.nodes_of_class(astroid.Break, skip_klass\u003ddefinition_nodes)"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        if _get_break_loop_node(_node) not in inner_loop_nodes"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"def _is_multi_naming_match(match, node_type, confidence):"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":314,"author":{"gitId":"-"},"content":"        match is not None"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        and match.lastgroup is not None"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        and match.lastgroup not in EXEMPT_NAME_CATEGORIES"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        and (node_type !\u003d \"method\" or confidence !\u003d interfaces.INFERENCE_FAILURE)"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"BUILTIN_PROPERTY \u003d \"builtins.property\""},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"def _get_properties(config):"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    \"\"\"Returns a tuple of property classes and names."},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"    Property classes are fully qualified, such as \u0027abc.abstractproperty\u0027 and"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    property names are the actual names, such as \u0027abstract_property\u0027."},{"lineNumber":329,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    property_classes \u003d {BUILTIN_PROPERTY}"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    property_names \u003d set()  # Not returning \u0027property\u0027, it has its own check."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    if config is not None:"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        property_classes.update(config.property_classes)"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        property_names.update("},{"lineNumber":335,"author":{"gitId":"-"},"content":"            prop.rsplit(\".\", 1)[-1] for prop in config.property_classes"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    return property_classes, property_names"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"def _determine_function_name_type(node: astroid.FunctionDef, config\u003dNone):"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \"\"\"Determine the name type whose regex the a function\u0027s name should match."},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"    :param node: A function node."},{"lineNumber":344,"author":{"gitId":"-"},"content":"    :param config: Configuration from which to pull additional property classes."},{"lineNumber":345,"author":{"gitId":"-"},"content":"    :type config: :class:`optparse.Values`"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    :returns: One of (\u0027function\u0027, \u0027method\u0027, \u0027attr\u0027)"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    :rtype: str"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":350,"author":{"gitId":"-"},"content":"    property_classes, property_names \u003d _get_properties(config)"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    if not node.is_method():"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        return \"function\""},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    if is_property_setter(node) or is_property_deleter(node):"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        # If the function is decorated using the prop_method.{setter,getter}"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        # form, treat it like an attribute as well."},{"lineNumber":357,"author":{"gitId":"-"},"content":"        return \"attr\""},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"    if node.decorators:"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        decorators \u003d node.decorators.nodes"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        decorators \u003d []"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    for decorator in decorators:"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        # If the function is a property (decorated with @property"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        # or @abc.abstractproperty), the name type is \u0027attr\u0027."},{"lineNumber":366,"author":{"gitId":"-"},"content":"        if isinstance(decorator, astroid.Name) or ("},{"lineNumber":367,"author":{"gitId":"-"},"content":"            isinstance(decorator, astroid.Attribute)"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            and decorator.attrname in property_names"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            inferred \u003d utils.safe_infer(decorator)"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":372,"author":{"gitId":"-"},"content":"                inferred"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                and hasattr(inferred, \"qname\")"},{"lineNumber":374,"author":{"gitId":"-"},"content":"                and inferred.qname() in property_classes"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                return \"attr\""},{"lineNumber":377,"author":{"gitId":"-"},"content":"    return \"method\""},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"def _has_abstract_methods(node):"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":382,"author":{"gitId":"-"},"content":"    Determine if the given `node` has abstract methods."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    The methods should be made abstract by decorating them"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    with `abc` decorators."},{"lineNumber":386,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":387,"author":{"gitId":"-"},"content":"    return len(utils.unimplemented_abstract_methods(node)) \u003e 0"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"def report_by_type_stats(sect, stats, old_stats):"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    \"\"\"make a report of"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"    * percentage of different types documented"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    * percentage of different types with a bad name"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":396,"author":{"gitId":"-"},"content":"    # percentage of different types documented and/or with a bad name"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    nice_stats \u003d {}"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    for node_type in (\"module\", \"class\", \"method\", \"function\"):"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            total \u003d stats[node_type]"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        except KeyError as e:"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            raise exceptions.EmptyReportError() from e"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        nice_stats[node_type] \u003d {}"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        if total !\u003d 0:"},{"lineNumber":405,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":406,"author":{"gitId":"-"},"content":"                documented \u003d total - stats[\"undocumented_\" + node_type]"},{"lineNumber":407,"author":{"gitId":"-"},"content":"                percent \u003d (documented * 100.0) / total"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                nice_stats[node_type][\"percent_documented\"] \u003d \"%.2f\" % percent"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            except KeyError:"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                nice_stats[node_type][\"percent_documented\"] \u003d \"NC\""},{"lineNumber":411,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                percent \u003d (stats[\"badname_\" + node_type] * 100.0) / total"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                nice_stats[node_type][\"percent_badname\"] \u003d \"%.2f\" % percent"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            except KeyError:"},{"lineNumber":415,"author":{"gitId":"-"},"content":"                nice_stats[node_type][\"percent_badname\"] \u003d \"NC\""},{"lineNumber":416,"author":{"gitId":"-"},"content":"    lines \u003d (\"type\", \"number\", \"old number\", \"difference\", \"%documented\", \"%badname\")"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    for node_type in (\"module\", \"class\", \"method\", \"function\"):"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        new \u003d stats[node_type]"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        old \u003d old_stats.get(node_type, None)"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        if old is not None:"},{"lineNumber":421,"author":{"gitId":"-"},"content":"            diff_str \u003d lint_utils.diff_string(old, new)"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            old, diff_str \u003d \"NC\", \"NC\""},{"lineNumber":424,"author":{"gitId":"-"},"content":"        lines +\u003d ("},{"lineNumber":425,"author":{"gitId":"-"},"content":"            node_type,"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            str(new),"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            str(old),"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            diff_str,"},{"lineNumber":429,"author":{"gitId":"-"},"content":"            nice_stats[node_type].get(\"percent_documented\", \"0\"),"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            nice_stats[node_type].get(\"percent_badname\", \"0\"),"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    sect.append(reporter_nodes.Table(children\u003dlines, cols\u003d6, rheaders\u003d1))"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"def redefined_by_decorator(node):"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    \"\"\"return True if the object is a method redefined via decorator."},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"    For example:"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        @property"},{"lineNumber":440,"author":{"gitId":"-"},"content":"        def x(self): return self._x"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        @x.setter"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        def x(self, value): self._x \u003d value"},{"lineNumber":443,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":444,"author":{"gitId":"-"},"content":"    if node.decorators:"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        for decorator in node.decorators.nodes:"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":447,"author":{"gitId":"-"},"content":"                isinstance(decorator, astroid.Attribute)"},{"lineNumber":448,"author":{"gitId":"-"},"content":"                and getattr(decorator.expr, \"name\", None) \u003d\u003d node.name"},{"lineNumber":449,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"class _BasicChecker(checkers.BaseChecker):"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    __implements__ \u003d interfaces.IAstroidChecker"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    name \u003d \"basic\""},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"class BasicErrorChecker(_BasicChecker):"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        \"E0100\": ("},{"lineNumber":462,"author":{"gitId":"-"},"content":"            \"__init__ method is a generator\","},{"lineNumber":463,"author":{"gitId":"-"},"content":"            \"init-is-generator\","},{"lineNumber":464,"author":{"gitId":"-"},"content":"            \"Used when the special class method __init__ is turned into a \""},{"lineNumber":465,"author":{"gitId":"-"},"content":"            \"generator by a yield in its body.\","},{"lineNumber":466,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        \"E0101\": ("},{"lineNumber":468,"author":{"gitId":"-"},"content":"            \"Explicit return in __init__\","},{"lineNumber":469,"author":{"gitId":"-"},"content":"            \"return-in-init\","},{"lineNumber":470,"author":{"gitId":"-"},"content":"            \"Used when the special class method __init__ has an explicit \""},{"lineNumber":471,"author":{"gitId":"-"},"content":"            \"return value.\","},{"lineNumber":472,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        \"E0102\": ("},{"lineNumber":474,"author":{"gitId":"-"},"content":"            \"%s already defined line %s\","},{"lineNumber":475,"author":{"gitId":"-"},"content":"            \"function-redefined\","},{"lineNumber":476,"author":{"gitId":"-"},"content":"            \"Used when a function / class / method is redefined.\","},{"lineNumber":477,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        \"E0103\": ("},{"lineNumber":479,"author":{"gitId":"-"},"content":"            \"%r not properly in loop\","},{"lineNumber":480,"author":{"gitId":"-"},"content":"            \"not-in-loop\","},{"lineNumber":481,"author":{"gitId":"-"},"content":"            \"Used when break or continue keywords are used outside a loop.\","},{"lineNumber":482,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        \"E0104\": ("},{"lineNumber":484,"author":{"gitId":"-"},"content":"            \"Return outside function\","},{"lineNumber":485,"author":{"gitId":"-"},"content":"            \"return-outside-function\","},{"lineNumber":486,"author":{"gitId":"-"},"content":"            \u0027Used when a \"return\" statement is found outside a function or method.\u0027,"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        \"E0105\": ("},{"lineNumber":489,"author":{"gitId":"-"},"content":"            \"Yield outside function\","},{"lineNumber":490,"author":{"gitId":"-"},"content":"            \"yield-outside-function\","},{"lineNumber":491,"author":{"gitId":"-"},"content":"            \u0027Used when a \"yield\" statement is found outside a function or method.\u0027,"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        \"E0106\": ("},{"lineNumber":494,"author":{"gitId":"-"},"content":"            \"Return with argument inside generator\","},{"lineNumber":495,"author":{"gitId":"-"},"content":"            \"return-arg-in-generator\","},{"lineNumber":496,"author":{"gitId":"-"},"content":"            \u0027Used when a \"return\" statement with an argument is found \u0027"},{"lineNumber":497,"author":{"gitId":"-"},"content":"            \"outside in a generator function or method (e.g. with some \""},{"lineNumber":498,"author":{"gitId":"-"},"content":"            \u0027\"yield\" statements).\u0027,"},{"lineNumber":499,"author":{"gitId":"-"},"content":"            {\"maxversion\": (3, 3)},"},{"lineNumber":500,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        \"E0107\": ("},{"lineNumber":502,"author":{"gitId":"-"},"content":"            \"Use of the non-existent %s operator\","},{"lineNumber":503,"author":{"gitId":"-"},"content":"            \"nonexistent-operator\","},{"lineNumber":504,"author":{"gitId":"-"},"content":"            \"Used when you attempt to use the C-style pre-increment or \""},{"lineNumber":505,"author":{"gitId":"-"},"content":"            \"pre-decrement operator -- and ++, which doesn\u0027t exist in Python.\","},{"lineNumber":506,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        \"E0108\": ("},{"lineNumber":508,"author":{"gitId":"-"},"content":"            \"Duplicate argument name %s in function definition\","},{"lineNumber":509,"author":{"gitId":"-"},"content":"            \"duplicate-argument-name\","},{"lineNumber":510,"author":{"gitId":"-"},"content":"            \"Duplicate argument names in function definitions are syntax errors.\","},{"lineNumber":511,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        \"E0110\": ("},{"lineNumber":513,"author":{"gitId":"-"},"content":"            \"Abstract class %r with abstract methods instantiated\","},{"lineNumber":514,"author":{"gitId":"-"},"content":"            \"abstract-class-instantiated\","},{"lineNumber":515,"author":{"gitId":"-"},"content":"            \"Used when an abstract class with `abc.ABCMeta` as metaclass \""},{"lineNumber":516,"author":{"gitId":"-"},"content":"            \"has abstract methods and is instantiated.\","},{"lineNumber":517,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        \"W0120\": ("},{"lineNumber":519,"author":{"gitId":"-"},"content":"            \"Else clause on loop without a break statement\","},{"lineNumber":520,"author":{"gitId":"-"},"content":"            \"useless-else-on-loop\","},{"lineNumber":521,"author":{"gitId":"-"},"content":"            \"Loops should only have an else clause if they can exit early \""},{"lineNumber":522,"author":{"gitId":"-"},"content":"            \"with a break statement, otherwise the statements under else \""},{"lineNumber":523,"author":{"gitId":"-"},"content":"            \"should be on the same scope as the loop itself.\","},{"lineNumber":524,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        \"E0112\": ("},{"lineNumber":526,"author":{"gitId":"-"},"content":"            \"More than one starred expression in assignment\","},{"lineNumber":527,"author":{"gitId":"-"},"content":"            \"too-many-star-expressions\","},{"lineNumber":528,"author":{"gitId":"-"},"content":"            \"Emitted when there are more than one starred \""},{"lineNumber":529,"author":{"gitId":"-"},"content":"            \"expressions (`*x`) in an assignment. This is a SyntaxError.\","},{"lineNumber":530,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        \"E0113\": ("},{"lineNumber":532,"author":{"gitId":"-"},"content":"            \"Starred assignment target must be in a list or tuple\","},{"lineNumber":533,"author":{"gitId":"-"},"content":"            \"invalid-star-assignment-target\","},{"lineNumber":534,"author":{"gitId":"-"},"content":"            \"Emitted when a star expression is used as a starred assignment target.\","},{"lineNumber":535,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        \"E0114\": ("},{"lineNumber":537,"author":{"gitId":"-"},"content":"            \"Can use starred expression only in assignment target\","},{"lineNumber":538,"author":{"gitId":"-"},"content":"            \"star-needs-assignment-target\","},{"lineNumber":539,"author":{"gitId":"-"},"content":"            \"Emitted when a star expression is not used in an assignment target.\","},{"lineNumber":540,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        \"E0115\": ("},{"lineNumber":542,"author":{"gitId":"-"},"content":"            \"Name %r is nonlocal and global\","},{"lineNumber":543,"author":{"gitId":"-"},"content":"            \"nonlocal-and-global\","},{"lineNumber":544,"author":{"gitId":"-"},"content":"            \"Emitted when a name is both nonlocal and global.\","},{"lineNumber":545,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        \"E0116\": ("},{"lineNumber":547,"author":{"gitId":"-"},"content":"            \"\u0027continue\u0027 not supported inside \u0027finally\u0027 clause\","},{"lineNumber":548,"author":{"gitId":"-"},"content":"            \"continue-in-finally\","},{"lineNumber":549,"author":{"gitId":"-"},"content":"            \"Emitted when the `continue` keyword is found \""},{"lineNumber":550,"author":{"gitId":"-"},"content":"            \"inside a finally clause, which is a SyntaxError.\","},{"lineNumber":551,"author":{"gitId":"-"},"content":"            {\"maxversion\": (3, 8)},"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        \"E0117\": ("},{"lineNumber":554,"author":{"gitId":"-"},"content":"            \"nonlocal name %s found without binding\","},{"lineNumber":555,"author":{"gitId":"-"},"content":"            \"nonlocal-without-binding\","},{"lineNumber":556,"author":{"gitId":"-"},"content":"            \"Emitted when a nonlocal variable does not have an attached \""},{"lineNumber":557,"author":{"gitId":"-"},"content":"            \"name somewhere in the parent scopes\","},{"lineNumber":558,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        \"E0118\": ("},{"lineNumber":560,"author":{"gitId":"-"},"content":"            \"Name %r is used prior to global declaration\","},{"lineNumber":561,"author":{"gitId":"-"},"content":"            \"used-prior-global-declaration\","},{"lineNumber":562,"author":{"gitId":"-"},"content":"            \"Emitted when a name is used prior a global declaration, \""},{"lineNumber":563,"author":{"gitId":"-"},"content":"            \"which results in an error since Python 3.6.\","},{"lineNumber":564,"author":{"gitId":"-"},"content":"            {\"minversion\": (3, 6)},"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":566,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"function-redefined\")"},{"lineNumber":569,"author":{"gitId":"-"},"content":"    def visit_classdef(self, node):"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        self._check_redefinition(\"class\", node)"},{"lineNumber":571,"author":{"gitId":"-"},"content":""},{"lineNumber":572,"author":{"gitId":"-"},"content":"    def _too_many_starred_for_tuple(self, assign_tuple):"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        starred_count \u003d 0"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        for elem in assign_tuple.itered():"},{"lineNumber":575,"author":{"gitId":"-"},"content":"            if isinstance(elem, astroid.Tuple):"},{"lineNumber":576,"author":{"gitId":"-"},"content":"                return self._too_many_starred_for_tuple(elem)"},{"lineNumber":577,"author":{"gitId":"-"},"content":"            if isinstance(elem, astroid.Starred):"},{"lineNumber":578,"author":{"gitId":"-"},"content":"                starred_count +\u003d 1"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        return starred_count \u003e 1"},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"too-many-star-expressions\", \"invalid-star-assignment-target\")"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    def visit_assign(self, node):"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        # Check *a, *b \u003d ..."},{"lineNumber":584,"author":{"gitId":"-"},"content":"        assign_target \u003d node.targets[0]"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        # Check *a \u003d b"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        if isinstance(node.targets[0], astroid.Starred):"},{"lineNumber":587,"author":{"gitId":"-"},"content":"            self.add_message(\"invalid-star-assignment-target\", node\u003dnode)"},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"-"},"content":"        if not isinstance(assign_target, astroid.Tuple):"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        if self._too_many_starred_for_tuple(assign_target):"},{"lineNumber":592,"author":{"gitId":"-"},"content":"            self.add_message(\"too-many-star-expressions\", node\u003dnode)"},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"star-needs-assignment-target\")"},{"lineNumber":595,"author":{"gitId":"-"},"content":"    def visit_starred(self, node):"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        \"\"\"Check that a Starred expression is used in an assignment target.\"\"\""},{"lineNumber":597,"author":{"gitId":"-"},"content":"        if isinstance(node.parent, astroid.Call):"},{"lineNumber":598,"author":{"gitId":"-"},"content":"            # f(*args) is converted to Call(args\u003d[Starred]), so ignore"},{"lineNumber":599,"author":{"gitId":"-"},"content":"            # them for this check."},{"lineNumber":600,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        if isinstance("},{"lineNumber":602,"author":{"gitId":"-"},"content":"            node.parent, (astroid.List, astroid.Tuple, astroid.Set, astroid.Dict)"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":604,"author":{"gitId":"-"},"content":"            # PEP 448 unpacking."},{"lineNumber":605,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"        stmt \u003d node.statement()"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        if not isinstance(stmt, astroid.Assign):"},{"lineNumber":609,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":610,"author":{"gitId":"-"},"content":""},{"lineNumber":611,"author":{"gitId":"-"},"content":"        if stmt.value is node or stmt.value.parent_of(node):"},{"lineNumber":612,"author":{"gitId":"-"},"content":"            self.add_message(\"star-needs-assignment-target\", node\u003dnode)"},{"lineNumber":613,"author":{"gitId":"-"},"content":""},{"lineNumber":614,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":615,"author":{"gitId":"-"},"content":"        \"init-is-generator\","},{"lineNumber":616,"author":{"gitId":"-"},"content":"        \"return-in-init\","},{"lineNumber":617,"author":{"gitId":"-"},"content":"        \"function-redefined\","},{"lineNumber":618,"author":{"gitId":"-"},"content":"        \"return-arg-in-generator\","},{"lineNumber":619,"author":{"gitId":"-"},"content":"        \"duplicate-argument-name\","},{"lineNumber":620,"author":{"gitId":"-"},"content":"        \"nonlocal-and-global\","},{"lineNumber":621,"author":{"gitId":"-"},"content":"        \"used-prior-global-declaration\","},{"lineNumber":622,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":623,"author":{"gitId":"-"},"content":"    def visit_functiondef(self, node):"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        self._check_nonlocal_and_global(node)"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        self._check_name_used_prior_global(node)"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        if not redefined_by_decorator("},{"lineNumber":627,"author":{"gitId":"-"},"content":"            node"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        ) and not utils.is_registered_in_singledispatch_function(node):"},{"lineNumber":629,"author":{"gitId":"-"},"content":"            self._check_redefinition(node.is_method() and \"method\" or \"function\", node)"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        # checks for max returns, branch, return in __init__"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        returns \u003d node.nodes_of_class("},{"lineNumber":632,"author":{"gitId":"-"},"content":"            astroid.Return, skip_klass\u003d(astroid.FunctionDef, astroid.ClassDef)"},{"lineNumber":633,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        if node.is_method() and node.name \u003d\u003d \"__init__\":"},{"lineNumber":635,"author":{"gitId":"-"},"content":"            if node.is_generator():"},{"lineNumber":636,"author":{"gitId":"-"},"content":"                self.add_message(\"init-is-generator\", node\u003dnode)"},{"lineNumber":637,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":638,"author":{"gitId":"-"},"content":"                values \u003d [r.value for r in returns]"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                # Are we returning anything but None from constructors"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                if any(v for v in values if not utils.is_none(v)):"},{"lineNumber":641,"author":{"gitId":"-"},"content":"                    self.add_message(\"return-in-init\", node\u003dnode)"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        # Check for duplicate names by clustering args with same name for detailed report"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        arg_clusters \u003d collections.defaultdict(list)"},{"lineNumber":644,"author":{"gitId":"-"},"content":"        arguments \u003d filter(None, [node.args.args, node.args.kwonlyargs])"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"-"},"content":"        for arg in itertools.chain.from_iterable(arguments):"},{"lineNumber":647,"author":{"gitId":"-"},"content":"            arg_clusters[arg.name].append(arg)"},{"lineNumber":648,"author":{"gitId":"-"},"content":""},{"lineNumber":649,"author":{"gitId":"-"},"content":"        # provide detailed report about each repeated argument"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        for argument_duplicates in arg_clusters.values():"},{"lineNumber":651,"author":{"gitId":"-"},"content":"            if len(argument_duplicates) !\u003d 1:"},{"lineNumber":652,"author":{"gitId":"-"},"content":"                for argument in argument_duplicates:"},{"lineNumber":653,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":654,"author":{"gitId":"-"},"content":"                        \"duplicate-argument-name\","},{"lineNumber":655,"author":{"gitId":"-"},"content":"                        line\u003dargument.lineno,"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                        node\u003dargument,"},{"lineNumber":657,"author":{"gitId":"-"},"content":"                        args\u003d(argument.name,),"},{"lineNumber":658,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":659,"author":{"gitId":"-"},"content":""},{"lineNumber":660,"author":{"gitId":"-"},"content":"    visit_asyncfunctiondef \u003d visit_functiondef"},{"lineNumber":661,"author":{"gitId":"-"},"content":""},{"lineNumber":662,"author":{"gitId":"-"},"content":"    def _check_name_used_prior_global(self, node):"},{"lineNumber":663,"author":{"gitId":"-"},"content":""},{"lineNumber":664,"author":{"gitId":"-"},"content":"        scope_globals \u003d {"},{"lineNumber":665,"author":{"gitId":"-"},"content":"            name: child"},{"lineNumber":666,"author":{"gitId":"-"},"content":"            for child in node.nodes_of_class(astroid.Global)"},{"lineNumber":667,"author":{"gitId":"-"},"content":"            for name in child.names"},{"lineNumber":668,"author":{"gitId":"-"},"content":"            if child.scope() is node"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":670,"author":{"gitId":"-"},"content":""},{"lineNumber":671,"author":{"gitId":"-"},"content":"        if not scope_globals:"},{"lineNumber":672,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":673,"author":{"gitId":"-"},"content":""},{"lineNumber":674,"author":{"gitId":"-"},"content":"        for node_name in node.nodes_of_class(astroid.Name):"},{"lineNumber":675,"author":{"gitId":"-"},"content":"            if node_name.scope() is not node:"},{"lineNumber":676,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"            name \u003d node_name.name"},{"lineNumber":679,"author":{"gitId":"-"},"content":"            corresponding_global \u003d scope_globals.get(name)"},{"lineNumber":680,"author":{"gitId":"-"},"content":"            if not corresponding_global:"},{"lineNumber":681,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":682,"author":{"gitId":"-"},"content":""},{"lineNumber":683,"author":{"gitId":"-"},"content":"            global_lineno \u003d corresponding_global.fromlineno"},{"lineNumber":684,"author":{"gitId":"-"},"content":"            if global_lineno and global_lineno \u003e node_name.fromlineno:"},{"lineNumber":685,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":686,"author":{"gitId":"-"},"content":"                    \"used-prior-global-declaration\", node\u003dnode_name, args\u003d(name,)"},{"lineNumber":687,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"    def _check_nonlocal_and_global(self, node):"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        \"\"\"Check that a name is both nonlocal and global.\"\"\""},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":"        def same_scope(current):"},{"lineNumber":693,"author":{"gitId":"-"},"content":"            return current.scope() is node"},{"lineNumber":694,"author":{"gitId":"-"},"content":""},{"lineNumber":695,"author":{"gitId":"-"},"content":"        from_iter \u003d itertools.chain.from_iterable"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        nonlocals \u003d set("},{"lineNumber":697,"author":{"gitId":"-"},"content":"            from_iter("},{"lineNumber":698,"author":{"gitId":"-"},"content":"                child.names"},{"lineNumber":699,"author":{"gitId":"-"},"content":"                for child in node.nodes_of_class(astroid.Nonlocal)"},{"lineNumber":700,"author":{"gitId":"-"},"content":"                if same_scope(child)"},{"lineNumber":701,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"        if not nonlocals:"},{"lineNumber":705,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":706,"author":{"gitId":"-"},"content":""},{"lineNumber":707,"author":{"gitId":"-"},"content":"        global_vars \u003d set("},{"lineNumber":708,"author":{"gitId":"-"},"content":"            from_iter("},{"lineNumber":709,"author":{"gitId":"-"},"content":"                child.names"},{"lineNumber":710,"author":{"gitId":"-"},"content":"                for child in node.nodes_of_class(astroid.Global)"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                if same_scope(child)"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":713,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":714,"author":{"gitId":"-"},"content":"        for name in nonlocals.intersection(global_vars):"},{"lineNumber":715,"author":{"gitId":"-"},"content":"            self.add_message(\"nonlocal-and-global\", args\u003d(name,), node\u003dnode)"},{"lineNumber":716,"author":{"gitId":"-"},"content":""},{"lineNumber":717,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"return-outside-function\")"},{"lineNumber":718,"author":{"gitId":"-"},"content":"    def visit_return(self, node):"},{"lineNumber":719,"author":{"gitId":"-"},"content":"        if not isinstance(node.frame(), astroid.FunctionDef):"},{"lineNumber":720,"author":{"gitId":"-"},"content":"            self.add_message(\"return-outside-function\", node\u003dnode)"},{"lineNumber":721,"author":{"gitId":"-"},"content":""},{"lineNumber":722,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"yield-outside-function\")"},{"lineNumber":723,"author":{"gitId":"-"},"content":"    def visit_yield(self, node):"},{"lineNumber":724,"author":{"gitId":"-"},"content":"        self._check_yield_outside_func(node)"},{"lineNumber":725,"author":{"gitId":"-"},"content":""},{"lineNumber":726,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"yield-outside-function\")"},{"lineNumber":727,"author":{"gitId":"-"},"content":"    def visit_yieldfrom(self, node):"},{"lineNumber":728,"author":{"gitId":"-"},"content":"        self._check_yield_outside_func(node)"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"not-in-loop\", \"continue-in-finally\")"},{"lineNumber":731,"author":{"gitId":"-"},"content":"    def visit_continue(self, node):"},{"lineNumber":732,"author":{"gitId":"-"},"content":"        self._check_in_loop(node, \"continue\")"},{"lineNumber":733,"author":{"gitId":"-"},"content":""},{"lineNumber":734,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"not-in-loop\")"},{"lineNumber":735,"author":{"gitId":"-"},"content":"    def visit_break(self, node):"},{"lineNumber":736,"author":{"gitId":"-"},"content":"        self._check_in_loop(node, \"break\")"},{"lineNumber":737,"author":{"gitId":"-"},"content":""},{"lineNumber":738,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"useless-else-on-loop\")"},{"lineNumber":739,"author":{"gitId":"-"},"content":"    def visit_for(self, node):"},{"lineNumber":740,"author":{"gitId":"-"},"content":"        self._check_else_on_loop(node)"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"useless-else-on-loop\")"},{"lineNumber":743,"author":{"gitId":"-"},"content":"    def visit_while(self, node):"},{"lineNumber":744,"author":{"gitId":"-"},"content":"        self._check_else_on_loop(node)"},{"lineNumber":745,"author":{"gitId":"-"},"content":""},{"lineNumber":746,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"nonexistent-operator\")"},{"lineNumber":747,"author":{"gitId":"-"},"content":"    def visit_unaryop(self, node):"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        \"\"\"check use of the non-existent ++ and -- operator operator\"\"\""},{"lineNumber":749,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":750,"author":{"gitId":"-"},"content":"            (node.op in \"+-\")"},{"lineNumber":751,"author":{"gitId":"-"},"content":"            and isinstance(node.operand, astroid.UnaryOp)"},{"lineNumber":752,"author":{"gitId":"-"},"content":"            and (node.operand.op \u003d\u003d node.op)"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":754,"author":{"gitId":"-"},"content":"            self.add_message(\"nonexistent-operator\", node\u003dnode, args\u003dnode.op * 2)"},{"lineNumber":755,"author":{"gitId":"-"},"content":""},{"lineNumber":756,"author":{"gitId":"-"},"content":"    def _check_nonlocal_without_binding(self, node, name):"},{"lineNumber":757,"author":{"gitId":"-"},"content":"        current_scope \u003d node.scope()"},{"lineNumber":758,"author":{"gitId":"-"},"content":"        while True:"},{"lineNumber":759,"author":{"gitId":"-"},"content":"            if current_scope.parent is None:"},{"lineNumber":760,"author":{"gitId":"-"},"content":"                break"},{"lineNumber":761,"author":{"gitId":"-"},"content":""},{"lineNumber":762,"author":{"gitId":"-"},"content":"            if not isinstance(current_scope, (astroid.ClassDef, astroid.FunctionDef)):"},{"lineNumber":763,"author":{"gitId":"-"},"content":"                self.add_message(\"nonlocal-without-binding\", args\u003d(name,), node\u003dnode)"},{"lineNumber":764,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":765,"author":{"gitId":"-"},"content":""},{"lineNumber":766,"author":{"gitId":"-"},"content":"            if name not in current_scope.locals:"},{"lineNumber":767,"author":{"gitId":"-"},"content":"                current_scope \u003d current_scope.parent.scope()"},{"lineNumber":768,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":769,"author":{"gitId":"-"},"content":""},{"lineNumber":770,"author":{"gitId":"-"},"content":"            # Okay, found it."},{"lineNumber":771,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"        if not isinstance(current_scope, astroid.FunctionDef):"},{"lineNumber":774,"author":{"gitId":"-"},"content":"            self.add_message(\"nonlocal-without-binding\", args\u003d(name,), node\u003dnode)"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"nonlocal-without-binding\")"},{"lineNumber":777,"author":{"gitId":"-"},"content":"    def visit_nonlocal(self, node):"},{"lineNumber":778,"author":{"gitId":"-"},"content":"        for name in node.names:"},{"lineNumber":779,"author":{"gitId":"-"},"content":"            self._check_nonlocal_without_binding(node, name)"},{"lineNumber":780,"author":{"gitId":"-"},"content":""},{"lineNumber":781,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"abstract-class-instantiated\")"},{"lineNumber":782,"author":{"gitId":"-"},"content":"    def visit_call(self, node):"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        \"\"\"Check instantiating abstract class with"},{"lineNumber":784,"author":{"gitId":"-"},"content":"        abc.ABCMeta as metaclass."},{"lineNumber":785,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":786,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":787,"author":{"gitId":"-"},"content":"            for inferred in node.func.infer():"},{"lineNumber":788,"author":{"gitId":"-"},"content":"                self._check_inferred_class_is_abstract(inferred, node)"},{"lineNumber":789,"author":{"gitId":"-"},"content":"        except astroid.InferenceError:"},{"lineNumber":790,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":791,"author":{"gitId":"-"},"content":""},{"lineNumber":792,"author":{"gitId":"-"},"content":"    def _check_inferred_class_is_abstract(self, inferred, node):"},{"lineNumber":793,"author":{"gitId":"-"},"content":"        if not isinstance(inferred, astroid.ClassDef):"},{"lineNumber":794,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":795,"author":{"gitId":"-"},"content":""},{"lineNumber":796,"author":{"gitId":"-"},"content":"        klass \u003d utils.node_frame_class(node)"},{"lineNumber":797,"author":{"gitId":"-"},"content":"        if klass is inferred:"},{"lineNumber":798,"author":{"gitId":"-"},"content":"            # Don\u0027t emit the warning if the class is instantiated"},{"lineNumber":799,"author":{"gitId":"-"},"content":"            # in its own body or if the call is not an instance"},{"lineNumber":800,"author":{"gitId":"-"},"content":"            # creation. If the class is instantiated into its own"},{"lineNumber":801,"author":{"gitId":"-"},"content":"            # body, we\u0027re expecting that it knows what it is doing."},{"lineNumber":802,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":803,"author":{"gitId":"-"},"content":""},{"lineNumber":804,"author":{"gitId":"-"},"content":"        # __init__ was called"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        abstract_methods \u003d _has_abstract_methods(inferred)"},{"lineNumber":806,"author":{"gitId":"-"},"content":""},{"lineNumber":807,"author":{"gitId":"-"},"content":"        if not abstract_methods:"},{"lineNumber":808,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"        metaclass \u003d inferred.metaclass()"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"        if metaclass is None:"},{"lineNumber":813,"author":{"gitId":"-"},"content":"            # Python 3.4 has `abc.ABC`, which won\u0027t be detected"},{"lineNumber":814,"author":{"gitId":"-"},"content":"            # by ClassNode.metaclass()"},{"lineNumber":815,"author":{"gitId":"-"},"content":"            for ancestor in inferred.ancestors():"},{"lineNumber":816,"author":{"gitId":"-"},"content":"                if ancestor.qname() \u003d\u003d \"abc.ABC\":"},{"lineNumber":817,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":818,"author":{"gitId":"-"},"content":"                        \"abstract-class-instantiated\", args\u003d(inferred.name,), node\u003dnode"},{"lineNumber":819,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":820,"author":{"gitId":"-"},"content":"                    break"},{"lineNumber":821,"author":{"gitId":"-"},"content":""},{"lineNumber":822,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":823,"author":{"gitId":"-"},"content":""},{"lineNumber":824,"author":{"gitId":"-"},"content":"        if metaclass.qname() in ABC_METACLASSES:"},{"lineNumber":825,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":826,"author":{"gitId":"-"},"content":"                \"abstract-class-instantiated\", args\u003d(inferred.name,), node\u003dnode"},{"lineNumber":827,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":828,"author":{"gitId":"-"},"content":""},{"lineNumber":829,"author":{"gitId":"-"},"content":"    def _check_yield_outside_func(self, node):"},{"lineNumber":830,"author":{"gitId":"-"},"content":"        if not isinstance(node.frame(), (astroid.FunctionDef, astroid.Lambda)):"},{"lineNumber":831,"author":{"gitId":"-"},"content":"            self.add_message(\"yield-outside-function\", node\u003dnode)"},{"lineNumber":832,"author":{"gitId":"-"},"content":""},{"lineNumber":833,"author":{"gitId":"-"},"content":"    def _check_else_on_loop(self, node):"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        \"\"\"Check that any loop with an else clause has a break statement.\"\"\""},{"lineNumber":835,"author":{"gitId":"-"},"content":"        if node.orelse and not _loop_exits_early(node):"},{"lineNumber":836,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":837,"author":{"gitId":"-"},"content":"                \"useless-else-on-loop\","},{"lineNumber":838,"author":{"gitId":"-"},"content":"                node\u003dnode,"},{"lineNumber":839,"author":{"gitId":"-"},"content":"                # This is not optimal, but the line previous"},{"lineNumber":840,"author":{"gitId":"-"},"content":"                # to the first statement in the else clause"},{"lineNumber":841,"author":{"gitId":"-"},"content":"                # will usually be the one that contains the else:."},{"lineNumber":842,"author":{"gitId":"-"},"content":"                line\u003dnode.orelse[0].lineno - 1,"},{"lineNumber":843,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":844,"author":{"gitId":"-"},"content":""},{"lineNumber":845,"author":{"gitId":"-"},"content":"    def _check_in_loop(self, node, node_name):"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        \"\"\"check that a node is inside a for or while loop\"\"\""},{"lineNumber":847,"author":{"gitId":"-"},"content":"        _node \u003d node.parent"},{"lineNumber":848,"author":{"gitId":"-"},"content":"        while _node:"},{"lineNumber":849,"author":{"gitId":"-"},"content":"            if isinstance(_node, (astroid.For, astroid.While)):"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                if node not in _node.orelse:"},{"lineNumber":851,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":852,"author":{"gitId":"-"},"content":""},{"lineNumber":853,"author":{"gitId":"-"},"content":"            if isinstance(_node, (astroid.ClassDef, astroid.FunctionDef)):"},{"lineNumber":854,"author":{"gitId":"-"},"content":"                break"},{"lineNumber":855,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":856,"author":{"gitId":"-"},"content":"                isinstance(_node, astroid.TryFinally)"},{"lineNumber":857,"author":{"gitId":"-"},"content":"                and node in _node.finalbody"},{"lineNumber":858,"author":{"gitId":"-"},"content":"                and isinstance(node, astroid.Continue)"},{"lineNumber":859,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":860,"author":{"gitId":"-"},"content":"                self.add_message(\"continue-in-finally\", node\u003dnode)"},{"lineNumber":861,"author":{"gitId":"-"},"content":""},{"lineNumber":862,"author":{"gitId":"-"},"content":"            _node \u003d _node.parent"},{"lineNumber":863,"author":{"gitId":"-"},"content":""},{"lineNumber":864,"author":{"gitId":"-"},"content":"        self.add_message(\"not-in-loop\", node\u003dnode, args\u003dnode_name)"},{"lineNumber":865,"author":{"gitId":"-"},"content":""},{"lineNumber":866,"author":{"gitId":"-"},"content":"    def _check_redefinition(self, redeftype, node):"},{"lineNumber":867,"author":{"gitId":"-"},"content":"        \"\"\"check for redefinition of a function / method / class name\"\"\""},{"lineNumber":868,"author":{"gitId":"-"},"content":"        parent_frame \u003d node.parent.frame()"},{"lineNumber":869,"author":{"gitId":"-"},"content":""},{"lineNumber":870,"author":{"gitId":"-"},"content":"        # Ignore function stubs created for type information"},{"lineNumber":871,"author":{"gitId":"-"},"content":"        redefinitions \u003d parent_frame.locals[node.name]"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        defined_self \u003d next("},{"lineNumber":873,"author":{"gitId":"-"},"content":"            (local for local in redefinitions if not utils.is_overload_stub(local)),"},{"lineNumber":874,"author":{"gitId":"-"},"content":"            node,"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        if defined_self is not node and not astroid.are_exclusive(node, defined_self):"},{"lineNumber":877,"author":{"gitId":"-"},"content":"            # Additional checks for methods which are not considered"},{"lineNumber":878,"author":{"gitId":"-"},"content":"            # redefined, since they are already part of the base API."},{"lineNumber":879,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":880,"author":{"gitId":"-"},"content":"                isinstance(parent_frame, astroid.ClassDef)"},{"lineNumber":881,"author":{"gitId":"-"},"content":"                and node.name in REDEFINABLE_METHODS"},{"lineNumber":882,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":883,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":884,"author":{"gitId":"-"},"content":""},{"lineNumber":885,"author":{"gitId":"-"},"content":"            # Skip typing.overload() functions."},{"lineNumber":886,"author":{"gitId":"-"},"content":"            if utils.is_overload_stub(node):"},{"lineNumber":887,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":888,"author":{"gitId":"-"},"content":""},{"lineNumber":889,"author":{"gitId":"-"},"content":"            # Exempt functions redefined on a condition."},{"lineNumber":890,"author":{"gitId":"-"},"content":"            if isinstance(node.parent, astroid.If):"},{"lineNumber":891,"author":{"gitId":"-"},"content":"                # Exempt \"if not \u003cfunc\u003e\" cases"},{"lineNumber":892,"author":{"gitId":"-"},"content":"                if ("},{"lineNumber":893,"author":{"gitId":"-"},"content":"                    isinstance(node.parent.test, astroid.UnaryOp)"},{"lineNumber":894,"author":{"gitId":"-"},"content":"                    and node.parent.test.op \u003d\u003d \"not\""},{"lineNumber":895,"author":{"gitId":"-"},"content":"                    and isinstance(node.parent.test.operand, astroid.Name)"},{"lineNumber":896,"author":{"gitId":"-"},"content":"                    and node.parent.test.operand.name \u003d\u003d node.name"},{"lineNumber":897,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":898,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":899,"author":{"gitId":"-"},"content":""},{"lineNumber":900,"author":{"gitId":"-"},"content":"                # Exempt \"if \u003cfunc\u003e is not None\" cases"},{"lineNumber":901,"author":{"gitId":"-"},"content":"                # pylint: disable\u003dtoo-many-boolean-expressions"},{"lineNumber":902,"author":{"gitId":"-"},"content":"                if ("},{"lineNumber":903,"author":{"gitId":"-"},"content":"                    isinstance(node.parent.test, astroid.Compare)"},{"lineNumber":904,"author":{"gitId":"-"},"content":"                    and isinstance(node.parent.test.left, astroid.Name)"},{"lineNumber":905,"author":{"gitId":"-"},"content":"                    and node.parent.test.left.name \u003d\u003d node.name"},{"lineNumber":906,"author":{"gitId":"-"},"content":"                    and node.parent.test.ops[0][0] \u003d\u003d \"is\""},{"lineNumber":907,"author":{"gitId":"-"},"content":"                    and isinstance(node.parent.test.ops[0][1], astroid.Const)"},{"lineNumber":908,"author":{"gitId":"-"},"content":"                    and node.parent.test.ops[0][1].value is None"},{"lineNumber":909,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":910,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":911,"author":{"gitId":"-"},"content":""},{"lineNumber":912,"author":{"gitId":"-"},"content":"            # Check if we have forward references for this node."},{"lineNumber":913,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":914,"author":{"gitId":"-"},"content":"                redefinition_index \u003d redefinitions.index(node)"},{"lineNumber":915,"author":{"gitId":"-"},"content":"            except ValueError:"},{"lineNumber":916,"author":{"gitId":"-"},"content":"                pass"},{"lineNumber":917,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":918,"author":{"gitId":"-"},"content":"                for redefinition in redefinitions[:redefinition_index]:"},{"lineNumber":919,"author":{"gitId":"-"},"content":"                    inferred \u003d utils.safe_infer(redefinition)"},{"lineNumber":920,"author":{"gitId":"-"},"content":"                    if ("},{"lineNumber":921,"author":{"gitId":"-"},"content":"                        inferred"},{"lineNumber":922,"author":{"gitId":"-"},"content":"                        and isinstance(inferred, astroid.Instance)"},{"lineNumber":923,"author":{"gitId":"-"},"content":"                        and inferred.qname() \u003d\u003d TYPING_FORWARD_REF_QNAME"},{"lineNumber":924,"author":{"gitId":"-"},"content":"                    ):"},{"lineNumber":925,"author":{"gitId":"-"},"content":"                        return"},{"lineNumber":926,"author":{"gitId":"-"},"content":""},{"lineNumber":927,"author":{"gitId":"-"},"content":"            dummy_variables_rgx \u003d lint_utils.get_global_option("},{"lineNumber":928,"author":{"gitId":"-"},"content":"                self, \"dummy-variables-rgx\", default\u003dNone"},{"lineNumber":929,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":930,"author":{"gitId":"-"},"content":"            if dummy_variables_rgx and dummy_variables_rgx.match(node.name):"},{"lineNumber":931,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":932,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":933,"author":{"gitId":"-"},"content":"                \"function-redefined\","},{"lineNumber":934,"author":{"gitId":"-"},"content":"                node\u003dnode,"},{"lineNumber":935,"author":{"gitId":"-"},"content":"                args\u003d(redeftype, defined_self.fromlineno),"},{"lineNumber":936,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":937,"author":{"gitId":"-"},"content":""},{"lineNumber":938,"author":{"gitId":"-"},"content":""},{"lineNumber":939,"author":{"gitId":"-"},"content":"class BasicChecker(_BasicChecker):"},{"lineNumber":940,"author":{"gitId":"-"},"content":"    \"\"\"checks for :"},{"lineNumber":941,"author":{"gitId":"-"},"content":"    * doc strings"},{"lineNumber":942,"author":{"gitId":"-"},"content":"    * number of arguments, local variables, branches, returns and statements in"},{"lineNumber":943,"author":{"gitId":"-"},"content":"    functions, methods"},{"lineNumber":944,"author":{"gitId":"-"},"content":"    * required module attributes"},{"lineNumber":945,"author":{"gitId":"-"},"content":"    * dangerous default values as arguments"},{"lineNumber":946,"author":{"gitId":"-"},"content":"    * redefinition of function / method / class"},{"lineNumber":947,"author":{"gitId":"-"},"content":"    * uses of the global statement"},{"lineNumber":948,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":949,"author":{"gitId":"-"},"content":""},{"lineNumber":950,"author":{"gitId":"-"},"content":"    __implements__ \u003d interfaces.IAstroidChecker"},{"lineNumber":951,"author":{"gitId":"-"},"content":""},{"lineNumber":952,"author":{"gitId":"-"},"content":"    name \u003d \"basic\""},{"lineNumber":953,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":954,"author":{"gitId":"-"},"content":"        \"W0101\": ("},{"lineNumber":955,"author":{"gitId":"-"},"content":"            \"Unreachable code\","},{"lineNumber":956,"author":{"gitId":"-"},"content":"            \"unreachable\","},{"lineNumber":957,"author":{"gitId":"-"},"content":"            \u0027Used when there is some code behind a \"return\" or \"raise\" \u0027"},{"lineNumber":958,"author":{"gitId":"-"},"content":"            \"statement, which will never be accessed.\","},{"lineNumber":959,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":960,"author":{"gitId":"-"},"content":"        \"W0102\": ("},{"lineNumber":961,"author":{"gitId":"-"},"content":"            \"Dangerous default value %s as argument\","},{"lineNumber":962,"author":{"gitId":"-"},"content":"            \"dangerous-default-value\","},{"lineNumber":963,"author":{"gitId":"-"},"content":"            \"Used when a mutable value as list or dictionary is detected in \""},{"lineNumber":964,"author":{"gitId":"-"},"content":"            \"a default value for an argument.\","},{"lineNumber":965,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":966,"author":{"gitId":"-"},"content":"        \"W0104\": ("},{"lineNumber":967,"author":{"gitId":"-"},"content":"            \"Statement seems to have no effect\","},{"lineNumber":968,"author":{"gitId":"-"},"content":"            \"pointless-statement\","},{"lineNumber":969,"author":{"gitId":"-"},"content":"            \"Used when a statement doesn\u0027t have (or at least seems to) any effect.\","},{"lineNumber":970,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        \"W0105\": ("},{"lineNumber":972,"author":{"gitId":"-"},"content":"            \"String statement has no effect\","},{"lineNumber":973,"author":{"gitId":"-"},"content":"            \"pointless-string-statement\","},{"lineNumber":974,"author":{"gitId":"-"},"content":"            \"Used when a string is used as a statement (which of course \""},{"lineNumber":975,"author":{"gitId":"-"},"content":"            \"has no effect). This is a particular case of W0104 with its \""},{"lineNumber":976,"author":{"gitId":"-"},"content":"            \"own message so you can easily disable it if you\u0027re using \""},{"lineNumber":977,"author":{"gitId":"-"},"content":"            \"those strings as documentation, instead of comments.\","},{"lineNumber":978,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":979,"author":{"gitId":"-"},"content":"        \"W0106\": ("},{"lineNumber":980,"author":{"gitId":"-"},"content":"            \u0027Expression \"%s\" is assigned to nothing\u0027,"},{"lineNumber":981,"author":{"gitId":"-"},"content":"            \"expression-not-assigned\","},{"lineNumber":982,"author":{"gitId":"-"},"content":"            \"Used when an expression that is not a function call is assigned \""},{"lineNumber":983,"author":{"gitId":"-"},"content":"            \"to nothing. Probably something else was intended.\","},{"lineNumber":984,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":985,"author":{"gitId":"-"},"content":"        \"W0108\": ("},{"lineNumber":986,"author":{"gitId":"-"},"content":"            \"Lambda may not be necessary\","},{"lineNumber":987,"author":{"gitId":"-"},"content":"            \"unnecessary-lambda\","},{"lineNumber":988,"author":{"gitId":"-"},"content":"            \"Used when the body of a lambda expression is a function call \""},{"lineNumber":989,"author":{"gitId":"-"},"content":"            \"on the same argument list as the lambda itself; such lambda \""},{"lineNumber":990,"author":{"gitId":"-"},"content":"            \"expressions are in all but a few cases replaceable with the \""},{"lineNumber":991,"author":{"gitId":"-"},"content":"            \"function being called in the body of the lambda.\","},{"lineNumber":992,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":993,"author":{"gitId":"-"},"content":"        \"W0109\": ("},{"lineNumber":994,"author":{"gitId":"-"},"content":"            \"Duplicate key %r in dictionary\","},{"lineNumber":995,"author":{"gitId":"-"},"content":"            \"duplicate-key\","},{"lineNumber":996,"author":{"gitId":"-"},"content":"            \"Used when a dictionary expression binds the same key multiple times.\","},{"lineNumber":997,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":998,"author":{"gitId":"-"},"content":"        \"W0122\": ("},{"lineNumber":999,"author":{"gitId":"-"},"content":"            \"Use of exec\","},{"lineNumber":1000,"author":{"gitId":"-"},"content":"            \"exec-used\","},{"lineNumber":1001,"author":{"gitId":"-"},"content":"            \u0027Used when you use the \"exec\" statement (function for Python \u0027"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"            \"3), to discourage its usage. That doesn\u0027t \""},{"lineNumber":1003,"author":{"gitId":"-"},"content":"            \"mean you cannot use it !\","},{"lineNumber":1004,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"        \"W0123\": ("},{"lineNumber":1006,"author":{"gitId":"-"},"content":"            \"Use of eval\","},{"lineNumber":1007,"author":{"gitId":"-"},"content":"            \"eval-used\","},{"lineNumber":1008,"author":{"gitId":"-"},"content":"            \u0027Used when you use the \"eval\" function, to discourage its \u0027"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"            \"usage. Consider using `ast.literal_eval` for safely evaluating \""},{"lineNumber":1010,"author":{"gitId":"-"},"content":"            \"strings containing Python expressions \""},{"lineNumber":1011,"author":{"gitId":"-"},"content":"            \"from untrusted sources. \","},{"lineNumber":1012,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"        \"W0150\": ("},{"lineNumber":1014,"author":{"gitId":"-"},"content":"            \"%s statement in finally block may swallow exception\","},{"lineNumber":1015,"author":{"gitId":"-"},"content":"            \"lost-exception\","},{"lineNumber":1016,"author":{"gitId":"-"},"content":"            \"Used when a break or a return statement is found inside the \""},{"lineNumber":1017,"author":{"gitId":"-"},"content":"            \"finally clause of a try...finally block: the exceptions raised \""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"            \"in the try clause will be silently swallowed instead of being \""},{"lineNumber":1019,"author":{"gitId":"-"},"content":"            \"re-raised.\","},{"lineNumber":1020,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"        \"W0199\": ("},{"lineNumber":1022,"author":{"gitId":"-"},"content":"            \"Assert called on a 2-item-tuple. Did you mean \u0027assert x,y\u0027?\","},{"lineNumber":1023,"author":{"gitId":"-"},"content":"            \"assert-on-tuple\","},{"lineNumber":1024,"author":{"gitId":"-"},"content":"            \"A call of assert on a tuple will always evaluate to true if \""},{"lineNumber":1025,"author":{"gitId":"-"},"content":"            \"the tuple is not empty, and will always evaluate to false if \""},{"lineNumber":1026,"author":{"gitId":"-"},"content":"            \"it is.\","},{"lineNumber":1027,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"        \"W0124\": ("},{"lineNumber":1029,"author":{"gitId":"-"},"content":"            \u0027Following \"as\" with another context manager looks like a tuple.\u0027,"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"            \"confusing-with-statement\","},{"lineNumber":1031,"author":{"gitId":"-"},"content":"            \"Emitted when a `with` statement component returns multiple values \""},{"lineNumber":1032,"author":{"gitId":"-"},"content":"            \"and uses name binding with `as` only for a part of those values, \""},{"lineNumber":1033,"author":{"gitId":"-"},"content":"            \"as in with ctx() as a, b. This can be misleading, since it\u0027s not \""},{"lineNumber":1034,"author":{"gitId":"-"},"content":"            \"clear if the context manager returns a tuple or if the node without \""},{"lineNumber":1035,"author":{"gitId":"-"},"content":"            \"a name binding is another context manager.\","},{"lineNumber":1036,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"        \"W0125\": ("},{"lineNumber":1038,"author":{"gitId":"-"},"content":"            \"Using a conditional statement with a constant value\","},{"lineNumber":1039,"author":{"gitId":"-"},"content":"            \"using-constant-test\","},{"lineNumber":1040,"author":{"gitId":"-"},"content":"            \"Emitted when a conditional statement (If or ternary if) \""},{"lineNumber":1041,"author":{"gitId":"-"},"content":"            \"uses a constant value for its test. This might not be what \""},{"lineNumber":1042,"author":{"gitId":"-"},"content":"            \"the user intended to do.\","},{"lineNumber":1043,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"        \"W0126\": ("},{"lineNumber":1045,"author":{"gitId":"-"},"content":"            \"Using a conditional statement with potentially wrong function or method call due to missing parentheses\","},{"lineNumber":1046,"author":{"gitId":"-"},"content":"            \"missing-parentheses-for-call-in-test\","},{"lineNumber":1047,"author":{"gitId":"-"},"content":"            \"Emitted when a conditional statement (If or ternary if) \""},{"lineNumber":1048,"author":{"gitId":"-"},"content":"            \"seems to wrongly call a function due to missing parentheses\","},{"lineNumber":1049,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"        \"W0127\": ("},{"lineNumber":1051,"author":{"gitId":"-"},"content":"            \"Assigning the same variable %r to itself\","},{"lineNumber":1052,"author":{"gitId":"-"},"content":"            \"self-assigning-variable\","},{"lineNumber":1053,"author":{"gitId":"-"},"content":"            \"Emitted when we detect that a variable is assigned to itself\","},{"lineNumber":1054,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"        \"W0128\": ("},{"lineNumber":1056,"author":{"gitId":"-"},"content":"            \"Redeclared variable %r in assignment\","},{"lineNumber":1057,"author":{"gitId":"-"},"content":"            \"redeclared-assigned-name\","},{"lineNumber":1058,"author":{"gitId":"-"},"content":"            \"Emitted when we detect that a variable was redeclared in the same assignment.\","},{"lineNumber":1059,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"        \"E0111\": ("},{"lineNumber":1061,"author":{"gitId":"-"},"content":"            \"The first reversed() argument is not a sequence\","},{"lineNumber":1062,"author":{"gitId":"-"},"content":"            \"bad-reversed-sequence\","},{"lineNumber":1063,"author":{"gitId":"-"},"content":"            \"Used when the first argument to reversed() builtin \""},{"lineNumber":1064,"author":{"gitId":"-"},"content":"            \"isn\u0027t a sequence (does not implement __reversed__, \""},{"lineNumber":1065,"author":{"gitId":"-"},"content":"            \"nor __getitem__ and __len__\","},{"lineNumber":1066,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"        \"E0119\": ("},{"lineNumber":1068,"author":{"gitId":"-"},"content":"            \"format function is not called on str\","},{"lineNumber":1069,"author":{"gitId":"-"},"content":"            \"misplaced-format-function\","},{"lineNumber":1070,"author":{"gitId":"-"},"content":"            \"Emitted when format function is not called on str object. \""},{"lineNumber":1071,"author":{"gitId":"-"},"content":"            \u0027e.g doing print(\"value: {}\").format(123) instead of \u0027"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"            \u0027print(\"value: {}\".format(123)). This might not be what the user \u0027"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"            \"intended to do.\","},{"lineNumber":1074,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1075,"author":{"gitId":"anubh-v"},"content":"        \"W0129\": ("},{"lineNumber":1076,"author":{"gitId":"-"},"content":"            \"Assert statement has a string literal as its first argument. The assert will %s fail.\","},{"lineNumber":1077,"author":{"gitId":"anubh-v"},"content":"            \"assert-on-string-literal\","},{"lineNumber":1078,"author":{"gitId":"anubh-v"},"content":"            \"Used when an assert statement has a string literal as its first argument, which will \""},{"lineNumber":1079,"author":{"gitId":"anubh-v"},"content":"            \"cause the assert to always pass.\","},{"lineNumber":1080,"author":{"gitId":"anubh-v"},"content":"        ),"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1082,"author":{"gitId":"-"},"content":""},{"lineNumber":1083,"author":{"gitId":"-"},"content":"    reports \u003d ((\"RP0101\", \"Statistics by type\", report_by_type_stats),)"},{"lineNumber":1084,"author":{"gitId":"-"},"content":""},{"lineNumber":1085,"author":{"gitId":"-"},"content":"    def __init__(self, linter):"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"        _BasicChecker.__init__(self, linter)"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"        self.stats \u003d None"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"        self._tryfinallys \u003d None"},{"lineNumber":1089,"author":{"gitId":"-"},"content":""},{"lineNumber":1090,"author":{"gitId":"-"},"content":"    def open(self):"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"        \"\"\"initialize visit variables and statistics\"\"\""},{"lineNumber":1092,"author":{"gitId":"-"},"content":"        self._tryfinallys \u003d []"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"        self.stats \u003d self.linter.add_stats(module\u003d0, function\u003d0, method\u003d0, class_\u003d0)"},{"lineNumber":1094,"author":{"gitId":"-"},"content":""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"    def visit_if(self, node):"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"        self._check_using_constant_test(node, node.test)"},{"lineNumber":1098,"author":{"gitId":"-"},"content":""},{"lineNumber":1099,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"},{"lineNumber":1100,"author":{"gitId":"-"},"content":"    def visit_ifexp(self, node):"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"        self._check_using_constant_test(node, node.test)"},{"lineNumber":1102,"author":{"gitId":"-"},"content":""},{"lineNumber":1103,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"using-constant-test\", \"missing-parentheses-for-call-in-test\")"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"    def visit_comprehension(self, node):"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"        if node.ifs:"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"            for if_test in node.ifs:"},{"lineNumber":1107,"author":{"gitId":"-"},"content":"                self._check_using_constant_test(node, if_test)"},{"lineNumber":1108,"author":{"gitId":"-"},"content":""},{"lineNumber":1109,"author":{"gitId":"-"},"content":"    def _check_using_constant_test(self, node, test):"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"        const_nodes \u003d ("},{"lineNumber":1111,"author":{"gitId":"-"},"content":"            astroid.Module,"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"            astroid.scoped_nodes.GeneratorExp,"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"            astroid.Lambda,"},{"lineNumber":1114,"author":{"gitId":"-"},"content":"            astroid.FunctionDef,"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"            astroid.ClassDef,"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"            astroid.bases.Generator,"},{"lineNumber":1117,"author":{"gitId":"-"},"content":"            astroid.UnboundMethod,"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"            astroid.BoundMethod,"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"            astroid.Module,"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"        structs \u003d (astroid.Dict, astroid.Tuple, astroid.Set, astroid.List)"},{"lineNumber":1122,"author":{"gitId":"-"},"content":""},{"lineNumber":1123,"author":{"gitId":"-"},"content":"        # These nodes are excepted, since they are not constant"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"        # values, requiring a computation to happen."},{"lineNumber":1125,"author":{"gitId":"-"},"content":"        except_nodes \u003d ("},{"lineNumber":1126,"author":{"gitId":"-"},"content":"            astroid.Call,"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"            astroid.BinOp,"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"            astroid.BoolOp,"},{"lineNumber":1129,"author":{"gitId":"-"},"content":"            astroid.UnaryOp,"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"            astroid.Subscript,"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"        inferred \u003d None"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"        emit \u003d isinstance(test, (astroid.Const,) + structs + const_nodes)"},{"lineNumber":1134,"author":{"gitId":"-"},"content":"        if not isinstance(test, except_nodes):"},{"lineNumber":1135,"author":{"gitId":"-"},"content":"            inferred \u003d utils.safe_infer(test)"},{"lineNumber":1136,"author":{"gitId":"-"},"content":""},{"lineNumber":1137,"author":{"gitId":"-"},"content":"        if emit:"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"            self.add_message(\"using-constant-test\", node\u003dnode)"},{"lineNumber":1139,"author":{"gitId":"-"},"content":"        elif isinstance(inferred, const_nodes):"},{"lineNumber":1140,"author":{"gitId":"-"},"content":"            # If the constant node is a FunctionDef or Lambda then"},{"lineNumber":1141,"author":{"gitId":"-"},"content":"            # it may be a illicit function call due to missing parentheses"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"            call_inferred \u003d None"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":1144,"author":{"gitId":"-"},"content":"                if isinstance(inferred, astroid.FunctionDef):"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"                    call_inferred \u003d inferred.infer_call_result()"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"                elif isinstance(inferred, astroid.Lambda):"},{"lineNumber":1147,"author":{"gitId":"-"},"content":"                    call_inferred \u003d inferred.infer_call_result(node)"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"            except astroid.InferenceError:"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"                call_inferred \u003d None"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"            if call_inferred:"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"                try:"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"                    for inf_call in call_inferred:"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"                        if inf_call !\u003d astroid.Uninferable:"},{"lineNumber":1154,"author":{"gitId":"-"},"content":"                            self.add_message("},{"lineNumber":1155,"author":{"gitId":"-"},"content":"                                \"missing-parentheses-for-call-in-test\", node\u003dnode"},{"lineNumber":1156,"author":{"gitId":"-"},"content":"                            )"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"                            break"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"                except astroid.InferenceError:"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"                    pass"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"            self.add_message(\"using-constant-test\", node\u003dnode)"},{"lineNumber":1161,"author":{"gitId":"-"},"content":""},{"lineNumber":1162,"author":{"gitId":"-"},"content":"    def visit_module(self, _):"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"        \"\"\"check module name, docstring and required arguments\"\"\""},{"lineNumber":1164,"author":{"gitId":"-"},"content":"        self.stats[\"module\"] +\u003d 1"},{"lineNumber":1165,"author":{"gitId":"-"},"content":""},{"lineNumber":1166,"author":{"gitId":"-"},"content":"    def visit_classdef(self, node):  # pylint: disable\u003dunused-argument"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"        \"\"\"check module name, docstring and redefinition"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"        increment branch counter"},{"lineNumber":1169,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1170,"author":{"gitId":"-"},"content":"        self.stats[\"class\"] +\u003d 1"},{"lineNumber":1171,"author":{"gitId":"-"},"content":""},{"lineNumber":1172,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":1173,"author":{"gitId":"-"},"content":"        \"pointless-statement\", \"pointless-string-statement\", \"expression-not-assigned\""},{"lineNumber":1174,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1175,"author":{"gitId":"-"},"content":"    def visit_expr(self, node):"},{"lineNumber":1176,"author":{"gitId":"-"},"content":"        \"\"\"Check for various kind of statements without effect\"\"\""},{"lineNumber":1177,"author":{"gitId":"-"},"content":"        expr \u003d node.value"},{"lineNumber":1178,"author":{"gitId":"-"},"content":"        if isinstance(expr, astroid.Const) and isinstance(expr.value, str):"},{"lineNumber":1179,"author":{"gitId":"-"},"content":"            # treat string statement in a separated message"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"            # Handle PEP-257 attribute docstrings."},{"lineNumber":1181,"author":{"gitId":"-"},"content":"            # An attribute docstring is defined as being a string right after"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"            # an assignment at the module level, class level or __init__ level."},{"lineNumber":1183,"author":{"gitId":"-"},"content":"            scope \u003d expr.scope()"},{"lineNumber":1184,"author":{"gitId":"-"},"content":"            if isinstance("},{"lineNumber":1185,"author":{"gitId":"-"},"content":"                scope, (astroid.ClassDef, astroid.Module, astroid.FunctionDef)"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"                if isinstance(scope, astroid.FunctionDef) and scope.name !\u003d \"__init__\":"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"                    pass"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"                    sibling \u003d expr.previous_sibling()"},{"lineNumber":1191,"author":{"gitId":"-"},"content":"                    if ("},{"lineNumber":1192,"author":{"gitId":"-"},"content":"                        sibling is not None"},{"lineNumber":1193,"author":{"gitId":"-"},"content":"                        and sibling.scope() is scope"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"                        and isinstance(sibling, (astroid.Assign, astroid.AnnAssign))"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"                    ):"},{"lineNumber":1196,"author":{"gitId":"-"},"content":"                        return"},{"lineNumber":1197,"author":{"gitId":"-"},"content":"            self.add_message(\"pointless-string-statement\", node\u003dnode)"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1199,"author":{"gitId":"-"},"content":""},{"lineNumber":1200,"author":{"gitId":"-"},"content":"        # Ignore if this is :"},{"lineNumber":1201,"author":{"gitId":"-"},"content":"        # * a direct function call"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"        # * the unique child of a try/except body"},{"lineNumber":1203,"author":{"gitId":"-"},"content":"        # * a yield statement"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"        # * an ellipsis (which can be used on Python 3 instead of pass)"},{"lineNumber":1205,"author":{"gitId":"-"},"content":"        # warn W0106 if we have any underlying function call (we can\u0027t predict"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"        # side effects), else pointless-statement"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":1208,"author":{"gitId":"-"},"content":"            isinstance("},{"lineNumber":1209,"author":{"gitId":"-"},"content":"                expr, (astroid.Yield, astroid.Await, astroid.Ellipsis, astroid.Call)"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"            or ("},{"lineNumber":1212,"author":{"gitId":"-"},"content":"                isinstance(node.parent, astroid.TryExcept)"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"                and node.parent.body \u003d\u003d [node]"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"            or (isinstance(expr, astroid.Const) and expr.value is Ellipsis)"},{"lineNumber":1216,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1217,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1218,"author":{"gitId":"-"},"content":"        if any(expr.nodes_of_class(astroid.Call)):"},{"lineNumber":1219,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":1220,"author":{"gitId":"-"},"content":"                \"expression-not-assigned\", node\u003dnode, args\u003dexpr.as_string()"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"            self.add_message(\"pointless-statement\", node\u003dnode)"},{"lineNumber":1224,"author":{"gitId":"-"},"content":""},{"lineNumber":1225,"author":{"gitId":"-"},"content":"    @staticmethod"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"    def _filter_vararg(node, call_args):"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"        # Return the arguments for the given call which are"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"        # not passed as vararg."},{"lineNumber":1229,"author":{"gitId":"-"},"content":"        for arg in call_args:"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"            if isinstance(arg, astroid.Starred):"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"                if ("},{"lineNumber":1232,"author":{"gitId":"-"},"content":"                    isinstance(arg.value, astroid.Name)"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"                    and arg.value.name !\u003d node.args.vararg"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1235,"author":{"gitId":"-"},"content":"                    yield arg"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"                yield arg"},{"lineNumber":1238,"author":{"gitId":"-"},"content":""},{"lineNumber":1239,"author":{"gitId":"-"},"content":"    @staticmethod"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"    def _has_variadic_argument(args, variadic_name):"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"        if not args:"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":1243,"author":{"gitId":"-"},"content":"        for arg in args:"},{"lineNumber":1244,"author":{"gitId":"-"},"content":"            if isinstance(arg.value, astroid.Name):"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"                if arg.value.name !\u003d variadic_name:"},{"lineNumber":1246,"author":{"gitId":"-"},"content":"                    return True"},{"lineNumber":1247,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":1250,"author":{"gitId":"-"},"content":""},{"lineNumber":1251,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unnecessary-lambda\")"},{"lineNumber":1252,"author":{"gitId":"-"},"content":"    def visit_lambda(self, node):"},{"lineNumber":1253,"author":{"gitId":"-"},"content":"        \"\"\"check whether or not the lambda is suspicious\"\"\""},{"lineNumber":1254,"author":{"gitId":"-"},"content":"        # if the body of the lambda is a call expression with the same"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"        # argument list as the lambda itself, then the lambda is"},{"lineNumber":1256,"author":{"gitId":"-"},"content":"        # possibly unnecessary and at least suspicious."},{"lineNumber":1257,"author":{"gitId":"-"},"content":"        if node.args.defaults:"},{"lineNumber":1258,"author":{"gitId":"-"},"content":"            # If the arguments of the lambda include defaults, then a"},{"lineNumber":1259,"author":{"gitId":"-"},"content":"            # judgment cannot be made because there is no way to check"},{"lineNumber":1260,"author":{"gitId":"-"},"content":"            # that the defaults defined by the lambda are the same as"},{"lineNumber":1261,"author":{"gitId":"-"},"content":"            # the defaults defined by the function called in the body"},{"lineNumber":1262,"author":{"gitId":"-"},"content":"            # of the lambda."},{"lineNumber":1263,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1264,"author":{"gitId":"-"},"content":"        call \u003d node.body"},{"lineNumber":1265,"author":{"gitId":"-"},"content":"        if not isinstance(call, astroid.Call):"},{"lineNumber":1266,"author":{"gitId":"-"},"content":"            # The body of the lambda must be a function call expression"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"            # for the lambda to be unnecessary."},{"lineNumber":1268,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1269,"author":{"gitId":"-"},"content":"        if isinstance(node.body.func, astroid.Attribute) and isinstance("},{"lineNumber":1270,"author":{"gitId":"-"},"content":"            node.body.func.expr, astroid.Call"},{"lineNumber":1271,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1272,"author":{"gitId":"-"},"content":"            # Chained call, the intermediate call might"},{"lineNumber":1273,"author":{"gitId":"-"},"content":"            # return something else (but we don\u0027t check that, yet)."},{"lineNumber":1274,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1275,"author":{"gitId":"-"},"content":""},{"lineNumber":1276,"author":{"gitId":"-"},"content":"        call_site \u003d astroid.arguments.CallSite.from_call(call)"},{"lineNumber":1277,"author":{"gitId":"-"},"content":"        ordinary_args \u003d list(node.args.args)"},{"lineNumber":1278,"author":{"gitId":"-"},"content":"        new_call_args \u003d list(self._filter_vararg(node, call.args))"},{"lineNumber":1279,"author":{"gitId":"-"},"content":"        if node.args.kwarg:"},{"lineNumber":1280,"author":{"gitId":"-"},"content":"            if self._has_variadic_argument(call.kwargs, node.args.kwarg):"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1282,"author":{"gitId":"-"},"content":""},{"lineNumber":1283,"author":{"gitId":"-"},"content":"        if node.args.vararg:"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"            if self._has_variadic_argument(call.starargs, node.args.vararg):"},{"lineNumber":1285,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1286,"author":{"gitId":"-"},"content":"        elif call.starargs:"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1288,"author":{"gitId":"-"},"content":""},{"lineNumber":1289,"author":{"gitId":"-"},"content":"        if call.keywords:"},{"lineNumber":1290,"author":{"gitId":"-"},"content":"            # Look for additional keyword arguments that are not part"},{"lineNumber":1291,"author":{"gitId":"-"},"content":"            # of the lambda\u0027s signature"},{"lineNumber":1292,"author":{"gitId":"-"},"content":"            lambda_kwargs \u003d {keyword.name for keyword in node.args.defaults}"},{"lineNumber":1293,"author":{"gitId":"-"},"content":"            if len(lambda_kwargs) !\u003d len(call_site.keyword_arguments):"},{"lineNumber":1294,"author":{"gitId":"-"},"content":"                # Different lengths, so probably not identical"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1296,"author":{"gitId":"-"},"content":"            if set(call_site.keyword_arguments).difference(lambda_kwargs):"},{"lineNumber":1297,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1298,"author":{"gitId":"-"},"content":""},{"lineNumber":1299,"author":{"gitId":"-"},"content":"        # The \"ordinary\" arguments must be in a correspondence such that:"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"        # ordinary_args[i].name \u003d\u003d call.args[i].name."},{"lineNumber":1301,"author":{"gitId":"-"},"content":"        if len(ordinary_args) !\u003d len(new_call_args):"},{"lineNumber":1302,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1303,"author":{"gitId":"-"},"content":"        for arg, passed_arg in zip(ordinary_args, new_call_args):"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"            if not isinstance(passed_arg, astroid.Name):"},{"lineNumber":1305,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1306,"author":{"gitId":"-"},"content":"            if arg.name !\u003d passed_arg.name:"},{"lineNumber":1307,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1308,"author":{"gitId":"-"},"content":""},{"lineNumber":1309,"author":{"gitId":"-"},"content":"        self.add_message(\"unnecessary-lambda\", line\u003dnode.fromlineno, node\u003dnode)"},{"lineNumber":1310,"author":{"gitId":"-"},"content":""},{"lineNumber":1311,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"dangerous-default-value\")"},{"lineNumber":1312,"author":{"gitId":"-"},"content":"    def visit_functiondef(self, node):"},{"lineNumber":1313,"author":{"gitId":"-"},"content":"        \"\"\"check function name, docstring, arguments, redefinition,"},{"lineNumber":1314,"author":{"gitId":"-"},"content":"        variable names, max locals"},{"lineNumber":1315,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1316,"author":{"gitId":"-"},"content":"        self.stats[\"method\" if node.is_method() else \"function\"] +\u003d 1"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"        self._check_dangerous_default(node)"},{"lineNumber":1318,"author":{"gitId":"-"},"content":""},{"lineNumber":1319,"author":{"gitId":"-"},"content":"    visit_asyncfunctiondef \u003d visit_functiondef"},{"lineNumber":1320,"author":{"gitId":"-"},"content":""},{"lineNumber":1321,"author":{"gitId":"-"},"content":"    def _check_dangerous_default(self, node):"},{"lineNumber":1322,"author":{"gitId":"-"},"content":"        \"\"\"Check for dangerous default values as arguments.\"\"\""},{"lineNumber":1323,"author":{"gitId":"-"},"content":""},{"lineNumber":1324,"author":{"gitId":"-"},"content":"        def is_iterable(internal_node):"},{"lineNumber":1325,"author":{"gitId":"-"},"content":"            return isinstance(internal_node, (astroid.List, astroid.Set, astroid.Dict))"},{"lineNumber":1326,"author":{"gitId":"-"},"content":""},{"lineNumber":1327,"author":{"gitId":"-"},"content":"        defaults \u003d node.args.defaults or [] + node.args.kw_defaults or []"},{"lineNumber":1328,"author":{"gitId":"-"},"content":"        for default in defaults:"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"            if not default:"},{"lineNumber":1330,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"                value \u003d next(default.infer())"},{"lineNumber":1333,"author":{"gitId":"-"},"content":"            except astroid.InferenceError:"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1335,"author":{"gitId":"-"},"content":""},{"lineNumber":1336,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":1337,"author":{"gitId":"-"},"content":"                isinstance(value, astroid.Instance)"},{"lineNumber":1338,"author":{"gitId":"-"},"content":"                and value.qname() in DEFAULT_ARGUMENT_SYMBOLS"},{"lineNumber":1339,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"                if value is default:"},{"lineNumber":1341,"author":{"gitId":"-"},"content":"                    msg \u003d DEFAULT_ARGUMENT_SYMBOLS[value.qname()]"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"                elif isinstance(value, astroid.Instance) or is_iterable(value):"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"                    # We are here in the following situation(s):"},{"lineNumber":1344,"author":{"gitId":"-"},"content":"                    #   * a dict/set/list/tuple call which wasn\u0027t inferred"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"                    #     to a syntax node ({}, () etc.). This can happen"},{"lineNumber":1346,"author":{"gitId":"-"},"content":"                    #     when the arguments are invalid or unknown to"},{"lineNumber":1347,"author":{"gitId":"-"},"content":"                    #     the inference."},{"lineNumber":1348,"author":{"gitId":"-"},"content":"                    #   * a variable from somewhere else, which turns out to be a list"},{"lineNumber":1349,"author":{"gitId":"-"},"content":"                    #     or a dict."},{"lineNumber":1350,"author":{"gitId":"-"},"content":"                    if is_iterable(default):"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"                        msg \u003d value.pytype()"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"                    elif isinstance(default, astroid.Call):"},{"lineNumber":1353,"author":{"gitId":"-"},"content":"                        msg \u003d f\"{value.name}() ({value.qname()})\""},{"lineNumber":1354,"author":{"gitId":"-"},"content":"                    else:"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"                        msg \u003d f\"{default.as_string()} ({value.qname()})\""},{"lineNumber":1356,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1357,"author":{"gitId":"-"},"content":"                    # this argument is a name"},{"lineNumber":1358,"author":{"gitId":"-"},"content":"                    msg \u003d f\"{default.as_string()} ({DEFAULT_ARGUMENT_SYMBOLS[value.qname()]})\""},{"lineNumber":1359,"author":{"gitId":"-"},"content":"                self.add_message(\"dangerous-default-value\", node\u003dnode, args\u003d(msg,))"},{"lineNumber":1360,"author":{"gitId":"-"},"content":""},{"lineNumber":1361,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unreachable\", \"lost-exception\")"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"    def visit_return(self, node):"},{"lineNumber":1363,"author":{"gitId":"-"},"content":"        \"\"\"1 - check is the node has a right sibling (if so, that\u0027s some"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"        unreachable code)"},{"lineNumber":1365,"author":{"gitId":"-"},"content":"        2 - check is the node is inside the finally clause of a try...finally"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"        block"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1368,"author":{"gitId":"-"},"content":"        self._check_unreachable(node)"},{"lineNumber":1369,"author":{"gitId":"-"},"content":"        # Is it inside final body of a try...finally bloc ?"},{"lineNumber":1370,"author":{"gitId":"-"},"content":"        self._check_not_in_finally(node, \"return\", (astroid.FunctionDef,))"},{"lineNumber":1371,"author":{"gitId":"-"},"content":""},{"lineNumber":1372,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unreachable\")"},{"lineNumber":1373,"author":{"gitId":"-"},"content":"    def visit_continue(self, node):"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"        \"\"\"check is the node has a right sibling (if so, that\u0027s some unreachable"},{"lineNumber":1375,"author":{"gitId":"-"},"content":"        code)"},{"lineNumber":1376,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1377,"author":{"gitId":"-"},"content":"        self._check_unreachable(node)"},{"lineNumber":1378,"author":{"gitId":"-"},"content":""},{"lineNumber":1379,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unreachable\", \"lost-exception\")"},{"lineNumber":1380,"author":{"gitId":"-"},"content":"    def visit_break(self, node):"},{"lineNumber":1381,"author":{"gitId":"-"},"content":"        \"\"\"1 - check is the node has a right sibling (if so, that\u0027s some"},{"lineNumber":1382,"author":{"gitId":"-"},"content":"        unreachable code)"},{"lineNumber":1383,"author":{"gitId":"-"},"content":"        2 - check is the node is inside the finally clause of a try...finally"},{"lineNumber":1384,"author":{"gitId":"-"},"content":"        block"},{"lineNumber":1385,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1386,"author":{"gitId":"-"},"content":"        # 1 - Is it right sibling ?"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"        self._check_unreachable(node)"},{"lineNumber":1388,"author":{"gitId":"-"},"content":"        # 2 - Is it inside final body of a try...finally bloc ?"},{"lineNumber":1389,"author":{"gitId":"-"},"content":"        self._check_not_in_finally(node, \"break\", (astroid.For, astroid.While))"},{"lineNumber":1390,"author":{"gitId":"-"},"content":""},{"lineNumber":1391,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unreachable\")"},{"lineNumber":1392,"author":{"gitId":"-"},"content":"    def visit_raise(self, node):"},{"lineNumber":1393,"author":{"gitId":"-"},"content":"        \"\"\"check if the node has a right sibling (if so, that\u0027s some unreachable"},{"lineNumber":1394,"author":{"gitId":"-"},"content":"        code)"},{"lineNumber":1395,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1396,"author":{"gitId":"-"},"content":"        self._check_unreachable(node)"},{"lineNumber":1397,"author":{"gitId":"-"},"content":""},{"lineNumber":1398,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"exec-used\")"},{"lineNumber":1399,"author":{"gitId":"-"},"content":"    def visit_exec(self, node):"},{"lineNumber":1400,"author":{"gitId":"-"},"content":"        \"\"\"just print a warning on exec statements\"\"\""},{"lineNumber":1401,"author":{"gitId":"-"},"content":"        self.add_message(\"exec-used\", node\u003dnode)"},{"lineNumber":1402,"author":{"gitId":"-"},"content":""},{"lineNumber":1403,"author":{"gitId":"-"},"content":"    def _check_misplaced_format_function(self, call_node):"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"        if not isinstance(call_node.func, astroid.Attribute):"},{"lineNumber":1405,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1406,"author":{"gitId":"-"},"content":"        if call_node.func.attrname !\u003d \"format\":"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1408,"author":{"gitId":"-"},"content":""},{"lineNumber":1409,"author":{"gitId":"-"},"content":"        expr \u003d utils.safe_infer(call_node.func.expr)"},{"lineNumber":1410,"author":{"gitId":"-"},"content":"        if expr is astroid.Uninferable:"},{"lineNumber":1411,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1412,"author":{"gitId":"-"},"content":"        if not expr:"},{"lineNumber":1413,"author":{"gitId":"-"},"content":"            # we are doubtful on inferred type of node, so here just check if format"},{"lineNumber":1414,"author":{"gitId":"-"},"content":"            # was called on print()"},{"lineNumber":1415,"author":{"gitId":"-"},"content":"            call_expr \u003d call_node.func.expr"},{"lineNumber":1416,"author":{"gitId":"-"},"content":"            if not isinstance(call_expr, astroid.Call):"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1418,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":1419,"author":{"gitId":"-"},"content":"                isinstance(call_expr.func, astroid.Name)"},{"lineNumber":1420,"author":{"gitId":"-"},"content":"                and call_expr.func.name \u003d\u003d \"print\""},{"lineNumber":1421,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1422,"author":{"gitId":"-"},"content":"                self.add_message(\"misplaced-format-function\", node\u003dcall_node)"},{"lineNumber":1423,"author":{"gitId":"-"},"content":""},{"lineNumber":1424,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":1425,"author":{"gitId":"-"},"content":"        \"eval-used\", \"exec-used\", \"bad-reversed-sequence\", \"misplaced-format-function\""},{"lineNumber":1426,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1427,"author":{"gitId":"-"},"content":"    def visit_call(self, node):"},{"lineNumber":1428,"author":{"gitId":"-"},"content":"        \"\"\"visit a Call node -\u003e check if this is not a disallowed builtin"},{"lineNumber":1429,"author":{"gitId":"-"},"content":"        call and check for * or ** use"},{"lineNumber":1430,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1431,"author":{"gitId":"-"},"content":"        self._check_misplaced_format_function(node)"},{"lineNumber":1432,"author":{"gitId":"-"},"content":"        if isinstance(node.func, astroid.Name):"},{"lineNumber":1433,"author":{"gitId":"-"},"content":"            name \u003d node.func.name"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"            # ignore the name if it\u0027s not a builtin (i.e. not defined in the"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"            # locals nor globals scope)"},{"lineNumber":1436,"author":{"gitId":"-"},"content":"            if not (name in node.frame() or name in node.root()):"},{"lineNumber":1437,"author":{"gitId":"-"},"content":"                if name \u003d\u003d \"exec\":"},{"lineNumber":1438,"author":{"gitId":"-"},"content":"                    self.add_message(\"exec-used\", node\u003dnode)"},{"lineNumber":1439,"author":{"gitId":"-"},"content":"                elif name \u003d\u003d \"reversed\":"},{"lineNumber":1440,"author":{"gitId":"-"},"content":"                    self._check_reversed(node)"},{"lineNumber":1441,"author":{"gitId":"-"},"content":"                elif name \u003d\u003d \"eval\":"},{"lineNumber":1442,"author":{"gitId":"-"},"content":"                    self.add_message(\"eval-used\", node\u003dnode)"},{"lineNumber":1443,"author":{"gitId":"-"},"content":""},{"lineNumber":1444,"author":{"gitId":"anubh-v"},"content":"    @utils.check_messages(\"assert-on-tuple\", \"assert-on-string-literal\")"},{"lineNumber":1445,"author":{"gitId":"-"},"content":"    def visit_assert(self, node):"},{"lineNumber":1446,"author":{"gitId":"anubh-v"},"content":"        \"\"\"check whether assert is used on a tuple or string literal.\"\"\""},{"lineNumber":1447,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":1448,"author":{"gitId":"-"},"content":"            node.fail is None"},{"lineNumber":1449,"author":{"gitId":"-"},"content":"            and isinstance(node.test, astroid.Tuple)"},{"lineNumber":1450,"author":{"gitId":"-"},"content":"            and len(node.test.elts) \u003d\u003d 2"},{"lineNumber":1451,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"            self.add_message(\"assert-on-tuple\", node\u003dnode)"},{"lineNumber":1453,"author":{"gitId":"-"},"content":""},{"lineNumber":1454,"author":{"gitId":"anubh-v"},"content":"        if isinstance(node.test, astroid.Const) and isinstance(node.test.value, str):"},{"lineNumber":1455,"author":{"gitId":"-"},"content":"            if node.test.value:"},{"lineNumber":1456,"author":{"gitId":"-"},"content":"                when \u003d \"never\""},{"lineNumber":1457,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1458,"author":{"gitId":"-"},"content":"                when \u003d \"always\""},{"lineNumber":1459,"author":{"gitId":"-"},"content":"            self.add_message(\"assert-on-string-literal\", node\u003dnode, args\u003d(when,))"},{"lineNumber":1460,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":1461,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"duplicate-key\")"},{"lineNumber":1462,"author":{"gitId":"-"},"content":"    def visit_dict(self, node):"},{"lineNumber":1463,"author":{"gitId":"-"},"content":"        \"\"\"check duplicate key in dictionary\"\"\""},{"lineNumber":1464,"author":{"gitId":"-"},"content":"        keys \u003d set()"},{"lineNumber":1465,"author":{"gitId":"-"},"content":"        for k, _ in node.items:"},{"lineNumber":1466,"author":{"gitId":"-"},"content":"            if isinstance(k, astroid.Const):"},{"lineNumber":1467,"author":{"gitId":"-"},"content":"                key \u003d k.value"},{"lineNumber":1468,"author":{"gitId":"-"},"content":"                if key in keys:"},{"lineNumber":1469,"author":{"gitId":"-"},"content":"                    self.add_message(\"duplicate-key\", node\u003dnode, args\u003dkey)"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"                keys.add(key)"},{"lineNumber":1471,"author":{"gitId":"-"},"content":""},{"lineNumber":1472,"author":{"gitId":"-"},"content":"    def visit_tryfinally(self, node):"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"        \"\"\"update try...finally flag\"\"\""},{"lineNumber":1474,"author":{"gitId":"-"},"content":"        self._tryfinallys.append(node)"},{"lineNumber":1475,"author":{"gitId":"-"},"content":""},{"lineNumber":1476,"author":{"gitId":"-"},"content":"    def leave_tryfinally(self, node):  # pylint: disable\u003dunused-argument"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"        \"\"\"update try...finally flag\"\"\""},{"lineNumber":1478,"author":{"gitId":"-"},"content":"        self._tryfinallys.pop()"},{"lineNumber":1479,"author":{"gitId":"-"},"content":""},{"lineNumber":1480,"author":{"gitId":"-"},"content":"    def _check_unreachable(self, node):"},{"lineNumber":1481,"author":{"gitId":"-"},"content":"        \"\"\"check unreachable code\"\"\""},{"lineNumber":1482,"author":{"gitId":"-"},"content":"        unreach_stmt \u003d node.next_sibling()"},{"lineNumber":1483,"author":{"gitId":"-"},"content":"        if unreach_stmt is not None:"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"            self.add_message(\"unreachable\", node\u003dunreach_stmt)"},{"lineNumber":1485,"author":{"gitId":"-"},"content":""},{"lineNumber":1486,"author":{"gitId":"-"},"content":"    def _check_not_in_finally(self, node, node_name, breaker_classes\u003d()):"},{"lineNumber":1487,"author":{"gitId":"-"},"content":"        \"\"\"check that a node is not inside a finally clause of a"},{"lineNumber":1488,"author":{"gitId":"-"},"content":"        try...finally statement."},{"lineNumber":1489,"author":{"gitId":"-"},"content":"        If we found before a try...finally bloc a parent which its type is"},{"lineNumber":1490,"author":{"gitId":"-"},"content":"        in breaker_classes, we skip the whole check.\"\"\""},{"lineNumber":1491,"author":{"gitId":"-"},"content":"        # if self._tryfinallys is empty, we\u0027re not an in try...finally block"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"        if not self._tryfinallys:"},{"lineNumber":1493,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1494,"author":{"gitId":"-"},"content":"        # the node could be a grand-grand...-children of the try...finally"},{"lineNumber":1495,"author":{"gitId":"-"},"content":"        _parent \u003d node.parent"},{"lineNumber":1496,"author":{"gitId":"-"},"content":"        _node \u003d node"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"        while _parent and not isinstance(_parent, breaker_classes):"},{"lineNumber":1498,"author":{"gitId":"-"},"content":"            if hasattr(_parent, \"finalbody\") and _node in _parent.finalbody:"},{"lineNumber":1499,"author":{"gitId":"-"},"content":"                self.add_message(\"lost-exception\", node\u003dnode, args\u003dnode_name)"},{"lineNumber":1500,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1501,"author":{"gitId":"-"},"content":"            _node \u003d _parent"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"            _parent \u003d _node.parent"},{"lineNumber":1503,"author":{"gitId":"-"},"content":""},{"lineNumber":1504,"author":{"gitId":"-"},"content":"    def _check_reversed(self, node):"},{"lineNumber":1505,"author":{"gitId":"-"},"content":"        \"\"\"check that the argument to `reversed` is a sequence\"\"\""},{"lineNumber":1506,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1507,"author":{"gitId":"-"},"content":"            argument \u003d utils.safe_infer(utils.get_argument_from_call(node, position\u003d0))"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"        except utils.NoSuchArgumentError:"},{"lineNumber":1509,"author":{"gitId":"-"},"content":"            pass"},{"lineNumber":1510,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1511,"author":{"gitId":"-"},"content":"            if argument is astroid.Uninferable:"},{"lineNumber":1512,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1513,"author":{"gitId":"-"},"content":"            if argument is None:"},{"lineNumber":1514,"author":{"gitId":"-"},"content":"                # Nothing was inferred."},{"lineNumber":1515,"author":{"gitId":"-"},"content":"                # Try to see if we have iter()."},{"lineNumber":1516,"author":{"gitId":"-"},"content":"                if isinstance(node.args[0], astroid.Call):"},{"lineNumber":1517,"author":{"gitId":"-"},"content":"                    try:"},{"lineNumber":1518,"author":{"gitId":"-"},"content":"                        func \u003d next(node.args[0].func.infer())"},{"lineNumber":1519,"author":{"gitId":"-"},"content":"                    except astroid.InferenceError:"},{"lineNumber":1520,"author":{"gitId":"-"},"content":"                        return"},{"lineNumber":1521,"author":{"gitId":"-"},"content":"                    if getattr("},{"lineNumber":1522,"author":{"gitId":"-"},"content":"                        func, \"name\", None"},{"lineNumber":1523,"author":{"gitId":"-"},"content":"                    ) \u003d\u003d \"iter\" and utils.is_builtin_object(func):"},{"lineNumber":1524,"author":{"gitId":"-"},"content":"                        self.add_message(\"bad-reversed-sequence\", node\u003dnode)"},{"lineNumber":1525,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1526,"author":{"gitId":"-"},"content":""},{"lineNumber":1527,"author":{"gitId":"-"},"content":"            if isinstance(argument, (astroid.List, astroid.Tuple)):"},{"lineNumber":1528,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1529,"author":{"gitId":"-"},"content":""},{"lineNumber":1530,"author":{"gitId":"-"},"content":"            if isinstance(argument, astroid.Instance):"},{"lineNumber":1531,"author":{"gitId":"-"},"content":"                if any("},{"lineNumber":1532,"author":{"gitId":"-"},"content":"                    ancestor.name \u003d\u003d \"dict\" and utils.is_builtin_object(ancestor)"},{"lineNumber":1533,"author":{"gitId":"-"},"content":"                    for ancestor in itertools.chain("},{"lineNumber":1534,"author":{"gitId":"-"},"content":"                        (argument._proxied,), argument._proxied.ancestors()"},{"lineNumber":1535,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1537,"author":{"gitId":"-"},"content":"                    # Mappings aren\u0027t accepted by reversed(), unless"},{"lineNumber":1538,"author":{"gitId":"-"},"content":"                    # they provide explicitly a __reversed__ method."},{"lineNumber":1539,"author":{"gitId":"-"},"content":"                    try:"},{"lineNumber":1540,"author":{"gitId":"-"},"content":"                        argument.locals[REVERSED_PROTOCOL_METHOD]"},{"lineNumber":1541,"author":{"gitId":"-"},"content":"                    except KeyError:"},{"lineNumber":1542,"author":{"gitId":"-"},"content":"                        self.add_message(\"bad-reversed-sequence\", node\u003dnode)"},{"lineNumber":1543,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":1544,"author":{"gitId":"-"},"content":""},{"lineNumber":1545,"author":{"gitId":"-"},"content":"            if hasattr(argument, \"getattr\"):"},{"lineNumber":1546,"author":{"gitId":"-"},"content":"                # everything else is not a proper sequence for reversed()"},{"lineNumber":1547,"author":{"gitId":"-"},"content":"                for methods in REVERSED_METHODS:"},{"lineNumber":1548,"author":{"gitId":"-"},"content":"                    for meth in methods:"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"                        try:"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"                            argument.getattr(meth)"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"                        except astroid.NotFoundError:"},{"lineNumber":1552,"author":{"gitId":"-"},"content":"                            break"},{"lineNumber":1553,"author":{"gitId":"-"},"content":"                    else:"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":1555,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1556,"author":{"gitId":"-"},"content":"                    self.add_message(\"bad-reversed-sequence\", node\u003dnode)"},{"lineNumber":1557,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"                self.add_message(\"bad-reversed-sequence\", node\u003dnode)"},{"lineNumber":1559,"author":{"gitId":"-"},"content":""},{"lineNumber":1560,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"confusing-with-statement\")"},{"lineNumber":1561,"author":{"gitId":"-"},"content":"    def visit_with(self, node):"},{"lineNumber":1562,"author":{"gitId":"anubh-v"},"content":"        # a \"with\" statement with multiple managers corresponds"},{"lineNumber":1563,"author":{"gitId":"-"},"content":"        # to one AST \"With\" node with multiple items"},{"lineNumber":1564,"author":{"gitId":"-"},"content":"        pairs \u003d node.items"},{"lineNumber":1565,"author":{"gitId":"-"},"content":"        if pairs:"},{"lineNumber":1566,"author":{"gitId":"-"},"content":"            for prev_pair, pair in zip(pairs, pairs[1:]):"},{"lineNumber":1567,"author":{"gitId":"-"},"content":"                if isinstance(prev_pair[1], astroid.AssignName) and ("},{"lineNumber":1568,"author":{"gitId":"-"},"content":"                    pair[1] is None and not isinstance(pair[0], astroid.Call)"},{"lineNumber":1569,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1570,"author":{"gitId":"-"},"content":"                    # Don\u0027t emit a message if the second is a function call"},{"lineNumber":1571,"author":{"gitId":"-"},"content":"                    # there\u0027s no way that can be mistaken for a name assignment."},{"lineNumber":1572,"author":{"gitId":"-"},"content":"                    # If the line number doesn\u0027t match"},{"lineNumber":1573,"author":{"gitId":"-"},"content":"                    # we assume it\u0027s a nested \"with\"."},{"lineNumber":1574,"author":{"gitId":"-"},"content":"                    self.add_message(\"confusing-with-statement\", node\u003dnode)"},{"lineNumber":1575,"author":{"gitId":"-"},"content":""},{"lineNumber":1576,"author":{"gitId":"-"},"content":"    def _check_self_assigning_variable(self, node):"},{"lineNumber":1577,"author":{"gitId":"-"},"content":"        # Detect assigning to the same variable."},{"lineNumber":1578,"author":{"gitId":"-"},"content":""},{"lineNumber":1579,"author":{"gitId":"-"},"content":"        scope \u003d node.scope()"},{"lineNumber":1580,"author":{"gitId":"-"},"content":"        scope_locals \u003d scope.locals"},{"lineNumber":1581,"author":{"gitId":"-"},"content":""},{"lineNumber":1582,"author":{"gitId":"-"},"content":"        rhs_names \u003d []"},{"lineNumber":1583,"author":{"gitId":"-"},"content":"        targets \u003d node.targets"},{"lineNumber":1584,"author":{"gitId":"-"},"content":"        if isinstance(targets[0], astroid.Tuple):"},{"lineNumber":1585,"author":{"gitId":"-"},"content":"            if len(targets) !\u003d 1:"},{"lineNumber":1586,"author":{"gitId":"-"},"content":"                # A complex assignment, so bail out early."},{"lineNumber":1587,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1588,"author":{"gitId":"-"},"content":"            targets \u003d targets[0].elts"},{"lineNumber":1589,"author":{"gitId":"-"},"content":"            if len(targets) \u003d\u003d 1:"},{"lineNumber":1590,"author":{"gitId":"-"},"content":"                # Unpacking a variable into the same name."},{"lineNumber":1591,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1592,"author":{"gitId":"-"},"content":""},{"lineNumber":1593,"author":{"gitId":"-"},"content":"        if isinstance(node.value, astroid.Name):"},{"lineNumber":1594,"author":{"gitId":"-"},"content":"            if len(targets) !\u003d 1:"},{"lineNumber":1595,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1596,"author":{"gitId":"-"},"content":"            rhs_names \u003d [node.value]"},{"lineNumber":1597,"author":{"gitId":"-"},"content":"        elif isinstance(node.value, astroid.Tuple):"},{"lineNumber":1598,"author":{"gitId":"-"},"content":"            rhs_count \u003d len(node.value.elts)"},{"lineNumber":1599,"author":{"gitId":"-"},"content":"            if len(targets) !\u003d rhs_count or rhs_count \u003d\u003d 1:"},{"lineNumber":1600,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1601,"author":{"gitId":"-"},"content":"            rhs_names \u003d node.value.elts"},{"lineNumber":1602,"author":{"gitId":"-"},"content":""},{"lineNumber":1603,"author":{"gitId":"-"},"content":"        for target, lhs_name in zip(targets, rhs_names):"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"            if not isinstance(lhs_name, astroid.Name):"},{"lineNumber":1605,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1606,"author":{"gitId":"-"},"content":"            if not isinstance(target, astroid.AssignName):"},{"lineNumber":1607,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"            if isinstance(scope, astroid.ClassDef) and target.name in scope_locals:"},{"lineNumber":1609,"author":{"gitId":"-"},"content":"                # Check that the scope is different than a class level, which is usually"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"                # a pattern to expose module level attributes as class level ones."},{"lineNumber":1611,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1612,"author":{"gitId":"-"},"content":"            if target.name \u003d\u003d lhs_name.name:"},{"lineNumber":1613,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":1614,"author":{"gitId":"-"},"content":"                    \"self-assigning-variable\", args\u003d(target.name,), node\u003dtarget"},{"lineNumber":1615,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1616,"author":{"gitId":"-"},"content":""},{"lineNumber":1617,"author":{"gitId":"-"},"content":"    def _check_redeclared_assign_name(self, targets):"},{"lineNumber":1618,"author":{"gitId":"-"},"content":"        dummy_variables_rgx \u003d lint_utils.get_global_option("},{"lineNumber":1619,"author":{"gitId":"-"},"content":"            self, \"dummy-variables-rgx\", default\u003dNone"},{"lineNumber":1620,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1621,"author":{"gitId":"-"},"content":""},{"lineNumber":1622,"author":{"gitId":"-"},"content":"        for target in targets:"},{"lineNumber":1623,"author":{"gitId":"-"},"content":"            if not isinstance(target, astroid.Tuple):"},{"lineNumber":1624,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1625,"author":{"gitId":"-"},"content":""},{"lineNumber":1626,"author":{"gitId":"-"},"content":"            found_names \u003d []"},{"lineNumber":1627,"author":{"gitId":"-"},"content":"            for element in target.elts:"},{"lineNumber":1628,"author":{"gitId":"-"},"content":"                if isinstance(element, astroid.Tuple):"},{"lineNumber":1629,"author":{"gitId":"-"},"content":"                    self._check_redeclared_assign_name([element])"},{"lineNumber":1630,"author":{"gitId":"-"},"content":"                elif isinstance(element, astroid.AssignName) and element.name !\u003d \"_\":"},{"lineNumber":1631,"author":{"gitId":"-"},"content":"                    if dummy_variables_rgx and dummy_variables_rgx.match(element.name):"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"                        return"},{"lineNumber":1633,"author":{"gitId":"-"},"content":"                    found_names.append(element.name)"},{"lineNumber":1634,"author":{"gitId":"-"},"content":""},{"lineNumber":1635,"author":{"gitId":"-"},"content":"            names \u003d collections.Counter(found_names)"},{"lineNumber":1636,"author":{"gitId":"-"},"content":"            for name, count in names.most_common():"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"                if count \u003e 1:"},{"lineNumber":1638,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1639,"author":{"gitId":"-"},"content":"                        \"redeclared-assigned-name\", args\u003d(name,), node\u003dtarget"},{"lineNumber":1640,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1641,"author":{"gitId":"-"},"content":""},{"lineNumber":1642,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"self-assigning-variable\", \"redeclared-assigned-name\")"},{"lineNumber":1643,"author":{"gitId":"-"},"content":"    def visit_assign(self, node):"},{"lineNumber":1644,"author":{"gitId":"-"},"content":"        self._check_self_assigning_variable(node)"},{"lineNumber":1645,"author":{"gitId":"-"},"content":"        self._check_redeclared_assign_name(node.targets)"},{"lineNumber":1646,"author":{"gitId":"-"},"content":""},{"lineNumber":1647,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"redeclared-assigned-name\")"},{"lineNumber":1648,"author":{"gitId":"-"},"content":"    def visit_for(self, node):"},{"lineNumber":1649,"author":{"gitId":"-"},"content":"        self._check_redeclared_assign_name([node.target])"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":""},{"lineNumber":1652,"author":{"gitId":"-"},"content":"KNOWN_NAME_TYPES \u003d {"},{"lineNumber":1653,"author":{"gitId":"-"},"content":"    \"module\","},{"lineNumber":1654,"author":{"gitId":"-"},"content":"    \"const\","},{"lineNumber":1655,"author":{"gitId":"-"},"content":"    \"class\","},{"lineNumber":1656,"author":{"gitId":"-"},"content":"    \"function\","},{"lineNumber":1657,"author":{"gitId":"-"},"content":"    \"method\","},{"lineNumber":1658,"author":{"gitId":"-"},"content":"    \"attr\","},{"lineNumber":1659,"author":{"gitId":"-"},"content":"    \"argument\","},{"lineNumber":1660,"author":{"gitId":"-"},"content":"    \"variable\","},{"lineNumber":1661,"author":{"gitId":"-"},"content":"    \"class_attribute\","},{"lineNumber":1662,"author":{"gitId":"-"},"content":"    \"class_const\","},{"lineNumber":1663,"author":{"gitId":"-"},"content":"    \"inlinevar\","},{"lineNumber":1664,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1665,"author":{"gitId":"-"},"content":""},{"lineNumber":1666,"author":{"gitId":"-"},"content":"HUMAN_READABLE_TYPES \u003d {"},{"lineNumber":1667,"author":{"gitId":"-"},"content":"    \"module\": \"module\","},{"lineNumber":1668,"author":{"gitId":"-"},"content":"    \"const\": \"constant\","},{"lineNumber":1669,"author":{"gitId":"-"},"content":"    \"class\": \"class\","},{"lineNumber":1670,"author":{"gitId":"-"},"content":"    \"function\": \"function\","},{"lineNumber":1671,"author":{"gitId":"-"},"content":"    \"method\": \"method\","},{"lineNumber":1672,"author":{"gitId":"-"},"content":"    \"attr\": \"attribute\","},{"lineNumber":1673,"author":{"gitId":"-"},"content":"    \"argument\": \"argument\","},{"lineNumber":1674,"author":{"gitId":"-"},"content":"    \"variable\": \"variable\","},{"lineNumber":1675,"author":{"gitId":"-"},"content":"    \"class_attribute\": \"class attribute\","},{"lineNumber":1676,"author":{"gitId":"-"},"content":"    \"class_const\": \"class constant\","},{"lineNumber":1677,"author":{"gitId":"-"},"content":"    \"inlinevar\": \"inline iteration\","},{"lineNumber":1678,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1679,"author":{"gitId":"-"},"content":""},{"lineNumber":1680,"author":{"gitId":"-"},"content":"DEFAULT_NAMING_STYLES \u003d {"},{"lineNumber":1681,"author":{"gitId":"-"},"content":"    \"module\": \"snake_case\","},{"lineNumber":1682,"author":{"gitId":"-"},"content":"    \"const\": \"UPPER_CASE\","},{"lineNumber":1683,"author":{"gitId":"-"},"content":"    \"class\": \"PascalCase\","},{"lineNumber":1684,"author":{"gitId":"-"},"content":"    \"function\": \"snake_case\","},{"lineNumber":1685,"author":{"gitId":"-"},"content":"    \"method\": \"snake_case\","},{"lineNumber":1686,"author":{"gitId":"-"},"content":"    \"attr\": \"snake_case\","},{"lineNumber":1687,"author":{"gitId":"-"},"content":"    \"argument\": \"snake_case\","},{"lineNumber":1688,"author":{"gitId":"-"},"content":"    \"variable\": \"snake_case\","},{"lineNumber":1689,"author":{"gitId":"-"},"content":"    \"class_attribute\": \"any\","},{"lineNumber":1690,"author":{"gitId":"-"},"content":"    \"class_const\": \"UPPER_CASE\","},{"lineNumber":1691,"author":{"gitId":"-"},"content":"    \"inlinevar\": \"any\","},{"lineNumber":1692,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1693,"author":{"gitId":"-"},"content":""},{"lineNumber":1694,"author":{"gitId":"-"},"content":""},{"lineNumber":1695,"author":{"gitId":"-"},"content":"def _create_naming_options():"},{"lineNumber":1696,"author":{"gitId":"-"},"content":"    name_options \u003d []"},{"lineNumber":1697,"author":{"gitId":"-"},"content":"    for name_type in sorted(KNOWN_NAME_TYPES):"},{"lineNumber":1698,"author":{"gitId":"-"},"content":"        human_readable_name \u003d HUMAN_READABLE_TYPES[name_type]"},{"lineNumber":1699,"author":{"gitId":"-"},"content":"        default_style \u003d DEFAULT_NAMING_STYLES[name_type]"},{"lineNumber":1700,"author":{"gitId":"-"},"content":"        name_type \u003d name_type.replace(\"_\", \"-\")"},{"lineNumber":1701,"author":{"gitId":"-"},"content":"        name_options.append("},{"lineNumber":1702,"author":{"gitId":"-"},"content":"            ("},{"lineNumber":1703,"author":{"gitId":"-"},"content":"                f\"{name_type}-naming-style\","},{"lineNumber":1704,"author":{"gitId":"-"},"content":"                {"},{"lineNumber":1705,"author":{"gitId":"-"},"content":"                    \"default\": default_style,"},{"lineNumber":1706,"author":{"gitId":"-"},"content":"                    \"type\": \"choice\","},{"lineNumber":1707,"author":{"gitId":"-"},"content":"                    \"choices\": list(NAMING_STYLES.keys()),"},{"lineNumber":1708,"author":{"gitId":"-"},"content":"                    \"metavar\": \"\u003cstyle\u003e\","},{"lineNumber":1709,"author":{"gitId":"-"},"content":"                    \"help\": \"Naming style matching correct %s names.\""},{"lineNumber":1710,"author":{"gitId":"-"},"content":"                    % (human_readable_name,),"},{"lineNumber":1711,"author":{"gitId":"-"},"content":"                },"},{"lineNumber":1712,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1713,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1714,"author":{"gitId":"-"},"content":"        name_options.append("},{"lineNumber":1715,"author":{"gitId":"-"},"content":"            ("},{"lineNumber":1716,"author":{"gitId":"-"},"content":"                f\"{name_type}-rgx\","},{"lineNumber":1717,"author":{"gitId":"-"},"content":"                {"},{"lineNumber":1718,"author":{"gitId":"-"},"content":"                    \"default\": None,"},{"lineNumber":1719,"author":{"gitId":"-"},"content":"                    \"type\": \"regexp\","},{"lineNumber":1720,"author":{"gitId":"-"},"content":"                    \"metavar\": \"\u003cregexp\u003e\","},{"lineNumber":1721,"author":{"gitId":"-"},"content":"                    \"help\": \"Regular expression matching correct %s names. Overrides %s-naming-style.\""},{"lineNumber":1722,"author":{"gitId":"-"},"content":"                    % (human_readable_name, name_type),"},{"lineNumber":1723,"author":{"gitId":"-"},"content":"                },"},{"lineNumber":1724,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1725,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1726,"author":{"gitId":"-"},"content":"    return tuple(name_options)"},{"lineNumber":1727,"author":{"gitId":"-"},"content":""},{"lineNumber":1728,"author":{"gitId":"-"},"content":""},{"lineNumber":1729,"author":{"gitId":"-"},"content":"class NameChecker(_BasicChecker):"},{"lineNumber":1730,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":1731,"author":{"gitId":"-"},"content":"        \"C0103\": ("},{"lineNumber":1732,"author":{"gitId":"-"},"content":"            \u0027%s name \"%s\" doesn\\\u0027t conform to %s\u0027,"},{"lineNumber":1733,"author":{"gitId":"-"},"content":"            \"invalid-name\","},{"lineNumber":1734,"author":{"gitId":"-"},"content":"            \"Used when the name doesn\u0027t conform to naming rules \""},{"lineNumber":1735,"author":{"gitId":"-"},"content":"            \"associated to its type (constant, variable, class...).\","},{"lineNumber":1736,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1737,"author":{"gitId":"-"},"content":"        \"C0104\": ("},{"lineNumber":1738,"author":{"gitId":"-"},"content":"            \u0027Disallowed name \"%s\"\u0027,"},{"lineNumber":1739,"author":{"gitId":"-"},"content":"            \"disallowed-name\","},{"lineNumber":1740,"author":{"gitId":"-"},"content":"            \"Used when the name matches bad-names or bad-names-rgxs- (unauthorized names).\","},{"lineNumber":1741,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1742,"author":{"gitId":"-"},"content":"                \"old_names\": ["},{"lineNumber":1743,"author":{"gitId":"-"},"content":"                    (\"C0102\", \"blacklisted-name\"),"},{"lineNumber":1744,"author":{"gitId":"-"},"content":"                ]"},{"lineNumber":1745,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1746,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1747,"author":{"gitId":"-"},"content":"        \"C0144\": ("},{"lineNumber":1748,"author":{"gitId":"-"},"content":"            \u0027%s name \"%s\" contains a non-ASCII unicode character\u0027,"},{"lineNumber":1749,"author":{"gitId":"-"},"content":"            \"non-ascii-name\","},{"lineNumber":1750,"author":{"gitId":"-"},"content":"            \"Used when the name contains at least one non-ASCII unicode character.\","},{"lineNumber":1751,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1752,"author":{"gitId":"-"},"content":"        \"W0111\": ("},{"lineNumber":1753,"author":{"gitId":"-"},"content":"            \"Name %s will become a keyword in Python %s\","},{"lineNumber":1754,"author":{"gitId":"-"},"content":"            \"assign-to-new-keyword\","},{"lineNumber":1755,"author":{"gitId":"-"},"content":"            \"Used when assignment will become invalid in future \""},{"lineNumber":1756,"author":{"gitId":"-"},"content":"            \"Python release due to introducing new keyword.\","},{"lineNumber":1757,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1758,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1759,"author":{"gitId":"-"},"content":""},{"lineNumber":1760,"author":{"gitId":"-"},"content":"    options \u003d ("},{"lineNumber":1761,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1762,"author":{"gitId":"-"},"content":"            \"good-names\","},{"lineNumber":1763,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1764,"author":{"gitId":"-"},"content":"                \"default\": (\"i\", \"j\", \"k\", \"ex\", \"Run\", \"_\"),"},{"lineNumber":1765,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":1766,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cnames\u003e\","},{"lineNumber":1767,"author":{"gitId":"-"},"content":"                \"help\": \"Good variable names which should always be accepted,\""},{"lineNumber":1768,"author":{"gitId":"-"},"content":"                \" separated by a comma.\","},{"lineNumber":1769,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1770,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1771,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1772,"author":{"gitId":"-"},"content":"            \"good-names-rgxs\","},{"lineNumber":1773,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1774,"author":{"gitId":"-"},"content":"                \"default\": \"\","},{"lineNumber":1775,"author":{"gitId":"-"},"content":"                \"type\": \"regexp_csv\","},{"lineNumber":1776,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cnames\u003e\","},{"lineNumber":1777,"author":{"gitId":"-"},"content":"                \"help\": \"Good variable names regexes, separated by a comma. If names match any regex,\""},{"lineNumber":1778,"author":{"gitId":"-"},"content":"                \" they will always be accepted\","},{"lineNumber":1779,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1780,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1781,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1782,"author":{"gitId":"-"},"content":"            \"bad-names\","},{"lineNumber":1783,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1784,"author":{"gitId":"-"},"content":"                \"default\": (\"foo\", \"bar\", \"baz\", \"toto\", \"tutu\", \"tata\"),"},{"lineNumber":1785,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":1786,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cnames\u003e\","},{"lineNumber":1787,"author":{"gitId":"-"},"content":"                \"help\": \"Bad variable names which should always be refused, \""},{"lineNumber":1788,"author":{"gitId":"-"},"content":"                \"separated by a comma.\","},{"lineNumber":1789,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1790,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1791,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1792,"author":{"gitId":"-"},"content":"            \"bad-names-rgxs\","},{"lineNumber":1793,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1794,"author":{"gitId":"-"},"content":"                \"default\": \"\","},{"lineNumber":1795,"author":{"gitId":"-"},"content":"                \"type\": \"regexp_csv\","},{"lineNumber":1796,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cnames\u003e\","},{"lineNumber":1797,"author":{"gitId":"-"},"content":"                \"help\": \"Bad variable names regexes, separated by a comma. If names match any regex,\""},{"lineNumber":1798,"author":{"gitId":"-"},"content":"                \" they will always be refused\","},{"lineNumber":1799,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1800,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1801,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1802,"author":{"gitId":"-"},"content":"            \"name-group\","},{"lineNumber":1803,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1804,"author":{"gitId":"-"},"content":"                \"default\": (),"},{"lineNumber":1805,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":1806,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cname1:name2\u003e\","},{"lineNumber":1807,"author":{"gitId":"-"},"content":"                \"help\": ("},{"lineNumber":1808,"author":{"gitId":"-"},"content":"                    \"Colon-delimited sets of names that determine each\""},{"lineNumber":1809,"author":{"gitId":"-"},"content":"                    \" other\u0027s naming style when the name regexes\""},{"lineNumber":1810,"author":{"gitId":"-"},"content":"                    \" allow several styles.\""},{"lineNumber":1811,"author":{"gitId":"-"},"content":"                ),"},{"lineNumber":1812,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1813,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1814,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1815,"author":{"gitId":"-"},"content":"            \"include-naming-hint\","},{"lineNumber":1816,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1817,"author":{"gitId":"-"},"content":"                \"default\": False,"},{"lineNumber":1818,"author":{"gitId":"-"},"content":"                \"type\": \"yn\","},{"lineNumber":1819,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cy_or_n\u003e\","},{"lineNumber":1820,"author":{"gitId":"-"},"content":"                \"help\": \"Include a hint for the correct naming format with invalid-name.\","},{"lineNumber":1821,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1822,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1823,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":1824,"author":{"gitId":"-"},"content":"            \"property-classes\","},{"lineNumber":1825,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":1826,"author":{"gitId":"-"},"content":"                \"default\": (\"abc.abstractproperty\",),"},{"lineNumber":1827,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":1828,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cdecorator names\u003e\","},{"lineNumber":1829,"author":{"gitId":"-"},"content":"                \"help\": \"List of decorators that produce properties, such as \""},{"lineNumber":1830,"author":{"gitId":"-"},"content":"                \"abc.abstractproperty. Add to this list to register \""},{"lineNumber":1831,"author":{"gitId":"-"},"content":"                \"other decorators that produce valid properties. \""},{"lineNumber":1832,"author":{"gitId":"-"},"content":"                \"These decorators are taken in consideration only for invalid-name.\","},{"lineNumber":1833,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1834,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1835,"author":{"gitId":"-"},"content":"    ) + _create_naming_options()"},{"lineNumber":1836,"author":{"gitId":"-"},"content":""},{"lineNumber":1837,"author":{"gitId":"-"},"content":"    KEYWORD_ONSET \u003d {(3, 7): {\"async\", \"await\"}}"},{"lineNumber":1838,"author":{"gitId":"-"},"content":""},{"lineNumber":1839,"author":{"gitId":"-"},"content":"    def __init__(self, linter):"},{"lineNumber":1840,"author":{"gitId":"-"},"content":"        _BasicChecker.__init__(self, linter)"},{"lineNumber":1841,"author":{"gitId":"-"},"content":"        self._name_category \u003d {}"},{"lineNumber":1842,"author":{"gitId":"-"},"content":"        self._name_group \u003d {}"},{"lineNumber":1843,"author":{"gitId":"-"},"content":"        self._bad_names \u003d {}"},{"lineNumber":1844,"author":{"gitId":"-"},"content":"        self._name_regexps \u003d {}"},{"lineNumber":1845,"author":{"gitId":"-"},"content":"        self._name_hints \u003d {}"},{"lineNumber":1846,"author":{"gitId":"-"},"content":"        self._good_names_rgxs_compiled \u003d []"},{"lineNumber":1847,"author":{"gitId":"-"},"content":"        self._bad_names_rgxs_compiled \u003d []"},{"lineNumber":1848,"author":{"gitId":"-"},"content":"        self._non_ascii_rgx_compiled \u003d re.compile(\"[^\\u0000-\\u007F]\")"},{"lineNumber":1849,"author":{"gitId":"-"},"content":""},{"lineNumber":1850,"author":{"gitId":"-"},"content":"    def open(self):"},{"lineNumber":1851,"author":{"gitId":"-"},"content":"        self.stats \u003d self.linter.add_stats("},{"lineNumber":1852,"author":{"gitId":"-"},"content":"            badname_module\u003d0,"},{"lineNumber":1853,"author":{"gitId":"-"},"content":"            badname_class\u003d0,"},{"lineNumber":1854,"author":{"gitId":"-"},"content":"            badname_function\u003d0,"},{"lineNumber":1855,"author":{"gitId":"-"},"content":"            badname_method\u003d0,"},{"lineNumber":1856,"author":{"gitId":"-"},"content":"            badname_attr\u003d0,"},{"lineNumber":1857,"author":{"gitId":"-"},"content":"            badname_const\u003d0,"},{"lineNumber":1858,"author":{"gitId":"-"},"content":"            badname_variable\u003d0,"},{"lineNumber":1859,"author":{"gitId":"-"},"content":"            badname_inlinevar\u003d0,"},{"lineNumber":1860,"author":{"gitId":"-"},"content":"            badname_argument\u003d0,"},{"lineNumber":1861,"author":{"gitId":"-"},"content":"            badname_class_attribute\u003d0,"},{"lineNumber":1862,"author":{"gitId":"-"},"content":"            badname_class_const\u003d0,"},{"lineNumber":1863,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1864,"author":{"gitId":"-"},"content":"        for group in self.config.name_group:"},{"lineNumber":1865,"author":{"gitId":"-"},"content":"            for name_type in group.split(\":\"):"},{"lineNumber":1866,"author":{"gitId":"-"},"content":"                self._name_group[name_type] \u003d f\"group_{group}\""},{"lineNumber":1867,"author":{"gitId":"-"},"content":""},{"lineNumber":1868,"author":{"gitId":"-"},"content":"        regexps, hints \u003d self._create_naming_rules()"},{"lineNumber":1869,"author":{"gitId":"-"},"content":"        self._name_regexps \u003d regexps"},{"lineNumber":1870,"author":{"gitId":"-"},"content":"        self._name_hints \u003d hints"},{"lineNumber":1871,"author":{"gitId":"-"},"content":"        self._good_names_rgxs_compiled \u003d ["},{"lineNumber":1872,"author":{"gitId":"-"},"content":"            re.compile(rgxp) for rgxp in self.config.good_names_rgxs"},{"lineNumber":1873,"author":{"gitId":"-"},"content":"        ]"},{"lineNumber":1874,"author":{"gitId":"-"},"content":"        self._bad_names_rgxs_compiled \u003d ["},{"lineNumber":1875,"author":{"gitId":"-"},"content":"            re.compile(rgxp) for rgxp in self.config.bad_names_rgxs"},{"lineNumber":1876,"author":{"gitId":"-"},"content":"        ]"},{"lineNumber":1877,"author":{"gitId":"-"},"content":""},{"lineNumber":1878,"author":{"gitId":"-"},"content":"    def _create_naming_rules(self):"},{"lineNumber":1879,"author":{"gitId":"-"},"content":"        regexps \u003d {}"},{"lineNumber":1880,"author":{"gitId":"-"},"content":"        hints \u003d {}"},{"lineNumber":1881,"author":{"gitId":"-"},"content":""},{"lineNumber":1882,"author":{"gitId":"-"},"content":"        for name_type in KNOWN_NAME_TYPES:"},{"lineNumber":1883,"author":{"gitId":"-"},"content":"            naming_style_option_name \u003d f\"{name_type}_naming_style\""},{"lineNumber":1884,"author":{"gitId":"-"},"content":"            naming_style_name \u003d getattr(self.config, naming_style_option_name)"},{"lineNumber":1885,"author":{"gitId":"-"},"content":""},{"lineNumber":1886,"author":{"gitId":"-"},"content":"            regexps[name_type] \u003d NAMING_STYLES[naming_style_name].get_regex(name_type)"},{"lineNumber":1887,"author":{"gitId":"-"},"content":""},{"lineNumber":1888,"author":{"gitId":"-"},"content":"            custom_regex_setting_name \u003d f\"{name_type}_rgx\""},{"lineNumber":1889,"author":{"gitId":"-"},"content":"            custom_regex \u003d getattr(self.config, custom_regex_setting_name, None)"},{"lineNumber":1890,"author":{"gitId":"-"},"content":"            if custom_regex is not None:"},{"lineNumber":1891,"author":{"gitId":"-"},"content":"                regexps[name_type] \u003d custom_regex"},{"lineNumber":1892,"author":{"gitId":"-"},"content":""},{"lineNumber":1893,"author":{"gitId":"-"},"content":"            if custom_regex is not None:"},{"lineNumber":1894,"author":{"gitId":"-"},"content":"                hints[name_type] \u003d \"%r pattern\" % custom_regex.pattern"},{"lineNumber":1895,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1896,"author":{"gitId":"-"},"content":"                hints[name_type] \u003d \"%s naming style\" % naming_style_name"},{"lineNumber":1897,"author":{"gitId":"-"},"content":""},{"lineNumber":1898,"author":{"gitId":"-"},"content":"        return regexps, hints"},{"lineNumber":1899,"author":{"gitId":"-"},"content":""},{"lineNumber":1900,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"disallowed-name\", \"invalid-name\", \"non-ascii-name\")"},{"lineNumber":1901,"author":{"gitId":"-"},"content":"    def visit_module(self, node):"},{"lineNumber":1902,"author":{"gitId":"-"},"content":"        self._check_name(\"module\", node.name.split(\".\")[-1], node)"},{"lineNumber":1903,"author":{"gitId":"-"},"content":"        self._bad_names \u003d {}"},{"lineNumber":1904,"author":{"gitId":"-"},"content":""},{"lineNumber":1905,"author":{"gitId":"-"},"content":"    def leave_module(self, node):  # pylint: disable\u003dunused-argument"},{"lineNumber":1906,"author":{"gitId":"-"},"content":"        for all_groups in self._bad_names.values():"},{"lineNumber":1907,"author":{"gitId":"-"},"content":"            if len(all_groups) \u003c 2:"},{"lineNumber":1908,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1909,"author":{"gitId":"-"},"content":"            groups \u003d collections.defaultdict(list)"},{"lineNumber":1910,"author":{"gitId":"-"},"content":"            min_warnings \u003d sys.maxsize"},{"lineNumber":1911,"author":{"gitId":"-"},"content":"            for group in all_groups.values():"},{"lineNumber":1912,"author":{"gitId":"-"},"content":"                groups[len(group)].append(group)"},{"lineNumber":1913,"author":{"gitId":"-"},"content":"                min_warnings \u003d min(len(group), min_warnings)"},{"lineNumber":1914,"author":{"gitId":"-"},"content":"            if len(groups[min_warnings]) \u003e 1:"},{"lineNumber":1915,"author":{"gitId":"-"},"content":"                by_line \u003d sorted("},{"lineNumber":1916,"author":{"gitId":"-"},"content":"                    groups[min_warnings],"},{"lineNumber":1917,"author":{"gitId":"-"},"content":"                    key\u003dlambda group: min(warning[0].lineno for warning in group),"},{"lineNumber":1918,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1919,"author":{"gitId":"-"},"content":"                warnings \u003d itertools.chain(*by_line[1:])"},{"lineNumber":1920,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1921,"author":{"gitId":"-"},"content":"                warnings \u003d groups[min_warnings][0]"},{"lineNumber":1922,"author":{"gitId":"-"},"content":"            for args in warnings:"},{"lineNumber":1923,"author":{"gitId":"-"},"content":"                self._raise_name_warning(*args)"},{"lineNumber":1924,"author":{"gitId":"-"},"content":""},{"lineNumber":1925,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":1926,"author":{"gitId":"-"},"content":"        \"disallowed-name\", \"invalid-name\", \"assign-to-new-keyword\", \"non-ascii-name\""},{"lineNumber":1927,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1928,"author":{"gitId":"-"},"content":"    def visit_classdef(self, node):"},{"lineNumber":1929,"author":{"gitId":"-"},"content":"        self._check_assign_to_new_keyword_violation(node.name, node)"},{"lineNumber":1930,"author":{"gitId":"-"},"content":"        self._check_name(\"class\", node.name, node)"},{"lineNumber":1931,"author":{"gitId":"-"},"content":"        for attr, anodes in node.instance_attrs.items():"},{"lineNumber":1932,"author":{"gitId":"-"},"content":"            if not any(node.instance_attr_ancestors(attr)):"},{"lineNumber":1933,"author":{"gitId":"-"},"content":"                self._check_name(\"attr\", attr, anodes[0])"},{"lineNumber":1934,"author":{"gitId":"-"},"content":""},{"lineNumber":1935,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":1936,"author":{"gitId":"-"},"content":"        \"disallowed-name\", \"invalid-name\", \"assign-to-new-keyword\", \"non-ascii-name\""},{"lineNumber":1937,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1938,"author":{"gitId":"-"},"content":"    def visit_functiondef(self, node):"},{"lineNumber":1939,"author":{"gitId":"-"},"content":"        # Do not emit any warnings if the method is just an implementation"},{"lineNumber":1940,"author":{"gitId":"-"},"content":"        # of a base class method."},{"lineNumber":1941,"author":{"gitId":"-"},"content":"        self._check_assign_to_new_keyword_violation(node.name, node)"},{"lineNumber":1942,"author":{"gitId":"-"},"content":"        confidence \u003d interfaces.HIGH"},{"lineNumber":1943,"author":{"gitId":"-"},"content":"        if node.is_method():"},{"lineNumber":1944,"author":{"gitId":"-"},"content":"            if utils.overrides_a_method(node.parent.frame(), node.name):"},{"lineNumber":1945,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1946,"author":{"gitId":"-"},"content":"            confidence \u003d ("},{"lineNumber":1947,"author":{"gitId":"-"},"content":"                interfaces.INFERENCE"},{"lineNumber":1948,"author":{"gitId":"-"},"content":"                if utils.has_known_bases(node.parent.frame())"},{"lineNumber":1949,"author":{"gitId":"-"},"content":"                else interfaces.INFERENCE_FAILURE"},{"lineNumber":1950,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1951,"author":{"gitId":"-"},"content":""},{"lineNumber":1952,"author":{"gitId":"-"},"content":"        self._check_name("},{"lineNumber":1953,"author":{"gitId":"-"},"content":"            _determine_function_name_type(node, config\u003dself.config),"},{"lineNumber":1954,"author":{"gitId":"-"},"content":"            node.name,"},{"lineNumber":1955,"author":{"gitId":"-"},"content":"            node,"},{"lineNumber":1956,"author":{"gitId":"-"},"content":"            confidence,"},{"lineNumber":1957,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1958,"author":{"gitId":"-"},"content":"        # Check argument names"},{"lineNumber":1959,"author":{"gitId":"-"},"content":"        args \u003d node.args.args"},{"lineNumber":1960,"author":{"gitId":"-"},"content":"        if args is not None:"},{"lineNumber":1961,"author":{"gitId":"-"},"content":"            self._recursive_check_names(args, node)"},{"lineNumber":1962,"author":{"gitId":"-"},"content":""},{"lineNumber":1963,"author":{"gitId":"-"},"content":"    visit_asyncfunctiondef \u003d visit_functiondef"},{"lineNumber":1964,"author":{"gitId":"-"},"content":""},{"lineNumber":1965,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"disallowed-name\", \"invalid-name\", \"non-ascii-name\")"},{"lineNumber":1966,"author":{"gitId":"-"},"content":"    def visit_global(self, node):"},{"lineNumber":1967,"author":{"gitId":"-"},"content":"        for name in node.names:"},{"lineNumber":1968,"author":{"gitId":"-"},"content":"            self._check_name(\"const\", name, node)"},{"lineNumber":1969,"author":{"gitId":"-"},"content":""},{"lineNumber":1970,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":1971,"author":{"gitId":"-"},"content":"        \"disallowed-name\", \"invalid-name\", \"assign-to-new-keyword\", \"non-ascii-name\""},{"lineNumber":1972,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1973,"author":{"gitId":"-"},"content":"    def visit_assignname(self, node):"},{"lineNumber":1974,"author":{"gitId":"-"},"content":"        \"\"\"check module level assigned names\"\"\""},{"lineNumber":1975,"author":{"gitId":"-"},"content":"        self._check_assign_to_new_keyword_violation(node.name, node)"},{"lineNumber":1976,"author":{"gitId":"-"},"content":"        frame \u003d node.frame()"},{"lineNumber":1977,"author":{"gitId":"-"},"content":"        assign_type \u003d node.assign_type()"},{"lineNumber":1978,"author":{"gitId":"-"},"content":"        if isinstance(assign_type, astroid.Comprehension):"},{"lineNumber":1979,"author":{"gitId":"-"},"content":"            self._check_name(\"inlinevar\", node.name, node)"},{"lineNumber":1980,"author":{"gitId":"-"},"content":"        elif isinstance(frame, astroid.Module):"},{"lineNumber":1981,"author":{"gitId":"-"},"content":"            if isinstance(assign_type, astroid.Assign):"},{"lineNumber":1982,"author":{"gitId":"-"},"content":"                if isinstance(utils.safe_infer(assign_type.value), astroid.ClassDef):"},{"lineNumber":1983,"author":{"gitId":"-"},"content":"                    self._check_name(\"class\", node.name, node)"},{"lineNumber":1984,"author":{"gitId":"-"},"content":"                # Don\u0027t emit if the name redefines an import"},{"lineNumber":1985,"author":{"gitId":"-"},"content":"                # in an ImportError except handler."},{"lineNumber":1986,"author":{"gitId":"-"},"content":"                elif not _redefines_import(node) and isinstance("},{"lineNumber":1987,"author":{"gitId":"-"},"content":"                    utils.safe_infer(assign_type.value), astroid.Const"},{"lineNumber":1988,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1989,"author":{"gitId":"-"},"content":"                    self._check_name(\"const\", node.name, node)"},{"lineNumber":1990,"author":{"gitId":"-"},"content":"            elif isinstance(assign_type, astroid.ExceptHandler):"},{"lineNumber":1991,"author":{"gitId":"-"},"content":"                self._check_name(\"variable\", node.name, node)"},{"lineNumber":1992,"author":{"gitId":"-"},"content":"            elif isinstance("},{"lineNumber":1993,"author":{"gitId":"-"},"content":"                assign_type, astroid.AnnAssign"},{"lineNumber":1994,"author":{"gitId":"-"},"content":"            ) and utils.is_assign_name_annotated_with(node, \"Final\"):"},{"lineNumber":1995,"author":{"gitId":"-"},"content":"                self._check_name(\"const\", node.name, node)"},{"lineNumber":1996,"author":{"gitId":"-"},"content":"        elif isinstance(frame, astroid.FunctionDef):"},{"lineNumber":1997,"author":{"gitId":"-"},"content":"            # global introduced variable aren\u0027t in the function locals"},{"lineNumber":1998,"author":{"gitId":"-"},"content":"            if node.name in frame and node.name not in frame.argnames():"},{"lineNumber":1999,"author":{"gitId":"-"},"content":"                if not _redefines_import(node):"},{"lineNumber":2000,"author":{"gitId":"-"},"content":"                    self._check_name(\"variable\", node.name, node)"},{"lineNumber":2001,"author":{"gitId":"-"},"content":"        elif isinstance(frame, astroid.ClassDef):"},{"lineNumber":2002,"author":{"gitId":"-"},"content":"            if not list(frame.local_attr_ancestors(node.name)):"},{"lineNumber":2003,"author":{"gitId":"-"},"content":"                for ancestor in frame.ancestors():"},{"lineNumber":2004,"author":{"gitId":"-"},"content":"                    if ("},{"lineNumber":2005,"author":{"gitId":"-"},"content":"                        ancestor.name \u003d\u003d \"Enum\""},{"lineNumber":2006,"author":{"gitId":"-"},"content":"                        and ancestor.root().name \u003d\u003d \"enum\""},{"lineNumber":2007,"author":{"gitId":"-"},"content":"                        or utils.is_assign_name_annotated_with(node, \"Final\")"},{"lineNumber":2008,"author":{"gitId":"-"},"content":"                    ):"},{"lineNumber":2009,"author":{"gitId":"-"},"content":"                        self._check_name(\"class_const\", node.name, node)"},{"lineNumber":2010,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":2011,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":2012,"author":{"gitId":"-"},"content":"                    self._check_name(\"class_attribute\", node.name, node)"},{"lineNumber":2013,"author":{"gitId":"-"},"content":""},{"lineNumber":2014,"author":{"gitId":"-"},"content":"    def _recursive_check_names(self, args, node):"},{"lineNumber":2015,"author":{"gitId":"-"},"content":"        \"\"\"check names in a possibly recursive list \u003carg\u003e\"\"\""},{"lineNumber":2016,"author":{"gitId":"-"},"content":"        for arg in args:"},{"lineNumber":2017,"author":{"gitId":"-"},"content":"            if isinstance(arg, astroid.AssignName):"},{"lineNumber":2018,"author":{"gitId":"-"},"content":"                self._check_name(\"argument\", arg.name, node)"},{"lineNumber":2019,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":2020,"author":{"gitId":"-"},"content":"                self._recursive_check_names(arg.elts, node)"},{"lineNumber":2021,"author":{"gitId":"-"},"content":""},{"lineNumber":2022,"author":{"gitId":"-"},"content":"    def _find_name_group(self, node_type):"},{"lineNumber":2023,"author":{"gitId":"-"},"content":"        return self._name_group.get(node_type, node_type)"},{"lineNumber":2024,"author":{"gitId":"-"},"content":""},{"lineNumber":2025,"author":{"gitId":"-"},"content":"    def _raise_name_warning("},{"lineNumber":2026,"author":{"gitId":"-"},"content":"        self, node, node_type, name, confidence, warning\u003d\"invalid-name\""},{"lineNumber":2027,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":2028,"author":{"gitId":"-"},"content":"        type_label \u003d HUMAN_READABLE_TYPES[node_type]"},{"lineNumber":2029,"author":{"gitId":"-"},"content":"        hint \u003d self._name_hints[node_type]"},{"lineNumber":2030,"author":{"gitId":"-"},"content":"        if self.config.include_naming_hint:"},{"lineNumber":2031,"author":{"gitId":"-"},"content":"            hint +\u003d \" (%r pattern)\" % self._name_regexps[node_type].pattern"},{"lineNumber":2032,"author":{"gitId":"-"},"content":"        args \u003d ("},{"lineNumber":2033,"author":{"gitId":"-"},"content":"            (type_label.capitalize(), name, hint)"},{"lineNumber":2034,"author":{"gitId":"-"},"content":"            if warning \u003d\u003d \"invalid-name\""},{"lineNumber":2035,"author":{"gitId":"-"},"content":"            else (type_label.capitalize(), name)"},{"lineNumber":2036,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2037,"author":{"gitId":"-"},"content":""},{"lineNumber":2038,"author":{"gitId":"-"},"content":"        self.add_message(warning, node\u003dnode, args\u003dargs, confidence\u003dconfidence)"},{"lineNumber":2039,"author":{"gitId":"-"},"content":"        self.stats[\"badname_\" + node_type] +\u003d 1"},{"lineNumber":2040,"author":{"gitId":"-"},"content":""},{"lineNumber":2041,"author":{"gitId":"-"},"content":"    def _name_allowed_by_regex(self, name: str) -\u003e bool:"},{"lineNumber":2042,"author":{"gitId":"-"},"content":"        return name in self.config.good_names or any("},{"lineNumber":2043,"author":{"gitId":"-"},"content":"            pattern.match(name) for pattern in self._good_names_rgxs_compiled"},{"lineNumber":2044,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2045,"author":{"gitId":"-"},"content":""},{"lineNumber":2046,"author":{"gitId":"-"},"content":"    def _name_disallowed_by_regex(self, name: str) -\u003e bool:"},{"lineNumber":2047,"author":{"gitId":"-"},"content":"        return name in self.config.bad_names or any("},{"lineNumber":2048,"author":{"gitId":"-"},"content":"            pattern.match(name) for pattern in self._bad_names_rgxs_compiled"},{"lineNumber":2049,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2050,"author":{"gitId":"-"},"content":""},{"lineNumber":2051,"author":{"gitId":"-"},"content":"    def _check_name(self, node_type, name, node, confidence\u003dinterfaces.HIGH):"},{"lineNumber":2052,"author":{"gitId":"-"},"content":"        \"\"\"check for a name using the type\u0027s regexp\"\"\""},{"lineNumber":2053,"author":{"gitId":"-"},"content":""},{"lineNumber":2054,"author":{"gitId":"-"},"content":"        non_ascii_match \u003d self._non_ascii_rgx_compiled.match(name)"},{"lineNumber":2055,"author":{"gitId":"-"},"content":""},{"lineNumber":2056,"author":{"gitId":"-"},"content":"        if non_ascii_match is not None:"},{"lineNumber":2057,"author":{"gitId":"-"},"content":"            self._raise_name_warning("},{"lineNumber":2058,"author":{"gitId":"-"},"content":"                node, node_type, name, confidence, warning\u003d\"non-ascii-name\""},{"lineNumber":2059,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2060,"author":{"gitId":"-"},"content":""},{"lineNumber":2061,"author":{"gitId":"-"},"content":"        def _should_exempt_from_invalid_name(node):"},{"lineNumber":2062,"author":{"gitId":"-"},"content":"            if node_type \u003d\u003d \"variable\":"},{"lineNumber":2063,"author":{"gitId":"-"},"content":"                inferred \u003d utils.safe_infer(node)"},{"lineNumber":2064,"author":{"gitId":"-"},"content":"                if isinstance(inferred, astroid.ClassDef):"},{"lineNumber":2065,"author":{"gitId":"-"},"content":"                    return True"},{"lineNumber":2066,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":2067,"author":{"gitId":"-"},"content":""},{"lineNumber":2068,"author":{"gitId":"-"},"content":"        if utils.is_inside_except(node):"},{"lineNumber":2069,"author":{"gitId":"-"},"content":"            clobbering, _ \u003d utils.clobber_in_except(node)"},{"lineNumber":2070,"author":{"gitId":"-"},"content":"            if clobbering:"},{"lineNumber":2071,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2072,"author":{"gitId":"-"},"content":"        if self._name_allowed_by_regex(name\u003dname):"},{"lineNumber":2073,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2074,"author":{"gitId":"-"},"content":"        if self._name_disallowed_by_regex(name\u003dname):"},{"lineNumber":2075,"author":{"gitId":"-"},"content":"            self.stats[\"badname_\" + node_type] +\u003d 1"},{"lineNumber":2076,"author":{"gitId":"-"},"content":"            self.add_message(\"disallowed-name\", node\u003dnode, args\u003dname)"},{"lineNumber":2077,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2078,"author":{"gitId":"-"},"content":"        regexp \u003d self._name_regexps[node_type]"},{"lineNumber":2079,"author":{"gitId":"-"},"content":"        match \u003d regexp.match(name)"},{"lineNumber":2080,"author":{"gitId":"-"},"content":""},{"lineNumber":2081,"author":{"gitId":"-"},"content":"        if _is_multi_naming_match(match, node_type, confidence):"},{"lineNumber":2082,"author":{"gitId":"-"},"content":"            name_group \u003d self._find_name_group(node_type)"},{"lineNumber":2083,"author":{"gitId":"-"},"content":"            bad_name_group \u003d self._bad_names.setdefault(name_group, {})"},{"lineNumber":2084,"author":{"gitId":"-"},"content":"            warnings \u003d bad_name_group.setdefault(match.lastgroup, [])"},{"lineNumber":2085,"author":{"gitId":"-"},"content":"            warnings.append((node, node_type, name, confidence))"},{"lineNumber":2086,"author":{"gitId":"-"},"content":""},{"lineNumber":2087,"author":{"gitId":"-"},"content":"        if match is None and not _should_exempt_from_invalid_name(node):"},{"lineNumber":2088,"author":{"gitId":"-"},"content":"            self._raise_name_warning(node, node_type, name, confidence)"},{"lineNumber":2089,"author":{"gitId":"-"},"content":""},{"lineNumber":2090,"author":{"gitId":"-"},"content":"    def _check_assign_to_new_keyword_violation(self, name, node):"},{"lineNumber":2091,"author":{"gitId":"-"},"content":"        keyword_first_version \u003d self._name_became_keyword_in_version("},{"lineNumber":2092,"author":{"gitId":"-"},"content":"            name, self.KEYWORD_ONSET"},{"lineNumber":2093,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2094,"author":{"gitId":"-"},"content":"        if keyword_first_version is not None:"},{"lineNumber":2095,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":2096,"author":{"gitId":"-"},"content":"                \"assign-to-new-keyword\","},{"lineNumber":2097,"author":{"gitId":"-"},"content":"                node\u003dnode,"},{"lineNumber":2098,"author":{"gitId":"-"},"content":"                args\u003d(name, keyword_first_version),"},{"lineNumber":2099,"author":{"gitId":"-"},"content":"                confidence\u003dinterfaces.HIGH,"},{"lineNumber":2100,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2101,"author":{"gitId":"-"},"content":""},{"lineNumber":2102,"author":{"gitId":"-"},"content":"    @staticmethod"},{"lineNumber":2103,"author":{"gitId":"-"},"content":"    def _name_became_keyword_in_version(name, rules):"},{"lineNumber":2104,"author":{"gitId":"-"},"content":"        for version, keywords in rules.items():"},{"lineNumber":2105,"author":{"gitId":"-"},"content":"            if name in keywords and sys.version_info \u003c version:"},{"lineNumber":2106,"author":{"gitId":"-"},"content":"                return \".\".join(str(v) for v in version)"},{"lineNumber":2107,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":2108,"author":{"gitId":"-"},"content":""},{"lineNumber":2109,"author":{"gitId":"-"},"content":""},{"lineNumber":2110,"author":{"gitId":"-"},"content":"class DocStringChecker(_BasicChecker):"},{"lineNumber":2111,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":2112,"author":{"gitId":"-"},"content":"        \"C0112\": ("},{"lineNumber":2113,"author":{"gitId":"-"},"content":"            \"Empty %s docstring\","},{"lineNumber":2114,"author":{"gitId":"-"},"content":"            \"empty-docstring\","},{"lineNumber":2115,"author":{"gitId":"-"},"content":"            \"Used when a module, function, class or method has an empty \""},{"lineNumber":2116,"author":{"gitId":"-"},"content":"            \"docstring (it would be too easy ;).\","},{"lineNumber":2117,"author":{"gitId":"-"},"content":"            {\"old_names\": [(\"W0132\", \"old-empty-docstring\")]},"},{"lineNumber":2118,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2119,"author":{"gitId":"-"},"content":"        \"C0114\": ("},{"lineNumber":2120,"author":{"gitId":"-"},"content":"            \"Missing module docstring\","},{"lineNumber":2121,"author":{"gitId":"-"},"content":"            \"missing-module-docstring\","},{"lineNumber":2122,"author":{"gitId":"-"},"content":"            \"Used when a module has no docstring.\""},{"lineNumber":2123,"author":{"gitId":"-"},"content":"            \"Empty modules do not require a docstring.\","},{"lineNumber":2124,"author":{"gitId":"-"},"content":"            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"},{"lineNumber":2125,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2126,"author":{"gitId":"-"},"content":"        \"C0115\": ("},{"lineNumber":2127,"author":{"gitId":"-"},"content":"            \"Missing class docstring\","},{"lineNumber":2128,"author":{"gitId":"-"},"content":"            \"missing-class-docstring\","},{"lineNumber":2129,"author":{"gitId":"-"},"content":"            \"Used when a class has no docstring.\""},{"lineNumber":2130,"author":{"gitId":"-"},"content":"            \"Even an empty class must have a docstring.\","},{"lineNumber":2131,"author":{"gitId":"-"},"content":"            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"},{"lineNumber":2132,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2133,"author":{"gitId":"-"},"content":"        \"C0116\": ("},{"lineNumber":2134,"author":{"gitId":"-"},"content":"            \"Missing function or method docstring\","},{"lineNumber":2135,"author":{"gitId":"-"},"content":"            \"missing-function-docstring\","},{"lineNumber":2136,"author":{"gitId":"-"},"content":"            \"Used when a function or method has no docstring.\""},{"lineNumber":2137,"author":{"gitId":"-"},"content":"            \"Some special methods like __init__ do not require a \""},{"lineNumber":2138,"author":{"gitId":"-"},"content":"            \"docstring.\","},{"lineNumber":2139,"author":{"gitId":"-"},"content":"            {\"old_names\": [(\"C0111\", \"missing-docstring\")]},"},{"lineNumber":2140,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":2142,"author":{"gitId":"-"},"content":"    options \u003d ("},{"lineNumber":2143,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":2144,"author":{"gitId":"-"},"content":"            \"no-docstring-rgx\","},{"lineNumber":2145,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":2146,"author":{"gitId":"-"},"content":"                \"default\": NO_REQUIRED_DOC_RGX,"},{"lineNumber":2147,"author":{"gitId":"-"},"content":"                \"type\": \"regexp\","},{"lineNumber":2148,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cregexp\u003e\","},{"lineNumber":2149,"author":{"gitId":"-"},"content":"                \"help\": \"Regular expression which should only match \""},{"lineNumber":2150,"author":{"gitId":"-"},"content":"                \"function or class names that do not require a \""},{"lineNumber":2151,"author":{"gitId":"-"},"content":"                \"docstring.\","},{"lineNumber":2152,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":2153,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2154,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":2155,"author":{"gitId":"-"},"content":"            \"docstring-min-length\","},{"lineNumber":2156,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":2157,"author":{"gitId":"-"},"content":"                \"default\": -1,"},{"lineNumber":2158,"author":{"gitId":"-"},"content":"                \"type\": \"int\","},{"lineNumber":2159,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cint\u003e\","},{"lineNumber":2160,"author":{"gitId":"-"},"content":"                \"help\": ("},{"lineNumber":2161,"author":{"gitId":"-"},"content":"                    \"Minimum line length for functions/classes that\""},{"lineNumber":2162,"author":{"gitId":"-"},"content":"                    \" require docstrings, shorter ones are exempt.\""},{"lineNumber":2163,"author":{"gitId":"-"},"content":"                ),"},{"lineNumber":2164,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":2165,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2166,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":2167,"author":{"gitId":"-"},"content":""},{"lineNumber":2168,"author":{"gitId":"-"},"content":"    def open(self):"},{"lineNumber":2169,"author":{"gitId":"-"},"content":"        self.stats \u003d self.linter.add_stats("},{"lineNumber":2170,"author":{"gitId":"-"},"content":"            undocumented_module\u003d0,"},{"lineNumber":2171,"author":{"gitId":"-"},"content":"            undocumented_function\u003d0,"},{"lineNumber":2172,"author":{"gitId":"-"},"content":"            undocumented_method\u003d0,"},{"lineNumber":2173,"author":{"gitId":"-"},"content":"            undocumented_class\u003d0,"},{"lineNumber":2174,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2175,"author":{"gitId":"-"},"content":""},{"lineNumber":2176,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"},{"lineNumber":2177,"author":{"gitId":"-"},"content":"    def visit_module(self, node):"},{"lineNumber":2178,"author":{"gitId":"-"},"content":"        self._check_docstring(\"module\", node)"},{"lineNumber":2179,"author":{"gitId":"-"},"content":""},{"lineNumber":2180,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"},{"lineNumber":2181,"author":{"gitId":"-"},"content":"    def visit_classdef(self, node):"},{"lineNumber":2182,"author":{"gitId":"-"},"content":"        if self.config.no_docstring_rgx.match(node.name) is None:"},{"lineNumber":2183,"author":{"gitId":"-"},"content":"            self._check_docstring(\"class\", node)"},{"lineNumber":2184,"author":{"gitId":"-"},"content":""},{"lineNumber":2185,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"missing-docstring\", \"empty-docstring\")"},{"lineNumber":2186,"author":{"gitId":"-"},"content":"    def visit_functiondef(self, node):"},{"lineNumber":2187,"author":{"gitId":"-"},"content":"        if self.config.no_docstring_rgx.match(node.name) is None:"},{"lineNumber":2188,"author":{"gitId":"-"},"content":"            ftype \u003d \"method\" if node.is_method() else \"function\""},{"lineNumber":2189,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":2190,"author":{"gitId":"-"},"content":"                is_property_setter(node)"},{"lineNumber":2191,"author":{"gitId":"-"},"content":"                or is_property_deleter(node)"},{"lineNumber":2192,"author":{"gitId":"-"},"content":"                or is_overload_stub(node)"},{"lineNumber":2193,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":2194,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2195,"author":{"gitId":"-"},"content":""},{"lineNumber":2196,"author":{"gitId":"-"},"content":"            if isinstance(node.parent.frame(), astroid.ClassDef):"},{"lineNumber":2197,"author":{"gitId":"-"},"content":"                overridden \u003d False"},{"lineNumber":2198,"author":{"gitId":"-"},"content":"                confidence \u003d ("},{"lineNumber":2199,"author":{"gitId":"-"},"content":"                    interfaces.INFERENCE"},{"lineNumber":2200,"author":{"gitId":"-"},"content":"                    if utils.has_known_bases(node.parent.frame())"},{"lineNumber":2201,"author":{"gitId":"-"},"content":"                    else interfaces.INFERENCE_FAILURE"},{"lineNumber":2202,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":2203,"author":{"gitId":"-"},"content":"                # check if node is from a method overridden by its ancestor"},{"lineNumber":2204,"author":{"gitId":"-"},"content":"                for ancestor in node.parent.frame().ancestors():"},{"lineNumber":2205,"author":{"gitId":"-"},"content":"                    if node.name in ancestor and isinstance("},{"lineNumber":2206,"author":{"gitId":"-"},"content":"                        ancestor[node.name], astroid.FunctionDef"},{"lineNumber":2207,"author":{"gitId":"-"},"content":"                    ):"},{"lineNumber":2208,"author":{"gitId":"-"},"content":"                        overridden \u003d True"},{"lineNumber":2209,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":2210,"author":{"gitId":"-"},"content":"                self._check_docstring("},{"lineNumber":2211,"author":{"gitId":"-"},"content":"                    ftype, node, report_missing\u003dnot overridden, confidence\u003dconfidence"},{"lineNumber":2212,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":2213,"author":{"gitId":"-"},"content":"            elif isinstance(node.parent.frame(), astroid.Module):"},{"lineNumber":2214,"author":{"gitId":"-"},"content":"                self._check_docstring(ftype, node)"},{"lineNumber":2215,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":2216,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2217,"author":{"gitId":"-"},"content":""},{"lineNumber":2218,"author":{"gitId":"-"},"content":"    visit_asyncfunctiondef \u003d visit_functiondef"},{"lineNumber":2219,"author":{"gitId":"-"},"content":""},{"lineNumber":2220,"author":{"gitId":"-"},"content":"    def _check_docstring("},{"lineNumber":2221,"author":{"gitId":"-"},"content":"        self, node_type, node, report_missing\u003dTrue, confidence\u003dinterfaces.HIGH"},{"lineNumber":2222,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":2223,"author":{"gitId":"-"},"content":"        \"\"\"check the node has a non empty docstring\"\"\""},{"lineNumber":2224,"author":{"gitId":"-"},"content":"        docstring \u003d node.doc"},{"lineNumber":2225,"author":{"gitId":"-"},"content":"        if docstring is None:"},{"lineNumber":2226,"author":{"gitId":"-"},"content":"            docstring \u003d _infer_dunder_doc_attribute(node)"},{"lineNumber":2227,"author":{"gitId":"-"},"content":""},{"lineNumber":2228,"author":{"gitId":"-"},"content":"        if docstring is None:"},{"lineNumber":2229,"author":{"gitId":"-"},"content":"            if not report_missing:"},{"lineNumber":2230,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2231,"author":{"gitId":"-"},"content":"            lines \u003d utils.get_node_last_lineno(node) - node.lineno"},{"lineNumber":2232,"author":{"gitId":"-"},"content":""},{"lineNumber":2233,"author":{"gitId":"-"},"content":"            if node_type \u003d\u003d \"module\" and not lines:"},{"lineNumber":2234,"author":{"gitId":"-"},"content":"                # If the module has no body, there\u0027s no reason"},{"lineNumber":2235,"author":{"gitId":"-"},"content":"                # to require a docstring."},{"lineNumber":2236,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2237,"author":{"gitId":"-"},"content":"            max_lines \u003d self.config.docstring_min_length"},{"lineNumber":2238,"author":{"gitId":"-"},"content":""},{"lineNumber":2239,"author":{"gitId":"-"},"content":"            if node_type !\u003d \"module\" and max_lines \u003e -1 and lines \u003c max_lines:"},{"lineNumber":2240,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2241,"author":{"gitId":"-"},"content":"            self.stats[\"undocumented_\" + node_type] +\u003d 1"},{"lineNumber":2242,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":2243,"author":{"gitId":"-"},"content":"                node.body"},{"lineNumber":2244,"author":{"gitId":"-"},"content":"                and isinstance(node.body[0], astroid.Expr)"},{"lineNumber":2245,"author":{"gitId":"-"},"content":"                and isinstance(node.body[0].value, astroid.Call)"},{"lineNumber":2246,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":2247,"author":{"gitId":"-"},"content":"                # Most likely a string with a format call. Let\u0027s see."},{"lineNumber":2248,"author":{"gitId":"-"},"content":"                func \u003d utils.safe_infer(node.body[0].value.func)"},{"lineNumber":2249,"author":{"gitId":"-"},"content":"                if isinstance(func, astroid.BoundMethod) and isinstance("},{"lineNumber":2250,"author":{"gitId":"-"},"content":"                    func.bound, astroid.Instance"},{"lineNumber":2251,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":2252,"author":{"gitId":"-"},"content":"                    # Strings."},{"lineNumber":2253,"author":{"gitId":"-"},"content":"                    if func.bound.name in (\"str\", \"unicode\", \"bytes\"):"},{"lineNumber":2254,"author":{"gitId":"-"},"content":"                        return"},{"lineNumber":2255,"author":{"gitId":"-"},"content":"            if node_type \u003d\u003d \"module\":"},{"lineNumber":2256,"author":{"gitId":"-"},"content":"                message \u003d \"missing-module-docstring\""},{"lineNumber":2257,"author":{"gitId":"-"},"content":"            elif node_type \u003d\u003d \"class\":"},{"lineNumber":2258,"author":{"gitId":"-"},"content":"                message \u003d \"missing-class-docstring\""},{"lineNumber":2259,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":2260,"author":{"gitId":"-"},"content":"                message \u003d \"missing-function-docstring\""},{"lineNumber":2261,"author":{"gitId":"-"},"content":"            self.add_message(message, node\u003dnode, confidence\u003dconfidence)"},{"lineNumber":2262,"author":{"gitId":"-"},"content":"        elif not docstring.strip():"},{"lineNumber":2263,"author":{"gitId":"-"},"content":"            self.stats[\"undocumented_\" + node_type] +\u003d 1"},{"lineNumber":2264,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":2265,"author":{"gitId":"-"},"content":"                \"empty-docstring\", node\u003dnode, args\u003d(node_type,), confidence\u003dconfidence"},{"lineNumber":2266,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2267,"author":{"gitId":"-"},"content":""},{"lineNumber":2268,"author":{"gitId":"-"},"content":""},{"lineNumber":2269,"author":{"gitId":"-"},"content":"class PassChecker(_BasicChecker):"},{"lineNumber":2270,"author":{"gitId":"-"},"content":"    \"\"\"check if the pass statement is really necessary\"\"\""},{"lineNumber":2271,"author":{"gitId":"-"},"content":""},{"lineNumber":2272,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":2273,"author":{"gitId":"-"},"content":"        \"W0107\": ("},{"lineNumber":2274,"author":{"gitId":"-"},"content":"            \"Unnecessary pass statement\","},{"lineNumber":2275,"author":{"gitId":"-"},"content":"            \"unnecessary-pass\","},{"lineNumber":2276,"author":{"gitId":"-"},"content":"            \u0027Used when a \"pass\" statement that can be avoided is encountered.\u0027,"},{"lineNumber":2277,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":2279,"author":{"gitId":"-"},"content":""},{"lineNumber":2280,"author":{"gitId":"-"},"content":"    @utils.check_messages(\"unnecessary-pass\")"},{"lineNumber":2281,"author":{"gitId":"-"},"content":"    def visit_pass(self, node):"},{"lineNumber":2282,"author":{"gitId":"-"},"content":"        if len(node.parent.child_sequence(node)) \u003e 1 or ("},{"lineNumber":2283,"author":{"gitId":"-"},"content":"            isinstance(node.parent, (astroid.ClassDef, astroid.FunctionDef))"},{"lineNumber":2284,"author":{"gitId":"-"},"content":"            and (node.parent.doc is not None)"},{"lineNumber":2285,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":2286,"author":{"gitId":"-"},"content":"            self.add_message(\"unnecessary-pass\", node\u003dnode)"},{"lineNumber":2287,"author":{"gitId":"-"},"content":""},{"lineNumber":2288,"author":{"gitId":"-"},"content":""},{"lineNumber":2289,"author":{"gitId":"-"},"content":"def _is_one_arg_pos_call(call):"},{"lineNumber":2290,"author":{"gitId":"-"},"content":"    \"\"\"Is this a call with exactly 1 argument,"},{"lineNumber":2291,"author":{"gitId":"-"},"content":"    where that argument is positional?"},{"lineNumber":2292,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":2293,"author":{"gitId":"-"},"content":"    return isinstance(call, astroid.Call) and len(call.args) \u003d\u003d 1 and not call.keywords"},{"lineNumber":2294,"author":{"gitId":"-"},"content":""},{"lineNumber":2295,"author":{"gitId":"-"},"content":""},{"lineNumber":2296,"author":{"gitId":"-"},"content":"def _infer_dunder_doc_attribute(node):"},{"lineNumber":2297,"author":{"gitId":"-"},"content":"    # Try to see if we have a `__doc__` attribute."},{"lineNumber":2298,"author":{"gitId":"-"},"content":"    try:"},{"lineNumber":2299,"author":{"gitId":"-"},"content":"        docstring \u003d node[\"__doc__\"]"},{"lineNumber":2300,"author":{"gitId":"-"},"content":"    except KeyError:"},{"lineNumber":2301,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":2302,"author":{"gitId":"-"},"content":""},{"lineNumber":2303,"author":{"gitId":"-"},"content":"    docstring \u003d utils.safe_infer(docstring)"},{"lineNumber":2304,"author":{"gitId":"-"},"content":"    if not docstring:"},{"lineNumber":2305,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":2306,"author":{"gitId":"-"},"content":"    if not isinstance(docstring, astroid.Const):"},{"lineNumber":2307,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":2308,"author":{"gitId":"-"},"content":"    return docstring.value"},{"lineNumber":2309,"author":{"gitId":"-"},"content":""},{"lineNumber":2310,"author":{"gitId":"-"},"content":""},{"lineNumber":2311,"author":{"gitId":"-"},"content":"class ComparisonChecker(_BasicChecker):"},{"lineNumber":2312,"author":{"gitId":"-"},"content":"    \"\"\"Checks for comparisons"},{"lineNumber":2313,"author":{"gitId":"-"},"content":""},{"lineNumber":2314,"author":{"gitId":"-"},"content":"    - singleton comparison: \u0027expr \u003d\u003d True\u0027, \u0027expr \u003d\u003d False\u0027 and \u0027expr \u003d\u003d None\u0027"},{"lineNumber":2315,"author":{"gitId":"-"},"content":"    - yoda condition: \u0027const \"comp\" right\u0027 where comp can be \u0027\u003d\u003d\u0027, \u0027!\u003d\u0027, \u0027\u003c\u0027,"},{"lineNumber":2316,"author":{"gitId":"-"},"content":"      \u0027\u003c\u003d\u0027, \u0027\u003e\u0027 or \u0027\u003e\u003d\u0027, and right can be a variable, an attribute, a method or"},{"lineNumber":2317,"author":{"gitId":"-"},"content":"      a function"},{"lineNumber":2318,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":2319,"author":{"gitId":"-"},"content":""},{"lineNumber":2320,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":2321,"author":{"gitId":"-"},"content":"        \"C0121\": ("},{"lineNumber":2322,"author":{"gitId":"-"},"content":"            \"Comparison %s should be %s\","},{"lineNumber":2323,"author":{"gitId":"-"},"content":"            \"singleton-comparison\","},{"lineNumber":2324,"author":{"gitId":"-"},"content":"            \"Used when an expression is compared to singleton \""},{"lineNumber":2325,"author":{"gitId":"-"},"content":"            \"values like True, False or None.\","},{"lineNumber":2326,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2327,"author":{"gitId":"-"},"content":"        \"C0122\": ("},{"lineNumber":2328,"author":{"gitId":"-"},"content":"            \"Comparison should be %s\","},{"lineNumber":2329,"author":{"gitId":"-"},"content":"            \"misplaced-comparison-constant\","},{"lineNumber":2330,"author":{"gitId":"-"},"content":"            \"Used when the constant is placed on the left side \""},{"lineNumber":2331,"author":{"gitId":"-"},"content":"            \"of a comparison. It is usually clearer in intent to \""},{"lineNumber":2332,"author":{"gitId":"-"},"content":"            \"place it in the right hand side of the comparison.\","},{"lineNumber":2333,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2334,"author":{"gitId":"-"},"content":"        \"C0123\": ("},{"lineNumber":2335,"author":{"gitId":"-"},"content":"            \"Use isinstance() rather than type() for a typecheck.\","},{"lineNumber":2336,"author":{"gitId":"-"},"content":"            \"unidiomatic-typecheck\","},{"lineNumber":2337,"author":{"gitId":"-"},"content":"            \"The idiomatic way to perform an explicit typecheck in \""},{"lineNumber":2338,"author":{"gitId":"-"},"content":"            \"Python is to use isinstance(x, Y) rather than \""},{"lineNumber":2339,"author":{"gitId":"-"},"content":"            \"type(x) \u003d\u003d Y, type(x) is Y. Though there are unusual \""},{"lineNumber":2340,"author":{"gitId":"-"},"content":"            \"situations where these give different results.\","},{"lineNumber":2341,"author":{"gitId":"-"},"content":"            {\"old_names\": [(\"W0154\", \"old-unidiomatic-typecheck\")]},"},{"lineNumber":2342,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2343,"author":{"gitId":"-"},"content":"        \"R0123\": ("},{"lineNumber":2344,"author":{"gitId":"-"},"content":"            \"Comparison to literal\","},{"lineNumber":2345,"author":{"gitId":"-"},"content":"            \"literal-comparison\","},{"lineNumber":2346,"author":{"gitId":"-"},"content":"            \"Used when comparing an object to a literal, which is usually \""},{"lineNumber":2347,"author":{"gitId":"-"},"content":"            \"what you do not want to do, since you can compare to a different \""},{"lineNumber":2348,"author":{"gitId":"-"},"content":"            \"literal than what was expected altogether.\","},{"lineNumber":2349,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2350,"author":{"gitId":"-"},"content":"        \"R0124\": ("},{"lineNumber":2351,"author":{"gitId":"-"},"content":"            \"Redundant comparison - %s\","},{"lineNumber":2352,"author":{"gitId":"-"},"content":"            \"comparison-with-itself\","},{"lineNumber":2353,"author":{"gitId":"-"},"content":"            \"Used when something is compared against itself.\","},{"lineNumber":2354,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2355,"author":{"gitId":"-"},"content":"        \"W0143\": ("},{"lineNumber":2356,"author":{"gitId":"-"},"content":"            \"Comparing against a callable, did you omit the parenthesis?\","},{"lineNumber":2357,"author":{"gitId":"-"},"content":"            \"comparison-with-callable\","},{"lineNumber":2358,"author":{"gitId":"-"},"content":"            \"This message is emitted when pylint detects that a comparison with a \""},{"lineNumber":2359,"author":{"gitId":"-"},"content":"            \"callable was made, which might suggest that some parenthesis were omitted, \""},{"lineNumber":2360,"author":{"gitId":"-"},"content":"            \"resulting in potential unwanted behaviour.\","},{"lineNumber":2361,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2362,"author":{"gitId":"-"},"content":"        \"W0177\": ("},{"lineNumber":2363,"author":{"gitId":"-"},"content":"            \"Comparison %s should be %s\","},{"lineNumber":2364,"author":{"gitId":"-"},"content":"            \"nan-comparison\","},{"lineNumber":2365,"author":{"gitId":"-"},"content":"            \"Used when an expression is compared to NaN\""},{"lineNumber":2366,"author":{"gitId":"-"},"content":"            \"values like numpy.NaN and float(\u0027nan\u0027)\","},{"lineNumber":2367,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":2368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":2369,"author":{"gitId":"-"},"content":""},{"lineNumber":2370,"author":{"gitId":"-"},"content":"    def _check_singleton_comparison("},{"lineNumber":2371,"author":{"gitId":"-"},"content":"        self, left_value, right_value, root_node, checking_for_absence: bool \u003d False"},{"lineNumber":2372,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":2373,"author":{"gitId":"-"},"content":"        \"\"\"Check if \u003d\u003d or !\u003d is being used to compare a singleton value\"\"\""},{"lineNumber":2374,"author":{"gitId":"-"},"content":"        singleton_values \u003d (True, False, None)"},{"lineNumber":2375,"author":{"gitId":"-"},"content":""},{"lineNumber":2376,"author":{"gitId":"-"},"content":"        def _is_singleton_const(node) -\u003e bool:"},{"lineNumber":2377,"author":{"gitId":"-"},"content":"            return isinstance(node, astroid.Const) and any("},{"lineNumber":2378,"author":{"gitId":"-"},"content":"                node.value is value for value in singleton_values"},{"lineNumber":2379,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2380,"author":{"gitId":"-"},"content":""},{"lineNumber":2381,"author":{"gitId":"-"},"content":"        if _is_singleton_const(left_value):"},{"lineNumber":2382,"author":{"gitId":"-"},"content":"            singleton, other_value \u003d left_value.value, right_value"},{"lineNumber":2383,"author":{"gitId":"-"},"content":"        elif _is_singleton_const(right_value):"},{"lineNumber":2384,"author":{"gitId":"-"},"content":"            singleton, other_value \u003d right_value.value, left_value"},{"lineNumber":2385,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":2386,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2387,"author":{"gitId":"-"},"content":""},{"lineNumber":2388,"author":{"gitId":"-"},"content":"        singleton_comparison_example \u003d {False: \"\u0027{} is {}\u0027\", True: \"\u0027{} is not {}\u0027\"}"},{"lineNumber":2389,"author":{"gitId":"-"},"content":""},{"lineNumber":2390,"author":{"gitId":"-"},"content":"        # True/False singletons have a special-cased message in case the user is"},{"lineNumber":2391,"author":{"gitId":"-"},"content":"        # mistakenly using \u003d\u003d or !\u003d to check for truthiness"},{"lineNumber":2392,"author":{"gitId":"-"},"content":"        if singleton in (True, False):"},{"lineNumber":2393,"author":{"gitId":"-"},"content":"            suggestion_template \u003d ("},{"lineNumber":2394,"author":{"gitId":"-"},"content":"                \"{} if checking for the singleton value {}, or {} if testing for {}\""},{"lineNumber":2395,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2396,"author":{"gitId":"-"},"content":"            truthiness_example \u003d {False: \"not {}\", True: \"{}\"}"},{"lineNumber":2397,"author":{"gitId":"-"},"content":"            truthiness_phrase \u003d {True: \"truthiness\", False: \"falsiness\"}"},{"lineNumber":2398,"author":{"gitId":"-"},"content":""},{"lineNumber":2399,"author":{"gitId":"-"},"content":"            # Looks for comparisons like x \u003d\u003d True or x !\u003d False"},{"lineNumber":2400,"author":{"gitId":"-"},"content":"            checking_truthiness \u003d singleton is not checking_for_absence"},{"lineNumber":2401,"author":{"gitId":"-"},"content":""},{"lineNumber":2402,"author":{"gitId":"-"},"content":"            suggestion \u003d suggestion_template.format("},{"lineNumber":2403,"author":{"gitId":"-"},"content":"                singleton_comparison_example[checking_for_absence].format("},{"lineNumber":2404,"author":{"gitId":"-"},"content":"                    left_value.as_string(), right_value.as_string()"},{"lineNumber":2405,"author":{"gitId":"-"},"content":"                ),"},{"lineNumber":2406,"author":{"gitId":"-"},"content":"                singleton,"},{"lineNumber":2407,"author":{"gitId":"-"},"content":"                ("},{"lineNumber":2408,"author":{"gitId":"-"},"content":"                    \"\u0027bool({})\u0027\""},{"lineNumber":2409,"author":{"gitId":"-"},"content":"                    if not utils.is_test_condition(root_node) and checking_truthiness"},{"lineNumber":2410,"author":{"gitId":"-"},"content":"                    else \"\u0027{}\u0027\""},{"lineNumber":2411,"author":{"gitId":"-"},"content":"                ).format("},{"lineNumber":2412,"author":{"gitId":"-"},"content":"                    truthiness_example[checking_truthiness].format("},{"lineNumber":2413,"author":{"gitId":"-"},"content":"                        other_value.as_string()"},{"lineNumber":2414,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":2415,"author":{"gitId":"-"},"content":"                ),"},{"lineNumber":2416,"author":{"gitId":"-"},"content":"                truthiness_phrase[checking_truthiness],"},{"lineNumber":2417,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2418,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":2419,"author":{"gitId":"-"},"content":"            suggestion \u003d singleton_comparison_example[checking_for_absence].format("},{"lineNumber":2420,"author":{"gitId":"-"},"content":"                left_value.as_string(), right_value.as_string()"},{"lineNumber":2421,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2422,"author":{"gitId":"-"},"content":"        self.add_message("},{"lineNumber":2423,"author":{"gitId":"-"},"content":"            \"singleton-comparison\","},{"lineNumber":2424,"author":{"gitId":"-"},"content":"            node\u003droot_node,"},{"lineNumber":2425,"author":{"gitId":"-"},"content":"            args\u003d(f\"\u0027{root_node.as_string()}\u0027\", suggestion),"},{"lineNumber":2426,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2427,"author":{"gitId":"-"},"content":""},{"lineNumber":2428,"author":{"gitId":"-"},"content":"    def _check_nan_comparison("},{"lineNumber":2429,"author":{"gitId":"-"},"content":"        self, left_value, right_value, root_node, checking_for_absence: bool \u003d False"},{"lineNumber":2430,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":2431,"author":{"gitId":"-"},"content":"        def _is_float_nan(node):"},{"lineNumber":2432,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":2433,"author":{"gitId":"-"},"content":"                if isinstance(node, astroid.Call) and len(node.args) \u003d\u003d 1:"},{"lineNumber":2434,"author":{"gitId":"-"},"content":"                    if ("},{"lineNumber":2435,"author":{"gitId":"-"},"content":"                        node.args[0].value.lower() \u003d\u003d \"nan\""},{"lineNumber":2436,"author":{"gitId":"-"},"content":"                        and node.inferred()[0].pytype() \u003d\u003d \"builtins.float\""},{"lineNumber":2437,"author":{"gitId":"-"},"content":"                    ):"},{"lineNumber":2438,"author":{"gitId":"-"},"content":"                        return True"},{"lineNumber":2439,"author":{"gitId":"-"},"content":"                return False"},{"lineNumber":2440,"author":{"gitId":"-"},"content":"            except AttributeError:"},{"lineNumber":2441,"author":{"gitId":"-"},"content":"                return False"},{"lineNumber":2442,"author":{"gitId":"-"},"content":""},{"lineNumber":2443,"author":{"gitId":"-"},"content":"        def _is_numpy_nan(node):"},{"lineNumber":2444,"author":{"gitId":"-"},"content":"            if isinstance(node, astroid.Attribute) and node.attrname \u003d\u003d \"NaN\":"},{"lineNumber":2445,"author":{"gitId":"-"},"content":"                if isinstance(node.expr, astroid.Name):"},{"lineNumber":2446,"author":{"gitId":"-"},"content":"                    return node.expr.name in (\"numpy\", \"nmp\", \"np\")"},{"lineNumber":2447,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":2448,"author":{"gitId":"-"},"content":""},{"lineNumber":2449,"author":{"gitId":"-"},"content":"        def _is_nan(node) -\u003e bool:"},{"lineNumber":2450,"author":{"gitId":"-"},"content":"            return _is_float_nan(node) or _is_numpy_nan(node)"},{"lineNumber":2451,"author":{"gitId":"-"},"content":""},{"lineNumber":2452,"author":{"gitId":"-"},"content":"        nan_left \u003d _is_nan(left_value)"},{"lineNumber":2453,"author":{"gitId":"-"},"content":"        if not nan_left and not _is_nan(right_value):"},{"lineNumber":2454,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2455,"author":{"gitId":"-"},"content":""},{"lineNumber":2456,"author":{"gitId":"-"},"content":"        absence_text \u003d \"\""},{"lineNumber":2457,"author":{"gitId":"-"},"content":"        if checking_for_absence:"},{"lineNumber":2458,"author":{"gitId":"-"},"content":"            absence_text \u003d \"not \""},{"lineNumber":2459,"author":{"gitId":"-"},"content":"        if nan_left:"},{"lineNumber":2460,"author":{"gitId":"-"},"content":"            suggestion \u003d f\"\u0027{absence_text}math.isnan({right_value.as_string()})\u0027\""},{"lineNumber":2461,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":2462,"author":{"gitId":"-"},"content":"            suggestion \u003d f\"\u0027{absence_text}math.isnan({left_value.as_string()})\u0027\""},{"lineNumber":2463,"author":{"gitId":"-"},"content":"        self.add_message("},{"lineNumber":2464,"author":{"gitId":"-"},"content":"            \"nan-comparison\","},{"lineNumber":2465,"author":{"gitId":"-"},"content":"            node\u003droot_node,"},{"lineNumber":2466,"author":{"gitId":"-"},"content":"            args\u003d(f\"\u0027{root_node.as_string()}\u0027\", suggestion),"},{"lineNumber":2467,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":2468,"author":{"gitId":"-"},"content":""},{"lineNumber":2469,"author":{"gitId":"-"},"content":"    def _check_literal_comparison(self, literal, node):"},{"lineNumber":2470,"author":{"gitId":"-"},"content":"        \"\"\"Check if we compare to a literal, which is usually what we do not want to do.\"\"\""},{"lineNumber":2471,"author":{"gitId":"-"},"content":"        nodes \u003d (astroid.List, astroid.Tuple, astroid.Dict, astroid.Set)"},{"lineNumber":2472,"author":{"gitId":"-"},"content":"        is_other_literal \u003d isinstance(literal, nodes)"},{"lineNumber":2473,"author":{"gitId":"-"},"content":"        is_const \u003d False"},{"lineNumber":2474,"author":{"gitId":"-"},"content":"        if isinstance(literal, astroid.Const):"},{"lineNumber":2475,"author":{"gitId":"-"},"content":"            if isinstance(literal.value, bool) or literal.value is None:"},{"lineNumber":2476,"author":{"gitId":"-"},"content":"                # Not interested in this values."},{"lineNumber":2477,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":2478,"author":{"gitId":"-"},"content":"            is_const \u003d isinstance(literal.value, (bytes, str, int, float))"},{"lineNumber":2479,"author":{"gitId":"-"},"content":""},{"lineNumber":2480,"author":{"gitId":"-"},"content":"        if is_const or is_other_literal:"},{"lineNumber":2481,"author":{"gitId":"-"},"content":"            self.add_message(\"literal-comparison\", node\u003dnode)"},{"lineNumber":2482,"author":{"gitId":"-"},"content":""},{"lineNumber":2483,"author":{"gitId":"-"},"content":"    def _check_misplaced_constant(self, node, left, right, operator):"},{"lineNumber":2484,"author":{"gitId":"-"},"content":"        if isinstance(right, astroid.Const):"},{"lineNumber":2485,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2486,"author":{"gitId":"-"},"content":"        operator \u003d REVERSED_COMPS.get(operator, operator)"},{"lineNumber":2487,"author":{"gitId":"-"},"content":"        suggestion \u003d f\"{right.as_string()} {operator} {left.value!r}\""},{"lineNumber":2488,"author":{"gitId":"-"},"content":"        self.add_message(\"misplaced-comparison-constant\", node\u003dnode, args\u003d(suggestion,))"},{"lineNumber":2489,"author":{"gitId":"-"},"content":""},{"lineNumber":2490,"author":{"gitId":"-"},"content":"    def _check_logical_tautology(self, node):"},{"lineNumber":2491,"author":{"gitId":"-"},"content":"        \"\"\"Check if identifier is compared against itself."},{"lineNumber":2492,"author":{"gitId":"-"},"content":"        :param node: Compare node"},{"lineNumber":2493,"author":{"gitId":"-"},"content":"        :type node: astroid.node_classes.Compare"},{"lineNumber":2494,"author":{"gitId":"-"},"content":"        :Example:"},{"lineNumber":2495,"author":{"gitId":"-"},"content":"        val \u003d 786"},{"lineNumber":2496,"author":{"gitId":"-"},"content":"        if val \u003d\u003d val:  # [comparison-with-itself]"},{"lineNumber":2497,"author":{"gitId":"-"},"content":"            pass"},{"lineNumber":2498,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":2499,"author":{"gitId":"-"},"content":"        left_operand \u003d node.left"},{"lineNumber":2500,"author":{"gitId":"-"},"content":"        right_operand \u003d node.ops[0][1]"},{"lineNumber":2501,"author":{"gitId":"-"},"content":"        operator \u003d node.ops[0][0]"},{"lineNumber":2502,"author":{"gitId":"-"},"content":"        if isinstance(left_operand, astroid.Const) and isinstance("},{"lineNumber":2503,"author":{"gitId":"-"},"content":"            right_operand, astroid.Const"},{"lineNumber":2504,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":2505,"author":{"gitId":"-"},"content":"            left_operand \u003d left_operand.value"},{"lineNumber":2506,"author":{"gitId":"-"},"content":"            right_operand \u003d right_operand.value"},{"lineNumber":2507,"author":{"gitId":"-"},"content":"        elif isinstance(left_operand, astroid.Name) and isinstance("},{"lineNumber":2508,"author":{"gitId":"-"},"content":"            right_operand, astroid.Name"},{"lineNumber":2509,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":2510,"author":{"gitId":"-"},"content":"            left_operand \u003d left_operand.name"},{"lineNumber":2511,"author":{"gitId":"-"},"content":"            right_operand \u003d right_operand.name"},{"lineNumber":2512,"author":{"gitId":"-"},"content":""},{"lineNumber":2513,"author":{"gitId":"-"},"content":"        if left_operand \u003d\u003d right_operand:"},{"lineNumber":2514,"author":{"gitId":"-"},"content":"            suggestion \u003d f\"{left_operand} {operator} {right_operand}\""},{"lineNumber":2515,"author":{"gitId":"-"},"content":"            self.add_message(\"comparison-with-itself\", node\u003dnode, args\u003d(suggestion,))"},{"lineNumber":2516,"author":{"gitId":"-"},"content":""},{"lineNumber":2517,"author":{"gitId":"-"},"content":"    def _check_callable_comparison(self, node):"},{"lineNumber":2518,"author":{"gitId":"-"},"content":"        operator \u003d node.ops[0][0]"},{"lineNumber":2519,"author":{"gitId":"-"},"content":"        if operator not in COMPARISON_OPERATORS:"},{"lineNumber":2520,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2521,"author":{"gitId":"-"},"content":""},{"lineNumber":2522,"author":{"gitId":"-"},"content":"        bare_callables \u003d (astroid.FunctionDef, astroid.BoundMethod)"},{"lineNumber":2523,"author":{"gitId":"-"},"content":"        left_operand, right_operand \u003d node.left, node.ops[0][1]"},{"lineNumber":2524,"author":{"gitId":"-"},"content":"        # this message should be emitted only when there is comparison of bare callable"},{"lineNumber":2525,"author":{"gitId":"-"},"content":"        # with non bare callable."},{"lineNumber":2526,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":2527,"author":{"gitId":"-"},"content":"            sum("},{"lineNumber":2528,"author":{"gitId":"-"},"content":"                1"},{"lineNumber":2529,"author":{"gitId":"-"},"content":"                for operand in (left_operand, right_operand)"},{"lineNumber":2530,"author":{"gitId":"-"},"content":"                if isinstance(utils.safe_infer(operand), bare_callables)"},{"lineNumber":2531,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2532,"author":{"gitId":"-"},"content":"            \u003d\u003d 1"},{"lineNumber":2533,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":2534,"author":{"gitId":"-"},"content":"            self.add_message(\"comparison-with-callable\", node\u003dnode)"},{"lineNumber":2535,"author":{"gitId":"-"},"content":""},{"lineNumber":2536,"author":{"gitId":"-"},"content":"    @utils.check_messages("},{"lineNumber":2537,"author":{"gitId":"-"},"content":"        \"singleton-comparison\","},{"lineNumber":2538,"author":{"gitId":"-"},"content":"        \"misplaced-comparison-constant\","},{"lineNumber":2539,"author":{"gitId":"-"},"content":"        \"unidiomatic-typecheck\","},{"lineNumber":2540,"author":{"gitId":"-"},"content":"        \"literal-comparison\","},{"lineNumber":2541,"author":{"gitId":"-"},"content":"        \"comparison-with-itself\","},{"lineNumber":2542,"author":{"gitId":"-"},"content":"        \"comparison-with-callable\","},{"lineNumber":2543,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":2544,"author":{"gitId":"-"},"content":"    def visit_compare(self, node):"},{"lineNumber":2545,"author":{"gitId":"-"},"content":"        self._check_callable_comparison(node)"},{"lineNumber":2546,"author":{"gitId":"-"},"content":"        self._check_logical_tautology(node)"},{"lineNumber":2547,"author":{"gitId":"-"},"content":"        self._check_unidiomatic_typecheck(node)"},{"lineNumber":2548,"author":{"gitId":"-"},"content":"        # NOTE: this checker only works with binary comparisons like \u0027x \u003d\u003d 42\u0027"},{"lineNumber":2549,"author":{"gitId":"-"},"content":"        # but not \u0027x \u003d\u003d y \u003d\u003d 42\u0027"},{"lineNumber":2550,"author":{"gitId":"-"},"content":"        if len(node.ops) !\u003d 1:"},{"lineNumber":2551,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2552,"author":{"gitId":"-"},"content":""},{"lineNumber":2553,"author":{"gitId":"-"},"content":"        left \u003d node.left"},{"lineNumber":2554,"author":{"gitId":"-"},"content":"        operator, right \u003d node.ops[0]"},{"lineNumber":2555,"author":{"gitId":"-"},"content":"        if operator in COMPARISON_OPERATORS and isinstance(left, astroid.Const):"},{"lineNumber":2556,"author":{"gitId":"-"},"content":"            self._check_misplaced_constant(node, left, right, operator)"},{"lineNumber":2557,"author":{"gitId":"-"},"content":""},{"lineNumber":2558,"author":{"gitId":"-"},"content":"        if operator in (\"\u003d\u003d\", \"!\u003d\"):"},{"lineNumber":2559,"author":{"gitId":"-"},"content":"            self._check_singleton_comparison("},{"lineNumber":2560,"author":{"gitId":"-"},"content":"                left, right, node, checking_for_absence\u003doperator \u003d\u003d \"!\u003d\""},{"lineNumber":2561,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2562,"author":{"gitId":"-"},"content":""},{"lineNumber":2563,"author":{"gitId":"-"},"content":"        if operator in (\"\u003d\u003d\", \"!\u003d\", \"is\", \"is not\"):"},{"lineNumber":2564,"author":{"gitId":"-"},"content":"            self._check_nan_comparison("},{"lineNumber":2565,"author":{"gitId":"-"},"content":"                left, right, node, checking_for_absence\u003doperator in (\"!\u003d\", \"is not\")"},{"lineNumber":2566,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":2567,"author":{"gitId":"-"},"content":"        if operator in (\"is\", \"is not\"):"},{"lineNumber":2568,"author":{"gitId":"-"},"content":"            self._check_literal_comparison(right, node)"},{"lineNumber":2569,"author":{"gitId":"-"},"content":""},{"lineNumber":2570,"author":{"gitId":"-"},"content":"    def _check_unidiomatic_typecheck(self, node):"},{"lineNumber":2571,"author":{"gitId":"-"},"content":"        operator, right \u003d node.ops[0]"},{"lineNumber":2572,"author":{"gitId":"-"},"content":"        if operator in TYPECHECK_COMPARISON_OPERATORS:"},{"lineNumber":2573,"author":{"gitId":"-"},"content":"            left \u003d node.left"},{"lineNumber":2574,"author":{"gitId":"-"},"content":"            if _is_one_arg_pos_call(left):"},{"lineNumber":2575,"author":{"gitId":"-"},"content":"                self._check_type_x_is_y(node, left, operator, right)"},{"lineNumber":2576,"author":{"gitId":"-"},"content":""},{"lineNumber":2577,"author":{"gitId":"-"},"content":"    def _check_type_x_is_y(self, node, left, operator, right):"},{"lineNumber":2578,"author":{"gitId":"-"},"content":"        \"\"\"Check for expressions like type(x) \u003d\u003d Y.\"\"\""},{"lineNumber":2579,"author":{"gitId":"-"},"content":"        left_func \u003d utils.safe_infer(left.func)"},{"lineNumber":2580,"author":{"gitId":"-"},"content":"        if not ("},{"lineNumber":2581,"author":{"gitId":"-"},"content":"            isinstance(left_func, astroid.ClassDef) and left_func.qname() \u003d\u003d TYPE_QNAME"},{"lineNumber":2582,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":2583,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":2584,"author":{"gitId":"-"},"content":""},{"lineNumber":2585,"author":{"gitId":"-"},"content":"        if operator in (\"is\", \"is not\") and _is_one_arg_pos_call(right):"},{"lineNumber":2586,"author":{"gitId":"-"},"content":"            right_func \u003d utils.safe_infer(right.func)"},{"lineNumber":2587,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":2588,"author":{"gitId":"-"},"content":"                isinstance(right_func, astroid.ClassDef)"},{"lineNumber":2589,"author":{"gitId":"-"},"content":"                and right_func.qname() \u003d\u003d TYPE_QNAME"},{"lineNumber":2590,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":2591,"author":{"gitId":"-"},"content":"                # type(x) \u003d\u003d type(a)"},{"lineNumber":2592,"author":{"gitId":"-"},"content":"                right_arg \u003d utils.safe_infer(right.args[0])"},{"lineNumber":2593,"author":{"gitId":"-"},"content":"                if not isinstance(right_arg, LITERAL_NODE_TYPES):"},{"lineNumber":2594,"author":{"gitId":"-"},"content":"                    # not e.g. type(x) \u003d\u003d type([])"},{"lineNumber":2595,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":2596,"author":{"gitId":"-"},"content":"        self.add_message(\"unidiomatic-typecheck\", node\u003dnode)"},{"lineNumber":2597,"author":{"gitId":"-"},"content":""},{"lineNumber":2598,"author":{"gitId":"-"},"content":""},{"lineNumber":2599,"author":{"gitId":"-"},"content":"def register(linter):"},{"lineNumber":2600,"author":{"gitId":"-"},"content":"    \"\"\"required method to auto register this checker\"\"\""},{"lineNumber":2601,"author":{"gitId":"-"},"content":"    linter.register_checker(BasicErrorChecker(linter))"},{"lineNumber":2602,"author":{"gitId":"-"},"content":"    linter.register_checker(BasicChecker(linter))"},{"lineNumber":2603,"author":{"gitId":"-"},"content":"    linter.register_checker(NameChecker(linter))"},{"lineNumber":2604,"author":{"gitId":"-"},"content":"    linter.register_checker(DocStringChecker(linter))"},{"lineNumber":2605,"author":{"gitId":"-"},"content":"    linter.register_checker(PassChecker(linter))"},{"lineNumber":2606,"author":{"gitId":"-"},"content":"    linter.register_checker(ComparisonChecker(linter))"}],"authorContributionMap":{"anubh-v":10,"-":2596}},{"path":"pylint/checkers/typecheck.py","fileType":"py","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Copyright (c) 2006-2014 LOGILAB S.A. (Paris, FRANCE) \u003ccontact@logilab.fr\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# Copyright (c) 2009 James Lingard \u003cjchl@aristanetworks.com\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# Copyright (c) 2012-2014 Google, Inc."},{"lineNumber":4,"author":{"gitId":"-"},"content":"# Copyright (c) 2014-2020 Claudiu Popa \u003cpcmanticore@gmail.com\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 David Shea \u003cdshea@redhat.com\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 Steven Myint \u003chg@stevenmyint.com\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 Holger Peters \u003cemail@holger-peters.de\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"# Copyright (c) 2014 Arun Persaud \u003carun@nubati.net\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Anentropic \u003cego@anentropic.com\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Dmitry Pribysh \u003cdmand@yandex.ru\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Rene Zhang \u003crz99@cornell.edu\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Radu Ciorba \u003cradu@devrandom.ro\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"# Copyright (c) 2015 Ionel Cristian Maries \u003ccontact@ionelmc.ro\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"# Copyright (c) 2016, 2019 Ashley Whetter \u003cashley@awhetter.co.uk\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Alexander Todorov \u003catodorov@otb.bg\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Jürgen Hermann \u003cjh@web.de\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Jakub Wilk \u003cjwilk@jwilk.net\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"# Copyright (c) 2016 Filipe Brandenburger \u003cfilbranden@google.com\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"# Copyright (c) 2017-2018, 2020 hippo91 \u003cguillaume.peillex@gmail.com\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 Łukasz Rogalski \u003crogalski.91@gmail.com\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 Derek Gustafson \u003cdegustaf@gmail.com\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# Copyright (c) 2017 Ville Skyttä \u003cville.skytta@iki.fi\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"# Copyright (c) 2018-2019 Nick Drozd \u003cnicholasdrozd@gmail.com\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Pablo Galindo \u003cPablogsal@gmail.com\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Jim Robertson \u003cjrobertson98atx@gmail.com\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Lucas Cimon \u003clucas.cimon@gmail.com\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Mike Frysinger \u003cvapier@gmail.com\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Ben Green \u003cbenhgreen@icloud.com\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Konstantin \u003cGithub@pheanex.de\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Justin Li \u003cjustinnhli@users.noreply.github.com\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# Copyright (c) 2018 Bryce Guinta \u003cbryce.paul.guinta@gmail.com\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# Copyright (c) 2019-2021 Pierre Sassoulas \u003cpierre.sassoulas@gmail.com\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Andy Palmer \u003c25123779+ninezerozeronine@users.noreply.github.com\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 mattlbeck \u003c17108752+mattlbeck@users.noreply.github.com\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Martin Vielsmaier \u003cmartin.vielsmaier@gmail.com\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Santiago Castro \u003cbryant@montevideo.com.uy\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 yory8 \u003c39745367+yory8@users.noreply.github.com\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Federico Bond \u003cfedericobond@gmail.com\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"# Copyright (c) 2019 Pascal Corpet \u003cpcorpet@users.noreply.github.com\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Peter Kolbus \u003cpeter.kolbus@gmail.com\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Julien Palard \u003cjulien@palard.fr\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Ram Rachum \u003cram@rachum.com\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Anthony Sottile \u003casottile@umich.edu\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"# Copyright (c) 2020 Anubhav \u003c35621759+anubh-v@users.noreply.github.com\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Marc Mueller \u003c30130371+cdce8p@users.noreply.github.com\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Jens H. Nielsen \u003cJens.Nielsen@microsoft.com\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"# Copyright (c) 2021 Ikraduya Edian \u003cikraduya@gmail.com\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"},{"lineNumber":50,"author":{"gitId":"-"},"content":"# For details: https://github.com/PyCQA/pylint/blob/master/LICENSE"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\"\"\"try to find more bugs in the code using astroid inference capabilities"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\"\"\""},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"import builtins"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import fnmatch"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import heapq"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import itertools"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import operator"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import re"},{"lineNumber":61,"author":{"gitId":"-"},"content":"import shlex"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import sys"},{"lineNumber":63,"author":{"gitId":"-"},"content":"import types"},{"lineNumber":64,"author":{"gitId":"-"},"content":"from collections import deque"},{"lineNumber":65,"author":{"gitId":"-"},"content":"from collections.abc import Sequence"},{"lineNumber":66,"author":{"gitId":"-"},"content":"from functools import singledispatch"},{"lineNumber":67,"author":{"gitId":"-"},"content":"from typing import Pattern, Tuple"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"import astroid"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"from pylint.checkers import BaseChecker, utils"},{"lineNumber":72,"author":{"gitId":"-"},"content":"from pylint.checkers.utils import ("},{"lineNumber":73,"author":{"gitId":"-"},"content":"    check_messages,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    decorated_with,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    decorated_with_property,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    has_known_bases,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    is_builtin_object,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    is_classdef_type,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    is_comprehension,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    is_inside_abstract_class,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    is_iterable,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    is_mapping,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    is_overload_stub,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    is_postponed_evaluation_enabled,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    is_super,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    node_ignores_exception,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    safe_infer,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    supports_delitem,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    supports_getitem,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    supports_membership_test,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    supports_setitem,"},{"lineNumber":92,"author":{"gitId":"-"},"content":")"},{"lineNumber":93,"author":{"gitId":"-"},"content":"from pylint.constants import PY310_PLUS"},{"lineNumber":94,"author":{"gitId":"-"},"content":"from pylint.interfaces import INFERENCE, IAstroidChecker"},{"lineNumber":95,"author":{"gitId":"-"},"content":"from pylint.utils import get_global_option"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"BUILTINS \u003d builtins.__name__"},{"lineNumber":98,"author":{"gitId":"-"},"content":"STR_FORMAT \u003d {\"%s.str.format\" % BUILTINS}"},{"lineNumber":99,"author":{"gitId":"-"},"content":"ASYNCIO_COROUTINE \u003d \"asyncio.coroutines.coroutine\""},{"lineNumber":100,"author":{"gitId":"-"},"content":"BUILTIN_TUPLE \u003d \"builtins.tuple\""},{"lineNumber":101,"author":{"gitId":"-"},"content":"TYPE_ANNOTATION_NODES_TYPES \u003d ("},{"lineNumber":102,"author":{"gitId":"-"},"content":"    astroid.AnnAssign,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    astroid.Arguments,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    astroid.FunctionDef,"},{"lineNumber":105,"author":{"gitId":"-"},"content":")"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"def _unflatten(iterable):"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    for index, elem in enumerate(iterable):"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if isinstance(elem, Sequence) and not isinstance(elem, str):"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            yield from _unflatten(elem)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        elif elem and not index:"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            # We\u0027re interested only in the first element."},{"lineNumber":114,"author":{"gitId":"-"},"content":"            yield elem"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"def _flatten_container(iterable):"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    # Flatten nested containers into a single iterable"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    for item in iterable:"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if isinstance(item, (list, tuple, types.GeneratorType)):"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            yield from _flatten_container(item)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            yield item"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"def _is_owner_ignored(owner, attrname, ignored_classes, ignored_modules):"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \"\"\"Check if the given owner should be ignored"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    This will verify if the owner\u0027s module is in *ignored_modules*"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    or the owner\u0027s module fully qualified name is in *ignored_modules*"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    or if the *ignored_modules* contains a pattern which catches"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    the fully qualified name of the module."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    Also, similar checks are done for the owner itself, if its name"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    matches any name from the *ignored_classes* or if its qualified"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    name can be found in *ignored_classes*."},{"lineNumber":137,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    ignored_modules \u003d set(ignored_modules)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    module_name \u003d owner.root().name"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    module_qname \u003d owner.root().qname()"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    for ignore in ignored_modules:"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        # Try to match the module name / fully qualified name directly"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if module_qname in ignored_modules or module_name in ignored_modules:"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        # Try to see if the ignores pattern match against the module name."},{"lineNumber":148,"author":{"gitId":"-"},"content":"        if fnmatch.fnmatch(module_qname, ignore):"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        # Otherwise we might have a root module name being ignored,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        # and the qualified owner has more levels of depth."},{"lineNumber":153,"author":{"gitId":"-"},"content":"        parts \u003d deque(module_name.split(\".\"))"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        current_module \u003d \"\""},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        while parts:"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            part \u003d parts.popleft()"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            if not current_module:"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                current_module \u003d part"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                current_module +\u003d f\".{part}\""},{"lineNumber":162,"author":{"gitId":"-"},"content":"            if current_module in ignored_modules:"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    # Match against ignored classes."},{"lineNumber":166,"author":{"gitId":"-"},"content":"    ignored_classes \u003d set(ignored_classes)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    if hasattr(owner, \"qname\"):"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        qname \u003d owner.qname()"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        qname \u003d \"\""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    return any(ignore in (attrname, qname) for ignore in ignored_classes)"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"@singledispatch"},{"lineNumber":175,"author":{"gitId":"-"},"content":"def _node_names(node):"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    if not hasattr(node, \"locals\"):"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return []"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return node.locals.keys()"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"@_node_names.register(astroid.ClassDef)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"@_node_names.register(astroid.Instance)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"def _(node):"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    values \u003d itertools.chain(node.instance_attrs.keys(), node.locals.keys())"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    try:"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        mro \u003d node.mro()[1:]"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    except (NotImplementedError, TypeError):"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        mro \u003d node.ancestors()"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    other_values \u003d [value for cls in mro for value in _node_names(cls)]"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    return itertools.chain(values, other_values)"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"def _string_distance(seq1, seq2):"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    seq2_length \u003d len(seq2)"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    row \u003d list(range(1, seq2_length + 1)) + [0]"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    for seq1_index, seq1_char in enumerate(seq1):"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        last_row \u003d row"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        row \u003d [0] * seq2_length + [seq1_index + 1]"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        for seq2_index, seq2_char in enumerate(seq2):"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            row[seq2_index] \u003d min("},{"lineNumber":205,"author":{"gitId":"-"},"content":"                last_row[seq2_index] + 1,"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                row[seq2_index - 1] + 1,"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                last_row[seq2_index - 1] + (seq1_char !\u003d seq2_char),"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return row[seq2_length - 1]"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"def _similar_names(owner, attrname, distance_threshold, max_choices):"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    \"\"\"Given an owner and a name, try to find similar names"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    The similar names are searched given a distance metric and only"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    a given number of choices will be returned."},{"lineNumber":218,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    possible_names \u003d []"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    names \u003d _node_names(owner)"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    for name in names:"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if name \u003d\u003d attrname:"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            continue"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        distance \u003d _string_distance(attrname, name)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        if distance \u003c\u003d distance_threshold:"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            possible_names.append((name, distance))"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"    # Now get back the values with a minimum, up to the given"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    # limit or choices."},{"lineNumber":232,"author":{"gitId":"-"},"content":"    picked \u003d ["},{"lineNumber":233,"author":{"gitId":"-"},"content":"        name"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        for (name, _) in heapq.nsmallest("},{"lineNumber":235,"author":{"gitId":"-"},"content":"            max_choices, possible_names, key\u003doperator.itemgetter(1)"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    return sorted(picked)"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"def _missing_member_hint(owner, attrname, distance_threshold, max_choices):"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    names \u003d _similar_names(owner, attrname, distance_threshold, max_choices)"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    if not names:"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        # No similar name."},{"lineNumber":245,"author":{"gitId":"-"},"content":"        return \"\""},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    names \u003d [repr(name) for name in names]"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    if len(names) \u003d\u003d 1:"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        names \u003d \", \".join(names)"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        names \u003d \"one of {} or {}\".format(\", \".join(names[:-1]), names[-1])"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    return f\"; maybe {names}?\""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"MSGS \u003d {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    \"E1101\": ("},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \"%s %r has no %r member%s\","},{"lineNumber":259,"author":{"gitId":"-"},"content":"        \"no-member\","},{"lineNumber":260,"author":{"gitId":"-"},"content":"        \"Used when a variable is accessed for an unexistent member.\","},{"lineNumber":261,"author":{"gitId":"-"},"content":"        {\"old_names\": [(\"E1103\", \"maybe-no-member\")]},"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \"I1101\": ("},{"lineNumber":264,"author":{"gitId":"-"},"content":"        \"%s %r has no %r member%s, but source is unavailable. Consider \""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        \"adding this module to extension-pkg-allow-list if you want \""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        \"to perform analysis based on run-time introspection of living objects.\","},{"lineNumber":267,"author":{"gitId":"-"},"content":"        \"c-extension-no-member\","},{"lineNumber":268,"author":{"gitId":"-"},"content":"        \"Used when a variable is accessed for non-existent member of C \""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        \"extension. Due to unavailability of source static analysis is impossible, \""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        \"but it may be performed by introspecting living objects in run-time.\","},{"lineNumber":271,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    \"E1102\": ("},{"lineNumber":273,"author":{"gitId":"-"},"content":"        \"%s is not callable\","},{"lineNumber":274,"author":{"gitId":"-"},"content":"        \"not-callable\","},{"lineNumber":275,"author":{"gitId":"-"},"content":"        \"Used when an object being called has been inferred to a non \""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        \"callable object.\","},{"lineNumber":277,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    \"E1111\": ("},{"lineNumber":279,"author":{"gitId":"-"},"content":"        \"Assigning result of a function call, where the function has no return\","},{"lineNumber":280,"author":{"gitId":"-"},"content":"        \"assignment-from-no-return\","},{"lineNumber":281,"author":{"gitId":"-"},"content":"        \"Used when an assignment is done on a function call but the \""},{"lineNumber":282,"author":{"gitId":"-"},"content":"        \"inferred function doesn\u0027t return anything.\","},{"lineNumber":283,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    \"E1120\": ("},{"lineNumber":285,"author":{"gitId":"-"},"content":"        \"No value for argument %s in %s call\","},{"lineNumber":286,"author":{"gitId":"-"},"content":"        \"no-value-for-parameter\","},{"lineNumber":287,"author":{"gitId":"-"},"content":"        \"Used when a function call passes too few arguments.\","},{"lineNumber":288,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \"E1121\": ("},{"lineNumber":290,"author":{"gitId":"-"},"content":"        \"Too many positional arguments for %s call\","},{"lineNumber":291,"author":{"gitId":"-"},"content":"        \"too-many-function-args\","},{"lineNumber":292,"author":{"gitId":"-"},"content":"        \"Used when a function call passes too many positional arguments.\","},{"lineNumber":293,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \"E1123\": ("},{"lineNumber":295,"author":{"gitId":"-"},"content":"        \"Unexpected keyword argument %r in %s call\","},{"lineNumber":296,"author":{"gitId":"-"},"content":"        \"unexpected-keyword-arg\","},{"lineNumber":297,"author":{"gitId":"-"},"content":"        \"Used when a function call passes a keyword argument that \""},{"lineNumber":298,"author":{"gitId":"-"},"content":"        \"doesn\u0027t correspond to one of the function\u0027s parameter names.\","},{"lineNumber":299,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    \"E1124\": ("},{"lineNumber":301,"author":{"gitId":"-"},"content":"        \"Argument %r passed by position and keyword in %s call\","},{"lineNumber":302,"author":{"gitId":"-"},"content":"        \"redundant-keyword-arg\","},{"lineNumber":303,"author":{"gitId":"-"},"content":"        \"Used when a function call would result in assigning multiple \""},{"lineNumber":304,"author":{"gitId":"-"},"content":"        \"values to a function parameter, one value from a positional \""},{"lineNumber":305,"author":{"gitId":"-"},"content":"        \"argument and one from a keyword argument.\","},{"lineNumber":306,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    \"E1125\": ("},{"lineNumber":308,"author":{"gitId":"-"},"content":"        \"Missing mandatory keyword argument %r in %s call\","},{"lineNumber":309,"author":{"gitId":"-"},"content":"        \"missing-kwoa\","},{"lineNumber":310,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":311,"author":{"gitId":"-"},"content":"            \"Used when a function call does not pass a mandatory\""},{"lineNumber":312,"author":{"gitId":"-"},"content":"            \" keyword-only argument.\""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    \"E1126\": ("},{"lineNumber":316,"author":{"gitId":"-"},"content":"        \"Sequence index is not an int, slice, or instance with __index__\","},{"lineNumber":317,"author":{"gitId":"-"},"content":"        \"invalid-sequence-index\","},{"lineNumber":318,"author":{"gitId":"-"},"content":"        \"Used when a sequence type is indexed with an invalid type. \""},{"lineNumber":319,"author":{"gitId":"-"},"content":"        \"Valid types are ints, slices, and objects with an __index__ \""},{"lineNumber":320,"author":{"gitId":"-"},"content":"        \"method.\","},{"lineNumber":321,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    \"E1127\": ("},{"lineNumber":323,"author":{"gitId":"-"},"content":"        \"Slice index is not an int, None, or instance with __index__\","},{"lineNumber":324,"author":{"gitId":"-"},"content":"        \"invalid-slice-index\","},{"lineNumber":325,"author":{"gitId":"-"},"content":"        \"Used when a slice index is not an integer, None, or an object \""},{"lineNumber":326,"author":{"gitId":"-"},"content":"        \"with an __index__ method.\","},{"lineNumber":327,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \"E1128\": ("},{"lineNumber":329,"author":{"gitId":"-"},"content":"        \"Assigning result of a function call, where the function returns None\","},{"lineNumber":330,"author":{"gitId":"-"},"content":"        \"assignment-from-none\","},{"lineNumber":331,"author":{"gitId":"-"},"content":"        \"Used when an assignment is done on a function call but the \""},{"lineNumber":332,"author":{"gitId":"-"},"content":"        \"inferred function returns nothing but None.\","},{"lineNumber":333,"author":{"gitId":"-"},"content":"        {\"old_names\": [(\"W1111\", \"old-assignment-from-none\")]},"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \"E1129\": ("},{"lineNumber":336,"author":{"gitId":"-"},"content":"        \"Context manager \u0027%s\u0027 doesn\u0027t implement __enter__ and __exit__.\","},{"lineNumber":337,"author":{"gitId":"-"},"content":"        \"not-context-manager\","},{"lineNumber":338,"author":{"gitId":"-"},"content":"        \"Used when an instance in a with statement doesn\u0027t implement \""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        \"the context manager protocol(__enter__/__exit__).\","},{"lineNumber":340,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \"E1130\": ("},{"lineNumber":342,"author":{"gitId":"-"},"content":"        \"%s\","},{"lineNumber":343,"author":{"gitId":"-"},"content":"        \"invalid-unary-operand-type\","},{"lineNumber":344,"author":{"gitId":"-"},"content":"        \"Emitted when a unary operand is used on an object which does not \""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        \"support this type of operation.\","},{"lineNumber":346,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    \"E1131\": ("},{"lineNumber":348,"author":{"gitId":"-"},"content":"        \"%s\","},{"lineNumber":349,"author":{"gitId":"-"},"content":"        \"unsupported-binary-operation\","},{"lineNumber":350,"author":{"gitId":"-"},"content":"        \"Emitted when a binary arithmetic operation between two \""},{"lineNumber":351,"author":{"gitId":"-"},"content":"        \"operands is not supported.\","},{"lineNumber":352,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    \"E1132\": ("},{"lineNumber":354,"author":{"gitId":"-"},"content":"        \"Got multiple values for keyword argument %r in function call\","},{"lineNumber":355,"author":{"gitId":"-"},"content":"        \"repeated-keyword\","},{"lineNumber":356,"author":{"gitId":"-"},"content":"        \"Emitted when a function call got multiple values for a keyword.\","},{"lineNumber":357,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    \"E1135\": ("},{"lineNumber":359,"author":{"gitId":"-"},"content":"        \"Value \u0027%s\u0027 doesn\u0027t support membership test\","},{"lineNumber":360,"author":{"gitId":"-"},"content":"        \"unsupported-membership-test\","},{"lineNumber":361,"author":{"gitId":"-"},"content":"        \"Emitted when an instance in membership test expression doesn\u0027t \""},{"lineNumber":362,"author":{"gitId":"-"},"content":"        \"implement membership protocol (__contains__/__iter__/__getitem__).\","},{"lineNumber":363,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    \"E1136\": ("},{"lineNumber":365,"author":{"gitId":"-"},"content":"        \"Value \u0027%s\u0027 is unsubscriptable\","},{"lineNumber":366,"author":{"gitId":"-"},"content":"        \"unsubscriptable-object\","},{"lineNumber":367,"author":{"gitId":"-"},"content":"        \"Emitted when a subscripted value doesn\u0027t support subscription \""},{"lineNumber":368,"author":{"gitId":"-"},"content":"        \"(i.e. doesn\u0027t define __getitem__ method or __class_getitem__ for a class).\","},{"lineNumber":369,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    \"E1137\": ("},{"lineNumber":371,"author":{"gitId":"-"},"content":"        \"%r does not support item assignment\","},{"lineNumber":372,"author":{"gitId":"-"},"content":"        \"unsupported-assignment-operation\","},{"lineNumber":373,"author":{"gitId":"-"},"content":"        \"Emitted when an object does not support item assignment \""},{"lineNumber":374,"author":{"gitId":"-"},"content":"        \"(i.e. doesn\u0027t define __setitem__ method).\","},{"lineNumber":375,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    \"E1138\": ("},{"lineNumber":377,"author":{"gitId":"-"},"content":"        \"%r does not support item deletion\","},{"lineNumber":378,"author":{"gitId":"-"},"content":"        \"unsupported-delete-operation\","},{"lineNumber":379,"author":{"gitId":"-"},"content":"        \"Emitted when an object does not support item deletion \""},{"lineNumber":380,"author":{"gitId":"-"},"content":"        \"(i.e. doesn\u0027t define __delitem__ method).\","},{"lineNumber":381,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \"E1139\": ("},{"lineNumber":383,"author":{"gitId":"-"},"content":"        \"Invalid metaclass %r used\","},{"lineNumber":384,"author":{"gitId":"-"},"content":"        \"invalid-metaclass\","},{"lineNumber":385,"author":{"gitId":"-"},"content":"        \"Emitted whenever we can detect that a class is using, \""},{"lineNumber":386,"author":{"gitId":"-"},"content":"        \"as a metaclass, something which might be invalid for using as \""},{"lineNumber":387,"author":{"gitId":"-"},"content":"        \"a metaclass.\","},{"lineNumber":388,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    \"E1140\": ("},{"lineNumber":390,"author":{"gitId":"-"},"content":"        \"Dict key is unhashable\","},{"lineNumber":391,"author":{"gitId":"-"},"content":"        \"unhashable-dict-key\","},{"lineNumber":392,"author":{"gitId":"-"},"content":"        \"Emitted when a dict key is not hashable \""},{"lineNumber":393,"author":{"gitId":"-"},"content":"        \"(i.e. doesn\u0027t define __hash__ method).\","},{"lineNumber":394,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    \"E1141\": ("},{"lineNumber":396,"author":{"gitId":"-"},"content":"        \"Unpacking a dictionary in iteration without calling .items()\","},{"lineNumber":397,"author":{"gitId":"-"},"content":"        \"dict-iter-missing-items\","},{"lineNumber":398,"author":{"gitId":"-"},"content":"        \"Emitted when trying to iterate through a dict without calling .items()\","},{"lineNumber":399,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    \"W1113\": ("},{"lineNumber":401,"author":{"gitId":"-"},"content":"        \"Keyword argument before variable positional arguments list \""},{"lineNumber":402,"author":{"gitId":"-"},"content":"        \"in the definition of %s function\","},{"lineNumber":403,"author":{"gitId":"-"},"content":"        \"keyword-arg-before-vararg\","},{"lineNumber":404,"author":{"gitId":"-"},"content":"        \"When defining a keyword argument before variable positional arguments, one can \""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        \"end up in having multiple values passed for the aforementioned parameter in \""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        \"case the method is called with keyword arguments.\","},{"lineNumber":407,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    \"W1114\": ("},{"lineNumber":409,"author":{"gitId":"-"},"content":"        \"Positional arguments appear to be out of order\","},{"lineNumber":410,"author":{"gitId":"-"},"content":"        \"arguments-out-of-order\","},{"lineNumber":411,"author":{"gitId":"-"},"content":"        \"Emitted  when the caller\u0027s argument names fully match the parameter \""},{"lineNumber":412,"author":{"gitId":"-"},"content":"        \"names in the function signature but do not have the same order.\","},{"lineNumber":413,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    \"W1115\": ("},{"lineNumber":415,"author":{"gitId":"-"},"content":"        \"Non-string value assigned to __name__\","},{"lineNumber":416,"author":{"gitId":"-"},"content":"        \"non-str-assignment-to-dunder-name\","},{"lineNumber":417,"author":{"gitId":"-"},"content":"        \"Emitted when a non-string vaue is assigned to __name__\","},{"lineNumber":418,"author":{"gitId":"-"},"content":"    ),"},{"lineNumber":419,"author":{"gitId":"anubh-v"},"content":"    \"W1116\": ("},{"lineNumber":420,"author":{"gitId":"anubh-v"},"content":"        \"Second argument of isinstance is not a type\","},{"lineNumber":421,"author":{"gitId":"anubh-v"},"content":"        \"isinstance-second-argument-not-valid-type\","},{"lineNumber":422,"author":{"gitId":"anubh-v"},"content":"        \"Emitted when the second argument of an isinstance call is not a type.\","},{"lineNumber":423,"author":{"gitId":"anubh-v"},"content":"    ),"},{"lineNumber":424,"author":{"gitId":"-"},"content":"}"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"# builtin sequence types in Python 2 and 3."},{"lineNumber":427,"author":{"gitId":"-"},"content":"SEQUENCE_TYPES \u003d {"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    \"str\","},{"lineNumber":429,"author":{"gitId":"-"},"content":"    \"unicode\","},{"lineNumber":430,"author":{"gitId":"-"},"content":"    \"list\","},{"lineNumber":431,"author":{"gitId":"-"},"content":"    \"tuple\","},{"lineNumber":432,"author":{"gitId":"-"},"content":"    \"bytearray\","},{"lineNumber":433,"author":{"gitId":"-"},"content":"    \"xrange\","},{"lineNumber":434,"author":{"gitId":"-"},"content":"    \"range\","},{"lineNumber":435,"author":{"gitId":"-"},"content":"    \"bytes\","},{"lineNumber":436,"author":{"gitId":"-"},"content":"    \"memoryview\","},{"lineNumber":437,"author":{"gitId":"-"},"content":"}"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"def _emit_no_member(node, owner, owner_name, ignored_mixins\u003dTrue, ignored_none\u003dTrue):"},{"lineNumber":441,"author":{"gitId":"-"},"content":"    \"\"\"Try to see if no-member should be emitted for the given owner."},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"    The following cases are ignored:"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"        * the owner is a function and it has decorators."},{"lineNumber":446,"author":{"gitId":"-"},"content":"        * the owner is an instance and it has __getattr__, __getattribute__ implemented"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        * the module is explicitly ignored from no-member checks"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        * the owner is a class and the name can be found in its metaclass."},{"lineNumber":449,"author":{"gitId":"-"},"content":"        * The access node is protected by an except handler, which handles"},{"lineNumber":450,"author":{"gitId":"-"},"content":"          AttributeError, Exception or bare except."},{"lineNumber":451,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":452,"author":{"gitId":"-"},"content":"    # pylint: disable\u003dtoo-many-return-statements"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    if node_ignores_exception(node, AttributeError):"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    if ignored_none and isinstance(owner, astroid.Const) and owner.value is None:"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    if is_super(owner) or getattr(owner, \"type\", None) \u003d\u003d \"metaclass\":"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":459,"author":{"gitId":"-"},"content":"    if owner_name and ignored_mixins and owner_name[-5:].lower() \u003d\u003d \"mixin\":"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    if isinstance(owner, astroid.FunctionDef) and ("},{"lineNumber":462,"author":{"gitId":"-"},"content":"        owner.decorators or owner.is_abstract()"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":465,"author":{"gitId":"-"},"content":"    if isinstance(owner, (astroid.Instance, astroid.ClassDef)):"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        if owner.has_dynamic_getattr():"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            # Issue #2565: Don\u0027t ignore enums, as they have a `__getattr__` but it\u0027s not"},{"lineNumber":468,"author":{"gitId":"-"},"content":"            # invoked at this point."},{"lineNumber":469,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":470,"author":{"gitId":"-"},"content":"                metaclass \u003d owner.metaclass()"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            except astroid.MroError:"},{"lineNumber":472,"author":{"gitId":"-"},"content":"                return False"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            if metaclass:"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                # Renamed in Python 3.10 to `EnumType`"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                return metaclass.qname() in (\"enum.EnumMeta\", \"enum.EnumType\")"},{"lineNumber":476,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        if not has_known_bases(owner):"},{"lineNumber":478,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"        # Exclude typed annotations, since these might actually exist"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        # at some point during the runtime of the program."},{"lineNumber":482,"author":{"gitId":"-"},"content":"        if utils.is_attribute_typed_annotation(owner, node.attrname):"},{"lineNumber":483,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    if isinstance(owner, astroid.objects.Super):"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        # Verify if we are dealing with an invalid Super object."},{"lineNumber":486,"author":{"gitId":"-"},"content":"        # If it is invalid, then there\u0027s no point in checking that"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        # it has the required attribute. Also, don\u0027t fail if the"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        # MRO is invalid."},{"lineNumber":489,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":490,"author":{"gitId":"-"},"content":"            owner.super_mro()"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        except (astroid.MroError, astroid.SuperError):"},{"lineNumber":492,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        if not all(has_known_bases(base) for base in owner.type.mro()):"},{"lineNumber":494,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    if isinstance(owner, astroid.Module):"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":497,"author":{"gitId":"-"},"content":"            owner.getattr(\"__getattr__\")"},{"lineNumber":498,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        except astroid.NotFoundError:"},{"lineNumber":500,"author":{"gitId":"-"},"content":"            pass"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    if owner_name and node.attrname.startswith(\"_\" + owner_name):"},{"lineNumber":502,"author":{"gitId":"-"},"content":"        # Test if an attribute has been mangled (\u0027private\u0027 attribute)"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        unmangled_name \u003d node.attrname.split(\"_\" + owner_name)[-1]"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":505,"author":{"gitId":"-"},"content":"            if owner.getattr(unmangled_name, context\u003dNone) is not None:"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                return False"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        except astroid.NotFoundError:"},{"lineNumber":508,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    if ("},{"lineNumber":510,"author":{"gitId":"-"},"content":"        owner.parent"},{"lineNumber":511,"author":{"gitId":"-"},"content":"        and isinstance(owner.parent, astroid.ClassDef)"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        and owner.parent.name \u003d\u003d \"EnumMeta\""},{"lineNumber":513,"author":{"gitId":"-"},"content":"        and owner_name \u003d\u003d \"__members__\""},{"lineNumber":514,"author":{"gitId":"-"},"content":"        and node.attrname in [\"items\", \"values\", \"keys\"]"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    ):"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        # Avoid false positive on Enum.__members__.{items(), values, keys}"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        # See https://github.com/PyCQA/pylint/issues/4123"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":"    return True"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"def _determine_callable(callable_obj):"},{"lineNumber":524,"author":{"gitId":"-"},"content":"    # Ordering is important, since BoundMethod is a subclass of UnboundMethod,"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    # and Function inherits Lambda."},{"lineNumber":526,"author":{"gitId":"-"},"content":"    parameters \u003d 0"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    if hasattr(callable_obj, \"implicit_parameters\"):"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        parameters \u003d callable_obj.implicit_parameters()"},{"lineNumber":529,"author":{"gitId":"-"},"content":"    if isinstance(callable_obj, astroid.BoundMethod):"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        # Bound methods have an extra implicit \u0027self\u0027 argument."},{"lineNumber":531,"author":{"gitId":"-"},"content":"        return callable_obj, parameters, callable_obj.type"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    if isinstance(callable_obj, astroid.UnboundMethod):"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        return callable_obj, parameters, \"unbound method\""},{"lineNumber":534,"author":{"gitId":"-"},"content":"    if isinstance(callable_obj, astroid.FunctionDef):"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        return callable_obj, parameters, callable_obj.type"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    if isinstance(callable_obj, astroid.Lambda):"},{"lineNumber":537,"author":{"gitId":"-"},"content":"        return callable_obj, parameters, \"lambda\""},{"lineNumber":538,"author":{"gitId":"-"},"content":"    if isinstance(callable_obj, astroid.ClassDef):"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        # Class instantiation, lookup __new__ instead."},{"lineNumber":540,"author":{"gitId":"-"},"content":"        # If we only find object.__new__, we can safely check __init__"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        # instead. If __new__ belongs to builtins, then we look"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        # again for __init__ in the locals, since we won\u0027t have"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        # argument information for the builtin __new__ function."},{"lineNumber":544,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":545,"author":{"gitId":"-"},"content":"            # Use the last definition of __new__."},{"lineNumber":546,"author":{"gitId":"-"},"content":"            new \u003d callable_obj.local_attr(\"__new__\")[-1]"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        except astroid.NotFoundError:"},{"lineNumber":548,"author":{"gitId":"-"},"content":"            new \u003d None"},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"-"},"content":"        from_object \u003d new and new.parent.scope().name \u003d\u003d \"object\""},{"lineNumber":551,"author":{"gitId":"-"},"content":"        from_builtins \u003d new and new.root().name in sys.builtin_module_names"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"        if not new or from_object or from_builtins:"},{"lineNumber":554,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":555,"author":{"gitId":"-"},"content":"                # Use the last definition of __init__."},{"lineNumber":556,"author":{"gitId":"-"},"content":"                callable_obj \u003d callable_obj.local_attr(\"__init__\")[-1]"},{"lineNumber":557,"author":{"gitId":"-"},"content":"            except astroid.NotFoundError as e:"},{"lineNumber":558,"author":{"gitId":"-"},"content":"                # do nothing, covered by no-init."},{"lineNumber":559,"author":{"gitId":"-"},"content":"                raise ValueError from e"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":561,"author":{"gitId":"-"},"content":"            callable_obj \u003d new"},{"lineNumber":562,"author":{"gitId":"-"},"content":""},{"lineNumber":563,"author":{"gitId":"-"},"content":"        if not isinstance(callable_obj, astroid.FunctionDef):"},{"lineNumber":564,"author":{"gitId":"-"},"content":"            raise ValueError"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        # both have an extra implicit \u0027cls\u0027/\u0027self\u0027 argument."},{"lineNumber":566,"author":{"gitId":"-"},"content":"        return callable_obj, parameters, \"constructor\""},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    raise ValueError"},{"lineNumber":569,"author":{"gitId":"-"},"content":""},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":"def _has_parent_of_type(node, node_type, statement):"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    \"\"\"Check if the given node has a parent of the given type.\"\"\""},{"lineNumber":573,"author":{"gitId":"-"},"content":"    parent \u003d node.parent"},{"lineNumber":574,"author":{"gitId":"-"},"content":"    while not isinstance(parent, node_type) and statement.parent_of(parent):"},{"lineNumber":575,"author":{"gitId":"-"},"content":"        parent \u003d parent.parent"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    return isinstance(parent, node_type)"},{"lineNumber":577,"author":{"gitId":"-"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"def _no_context_variadic_keywords(node, scope):"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    statement \u003d node.statement()"},{"lineNumber":581,"author":{"gitId":"-"},"content":"    variadics \u003d ()"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"    if isinstance(scope, astroid.Lambda) and not isinstance(scope, astroid.FunctionDef):"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        variadics \u003d list(node.keywords or []) + node.kwargs"},{"lineNumber":585,"author":{"gitId":"-"},"content":"    elif isinstance("},{"lineNumber":586,"author":{"gitId":"-"},"content":"        statement, (astroid.Return, astroid.Expr, astroid.Assign)"},{"lineNumber":587,"author":{"gitId":"-"},"content":"    ) and isinstance(statement.value, astroid.Call):"},{"lineNumber":588,"author":{"gitId":"-"},"content":"        call \u003d statement.value"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        variadics \u003d list(call.keywords or []) + call.kwargs"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"    return _no_context_variadic(node, scope.args.kwarg, astroid.Keyword, variadics)"},{"lineNumber":592,"author":{"gitId":"-"},"content":""},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"def _no_context_variadic_positional(node, scope):"},{"lineNumber":595,"author":{"gitId":"-"},"content":"    variadics \u003d ()"},{"lineNumber":596,"author":{"gitId":"-"},"content":"    if isinstance(scope, astroid.Lambda) and not isinstance(scope, astroid.FunctionDef):"},{"lineNumber":597,"author":{"gitId":"-"},"content":"        variadics \u003d node.starargs + node.kwargs"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        statement \u003d node.statement()"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        if isinstance("},{"lineNumber":601,"author":{"gitId":"-"},"content":"            statement, (astroid.Expr, astroid.Return, astroid.Assign)"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        ) and isinstance(statement.value, astroid.Call):"},{"lineNumber":603,"author":{"gitId":"-"},"content":"            call \u003d statement.value"},{"lineNumber":604,"author":{"gitId":"-"},"content":"            variadics \u003d call.starargs + call.kwargs"},{"lineNumber":605,"author":{"gitId":"-"},"content":""},{"lineNumber":606,"author":{"gitId":"-"},"content":"    return _no_context_variadic(node, scope.args.vararg, astroid.Starred, variadics)"},{"lineNumber":607,"author":{"gitId":"-"},"content":""},{"lineNumber":608,"author":{"gitId":"-"},"content":""},{"lineNumber":609,"author":{"gitId":"-"},"content":"def _no_context_variadic(node, variadic_name, variadic_type, variadics):"},{"lineNumber":610,"author":{"gitId":"-"},"content":"    \"\"\"Verify if the given call node has variadic nodes without context"},{"lineNumber":611,"author":{"gitId":"-"},"content":""},{"lineNumber":612,"author":{"gitId":"-"},"content":"    This is a workaround for handling cases of nested call functions"},{"lineNumber":613,"author":{"gitId":"-"},"content":"    which don\u0027t have the specific call context at hand."},{"lineNumber":614,"author":{"gitId":"-"},"content":"    Variadic arguments (variable positional arguments and variable"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    keyword arguments) are inferred, inherently wrong, by astroid"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    as a Tuple, respectively a Dict with empty elements."},{"lineNumber":617,"author":{"gitId":"-"},"content":"    This can lead pylint to believe that a function call receives"},{"lineNumber":618,"author":{"gitId":"-"},"content":"    too few arguments."},{"lineNumber":619,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":620,"author":{"gitId":"-"},"content":"    scope \u003d node.scope()"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    is_in_lambda_scope \u003d not isinstance(scope, astroid.FunctionDef) and isinstance("},{"lineNumber":622,"author":{"gitId":"-"},"content":"        scope, astroid.Lambda"},{"lineNumber":623,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":624,"author":{"gitId":"-"},"content":"    statement \u003d node.statement()"},{"lineNumber":625,"author":{"gitId":"-"},"content":"    for name in statement.nodes_of_class(astroid.Name):"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        if name.name !\u003d variadic_name:"},{"lineNumber":627,"author":{"gitId":"-"},"content":"            continue"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(name)"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        if isinstance(inferred, (astroid.List, astroid.Tuple)):"},{"lineNumber":631,"author":{"gitId":"-"},"content":"            length \u003d len(inferred.elts)"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        elif isinstance(inferred, astroid.Dict):"},{"lineNumber":633,"author":{"gitId":"-"},"content":"            length \u003d len(inferred.items)"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":635,"author":{"gitId":"-"},"content":"            continue"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"        if is_in_lambda_scope and isinstance(inferred.parent, astroid.Arguments):"},{"lineNumber":638,"author":{"gitId":"-"},"content":"            # The statement of the variadic will be the assignment itself,"},{"lineNumber":639,"author":{"gitId":"-"},"content":"            # so we need to go the lambda instead"},{"lineNumber":640,"author":{"gitId":"-"},"content":"            inferred_statement \u003d inferred.parent.parent"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":642,"author":{"gitId":"-"},"content":"            inferred_statement \u003d inferred.statement()"},{"lineNumber":643,"author":{"gitId":"-"},"content":""},{"lineNumber":644,"author":{"gitId":"-"},"content":"        if not length and isinstance(inferred_statement, astroid.Lambda):"},{"lineNumber":645,"author":{"gitId":"-"},"content":"            is_in_starred_context \u003d _has_parent_of_type(node, variadic_type, statement)"},{"lineNumber":646,"author":{"gitId":"-"},"content":"            used_as_starred_argument \u003d any("},{"lineNumber":647,"author":{"gitId":"-"},"content":"                variadic.value \u003d\u003d name or variadic.value.parent_of(name)"},{"lineNumber":648,"author":{"gitId":"-"},"content":"                for variadic in variadics"},{"lineNumber":649,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":650,"author":{"gitId":"-"},"content":"            if is_in_starred_context or used_as_starred_argument:"},{"lineNumber":651,"author":{"gitId":"-"},"content":"                return True"},{"lineNumber":652,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":653,"author":{"gitId":"-"},"content":""},{"lineNumber":654,"author":{"gitId":"-"},"content":""},{"lineNumber":655,"author":{"gitId":"-"},"content":"def _is_invalid_metaclass(metaclass):"},{"lineNumber":656,"author":{"gitId":"-"},"content":"    try:"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        mro \u003d metaclass.mro()"},{"lineNumber":658,"author":{"gitId":"-"},"content":"    except NotImplementedError:"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        # Cannot have a metaclass which is not a newstyle class."},{"lineNumber":660,"author":{"gitId":"-"},"content":"        return True"},{"lineNumber":661,"author":{"gitId":"-"},"content":"    else:"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        if not any(is_builtin_object(cls) and cls.name \u003d\u003d \"type\" for cls in mro):"},{"lineNumber":663,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    return False"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":""},{"lineNumber":667,"author":{"gitId":"-"},"content":"def _infer_from_metaclass_constructor(cls, func):"},{"lineNumber":668,"author":{"gitId":"-"},"content":"    \"\"\"Try to infer what the given *func* constructor is building"},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"-"},"content":"    :param astroid.FunctionDef func:"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        A metaclass constructor. Metaclass definitions can be"},{"lineNumber":672,"author":{"gitId":"-"},"content":"        functions, which should accept three arguments, the name of"},{"lineNumber":673,"author":{"gitId":"-"},"content":"        the class, the bases of the class and the attributes."},{"lineNumber":674,"author":{"gitId":"-"},"content":"        The function could return anything, but usually it should"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        be a proper metaclass."},{"lineNumber":676,"author":{"gitId":"-"},"content":"    :param astroid.ClassDef cls:"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        The class for which the *func* parameter should generate"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        a metaclass."},{"lineNumber":679,"author":{"gitId":"-"},"content":"    :returns:"},{"lineNumber":680,"author":{"gitId":"-"},"content":"        The class generated by the function or None,"},{"lineNumber":681,"author":{"gitId":"-"},"content":"        if we couldn\u0027t infer it."},{"lineNumber":682,"author":{"gitId":"-"},"content":"    :rtype: astroid.ClassDef"},{"lineNumber":683,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":684,"author":{"gitId":"-"},"content":"    context \u003d astroid.context.InferenceContext()"},{"lineNumber":685,"author":{"gitId":"-"},"content":""},{"lineNumber":686,"author":{"gitId":"-"},"content":"    class_bases \u003d astroid.List()"},{"lineNumber":687,"author":{"gitId":"-"},"content":"    class_bases.postinit(elts\u003dcls.bases)"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"    attrs \u003d astroid.Dict()"},{"lineNumber":690,"author":{"gitId":"-"},"content":"    local_names \u003d [(name, values[-1]) for name, values in cls.locals.items()]"},{"lineNumber":691,"author":{"gitId":"-"},"content":"    attrs.postinit(local_names)"},{"lineNumber":692,"author":{"gitId":"-"},"content":""},{"lineNumber":693,"author":{"gitId":"-"},"content":"    builder_args \u003d astroid.Tuple()"},{"lineNumber":694,"author":{"gitId":"-"},"content":"    builder_args.postinit([cls.name, class_bases, attrs])"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"-"},"content":"    context.callcontext \u003d astroid.context.CallContext(builder_args)"},{"lineNumber":697,"author":{"gitId":"-"},"content":"    try:"},{"lineNumber":698,"author":{"gitId":"-"},"content":"        inferred \u003d next(func.infer_call_result(func, context), None)"},{"lineNumber":699,"author":{"gitId":"-"},"content":"    except astroid.InferenceError:"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":701,"author":{"gitId":"-"},"content":"    return inferred or None"},{"lineNumber":702,"author":{"gitId":"-"},"content":""},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"def _is_c_extension(module_node):"},{"lineNumber":705,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":706,"author":{"gitId":"-"},"content":"        not astroid.modutils.is_standard_module(module_node.name)"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        and not module_node.fully_defined()"},{"lineNumber":708,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":""},{"lineNumber":711,"author":{"gitId":"-"},"content":"def _is_invalid_isinstance_type(arg):"},{"lineNumber":712,"author":{"gitId":"-"},"content":"    # Return True if we are sure that arg is not a type"},{"lineNumber":713,"author":{"gitId":"-"},"content":"    inferred \u003d utils.safe_infer(arg)"},{"lineNumber":714,"author":{"gitId":"-"},"content":"    if not inferred:"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        # Cannot infer it so skip it."},{"lineNumber":716,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":717,"author":{"gitId":"-"},"content":"    if isinstance(inferred, astroid.Tuple):"},{"lineNumber":718,"author":{"gitId":"-"},"content":"        return any(_is_invalid_isinstance_type(elt) for elt in inferred.elts)"},{"lineNumber":719,"author":{"gitId":"-"},"content":"    if isinstance(inferred, astroid.ClassDef):"},{"lineNumber":720,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":721,"author":{"gitId":"-"},"content":"    if isinstance(inferred, astroid.Instance) and inferred.qname() \u003d\u003d BUILTIN_TUPLE:"},{"lineNumber":722,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":723,"author":{"gitId":"-"},"content":"    return True"},{"lineNumber":724,"author":{"gitId":"-"},"content":""},{"lineNumber":725,"author":{"gitId":"-"},"content":""},{"lineNumber":726,"author":{"gitId":"-"},"content":"class TypeChecker(BaseChecker):"},{"lineNumber":727,"author":{"gitId":"-"},"content":"    \"\"\"try to find bugs in the code using type inference\"\"\""},{"lineNumber":728,"author":{"gitId":"-"},"content":""},{"lineNumber":729,"author":{"gitId":"-"},"content":"    __implements__ \u003d (IAstroidChecker,)"},{"lineNumber":730,"author":{"gitId":"-"},"content":""},{"lineNumber":731,"author":{"gitId":"-"},"content":"    # configuration section name"},{"lineNumber":732,"author":{"gitId":"-"},"content":"    name \u003d \"typecheck\""},{"lineNumber":733,"author":{"gitId":"-"},"content":"    # messages"},{"lineNumber":734,"author":{"gitId":"-"},"content":"    msgs \u003d MSGS"},{"lineNumber":735,"author":{"gitId":"-"},"content":"    priority \u003d -1"},{"lineNumber":736,"author":{"gitId":"-"},"content":"    # configuration options"},{"lineNumber":737,"author":{"gitId":"-"},"content":"    options \u003d ("},{"lineNumber":738,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":739,"author":{"gitId":"-"},"content":"            \"ignore-on-opaque-inference\","},{"lineNumber":740,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":741,"author":{"gitId":"-"},"content":"                \"default\": True,"},{"lineNumber":742,"author":{"gitId":"-"},"content":"                \"type\": \"yn\","},{"lineNumber":743,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cy_or_n\u003e\","},{"lineNumber":744,"author":{"gitId":"-"},"content":"                \"help\": \"This flag controls whether pylint should warn about \""},{"lineNumber":745,"author":{"gitId":"-"},"content":"                \"no-member and similar checks whenever an opaque object \""},{"lineNumber":746,"author":{"gitId":"-"},"content":"                \"is returned when inferring. The inference can return \""},{"lineNumber":747,"author":{"gitId":"-"},"content":"                \"multiple potential results while evaluating a Python object, \""},{"lineNumber":748,"author":{"gitId":"-"},"content":"                \"but some branches might not be evaluated, which results in \""},{"lineNumber":749,"author":{"gitId":"-"},"content":"                \"partial inference. In that case, it might be useful to still emit \""},{"lineNumber":750,"author":{"gitId":"-"},"content":"                \"no-member and other checks for the rest of the inferred objects.\","},{"lineNumber":751,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":754,"author":{"gitId":"-"},"content":"            \"ignore-mixin-members\","},{"lineNumber":755,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":756,"author":{"gitId":"-"},"content":"                \"default\": True,"},{"lineNumber":757,"author":{"gitId":"-"},"content":"                \"type\": \"yn\","},{"lineNumber":758,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cy_or_n\u003e\","},{"lineNumber":759,"author":{"gitId":"-"},"content":"                \"help\": \u0027Tells whether missing members accessed in mixin \\"},{"lineNumber":760,"author":{"gitId":"-"},"content":"class should be ignored. A mixin class is detected if its name ends with \\"},{"lineNumber":761,"author":{"gitId":"-"},"content":"\"mixin\" (case insensitive).\u0027,"},{"lineNumber":762,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":763,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":765,"author":{"gitId":"-"},"content":"            \"ignore-none\","},{"lineNumber":766,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":767,"author":{"gitId":"-"},"content":"                \"default\": True,"},{"lineNumber":768,"author":{"gitId":"-"},"content":"                \"type\": \"yn\","},{"lineNumber":769,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cy_or_n\u003e\","},{"lineNumber":770,"author":{"gitId":"-"},"content":"                \"help\": \"Tells whether to warn about missing members when the owner \""},{"lineNumber":771,"author":{"gitId":"-"},"content":"                \"of the attribute is inferred to be None.\","},{"lineNumber":772,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":773,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":774,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":775,"author":{"gitId":"-"},"content":"            \"ignored-modules\","},{"lineNumber":776,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":777,"author":{"gitId":"-"},"content":"                \"default\": (),"},{"lineNumber":778,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":779,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmodule names\u003e\","},{"lineNumber":780,"author":{"gitId":"-"},"content":"                \"help\": \"List of module names for which member attributes \""},{"lineNumber":781,"author":{"gitId":"-"},"content":"                \"should not be checked (useful for modules/projects \""},{"lineNumber":782,"author":{"gitId":"-"},"content":"                \"where namespaces are manipulated during runtime and \""},{"lineNumber":783,"author":{"gitId":"-"},"content":"                \"thus existing member attributes cannot be \""},{"lineNumber":784,"author":{"gitId":"-"},"content":"                \"deduced by static analysis). It supports qualified \""},{"lineNumber":785,"author":{"gitId":"-"},"content":"                \"module names, as well as Unix pattern matching.\","},{"lineNumber":786,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":788,"author":{"gitId":"-"},"content":"        # the defaults here are *stdlib* names that (almost) always"},{"lineNumber":789,"author":{"gitId":"-"},"content":"        # lead to false positives, since their idiomatic use is"},{"lineNumber":790,"author":{"gitId":"-"},"content":"        # \u0027too dynamic\u0027 for pylint to grok."},{"lineNumber":791,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":792,"author":{"gitId":"-"},"content":"            \"ignored-classes\","},{"lineNumber":793,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":794,"author":{"gitId":"-"},"content":"                \"default\": (\"optparse.Values\", \"thread._local\", \"_thread._local\"),"},{"lineNumber":795,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":796,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmembers names\u003e\","},{"lineNumber":797,"author":{"gitId":"-"},"content":"                \"help\": \"List of class names for which member attributes \""},{"lineNumber":798,"author":{"gitId":"-"},"content":"                \"should not be checked (useful for classes with \""},{"lineNumber":799,"author":{"gitId":"-"},"content":"                \"dynamically set attributes). This supports \""},{"lineNumber":800,"author":{"gitId":"-"},"content":"                \"the use of qualified names.\","},{"lineNumber":801,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":802,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":803,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":804,"author":{"gitId":"-"},"content":"            \"generated-members\","},{"lineNumber":805,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":806,"author":{"gitId":"-"},"content":"                \"default\": (),"},{"lineNumber":807,"author":{"gitId":"-"},"content":"                \"type\": \"string\","},{"lineNumber":808,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmembers names\u003e\","},{"lineNumber":809,"author":{"gitId":"-"},"content":"                \"help\": \"List of members which are set dynamically and \\"},{"lineNumber":810,"author":{"gitId":"-"},"content":"missed by pylint inference system, and so shouldn\u0027t trigger E1101 when \\"},{"lineNumber":811,"author":{"gitId":"-"},"content":"accessed. Python regular expressions are accepted.\","},{"lineNumber":812,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":813,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":815,"author":{"gitId":"-"},"content":"            \"contextmanager-decorators\","},{"lineNumber":816,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":817,"author":{"gitId":"-"},"content":"                \"default\": [\"contextlib.contextmanager\"],"},{"lineNumber":818,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":819,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cdecorator names\u003e\","},{"lineNumber":820,"author":{"gitId":"-"},"content":"                \"help\": \"List of decorators that produce context managers, \""},{"lineNumber":821,"author":{"gitId":"-"},"content":"                \"such as contextlib.contextmanager. Add to this list \""},{"lineNumber":822,"author":{"gitId":"-"},"content":"                \"to register other decorators that produce valid \""},{"lineNumber":823,"author":{"gitId":"-"},"content":"                \"context managers.\","},{"lineNumber":824,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":827,"author":{"gitId":"-"},"content":"            \"missing-member-hint-distance\","},{"lineNumber":828,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":829,"author":{"gitId":"-"},"content":"                \"default\": 1,"},{"lineNumber":830,"author":{"gitId":"-"},"content":"                \"type\": \"int\","},{"lineNumber":831,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmember hint edit distance\u003e\","},{"lineNumber":832,"author":{"gitId":"-"},"content":"                \"help\": \"The minimum edit distance a name should have in order \""},{"lineNumber":833,"author":{"gitId":"-"},"content":"                \"to be considered a similar match for a missing member name.\","},{"lineNumber":834,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":837,"author":{"gitId":"-"},"content":"            \"missing-member-max-choices\","},{"lineNumber":838,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":839,"author":{"gitId":"-"},"content":"                \"default\": 1,"},{"lineNumber":840,"author":{"gitId":"-"},"content":"                \"type\": \"int\","},{"lineNumber":841,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmember hint max choices\u003e\","},{"lineNumber":842,"author":{"gitId":"-"},"content":"                \"help\": \"The total number of similar names that should be taken in \""},{"lineNumber":843,"author":{"gitId":"-"},"content":"                \"consideration when showing a hint for a missing member.\","},{"lineNumber":844,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":845,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":847,"author":{"gitId":"-"},"content":"            \"missing-member-hint\","},{"lineNumber":848,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":849,"author":{"gitId":"-"},"content":"                \"default\": True,"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                \"type\": \"yn\","},{"lineNumber":851,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cmissing member hint\u003e\","},{"lineNumber":852,"author":{"gitId":"-"},"content":"                \"help\": \"Show a hint with possible names when a member name was not \""},{"lineNumber":853,"author":{"gitId":"-"},"content":"                \"found. The aspect of finding the hint is based on edit distance.\","},{"lineNumber":854,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        ("},{"lineNumber":857,"author":{"gitId":"-"},"content":"            \"signature-mutators\","},{"lineNumber":858,"author":{"gitId":"-"},"content":"            {"},{"lineNumber":859,"author":{"gitId":"-"},"content":"                \"default\": [],"},{"lineNumber":860,"author":{"gitId":"-"},"content":"                \"type\": \"csv\","},{"lineNumber":861,"author":{"gitId":"-"},"content":"                \"metavar\": \"\u003cdecorator names\u003e\","},{"lineNumber":862,"author":{"gitId":"-"},"content":"                \"help\": \"List of decorators that change the signature of \""},{"lineNumber":863,"author":{"gitId":"-"},"content":"                \"a decorated function.\","},{"lineNumber":864,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":865,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":866,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":867,"author":{"gitId":"-"},"content":""},{"lineNumber":868,"author":{"gitId":"-"},"content":"    @astroid.decorators.cachedproperty"},{"lineNumber":869,"author":{"gitId":"-"},"content":"    def _suggestion_mode(self):"},{"lineNumber":870,"author":{"gitId":"-"},"content":"        return get_global_option(self, \"suggestion-mode\", default\u003dTrue)"},{"lineNumber":871,"author":{"gitId":"-"},"content":""},{"lineNumber":872,"author":{"gitId":"-"},"content":"    @astroid.decorators.cachedproperty"},{"lineNumber":873,"author":{"gitId":"-"},"content":"    def _compiled_generated_members(self) -\u003e Tuple[Pattern, ...]:"},{"lineNumber":874,"author":{"gitId":"-"},"content":"        # do this lazily since config not fully initialized in __init__"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        # generated_members may contain regular expressions"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        # (surrounded by quote `\"` and followed by a comma `,`)"},{"lineNumber":877,"author":{"gitId":"-"},"content":"        # REQUEST,aq_parent,\"[a-zA-Z]+_set{1,2}\"\u0027 \u003d\u003e"},{"lineNumber":878,"author":{"gitId":"-"},"content":"        # (\u0027REQUEST\u0027, \u0027aq_parent\u0027, \u0027[a-zA-Z]+_set{1,2}\u0027)"},{"lineNumber":879,"author":{"gitId":"-"},"content":"        generated_members \u003d self.config.generated_members"},{"lineNumber":880,"author":{"gitId":"-"},"content":"        if isinstance(generated_members, str):"},{"lineNumber":881,"author":{"gitId":"-"},"content":"            gen \u003d shlex.shlex(generated_members)"},{"lineNumber":882,"author":{"gitId":"-"},"content":"            gen.whitespace +\u003d \",\""},{"lineNumber":883,"author":{"gitId":"-"},"content":"            gen.wordchars +\u003d r\"[]-+\\.*?()|\""},{"lineNumber":884,"author":{"gitId":"-"},"content":"            generated_members \u003d tuple(tok.strip(\u0027\"\u0027) for tok in gen)"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        return tuple(re.compile(exp) for exp in generated_members)"},{"lineNumber":886,"author":{"gitId":"-"},"content":""},{"lineNumber":887,"author":{"gitId":"-"},"content":"    @check_messages(\"keyword-arg-before-vararg\")"},{"lineNumber":888,"author":{"gitId":"-"},"content":"    def visit_functiondef(self, node):"},{"lineNumber":889,"author":{"gitId":"-"},"content":"        # check for keyword arg before varargs"},{"lineNumber":890,"author":{"gitId":"-"},"content":"        if node.args.vararg and node.args.defaults:"},{"lineNumber":891,"author":{"gitId":"-"},"content":"            self.add_message(\"keyword-arg-before-vararg\", node\u003dnode, args\u003d(node.name))"},{"lineNumber":892,"author":{"gitId":"-"},"content":""},{"lineNumber":893,"author":{"gitId":"-"},"content":"    visit_asyncfunctiondef \u003d visit_functiondef"},{"lineNumber":894,"author":{"gitId":"-"},"content":""},{"lineNumber":895,"author":{"gitId":"-"},"content":"    @check_messages(\"invalid-metaclass\")"},{"lineNumber":896,"author":{"gitId":"-"},"content":"    def visit_classdef(self, node):"},{"lineNumber":897,"author":{"gitId":"-"},"content":"        def _metaclass_name(metaclass):"},{"lineNumber":898,"author":{"gitId":"-"},"content":"            if isinstance(metaclass, (astroid.ClassDef, astroid.FunctionDef)):"},{"lineNumber":899,"author":{"gitId":"-"},"content":"                return metaclass.name"},{"lineNumber":900,"author":{"gitId":"-"},"content":"            return metaclass.as_string()"},{"lineNumber":901,"author":{"gitId":"-"},"content":""},{"lineNumber":902,"author":{"gitId":"-"},"content":"        metaclass \u003d node.declared_metaclass()"},{"lineNumber":903,"author":{"gitId":"-"},"content":"        if not metaclass:"},{"lineNumber":904,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":905,"author":{"gitId":"-"},"content":""},{"lineNumber":906,"author":{"gitId":"-"},"content":"        if isinstance(metaclass, astroid.FunctionDef):"},{"lineNumber":907,"author":{"gitId":"-"},"content":"            # Try to infer the result."},{"lineNumber":908,"author":{"gitId":"-"},"content":"            metaclass \u003d _infer_from_metaclass_constructor(node, metaclass)"},{"lineNumber":909,"author":{"gitId":"-"},"content":"            if not metaclass:"},{"lineNumber":910,"author":{"gitId":"-"},"content":"                # Don\u0027t do anything if we cannot infer the result."},{"lineNumber":911,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":912,"author":{"gitId":"-"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"        if isinstance(metaclass, astroid.ClassDef):"},{"lineNumber":914,"author":{"gitId":"-"},"content":"            if _is_invalid_metaclass(metaclass):"},{"lineNumber":915,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":916,"author":{"gitId":"-"},"content":"                    \"invalid-metaclass\", node\u003dnode, args\u003d(_metaclass_name(metaclass),)"},{"lineNumber":917,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":918,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":919,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":920,"author":{"gitId":"-"},"content":"                \"invalid-metaclass\", node\u003dnode, args\u003d(_metaclass_name(metaclass),)"},{"lineNumber":921,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":922,"author":{"gitId":"-"},"content":""},{"lineNumber":923,"author":{"gitId":"-"},"content":"    def visit_assignattr(self, node):"},{"lineNumber":924,"author":{"gitId":"-"},"content":"        if isinstance(node.assign_type(), astroid.AugAssign):"},{"lineNumber":925,"author":{"gitId":"-"},"content":"            self.visit_attribute(node)"},{"lineNumber":926,"author":{"gitId":"-"},"content":""},{"lineNumber":927,"author":{"gitId":"-"},"content":"    def visit_delattr(self, node):"},{"lineNumber":928,"author":{"gitId":"-"},"content":"        self.visit_attribute(node)"},{"lineNumber":929,"author":{"gitId":"-"},"content":""},{"lineNumber":930,"author":{"gitId":"-"},"content":"    @check_messages(\"no-member\", \"c-extension-no-member\")"},{"lineNumber":931,"author":{"gitId":"-"},"content":"    def visit_attribute(self, node):"},{"lineNumber":932,"author":{"gitId":"-"},"content":"        \"\"\"check that the accessed attribute exists"},{"lineNumber":933,"author":{"gitId":"-"},"content":""},{"lineNumber":934,"author":{"gitId":"-"},"content":"        to avoid too much false positives for now, we\u0027ll consider the code as"},{"lineNumber":935,"author":{"gitId":"-"},"content":"        correct if a single of the inferred nodes has the accessed attribute."},{"lineNumber":936,"author":{"gitId":"-"},"content":""},{"lineNumber":937,"author":{"gitId":"-"},"content":"        function/method, super call and metaclasses are ignored"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":939,"author":{"gitId":"-"},"content":"        if any("},{"lineNumber":940,"author":{"gitId":"-"},"content":"            pattern.match(name)"},{"lineNumber":941,"author":{"gitId":"-"},"content":"            for name in (node.attrname, node.as_string())"},{"lineNumber":942,"author":{"gitId":"-"},"content":"            for pattern in self._compiled_generated_members"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":944,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":945,"author":{"gitId":"-"},"content":""},{"lineNumber":946,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":947,"author":{"gitId":"-"},"content":"            inferred \u003d list(node.expr.infer())"},{"lineNumber":948,"author":{"gitId":"-"},"content":"        except astroid.InferenceError:"},{"lineNumber":949,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":950,"author":{"gitId":"-"},"content":""},{"lineNumber":951,"author":{"gitId":"-"},"content":"        # list of (node, nodename) which are missing the attribute"},{"lineNumber":952,"author":{"gitId":"-"},"content":"        missingattr \u003d set()"},{"lineNumber":953,"author":{"gitId":"-"},"content":""},{"lineNumber":954,"author":{"gitId":"-"},"content":"        non_opaque_inference_results \u003d ["},{"lineNumber":955,"author":{"gitId":"-"},"content":"            owner"},{"lineNumber":956,"author":{"gitId":"-"},"content":"            for owner in inferred"},{"lineNumber":957,"author":{"gitId":"-"},"content":"            if owner is not astroid.Uninferable"},{"lineNumber":958,"author":{"gitId":"-"},"content":"            and not isinstance(owner, astroid.nodes.Unknown)"},{"lineNumber":959,"author":{"gitId":"-"},"content":"        ]"},{"lineNumber":960,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":961,"author":{"gitId":"-"},"content":"            len(non_opaque_inference_results) !\u003d len(inferred)"},{"lineNumber":962,"author":{"gitId":"-"},"content":"            and self.config.ignore_on_opaque_inference"},{"lineNumber":963,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":964,"author":{"gitId":"-"},"content":"            # There is an ambiguity in the inference. Since we can\u0027t"},{"lineNumber":965,"author":{"gitId":"-"},"content":"            # make sure that we won\u0027t emit a false positive, we just stop"},{"lineNumber":966,"author":{"gitId":"-"},"content":"            # whenever the inference returns an opaque inference object."},{"lineNumber":967,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":968,"author":{"gitId":"-"},"content":"        for owner in non_opaque_inference_results:"},{"lineNumber":969,"author":{"gitId":"-"},"content":"            name \u003d getattr(owner, \"name\", None)"},{"lineNumber":970,"author":{"gitId":"-"},"content":"            if _is_owner_ignored("},{"lineNumber":971,"author":{"gitId":"-"},"content":"                owner, name, self.config.ignored_classes, self.config.ignored_modules"},{"lineNumber":972,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":973,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":974,"author":{"gitId":"-"},"content":""},{"lineNumber":975,"author":{"gitId":"-"},"content":"            qualname \u003d f\"{owner.pytype()}.{node.attrname}\""},{"lineNumber":976,"author":{"gitId":"-"},"content":"            if any("},{"lineNumber":977,"author":{"gitId":"-"},"content":"                pattern.match(qualname) for pattern in self._compiled_generated_members"},{"lineNumber":978,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":979,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":980,"author":{"gitId":"-"},"content":""},{"lineNumber":981,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":982,"author":{"gitId":"-"},"content":"                if not ["},{"lineNumber":983,"author":{"gitId":"-"},"content":"                    n"},{"lineNumber":984,"author":{"gitId":"-"},"content":"                    for n in owner.getattr(node.attrname)"},{"lineNumber":985,"author":{"gitId":"-"},"content":"                    if not isinstance(n.statement(), astroid.AugAssign)"},{"lineNumber":986,"author":{"gitId":"-"},"content":"                ]:"},{"lineNumber":987,"author":{"gitId":"-"},"content":"                    missingattr.add((owner, name))"},{"lineNumber":988,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":989,"author":{"gitId":"-"},"content":"            except AttributeError:"},{"lineNumber":990,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":991,"author":{"gitId":"-"},"content":"            except astroid.DuplicateBasesError:"},{"lineNumber":992,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":993,"author":{"gitId":"-"},"content":"            except astroid.NotFoundError:"},{"lineNumber":994,"author":{"gitId":"-"},"content":"                # This can\u0027t be moved before the actual .getattr call,"},{"lineNumber":995,"author":{"gitId":"-"},"content":"                # because there can be more values inferred and we are"},{"lineNumber":996,"author":{"gitId":"-"},"content":"                # stopping after the first one which has the attribute in question."},{"lineNumber":997,"author":{"gitId":"-"},"content":"                # The problem is that if the first one has the attribute,"},{"lineNumber":998,"author":{"gitId":"-"},"content":"                # but we continue to the next values which doesn\u0027t have the"},{"lineNumber":999,"author":{"gitId":"-"},"content":"                # attribute, then we\u0027ll have a false positive."},{"lineNumber":1000,"author":{"gitId":"-"},"content":"                # So call this only after the call has been made."},{"lineNumber":1001,"author":{"gitId":"-"},"content":"                if not _emit_no_member("},{"lineNumber":1002,"author":{"gitId":"-"},"content":"                    node,"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"                    owner,"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"                    name,"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"                    ignored_mixins\u003dself.config.ignore_mixin_members,"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"                    ignored_none\u003dself.config.ignore_none,"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"                missingattr.add((owner, name))"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1011,"author":{"gitId":"-"},"content":"            # stop on the first found"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"            break"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"            # we have not found any node with the attributes, display the"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"            # message for inferred nodes"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"            done \u003d set()"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"            for owner, name in missingattr:"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"                if isinstance(owner, astroid.Instance):"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"                    actual \u003d owner._proxied"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"                    actual \u003d owner"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"                if actual in done:"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"                done.add(actual)"},{"lineNumber":1025,"author":{"gitId":"-"},"content":""},{"lineNumber":1026,"author":{"gitId":"-"},"content":"                msg, hint \u003d self._get_nomember_msgid_hint(node, owner)"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":1028,"author":{"gitId":"-"},"content":"                    msg,"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"                    node\u003dnode,"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"                    args\u003d(owner.display_type(), name, node.attrname, hint),"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"                    confidence\u003dINFERENCE,"},{"lineNumber":1032,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1033,"author":{"gitId":"-"},"content":""},{"lineNumber":1034,"author":{"gitId":"-"},"content":"    def _get_nomember_msgid_hint(self, node, owner):"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"        suggestions_are_possible \u003d self._suggestion_mode and isinstance("},{"lineNumber":1036,"author":{"gitId":"-"},"content":"            owner, astroid.Module"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"        if suggestions_are_possible and _is_c_extension(owner):"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"            msg \u003d \"c-extension-no-member\""},{"lineNumber":1040,"author":{"gitId":"-"},"content":"            hint \u003d \"\""},{"lineNumber":1041,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"            msg \u003d \"no-member\""},{"lineNumber":1043,"author":{"gitId":"-"},"content":"            if self.config.missing_member_hint:"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"                hint \u003d _missing_member_hint("},{"lineNumber":1045,"author":{"gitId":"-"},"content":"                    owner,"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"                    node.attrname,"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"                    self.config.missing_member_hint_distance,"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"                    self.config.missing_member_max_choices,"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"                hint \u003d \"\""},{"lineNumber":1052,"author":{"gitId":"-"},"content":"        return msg, hint"},{"lineNumber":1053,"author":{"gitId":"-"},"content":""},{"lineNumber":1054,"author":{"gitId":"-"},"content":"    @check_messages("},{"lineNumber":1055,"author":{"gitId":"-"},"content":"        \"assignment-from-no-return\","},{"lineNumber":1056,"author":{"gitId":"-"},"content":"        \"assignment-from-none\","},{"lineNumber":1057,"author":{"gitId":"-"},"content":"        \"non-str-assignment-to-dunder-name\","},{"lineNumber":1058,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"    def visit_assign(self, node):"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1061,"author":{"gitId":"-"},"content":"        Process assignments in the AST."},{"lineNumber":1062,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1063,"author":{"gitId":"-"},"content":""},{"lineNumber":1064,"author":{"gitId":"-"},"content":"        self._check_assignment_from_function_call(node)"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"        self._check_dundername_is_string(node)"},{"lineNumber":1066,"author":{"gitId":"-"},"content":""},{"lineNumber":1067,"author":{"gitId":"-"},"content":"    def _check_assignment_from_function_call(self, node):"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"        \"\"\"check that if assigning to a function call, the function is"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"        possibly returning something valuable"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1071,"author":{"gitId":"-"},"content":"        if not isinstance(node.value, astroid.Call):"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1073,"author":{"gitId":"-"},"content":""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"        function_node \u003d safe_infer(node.value.func)"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"        funcs \u003d (astroid.FunctionDef, astroid.UnboundMethod, astroid.BoundMethod)"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        if not isinstance(function_node, funcs):"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1078,"author":{"gitId":"-"},"content":""},{"lineNumber":1079,"author":{"gitId":"-"},"content":"        # Unwrap to get the actual function object"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"        if isinstance(function_node, astroid.BoundMethod) and isinstance("},{"lineNumber":1081,"author":{"gitId":"-"},"content":"            function_node._proxied, astroid.UnboundMethod"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"            function_node \u003d function_node._proxied._proxied"},{"lineNumber":1084,"author":{"gitId":"-"},"content":""},{"lineNumber":1085,"author":{"gitId":"-"},"content":"        # Make sure that it\u0027s a valid function that we can analyze."},{"lineNumber":1086,"author":{"gitId":"-"},"content":"        # Ordered from less expensive to more expensive checks."},{"lineNumber":1087,"author":{"gitId":"-"},"content":"        # pylint: disable\u003dtoo-many-boolean-expressions"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":1089,"author":{"gitId":"-"},"content":"            not function_node.is_function"},{"lineNumber":1090,"author":{"gitId":"-"},"content":"            or isinstance(function_node, astroid.AsyncFunctionDef)"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"            or function_node.decorators"},{"lineNumber":1092,"author":{"gitId":"-"},"content":"            or function_node.is_generator()"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"            or function_node.is_abstract(pass_is_abstract\u003dFalse)"},{"lineNumber":1094,"author":{"gitId":"-"},"content":"            or utils.is_error(function_node)"},{"lineNumber":1095,"author":{"gitId":"-"},"content":"            or not function_node.root().fully_defined()"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1098,"author":{"gitId":"-"},"content":""},{"lineNumber":1099,"author":{"gitId":"-"},"content":"        returns \u003d list("},{"lineNumber":1100,"author":{"gitId":"-"},"content":"            function_node.nodes_of_class(astroid.Return, skip_klass\u003dastroid.FunctionDef)"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"        if not returns:"},{"lineNumber":1103,"author":{"gitId":"-"},"content":"            self.add_message(\"assignment-from-no-return\", node\u003dnode)"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"            for rnode in returns:"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"                if not ("},{"lineNumber":1107,"author":{"gitId":"-"},"content":"                    isinstance(rnode.value, astroid.Const)"},{"lineNumber":1108,"author":{"gitId":"-"},"content":"                    and rnode.value.value is None"},{"lineNumber":1109,"author":{"gitId":"-"},"content":"                    or rnode.value is None"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"                    break"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"                self.add_message(\"assignment-from-none\", node\u003dnode)"},{"lineNumber":1114,"author":{"gitId":"-"},"content":""},{"lineNumber":1115,"author":{"gitId":"-"},"content":"    def _check_dundername_is_string(self, node):"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1117,"author":{"gitId":"-"},"content":"        Check a string is assigned to self.__name__"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1119,"author":{"gitId":"-"},"content":""},{"lineNumber":1120,"author":{"gitId":"-"},"content":"        # Check the left hand side of the assignment is \u003csomething\u003e.__name__"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"        lhs \u003d node.targets[0]"},{"lineNumber":1122,"author":{"gitId":"-"},"content":"        if not isinstance(lhs, astroid.node_classes.AssignAttr):"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"        if not lhs.attrname \u003d\u003d \"__name__\":"},{"lineNumber":1125,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1126,"author":{"gitId":"-"},"content":""},{"lineNumber":1127,"author":{"gitId":"-"},"content":"        # If the right hand side is not a string"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"        rhs \u003d node.value"},{"lineNumber":1129,"author":{"gitId":"-"},"content":"        if isinstance(rhs, astroid.Const) and isinstance(rhs.value, str):"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        inferred \u003d utils.safe_infer(rhs)"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"        if not inferred:"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1134,"author":{"gitId":"-"},"content":"        if not ("},{"lineNumber":1135,"author":{"gitId":"-"},"content":"            isinstance(inferred, astroid.Const) and isinstance(inferred.value, str)"},{"lineNumber":1136,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1137,"author":{"gitId":"-"},"content":"            # Add the message"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"            self.add_message(\"non-str-assignment-to-dunder-name\", node\u003dnode)"},{"lineNumber":1139,"author":{"gitId":"-"},"content":""},{"lineNumber":1140,"author":{"gitId":"-"},"content":"    def _check_uninferable_call(self, node):"},{"lineNumber":1141,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1142,"author":{"gitId":"-"},"content":"        Check that the given uninferable Call node does not"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"        call an actual function."},{"lineNumber":1144,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1145,"author":{"gitId":"-"},"content":"        if not isinstance(node.func, astroid.Attribute):"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1147,"author":{"gitId":"-"},"content":""},{"lineNumber":1148,"author":{"gitId":"-"},"content":"        # Look for properties. First, obtain"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"        # the lhs of the Attribute node and search the attribute"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"        # there. If that attribute is a property or a subclass of properties,"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"        # then most likely it\u0027s not callable."},{"lineNumber":1152,"author":{"gitId":"-"},"content":""},{"lineNumber":1153,"author":{"gitId":"-"},"content":"        expr \u003d node.func.expr"},{"lineNumber":1154,"author":{"gitId":"-"},"content":"        klass \u003d safe_infer(expr)"},{"lineNumber":1155,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":1156,"author":{"gitId":"-"},"content":"            klass is None"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"            or klass is astroid.Uninferable"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"            or not isinstance(klass, astroid.Instance)"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1161,"author":{"gitId":"-"},"content":""},{"lineNumber":1162,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"            attrs \u003d klass._proxied.getattr(node.func.attrname)"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"        except astroid.NotFoundError:"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1166,"author":{"gitId":"-"},"content":""},{"lineNumber":1167,"author":{"gitId":"-"},"content":"        for attr in attrs:"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"            if attr is astroid.Uninferable:"},{"lineNumber":1169,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"            if not isinstance(attr, astroid.FunctionDef):"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1172,"author":{"gitId":"-"},"content":""},{"lineNumber":1173,"author":{"gitId":"-"},"content":"            # Decorated, see if it is decorated with a property."},{"lineNumber":1174,"author":{"gitId":"-"},"content":"            # Also, check the returns and see if they are callable."},{"lineNumber":1175,"author":{"gitId":"-"},"content":"            if decorated_with_property(attr):"},{"lineNumber":1176,"author":{"gitId":"-"},"content":""},{"lineNumber":1177,"author":{"gitId":"-"},"content":"                try:"},{"lineNumber":1178,"author":{"gitId":"-"},"content":"                    all_returns_are_callable \u003d all("},{"lineNumber":1179,"author":{"gitId":"-"},"content":"                        return_node.callable() or return_node is astroid.Uninferable"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"                        for return_node in attr.infer_call_result(node)"},{"lineNumber":1181,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"                except astroid.InferenceError:"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1184,"author":{"gitId":"-"},"content":""},{"lineNumber":1185,"author":{"gitId":"-"},"content":"                if not all_returns_are_callable:"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1187,"author":{"gitId":"-"},"content":"                        \"not-callable\", node\u003dnode, args\u003dnode.func.as_string()"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"                    break"},{"lineNumber":1190,"author":{"gitId":"-"},"content":""},{"lineNumber":1191,"author":{"gitId":"-"},"content":"    def _check_argument_order(self, node, call_site, called, called_param_names):"},{"lineNumber":1192,"author":{"gitId":"-"},"content":"        \"\"\"Match the supplied argument names against the function parameters."},{"lineNumber":1193,"author":{"gitId":"-"},"content":"        Warn if some argument names are not in the same order as they are in"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"        the function signature."},{"lineNumber":1195,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1196,"author":{"gitId":"-"},"content":"        # Check for called function being an object instance function"},{"lineNumber":1197,"author":{"gitId":"-"},"content":"        # If so, ignore the initial \u0027self\u0027 argument in the signature"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1199,"author":{"gitId":"-"},"content":"            is_classdef \u003d isinstance(called.parent, astroid.scoped_nodes.ClassDef)"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"            if is_classdef and called_param_names[0] \u003d\u003d \"self\":"},{"lineNumber":1201,"author":{"gitId":"-"},"content":"                called_param_names \u003d called_param_names[1:]"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"        except IndexError:"},{"lineNumber":1203,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1204,"author":{"gitId":"-"},"content":""},{"lineNumber":1205,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"            # extract argument names, if they have names"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"            calling_parg_names \u003d [p.name for p in call_site.positional_arguments]"},{"lineNumber":1208,"author":{"gitId":"-"},"content":""},{"lineNumber":1209,"author":{"gitId":"-"},"content":"            # Additionally get names of keyword arguments to use in a full match"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"            # against parameters"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"            calling_kwarg_names \u003d ["},{"lineNumber":1212,"author":{"gitId":"-"},"content":"                arg.name for arg in call_site.keyword_arguments.values()"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"            ]"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"        except AttributeError:"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"            # the type of arg does not provide a `.name`. In this case we"},{"lineNumber":1216,"author":{"gitId":"-"},"content":"            # stop checking for out-of-order arguments because it is only relevant"},{"lineNumber":1217,"author":{"gitId":"-"},"content":"            # for named variables."},{"lineNumber":1218,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1219,"author":{"gitId":"-"},"content":""},{"lineNumber":1220,"author":{"gitId":"-"},"content":"        # Don\u0027t check for ordering if there is an unmatched arg or param"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"        arg_set \u003d set(calling_parg_names) | set(calling_kwarg_names)"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"        param_set \u003d set(called_param_names)"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"        if arg_set !\u003d param_set:"},{"lineNumber":1224,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1225,"author":{"gitId":"-"},"content":""},{"lineNumber":1226,"author":{"gitId":"-"},"content":"        # Warn based on the equality of argument ordering"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"        if calling_parg_names !\u003d called_param_names[: len(calling_parg_names)]:"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"            self.add_message(\"arguments-out-of-order\", node\u003dnode, args\u003d())"},{"lineNumber":1229,"author":{"gitId":"-"},"content":""},{"lineNumber":1230,"author":{"gitId":"anubh-v"},"content":"    def _check_isinstance_args(self, node):"},{"lineNumber":1231,"author":{"gitId":"anubh-v"},"content":"        if len(node.args) !\u003d 2:"},{"lineNumber":1232,"author":{"gitId":"anubh-v"},"content":"            # isinstance called with wrong number of args"},{"lineNumber":1233,"author":{"gitId":"anubh-v"},"content":"            return"},{"lineNumber":1234,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":1235,"author":{"gitId":"anubh-v"},"content":"        second_arg \u003d node.args[1]"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"        if _is_invalid_isinstance_type(second_arg):"},{"lineNumber":1237,"author":{"gitId":"anubh-v"},"content":"            self.add_message(\"isinstance-second-argument-not-valid-type\", node\u003dnode)"},{"lineNumber":1238,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":1239,"author":{"gitId":"-"},"content":"    # pylint: disable\u003dtoo-many-branches,too-many-locals"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"    @check_messages(*(list(MSGS.keys())))"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"    def visit_call(self, node):"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"        \"\"\"check that called functions/methods are inferred to callable objects,"},{"lineNumber":1243,"author":{"gitId":"-"},"content":"        and that the arguments passed to the function match the parameters in"},{"lineNumber":1244,"author":{"gitId":"-"},"content":"        the inferred function\u0027s definition"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"        \"\"\""},{"lineNumber":1246,"author":{"gitId":"-"},"content":"        called \u003d safe_infer(node.func)"},{"lineNumber":1247,"author":{"gitId":"-"},"content":"        # only function, generator and object defining __call__ are allowed"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"        # Ignore instances of descriptors since astroid cannot properly handle them"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"        # yet"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"        if called and not called.callable():"},{"lineNumber":1251,"author":{"gitId":"-"},"content":"            if isinstance(called, astroid.Instance) and ("},{"lineNumber":1252,"author":{"gitId":"-"},"content":"                not has_known_bases(called)"},{"lineNumber":1253,"author":{"gitId":"-"},"content":"                or ("},{"lineNumber":1254,"author":{"gitId":"-"},"content":"                    called.parent is not None"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"                    and isinstance(called.scope(), astroid.ClassDef)"},{"lineNumber":1256,"author":{"gitId":"-"},"content":"                    and \"__get__\" in called.locals"},{"lineNumber":1257,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1258,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1259,"author":{"gitId":"-"},"content":"                # Don\u0027t emit if we can\u0027t make sure this object is callable."},{"lineNumber":1260,"author":{"gitId":"-"},"content":"                pass"},{"lineNumber":1261,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1262,"author":{"gitId":"-"},"content":"                self.add_message(\"not-callable\", node\u003dnode, args\u003dnode.func.as_string())"},{"lineNumber":1263,"author":{"gitId":"-"},"content":""},{"lineNumber":1264,"author":{"gitId":"-"},"content":"        self._check_uninferable_call(node)"},{"lineNumber":1265,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1266,"author":{"gitId":"-"},"content":"            called, implicit_args, callable_name \u003d _determine_callable(called)"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"        except ValueError:"},{"lineNumber":1268,"author":{"gitId":"-"},"content":"            # Any error occurred during determining the function type, most of"},{"lineNumber":1269,"author":{"gitId":"-"},"content":"            # those errors are handled by different warnings."},{"lineNumber":1270,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1271,"author":{"gitId":"-"},"content":""},{"lineNumber":1272,"author":{"gitId":"-"},"content":"        if called.args.args is None:"},{"lineNumber":1273,"author":{"gitId":"anubh-v"},"content":"            if called.name \u003d\u003d \"isinstance\":"},{"lineNumber":1274,"author":{"gitId":"anubh-v"},"content":"                # Verify whether second argument of isinstance is a valid type"},{"lineNumber":1275,"author":{"gitId":"anubh-v"},"content":"                self._check_isinstance_args(node)"},{"lineNumber":1276,"author":{"gitId":"-"},"content":"            # Built-in functions have no argument information."},{"lineNumber":1277,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1278,"author":{"gitId":"-"},"content":""},{"lineNumber":1279,"author":{"gitId":"-"},"content":"        if len(called.argnames()) !\u003d len(set(called.argnames())):"},{"lineNumber":1280,"author":{"gitId":"-"},"content":"            # Duplicate parameter name (see duplicate-argument).  We can\u0027t really"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"            # make sense of the function call in this case, so just return."},{"lineNumber":1282,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1283,"author":{"gitId":"-"},"content":""},{"lineNumber":1284,"author":{"gitId":"-"},"content":"        # Build the set of keyword arguments, checking for duplicate keywords,"},{"lineNumber":1285,"author":{"gitId":"-"},"content":"        # and count the positional arguments."},{"lineNumber":1286,"author":{"gitId":"-"},"content":"        call_site \u003d astroid.arguments.CallSite.from_call(node)"},{"lineNumber":1287,"author":{"gitId":"-"},"content":""},{"lineNumber":1288,"author":{"gitId":"-"},"content":"        # Warn about duplicated keyword arguments, such as `f\u003d24, **{\u0027f\u0027: 24}`"},{"lineNumber":1289,"author":{"gitId":"-"},"content":"        for keyword in call_site.duplicated_keywords:"},{"lineNumber":1290,"author":{"gitId":"-"},"content":"            self.add_message(\"repeated-keyword\", node\u003dnode, args\u003d(keyword,))"},{"lineNumber":1291,"author":{"gitId":"-"},"content":""},{"lineNumber":1292,"author":{"gitId":"-"},"content":"        if call_site.has_invalid_arguments() or call_site.has_invalid_keywords():"},{"lineNumber":1293,"author":{"gitId":"-"},"content":"            # Can\u0027t make sense of this."},{"lineNumber":1294,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1295,"author":{"gitId":"-"},"content":""},{"lineNumber":1296,"author":{"gitId":"-"},"content":"        # Has the function signature changed in ways we cannot reliably detect?"},{"lineNumber":1297,"author":{"gitId":"-"},"content":"        if hasattr(called, \"decorators\") and decorated_with("},{"lineNumber":1298,"author":{"gitId":"-"},"content":"            called, self.config.signature_mutators"},{"lineNumber":1299,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1301,"author":{"gitId":"-"},"content":""},{"lineNumber":1302,"author":{"gitId":"-"},"content":"        num_positional_args \u003d len(call_site.positional_arguments)"},{"lineNumber":1303,"author":{"gitId":"-"},"content":"        keyword_args \u003d list(call_site.keyword_arguments.keys())"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"        overload_function \u003d is_overload_stub(called)"},{"lineNumber":1305,"author":{"gitId":"-"},"content":""},{"lineNumber":1306,"author":{"gitId":"-"},"content":"        # Determine if we don\u0027t have a context for our call and we use variadics."},{"lineNumber":1307,"author":{"gitId":"-"},"content":"        node_scope \u003d node.scope()"},{"lineNumber":1308,"author":{"gitId":"-"},"content":"        if isinstance(node_scope, (astroid.Lambda, astroid.FunctionDef)):"},{"lineNumber":1309,"author":{"gitId":"-"},"content":"            has_no_context_positional_variadic \u003d _no_context_variadic_positional("},{"lineNumber":1310,"author":{"gitId":"-"},"content":"                node, node_scope"},{"lineNumber":1311,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1312,"author":{"gitId":"-"},"content":"            has_no_context_keywords_variadic \u003d _no_context_variadic_keywords("},{"lineNumber":1313,"author":{"gitId":"-"},"content":"                node, node_scope"},{"lineNumber":1314,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1315,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1316,"author":{"gitId":"-"},"content":"            has_no_context_positional_variadic \u003d ("},{"lineNumber":1317,"author":{"gitId":"-"},"content":"                has_no_context_keywords_variadic"},{"lineNumber":1318,"author":{"gitId":"-"},"content":"            ) \u003d False"},{"lineNumber":1319,"author":{"gitId":"-"},"content":""},{"lineNumber":1320,"author":{"gitId":"-"},"content":"        # These are coming from the functools.partial implementation in astroid"},{"lineNumber":1321,"author":{"gitId":"-"},"content":"        already_filled_positionals \u003d getattr(called, \"filled_positionals\", 0)"},{"lineNumber":1322,"author":{"gitId":"-"},"content":"        already_filled_keywords \u003d getattr(called, \"filled_keywords\", {})"},{"lineNumber":1323,"author":{"gitId":"-"},"content":""},{"lineNumber":1324,"author":{"gitId":"-"},"content":"        keyword_args +\u003d list(already_filled_keywords)"},{"lineNumber":1325,"author":{"gitId":"-"},"content":"        num_positional_args +\u003d implicit_args + already_filled_positionals"},{"lineNumber":1326,"author":{"gitId":"-"},"content":""},{"lineNumber":1327,"author":{"gitId":"-"},"content":"        # Analyze the list of formal parameters."},{"lineNumber":1328,"author":{"gitId":"-"},"content":"        args \u003d list(itertools.chain(called.args.posonlyargs or (), called.args.args))"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"        num_mandatory_parameters \u003d len(args) - len(called.args.defaults)"},{"lineNumber":1330,"author":{"gitId":"-"},"content":"        parameters \u003d []"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"        parameter_name_to_index \u003d {}"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"        for i, arg in enumerate(args):"},{"lineNumber":1333,"author":{"gitId":"-"},"content":"            if isinstance(arg, astroid.Tuple):"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"                name \u003d None"},{"lineNumber":1335,"author":{"gitId":"-"},"content":"                # Don\u0027t store any parameter names within the tuple, since those"},{"lineNumber":1336,"author":{"gitId":"-"},"content":"                # are not assignable from keyword arguments."},{"lineNumber":1337,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1338,"author":{"gitId":"-"},"content":"                assert isinstance(arg, astroid.AssignName)"},{"lineNumber":1339,"author":{"gitId":"-"},"content":"                # This occurs with:"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"                #    def f( (a), (b) ): pass"},{"lineNumber":1341,"author":{"gitId":"-"},"content":"                name \u003d arg.name"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"                parameter_name_to_index[name] \u003d i"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"            if i \u003e\u003d num_mandatory_parameters:"},{"lineNumber":1344,"author":{"gitId":"-"},"content":"                defval \u003d called.args.defaults[i - num_mandatory_parameters]"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1346,"author":{"gitId":"-"},"content":"                defval \u003d None"},{"lineNumber":1347,"author":{"gitId":"-"},"content":"            parameters.append([(name, defval), False])"},{"lineNumber":1348,"author":{"gitId":"-"},"content":""},{"lineNumber":1349,"author":{"gitId":"-"},"content":"        kwparams \u003d {}"},{"lineNumber":1350,"author":{"gitId":"-"},"content":"        for i, arg in enumerate(called.args.kwonlyargs):"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"            if isinstance(arg, astroid.Keyword):"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"                name \u003d arg.arg"},{"lineNumber":1353,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1354,"author":{"gitId":"-"},"content":"                assert isinstance(arg, astroid.AssignName)"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"                name \u003d arg.name"},{"lineNumber":1356,"author":{"gitId":"-"},"content":"            kwparams[name] \u003d [called.args.kw_defaults[i], False]"},{"lineNumber":1357,"author":{"gitId":"-"},"content":""},{"lineNumber":1358,"author":{"gitId":"-"},"content":"        self._check_argument_order("},{"lineNumber":1359,"author":{"gitId":"-"},"content":"            node, call_site, called, [p[0][0] for p in parameters]"},{"lineNumber":1360,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1361,"author":{"gitId":"-"},"content":""},{"lineNumber":1362,"author":{"gitId":"-"},"content":"        # 1. Match the positional arguments."},{"lineNumber":1363,"author":{"gitId":"-"},"content":"        for i in range(num_positional_args):"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"            if i \u003c len(parameters):"},{"lineNumber":1365,"author":{"gitId":"-"},"content":"                parameters[i][1] \u003d True"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"            elif called.args.vararg is not None:"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"                # The remaining positional arguments get assigned to the *args"},{"lineNumber":1368,"author":{"gitId":"-"},"content":"                # parameter."},{"lineNumber":1369,"author":{"gitId":"-"},"content":"                break"},{"lineNumber":1370,"author":{"gitId":"-"},"content":"            elif not overload_function:"},{"lineNumber":1371,"author":{"gitId":"-"},"content":"                # Too many positional arguments."},{"lineNumber":1372,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":1373,"author":{"gitId":"-"},"content":"                    \"too-many-function-args\", node\u003dnode, args\u003d(callable_name,)"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1375,"author":{"gitId":"-"},"content":"                break"},{"lineNumber":1376,"author":{"gitId":"-"},"content":""},{"lineNumber":1377,"author":{"gitId":"-"},"content":"        # 2. Match the keyword arguments."},{"lineNumber":1378,"author":{"gitId":"-"},"content":"        for keyword in keyword_args:"},{"lineNumber":1379,"author":{"gitId":"-"},"content":"            if keyword in parameter_name_to_index:"},{"lineNumber":1380,"author":{"gitId":"-"},"content":"                i \u003d parameter_name_to_index[keyword]"},{"lineNumber":1381,"author":{"gitId":"-"},"content":"                if parameters[i][1]:"},{"lineNumber":1382,"author":{"gitId":"-"},"content":"                    # Duplicate definition of function parameter."},{"lineNumber":1383,"author":{"gitId":"-"},"content":""},{"lineNumber":1384,"author":{"gitId":"-"},"content":"                    # Might be too hardcoded, but this can actually"},{"lineNumber":1385,"author":{"gitId":"-"},"content":"                    # happen when using str.format and `self` is passed"},{"lineNumber":1386,"author":{"gitId":"-"},"content":"                    # by keyword argument, as in `.format(self\u003dself)`."},{"lineNumber":1387,"author":{"gitId":"-"},"content":"                    # It\u0027s perfectly valid to so, so we\u0027re just skipping"},{"lineNumber":1388,"author":{"gitId":"-"},"content":"                    # it if that\u0027s the case."},{"lineNumber":1389,"author":{"gitId":"-"},"content":"                    if not (keyword \u003d\u003d \"self\" and called.qname() in STR_FORMAT):"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"                        self.add_message("},{"lineNumber":1391,"author":{"gitId":"-"},"content":"                            \"redundant-keyword-arg\","},{"lineNumber":1392,"author":{"gitId":"-"},"content":"                            node\u003dnode,"},{"lineNumber":1393,"author":{"gitId":"-"},"content":"                            args\u003d(keyword, callable_name),"},{"lineNumber":1394,"author":{"gitId":"-"},"content":"                        )"},{"lineNumber":1395,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1396,"author":{"gitId":"-"},"content":"                    parameters[i][1] \u003d True"},{"lineNumber":1397,"author":{"gitId":"-"},"content":"            elif keyword in kwparams:"},{"lineNumber":1398,"author":{"gitId":"-"},"content":"                if kwparams[keyword][1]:"},{"lineNumber":1399,"author":{"gitId":"-"},"content":"                    # Duplicate definition of function parameter."},{"lineNumber":1400,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1401,"author":{"gitId":"-"},"content":"                        \"redundant-keyword-arg\","},{"lineNumber":1402,"author":{"gitId":"-"},"content":"                        node\u003dnode,"},{"lineNumber":1403,"author":{"gitId":"-"},"content":"                        args\u003d(keyword, callable_name),"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1405,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1406,"author":{"gitId":"-"},"content":"                    kwparams[keyword][1] \u003d True"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"            elif called.args.kwarg is not None:"},{"lineNumber":1408,"author":{"gitId":"-"},"content":"                # The keyword argument gets assigned to the **kwargs parameter."},{"lineNumber":1409,"author":{"gitId":"-"},"content":"                pass"},{"lineNumber":1410,"author":{"gitId":"-"},"content":"            elif not overload_function:"},{"lineNumber":1411,"author":{"gitId":"-"},"content":"                # Unexpected keyword argument."},{"lineNumber":1412,"author":{"gitId":"-"},"content":"                self.add_message("},{"lineNumber":1413,"author":{"gitId":"-"},"content":"                    \"unexpected-keyword-arg\", node\u003dnode, args\u003d(keyword, callable_name)"},{"lineNumber":1414,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1415,"author":{"gitId":"-"},"content":""},{"lineNumber":1416,"author":{"gitId":"-"},"content":"        # 3. Match the **kwargs, if any."},{"lineNumber":1417,"author":{"gitId":"-"},"content":"        if node.kwargs:"},{"lineNumber":1418,"author":{"gitId":"-"},"content":"            for i, [(name, defval), assigned] in enumerate(parameters):"},{"lineNumber":1419,"author":{"gitId":"-"},"content":"                # Assume that *kwargs provides values for all remaining"},{"lineNumber":1420,"author":{"gitId":"-"},"content":"                # unassigned named parameters."},{"lineNumber":1421,"author":{"gitId":"-"},"content":"                if name is not None:"},{"lineNumber":1422,"author":{"gitId":"-"},"content":"                    parameters[i][1] \u003d True"},{"lineNumber":1423,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1424,"author":{"gitId":"-"},"content":"                    # **kwargs can\u0027t assign to tuples."},{"lineNumber":1425,"author":{"gitId":"-"},"content":"                    pass"},{"lineNumber":1426,"author":{"gitId":"-"},"content":""},{"lineNumber":1427,"author":{"gitId":"-"},"content":"        # Check that any parameters without a default have been assigned"},{"lineNumber":1428,"author":{"gitId":"-"},"content":"        # values."},{"lineNumber":1429,"author":{"gitId":"-"},"content":"        for [(name, defval), assigned] in parameters:"},{"lineNumber":1430,"author":{"gitId":"-"},"content":"            if (defval is None) and not assigned:"},{"lineNumber":1431,"author":{"gitId":"-"},"content":"                if name is None:"},{"lineNumber":1432,"author":{"gitId":"-"},"content":"                    display_name \u003d \"\u003ctuple\u003e\""},{"lineNumber":1433,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"                    display_name \u003d repr(name)"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"                if not has_no_context_positional_variadic and not overload_function:"},{"lineNumber":1436,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1437,"author":{"gitId":"-"},"content":"                        \"no-value-for-parameter\","},{"lineNumber":1438,"author":{"gitId":"-"},"content":"                        node\u003dnode,"},{"lineNumber":1439,"author":{"gitId":"-"},"content":"                        args\u003d(display_name, callable_name),"},{"lineNumber":1440,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1441,"author":{"gitId":"-"},"content":""},{"lineNumber":1442,"author":{"gitId":"-"},"content":"        for name, val in kwparams.items():"},{"lineNumber":1443,"author":{"gitId":"-"},"content":"            defval, assigned \u003d val"},{"lineNumber":1444,"author":{"gitId":"-"},"content":"            if ("},{"lineNumber":1445,"author":{"gitId":"-"},"content":"                defval is None"},{"lineNumber":1446,"author":{"gitId":"-"},"content":"                and not assigned"},{"lineNumber":1447,"author":{"gitId":"-"},"content":"                and not has_no_context_keywords_variadic"},{"lineNumber":1448,"author":{"gitId":"-"},"content":"                and not overload_function"},{"lineNumber":1449,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1450,"author":{"gitId":"-"},"content":"                self.add_message(\"missing-kwoa\", node\u003dnode, args\u003d(name, callable_name))"},{"lineNumber":1451,"author":{"gitId":"-"},"content":""},{"lineNumber":1452,"author":{"gitId":"-"},"content":"    def _check_invalid_sequence_index(self, subscript: astroid.Subscript):"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"        # Look for index operations where the parent is a sequence type."},{"lineNumber":1454,"author":{"gitId":"-"},"content":"        # If the types can be determined, only allow indices to be int,"},{"lineNumber":1455,"author":{"gitId":"-"},"content":"        # slice or instances with __index__."},{"lineNumber":1456,"author":{"gitId":"-"},"content":"        parent_type \u003d safe_infer(subscript.value)"},{"lineNumber":1457,"author":{"gitId":"-"},"content":"        if not isinstance("},{"lineNumber":1458,"author":{"gitId":"-"},"content":"            parent_type, (astroid.ClassDef, astroid.Instance)"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"        ) or not has_known_bases(parent_type):"},{"lineNumber":1460,"author":{"gitId":"-"},"content":"            return None"},{"lineNumber":1461,"author":{"gitId":"-"},"content":""},{"lineNumber":1462,"author":{"gitId":"-"},"content":"        # Determine what method on the parent this index will use"},{"lineNumber":1463,"author":{"gitId":"-"},"content":"        # The parent of this node will be a Subscript, and the parent of that"},{"lineNumber":1464,"author":{"gitId":"-"},"content":"        # node determines if the Subscript is a get, set, or delete operation."},{"lineNumber":1465,"author":{"gitId":"-"},"content":"        if subscript.ctx is astroid.Store:"},{"lineNumber":1466,"author":{"gitId":"-"},"content":"            methodname \u003d \"__setitem__\""},{"lineNumber":1467,"author":{"gitId":"-"},"content":"        elif subscript.ctx is astroid.Del:"},{"lineNumber":1468,"author":{"gitId":"-"},"content":"            methodname \u003d \"__delitem__\""},{"lineNumber":1469,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"            methodname \u003d \"__getitem__\""},{"lineNumber":1471,"author":{"gitId":"-"},"content":""},{"lineNumber":1472,"author":{"gitId":"-"},"content":"        # Check if this instance\u0027s __getitem__, __setitem__, or __delitem__, as"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"        # appropriate to the statement, is implemented in a builtin sequence"},{"lineNumber":1474,"author":{"gitId":"-"},"content":"        # type. This way we catch subclasses of sequence types but skip classes"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"        # that override __getitem__ and which may allow non-integer indices."},{"lineNumber":1476,"author":{"gitId":"-"},"content":"        try:"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"            methods \u003d astroid.interpreter.dunder_lookup.lookup(parent_type, methodname)"},{"lineNumber":1478,"author":{"gitId":"-"},"content":"            if methods is astroid.Uninferable:"},{"lineNumber":1479,"author":{"gitId":"-"},"content":"                return None"},{"lineNumber":1480,"author":{"gitId":"-"},"content":"            itemmethod \u003d methods[0]"},{"lineNumber":1481,"author":{"gitId":"-"},"content":"        except ("},{"lineNumber":1482,"author":{"gitId":"-"},"content":"            astroid.NotFoundError,"},{"lineNumber":1483,"author":{"gitId":"-"},"content":"            astroid.AttributeInferenceError,"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"            IndexError,"},{"lineNumber":1485,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1486,"author":{"gitId":"-"},"content":"            return None"},{"lineNumber":1487,"author":{"gitId":"-"},"content":"        if ("},{"lineNumber":1488,"author":{"gitId":"-"},"content":"            not isinstance(itemmethod, astroid.FunctionDef)"},{"lineNumber":1489,"author":{"gitId":"-"},"content":"            or itemmethod.root().name !\u003d BUILTINS"},{"lineNumber":1490,"author":{"gitId":"-"},"content":"            or not itemmethod.parent"},{"lineNumber":1491,"author":{"gitId":"-"},"content":"            or itemmethod.parent.name not in SEQUENCE_TYPES"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1493,"author":{"gitId":"-"},"content":"            return None"},{"lineNumber":1494,"author":{"gitId":"-"},"content":""},{"lineNumber":1495,"author":{"gitId":"-"},"content":"        # For ExtSlice objects coming from visit_extslice, no further"},{"lineNumber":1496,"author":{"gitId":"-"},"content":"        # inference is necessary, since if we got this far the ExtSlice"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"        # is an error."},{"lineNumber":1498,"author":{"gitId":"-"},"content":"        if isinstance(subscript.value, astroid.ExtSlice):"},{"lineNumber":1499,"author":{"gitId":"-"},"content":"            index_type \u003d subscript.value"},{"lineNumber":1500,"author":{"gitId":"-"},"content":"        else:"},{"lineNumber":1501,"author":{"gitId":"-"},"content":"            index_type \u003d safe_infer(subscript.slice)"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"        if index_type is None or index_type is astroid.Uninferable:"},{"lineNumber":1503,"author":{"gitId":"-"},"content":"            return None"},{"lineNumber":1504,"author":{"gitId":"-"},"content":"        # Constants must be of type int"},{"lineNumber":1505,"author":{"gitId":"-"},"content":"        if isinstance(index_type, astroid.Const):"},{"lineNumber":1506,"author":{"gitId":"-"},"content":"            if isinstance(index_type.value, int):"},{"lineNumber":1507,"author":{"gitId":"-"},"content":"                return None"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"        # Instance values must be int, slice, or have an __index__ method"},{"lineNumber":1509,"author":{"gitId":"-"},"content":"        elif isinstance(index_type, astroid.Instance):"},{"lineNumber":1510,"author":{"gitId":"-"},"content":"            if index_type.pytype() in (BUILTINS + \".int\", BUILTINS + \".slice\"):"},{"lineNumber":1511,"author":{"gitId":"-"},"content":"                return None"},{"lineNumber":1512,"author":{"gitId":"-"},"content":"            try:"},{"lineNumber":1513,"author":{"gitId":"-"},"content":"                index_type.getattr(\"__index__\")"},{"lineNumber":1514,"author":{"gitId":"-"},"content":"                return None"},{"lineNumber":1515,"author":{"gitId":"-"},"content":"            except astroid.NotFoundError:"},{"lineNumber":1516,"author":{"gitId":"-"},"content":"                pass"},{"lineNumber":1517,"author":{"gitId":"-"},"content":"        elif isinstance(index_type, astroid.Slice):"},{"lineNumber":1518,"author":{"gitId":"-"},"content":"            # A slice can be present"},{"lineNumber":1519,"author":{"gitId":"-"},"content":"            # here after inferring the index node, which could"},{"lineNumber":1520,"author":{"gitId":"-"},"content":"            # be a `slice(...)` call for instance."},{"lineNumber":1521,"author":{"gitId":"-"},"content":"            return self._check_invalid_slice_index(index_type)"},{"lineNumber":1522,"author":{"gitId":"-"},"content":""},{"lineNumber":1523,"author":{"gitId":"-"},"content":"        # Anything else is an error"},{"lineNumber":1524,"author":{"gitId":"-"},"content":"        self.add_message(\"invalid-sequence-index\", node\u003dsubscript)"},{"lineNumber":1525,"author":{"gitId":"-"},"content":"        return None"},{"lineNumber":1526,"author":{"gitId":"-"},"content":""},{"lineNumber":1527,"author":{"gitId":"-"},"content":"    @check_messages(\"invalid-sequence-index\")"},{"lineNumber":1528,"author":{"gitId":"-"},"content":"    def visit_extslice(self, node):"},{"lineNumber":1529,"author":{"gitId":"-"},"content":"        if not node.parent or not hasattr(node.parent, \"value\"):"},{"lineNumber":1530,"author":{"gitId":"-"},"content":"            return None"},{"lineNumber":1531,"author":{"gitId":"-"},"content":"        # Check extended slice objects as if they were used as a sequence"},{"lineNumber":1532,"author":{"gitId":"-"},"content":"        # index to check if the object being sliced can support them"},{"lineNumber":1533,"author":{"gitId":"-"},"content":"        return self._check_invalid_sequence_index(node.parent)"},{"lineNumber":1534,"author":{"gitId":"-"},"content":""},{"lineNumber":1535,"author":{"gitId":"-"},"content":"    def _check_invalid_slice_index(self, node):"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"        # Check the type of each part of the slice"},{"lineNumber":1537,"author":{"gitId":"-"},"content":"        invalid_slices \u003d 0"},{"lineNumber":1538,"author":{"gitId":"-"},"content":"        for index in (node.lower, node.upper, node.step):"},{"lineNumber":1539,"author":{"gitId":"-"},"content":"            if index is None:"},{"lineNumber":1540,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1541,"author":{"gitId":"-"},"content":""},{"lineNumber":1542,"author":{"gitId":"-"},"content":"            index_type \u003d safe_infer(index)"},{"lineNumber":1543,"author":{"gitId":"-"},"content":"            if index_type is None or index_type is astroid.Uninferable:"},{"lineNumber":1544,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1545,"author":{"gitId":"-"},"content":""},{"lineNumber":1546,"author":{"gitId":"-"},"content":"            # Constants must of type int or None"},{"lineNumber":1547,"author":{"gitId":"-"},"content":"            if isinstance(index_type, astroid.Const):"},{"lineNumber":1548,"author":{"gitId":"-"},"content":"                if isinstance(index_type.value, (int, type(None))):"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"            # Instance values must be of type int, None or an object"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"            # with __index__"},{"lineNumber":1552,"author":{"gitId":"-"},"content":"            elif isinstance(index_type, astroid.Instance):"},{"lineNumber":1553,"author":{"gitId":"-"},"content":"                if index_type.pytype() in (BUILTINS + \".int\", BUILTINS + \".NoneType\"):"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1555,"author":{"gitId":"-"},"content":""},{"lineNumber":1556,"author":{"gitId":"-"},"content":"                try:"},{"lineNumber":1557,"author":{"gitId":"-"},"content":"                    index_type.getattr(\"__index__\")"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"                    return"},{"lineNumber":1559,"author":{"gitId":"-"},"content":"                except astroid.NotFoundError:"},{"lineNumber":1560,"author":{"gitId":"-"},"content":"                    pass"},{"lineNumber":1561,"author":{"gitId":"-"},"content":"            invalid_slices +\u003d 1"},{"lineNumber":1562,"author":{"gitId":"-"},"content":""},{"lineNumber":1563,"author":{"gitId":"-"},"content":"        if not invalid_slices:"},{"lineNumber":1564,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1565,"author":{"gitId":"-"},"content":""},{"lineNumber":1566,"author":{"gitId":"-"},"content":"        # Anything else is an error, unless the object that is indexed"},{"lineNumber":1567,"author":{"gitId":"-"},"content":"        # is a custom object, which knows how to handle this kind of slices"},{"lineNumber":1568,"author":{"gitId":"-"},"content":"        parent \u003d node.parent"},{"lineNumber":1569,"author":{"gitId":"-"},"content":"        if isinstance(parent, astroid.ExtSlice):"},{"lineNumber":1570,"author":{"gitId":"-"},"content":"            parent \u003d parent.parent"},{"lineNumber":1571,"author":{"gitId":"-"},"content":"        if isinstance(parent, astroid.Subscript):"},{"lineNumber":1572,"author":{"gitId":"-"},"content":"            inferred \u003d safe_infer(parent.value)"},{"lineNumber":1573,"author":{"gitId":"-"},"content":"            if inferred is None or inferred is astroid.Uninferable:"},{"lineNumber":1574,"author":{"gitId":"-"},"content":"                # Don\u0027t know what this is"},{"lineNumber":1575,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1576,"author":{"gitId":"-"},"content":"            known_objects \u003d ("},{"lineNumber":1577,"author":{"gitId":"-"},"content":"                astroid.List,"},{"lineNumber":1578,"author":{"gitId":"-"},"content":"                astroid.Dict,"},{"lineNumber":1579,"author":{"gitId":"-"},"content":"                astroid.Tuple,"},{"lineNumber":1580,"author":{"gitId":"-"},"content":"                astroid.objects.FrozenSet,"},{"lineNumber":1581,"author":{"gitId":"-"},"content":"                astroid.Set,"},{"lineNumber":1582,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1583,"author":{"gitId":"-"},"content":"            if not isinstance(inferred, known_objects):"},{"lineNumber":1584,"author":{"gitId":"-"},"content":"                # Might be an instance that knows how to handle this slice object"},{"lineNumber":1585,"author":{"gitId":"-"},"content":"                return"},{"lineNumber":1586,"author":{"gitId":"-"},"content":"        for _ in range(invalid_slices):"},{"lineNumber":1587,"author":{"gitId":"-"},"content":"            self.add_message(\"invalid-slice-index\", node\u003dnode)"},{"lineNumber":1588,"author":{"gitId":"-"},"content":""},{"lineNumber":1589,"author":{"gitId":"-"},"content":"    @check_messages(\"not-context-manager\")"},{"lineNumber":1590,"author":{"gitId":"-"},"content":"    def visit_with(self, node):"},{"lineNumber":1591,"author":{"gitId":"-"},"content":"        for ctx_mgr, _ in node.items:"},{"lineNumber":1592,"author":{"gitId":"-"},"content":"            context \u003d astroid.context.InferenceContext()"},{"lineNumber":1593,"author":{"gitId":"-"},"content":"            inferred \u003d safe_infer(ctx_mgr, context\u003dcontext)"},{"lineNumber":1594,"author":{"gitId":"-"},"content":"            if inferred is None or inferred is astroid.Uninferable:"},{"lineNumber":1595,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1596,"author":{"gitId":"-"},"content":""},{"lineNumber":1597,"author":{"gitId":"-"},"content":"            if isinstance(inferred, astroid.bases.Generator):"},{"lineNumber":1598,"author":{"gitId":"-"},"content":"                # Check if we are dealing with a function decorated"},{"lineNumber":1599,"author":{"gitId":"-"},"content":"                # with contextlib.contextmanager."},{"lineNumber":1600,"author":{"gitId":"-"},"content":"                if decorated_with("},{"lineNumber":1601,"author":{"gitId":"-"},"content":"                    inferred.parent, self.config.contextmanager_decorators"},{"lineNumber":1602,"author":{"gitId":"-"},"content":"                ):"},{"lineNumber":1603,"author":{"gitId":"-"},"content":"                    continue"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"                # If the parent of the generator is not the context manager itself,"},{"lineNumber":1605,"author":{"gitId":"-"},"content":"                # that means that it could have been returned from another"},{"lineNumber":1606,"author":{"gitId":"-"},"content":"                # function which was the real context manager."},{"lineNumber":1607,"author":{"gitId":"-"},"content":"                # The following approach is more of a hack rather than a real"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"                # solution: walk all the inferred statements for the"},{"lineNumber":1609,"author":{"gitId":"-"},"content":"                # given *ctx_mgr* and if you find one function scope"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"                # which is decorated, consider it to be the real"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"                # manager and give up, otherwise emit not-context-manager."},{"lineNumber":1612,"author":{"gitId":"-"},"content":"                # See the test file for not_context_manager for a couple"},{"lineNumber":1613,"author":{"gitId":"-"},"content":"                # of self explaining tests."},{"lineNumber":1614,"author":{"gitId":"-"},"content":""},{"lineNumber":1615,"author":{"gitId":"-"},"content":"                # Retrieve node from all previusly visited nodes in the the inference history"},{"lineNumber":1616,"author":{"gitId":"-"},"content":"                context_path_names \u003d filter(None, _unflatten(context.path))"},{"lineNumber":1617,"author":{"gitId":"-"},"content":"                inferred_paths \u003d _flatten_container("},{"lineNumber":1618,"author":{"gitId":"-"},"content":"                    safe_infer(path) for path in context_path_names"},{"lineNumber":1619,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":1620,"author":{"gitId":"-"},"content":"                for inferred_path in inferred_paths:"},{"lineNumber":1621,"author":{"gitId":"-"},"content":"                    if not inferred_path:"},{"lineNumber":1622,"author":{"gitId":"-"},"content":"                        continue"},{"lineNumber":1623,"author":{"gitId":"-"},"content":"                    scope \u003d inferred_path.scope()"},{"lineNumber":1624,"author":{"gitId":"-"},"content":"                    if not isinstance(scope, astroid.FunctionDef):"},{"lineNumber":1625,"author":{"gitId":"-"},"content":"                        continue"},{"lineNumber":1626,"author":{"gitId":"-"},"content":"                    if decorated_with(scope, self.config.contextmanager_decorators):"},{"lineNumber":1627,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":1628,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1629,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1630,"author":{"gitId":"-"},"content":"                        \"not-context-manager\", node\u003dnode, args\u003d(inferred.name,)"},{"lineNumber":1631,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1633,"author":{"gitId":"-"},"content":"                try:"},{"lineNumber":1634,"author":{"gitId":"-"},"content":"                    inferred.getattr(\"__enter__\")"},{"lineNumber":1635,"author":{"gitId":"-"},"content":"                    inferred.getattr(\"__exit__\")"},{"lineNumber":1636,"author":{"gitId":"-"},"content":"                except astroid.NotFoundError:"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"                    if isinstance(inferred, astroid.Instance):"},{"lineNumber":1638,"author":{"gitId":"-"},"content":"                        # If we do not know the bases of this class,"},{"lineNumber":1639,"author":{"gitId":"-"},"content":"                        # just skip it."},{"lineNumber":1640,"author":{"gitId":"-"},"content":"                        if not has_known_bases(inferred):"},{"lineNumber":1641,"author":{"gitId":"-"},"content":"                            continue"},{"lineNumber":1642,"author":{"gitId":"-"},"content":"                        # Just ignore mixin classes."},{"lineNumber":1643,"author":{"gitId":"-"},"content":"                        if self.config.ignore_mixin_members:"},{"lineNumber":1644,"author":{"gitId":"-"},"content":"                            if inferred.name[-5:].lower() \u003d\u003d \"mixin\":"},{"lineNumber":1645,"author":{"gitId":"-"},"content":"                                continue"},{"lineNumber":1646,"author":{"gitId":"-"},"content":""},{"lineNumber":1647,"author":{"gitId":"-"},"content":"                    self.add_message("},{"lineNumber":1648,"author":{"gitId":"-"},"content":"                        \"not-context-manager\", node\u003dnode, args\u003d(inferred.name,)"},{"lineNumber":1649,"author":{"gitId":"-"},"content":"                    )"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":"    @check_messages(\"invalid-unary-operand-type\")"},{"lineNumber":1652,"author":{"gitId":"-"},"content":"    def visit_unaryop(self, node):"},{"lineNumber":1653,"author":{"gitId":"-"},"content":"        \"\"\"Detect TypeErrors for unary operands.\"\"\""},{"lineNumber":1654,"author":{"gitId":"-"},"content":""},{"lineNumber":1655,"author":{"gitId":"-"},"content":"        for error in node.type_errors():"},{"lineNumber":1656,"author":{"gitId":"-"},"content":"            # Let the error customize its output."},{"lineNumber":1657,"author":{"gitId":"-"},"content":"            self.add_message(\"invalid-unary-operand-type\", args\u003dstr(error), node\u003dnode)"},{"lineNumber":1658,"author":{"gitId":"-"},"content":""},{"lineNumber":1659,"author":{"gitId":"-"},"content":"    @check_messages(\"unsupported-binary-operation\")"},{"lineNumber":1660,"author":{"gitId":"-"},"content":"    def visit_binop(self, node: astroid.BinOp):"},{"lineNumber":1661,"author":{"gitId":"-"},"content":"        if node.op \u003d\u003d \"|\":"},{"lineNumber":1662,"author":{"gitId":"-"},"content":"            self._detect_unsupported_alternative_union_syntax(node)"},{"lineNumber":1663,"author":{"gitId":"-"},"content":""},{"lineNumber":1664,"author":{"gitId":"-"},"content":"    def _detect_unsupported_alternative_union_syntax(self, node: astroid.BinOp) -\u003e None:"},{"lineNumber":1665,"author":{"gitId":"-"},"content":"        \"\"\"Detect if unsupported alternative Union syntax (PEP 604) was used.\"\"\""},{"lineNumber":1666,"author":{"gitId":"-"},"content":"        if PY310_PLUS:  # 310+ supports the new syntax"},{"lineNumber":1667,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1668,"author":{"gitId":"-"},"content":""},{"lineNumber":1669,"author":{"gitId":"-"},"content":"        if isinstance("},{"lineNumber":1670,"author":{"gitId":"-"},"content":"            node.parent, TYPE_ANNOTATION_NODES_TYPES"},{"lineNumber":1671,"author":{"gitId":"-"},"content":"        ) and not is_postponed_evaluation_enabled(node):"},{"lineNumber":1672,"author":{"gitId":"-"},"content":"            # Use in type annotations only allowed if"},{"lineNumber":1673,"author":{"gitId":"-"},"content":"            # postponed evaluation is enabled."},{"lineNumber":1674,"author":{"gitId":"-"},"content":"            self._check_unsupported_alternative_union_syntax(node)"},{"lineNumber":1675,"author":{"gitId":"-"},"content":""},{"lineNumber":1676,"author":{"gitId":"-"},"content":"        if isinstance("},{"lineNumber":1677,"author":{"gitId":"-"},"content":"            node.parent,"},{"lineNumber":1678,"author":{"gitId":"-"},"content":"            ("},{"lineNumber":1679,"author":{"gitId":"-"},"content":"                astroid.Assign,"},{"lineNumber":1680,"author":{"gitId":"-"},"content":"                astroid.Call,"},{"lineNumber":1681,"author":{"gitId":"-"},"content":"                astroid.Keyword,"},{"lineNumber":1682,"author":{"gitId":"-"},"content":"                astroid.Dict,"},{"lineNumber":1683,"author":{"gitId":"-"},"content":"                astroid.Tuple,"},{"lineNumber":1684,"author":{"gitId":"-"},"content":"                astroid.Set,"},{"lineNumber":1685,"author":{"gitId":"-"},"content":"                astroid.List,"},{"lineNumber":1686,"author":{"gitId":"-"},"content":"                astroid.BinOp,"},{"lineNumber":1687,"author":{"gitId":"-"},"content":"            ),"},{"lineNumber":1688,"author":{"gitId":"-"},"content":"        ):"},{"lineNumber":1689,"author":{"gitId":"-"},"content":"            # Check other contexts the syntax might appear, but are invalid."},{"lineNumber":1690,"author":{"gitId":"-"},"content":"            # Make sure to filter context if postponed evaluation is enabled"},{"lineNumber":1691,"author":{"gitId":"-"},"content":"            # and parent is allowed node type."},{"lineNumber":1692,"author":{"gitId":"-"},"content":"            allowed_nested_syntax \u003d False"},{"lineNumber":1693,"author":{"gitId":"-"},"content":"            if is_postponed_evaluation_enabled(node):"},{"lineNumber":1694,"author":{"gitId":"-"},"content":"                parent_node \u003d node.parent"},{"lineNumber":1695,"author":{"gitId":"-"},"content":"                while True:"},{"lineNumber":1696,"author":{"gitId":"-"},"content":"                    if isinstance(parent_node, TYPE_ANNOTATION_NODES_TYPES):"},{"lineNumber":1697,"author":{"gitId":"-"},"content":"                        allowed_nested_syntax \u003d True"},{"lineNumber":1698,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":1699,"author":{"gitId":"-"},"content":"                    parent_node \u003d parent_node.parent"},{"lineNumber":1700,"author":{"gitId":"-"},"content":"                    if isinstance(parent_node, astroid.Module):"},{"lineNumber":1701,"author":{"gitId":"-"},"content":"                        break"},{"lineNumber":1702,"author":{"gitId":"-"},"content":"            if not allowed_nested_syntax:"},{"lineNumber":1703,"author":{"gitId":"-"},"content":"                self._check_unsupported_alternative_union_syntax(node)"},{"lineNumber":1704,"author":{"gitId":"-"},"content":""},{"lineNumber":1705,"author":{"gitId":"-"},"content":"    def _check_unsupported_alternative_union_syntax(self, node: astroid.BinOp) -\u003e None:"},{"lineNumber":1706,"author":{"gitId":"-"},"content":"        \"\"\"Check if left or right node is of type `type`.\"\"\""},{"lineNumber":1707,"author":{"gitId":"-"},"content":"        msg \u003d \"unsupported operand type(s) for |\""},{"lineNumber":1708,"author":{"gitId":"-"},"content":"        for n in (node.left, node.right):"},{"lineNumber":1709,"author":{"gitId":"-"},"content":"            n \u003d astroid.helpers.object_type(n)"},{"lineNumber":1710,"author":{"gitId":"-"},"content":"            if isinstance(n, astroid.ClassDef) and is_classdef_type(n):"},{"lineNumber":1711,"author":{"gitId":"-"},"content":"                self.add_message(\"unsupported-binary-operation\", args\u003dmsg, node\u003dnode)"},{"lineNumber":1712,"author":{"gitId":"-"},"content":"                break"},{"lineNumber":1713,"author":{"gitId":"-"},"content":""},{"lineNumber":1714,"author":{"gitId":"-"},"content":"    @check_messages(\"unsupported-binary-operation\")"},{"lineNumber":1715,"author":{"gitId":"-"},"content":"    def _visit_binop(self, node):"},{"lineNumber":1716,"author":{"gitId":"-"},"content":"        \"\"\"Detect TypeErrors for binary arithmetic operands.\"\"\""},{"lineNumber":1717,"author":{"gitId":"-"},"content":"        self._check_binop_errors(node)"},{"lineNumber":1718,"author":{"gitId":"-"},"content":""},{"lineNumber":1719,"author":{"gitId":"-"},"content":"    @check_messages(\"unsupported-binary-operation\")"},{"lineNumber":1720,"author":{"gitId":"-"},"content":"    def _visit_augassign(self, node):"},{"lineNumber":1721,"author":{"gitId":"-"},"content":"        \"\"\"Detect TypeErrors for augmented binary arithmetic operands.\"\"\""},{"lineNumber":1722,"author":{"gitId":"-"},"content":"        self._check_binop_errors(node)"},{"lineNumber":1723,"author":{"gitId":"-"},"content":""},{"lineNumber":1724,"author":{"gitId":"-"},"content":"    def _check_binop_errors(self, node):"},{"lineNumber":1725,"author":{"gitId":"-"},"content":"        for error in node.type_errors():"},{"lineNumber":1726,"author":{"gitId":"-"},"content":"            # Let the error customize its output."},{"lineNumber":1727,"author":{"gitId":"-"},"content":"            if any("},{"lineNumber":1728,"author":{"gitId":"-"},"content":"                isinstance(obj, astroid.ClassDef) and not has_known_bases(obj)"},{"lineNumber":1729,"author":{"gitId":"-"},"content":"                for obj in (error.left_type, error.right_type)"},{"lineNumber":1730,"author":{"gitId":"-"},"content":"            ):"},{"lineNumber":1731,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1732,"author":{"gitId":"-"},"content":"            self.add_message(\"unsupported-binary-operation\", args\u003dstr(error), node\u003dnode)"},{"lineNumber":1733,"author":{"gitId":"-"},"content":""},{"lineNumber":1734,"author":{"gitId":"-"},"content":"    def _check_membership_test(self, node):"},{"lineNumber":1735,"author":{"gitId":"-"},"content":"        if is_inside_abstract_class(node):"},{"lineNumber":1736,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1737,"author":{"gitId":"-"},"content":"        if is_comprehension(node):"},{"lineNumber":1738,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1739,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(node)"},{"lineNumber":1740,"author":{"gitId":"-"},"content":"        if inferred is None or inferred is astroid.Uninferable:"},{"lineNumber":1741,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1742,"author":{"gitId":"-"},"content":"        if not supports_membership_test(inferred):"},{"lineNumber":1743,"author":{"gitId":"-"},"content":"            self.add_message("},{"lineNumber":1744,"author":{"gitId":"-"},"content":"                \"unsupported-membership-test\", args\u003dnode.as_string(), node\u003dnode"},{"lineNumber":1745,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":1746,"author":{"gitId":"-"},"content":""},{"lineNumber":1747,"author":{"gitId":"-"},"content":"    @check_messages(\"unsupported-membership-test\")"},{"lineNumber":1748,"author":{"gitId":"-"},"content":"    def visit_compare(self, node):"},{"lineNumber":1749,"author":{"gitId":"-"},"content":"        if len(node.ops) !\u003d 1:"},{"lineNumber":1750,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1751,"author":{"gitId":"-"},"content":""},{"lineNumber":1752,"author":{"gitId":"-"},"content":"        op, right \u003d node.ops[0]"},{"lineNumber":1753,"author":{"gitId":"-"},"content":"        if op in [\"in\", \"not in\"]:"},{"lineNumber":1754,"author":{"gitId":"-"},"content":"            self._check_membership_test(right)"},{"lineNumber":1755,"author":{"gitId":"-"},"content":""},{"lineNumber":1756,"author":{"gitId":"-"},"content":"    @check_messages("},{"lineNumber":1757,"author":{"gitId":"-"},"content":"        \"unsubscriptable-object\","},{"lineNumber":1758,"author":{"gitId":"-"},"content":"        \"unsupported-assignment-operation\","},{"lineNumber":1759,"author":{"gitId":"-"},"content":"        \"unsupported-delete-operation\","},{"lineNumber":1760,"author":{"gitId":"-"},"content":"        \"unhashable-dict-key\","},{"lineNumber":1761,"author":{"gitId":"-"},"content":"        \"invalid-sequence-index\","},{"lineNumber":1762,"author":{"gitId":"-"},"content":"        \"invalid-slice-index\","},{"lineNumber":1763,"author":{"gitId":"-"},"content":"    )"},{"lineNumber":1764,"author":{"gitId":"-"},"content":"    def visit_subscript(self, node):"},{"lineNumber":1765,"author":{"gitId":"-"},"content":"        self._check_invalid_sequence_index(node)"},{"lineNumber":1766,"author":{"gitId":"-"},"content":""},{"lineNumber":1767,"author":{"gitId":"-"},"content":"        supported_protocol \u003d None"},{"lineNumber":1768,"author":{"gitId":"-"},"content":"        if isinstance(node.value, (astroid.ListComp, astroid.DictComp)):"},{"lineNumber":1769,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1770,"author":{"gitId":"-"},"content":""},{"lineNumber":1771,"author":{"gitId":"-"},"content":"        if isinstance(node.value, astroid.Dict):"},{"lineNumber":1772,"author":{"gitId":"-"},"content":"            # Assert dict key is hashable"},{"lineNumber":1773,"author":{"gitId":"-"},"content":"            if isinstance(node.slice, (astroid.Index, astroid.Slice)):"},{"lineNumber":1774,"author":{"gitId":"-"},"content":"                # In Python 3.9 the Index, Slice and ExtSlice nodes are no longer in use"},{"lineNumber":1775,"author":{"gitId":"-"},"content":"                inferred \u003d safe_infer(node.slice.value)"},{"lineNumber":1776,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1777,"author":{"gitId":"-"},"content":"                inferred \u003d safe_infer(node.slice)"},{"lineNumber":1778,"author":{"gitId":"-"},"content":"            if inferred not in (None, astroid.Uninferable):"},{"lineNumber":1779,"author":{"gitId":"-"},"content":"                try:"},{"lineNumber":1780,"author":{"gitId":"-"},"content":"                    hash_fn \u003d next(inferred.igetattr(\"__hash__\"))"},{"lineNumber":1781,"author":{"gitId":"-"},"content":"                except astroid.InferenceError:"},{"lineNumber":1782,"author":{"gitId":"-"},"content":"                    pass"},{"lineNumber":1783,"author":{"gitId":"-"},"content":"                else:"},{"lineNumber":1784,"author":{"gitId":"-"},"content":"                    if getattr(hash_fn, \"value\", True) is None:"},{"lineNumber":1785,"author":{"gitId":"-"},"content":"                        self.add_message(\"unhashable-dict-key\", node\u003dnode.value)"},{"lineNumber":1786,"author":{"gitId":"-"},"content":""},{"lineNumber":1787,"author":{"gitId":"-"},"content":"        if node.ctx \u003d\u003d astroid.Load:"},{"lineNumber":1788,"author":{"gitId":"-"},"content":"            supported_protocol \u003d supports_getitem"},{"lineNumber":1789,"author":{"gitId":"-"},"content":"            msg \u003d \"unsubscriptable-object\""},{"lineNumber":1790,"author":{"gitId":"-"},"content":"        elif node.ctx \u003d\u003d astroid.Store:"},{"lineNumber":1791,"author":{"gitId":"-"},"content":"            supported_protocol \u003d supports_setitem"},{"lineNumber":1792,"author":{"gitId":"-"},"content":"            msg \u003d \"unsupported-assignment-operation\""},{"lineNumber":1793,"author":{"gitId":"-"},"content":"        elif node.ctx \u003d\u003d astroid.Del:"},{"lineNumber":1794,"author":{"gitId":"-"},"content":"            supported_protocol \u003d supports_delitem"},{"lineNumber":1795,"author":{"gitId":"-"},"content":"            msg \u003d \"unsupported-delete-operation\""},{"lineNumber":1796,"author":{"gitId":"-"},"content":""},{"lineNumber":1797,"author":{"gitId":"-"},"content":"        if isinstance(node.value, astroid.SetComp):"},{"lineNumber":1798,"author":{"gitId":"-"},"content":"            self.add_message(msg, args\u003dnode.value.as_string(), node\u003dnode.value)"},{"lineNumber":1799,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1800,"author":{"gitId":"-"},"content":""},{"lineNumber":1801,"author":{"gitId":"-"},"content":"        if is_inside_abstract_class(node):"},{"lineNumber":1802,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1803,"author":{"gitId":"-"},"content":""},{"lineNumber":1804,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(node.value)"},{"lineNumber":1805,"author":{"gitId":"-"},"content":""},{"lineNumber":1806,"author":{"gitId":"-"},"content":"        if inferred is None or inferred is astroid.Uninferable:"},{"lineNumber":1807,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1808,"author":{"gitId":"-"},"content":""},{"lineNumber":1809,"author":{"gitId":"-"},"content":"        if getattr(inferred, \"decorators\", None):"},{"lineNumber":1810,"author":{"gitId":"-"},"content":"            first_decorator \u003d astroid.helpers.safe_infer(inferred.decorators.nodes[0])"},{"lineNumber":1811,"author":{"gitId":"-"},"content":"            if isinstance(first_decorator, astroid.ClassDef):"},{"lineNumber":1812,"author":{"gitId":"-"},"content":"                inferred \u003d first_decorator.instantiate_class()"},{"lineNumber":1813,"author":{"gitId":"-"},"content":"            else:"},{"lineNumber":1814,"author":{"gitId":"-"},"content":"                return  # It would be better to handle function"},{"lineNumber":1815,"author":{"gitId":"-"},"content":"                # decorators, but let\u0027s start slow."},{"lineNumber":1816,"author":{"gitId":"-"},"content":""},{"lineNumber":1817,"author":{"gitId":"-"},"content":"        if not supported_protocol(inferred, node):"},{"lineNumber":1818,"author":{"gitId":"-"},"content":"            self.add_message(msg, args\u003dnode.value.as_string(), node\u003dnode.value)"},{"lineNumber":1819,"author":{"gitId":"-"},"content":""},{"lineNumber":1820,"author":{"gitId":"-"},"content":"    @check_messages(\"dict-items-missing-iter\")"},{"lineNumber":1821,"author":{"gitId":"-"},"content":"    def visit_for(self, node):"},{"lineNumber":1822,"author":{"gitId":"-"},"content":"        if not isinstance(node.target, astroid.node_classes.Tuple):"},{"lineNumber":1823,"author":{"gitId":"-"},"content":"            # target is not a tuple"},{"lineNumber":1824,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1825,"author":{"gitId":"-"},"content":"        if not len(node.target.elts) \u003d\u003d 2:"},{"lineNumber":1826,"author":{"gitId":"-"},"content":"            # target is not a tuple of two elements"},{"lineNumber":1827,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1828,"author":{"gitId":"-"},"content":""},{"lineNumber":1829,"author":{"gitId":"-"},"content":"        iterable \u003d node.iter"},{"lineNumber":1830,"author":{"gitId":"-"},"content":"        if not isinstance(iterable, astroid.node_classes.Name):"},{"lineNumber":1831,"author":{"gitId":"-"},"content":"            # it\u0027s not a bare variable"},{"lineNumber":1832,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1833,"author":{"gitId":"-"},"content":""},{"lineNumber":1834,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(iterable)"},{"lineNumber":1835,"author":{"gitId":"-"},"content":"        if not inferred:"},{"lineNumber":1836,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1837,"author":{"gitId":"-"},"content":"        if not isinstance(inferred, astroid.node_classes.Dict):"},{"lineNumber":1838,"author":{"gitId":"-"},"content":"            # the iterable is not a dict"},{"lineNumber":1839,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1840,"author":{"gitId":"-"},"content":""},{"lineNumber":1841,"author":{"gitId":"-"},"content":"        self.add_message(\"dict-iter-missing-items\", node\u003dnode)"},{"lineNumber":1842,"author":{"gitId":"-"},"content":""},{"lineNumber":1843,"author":{"gitId":"-"},"content":""},{"lineNumber":1844,"author":{"gitId":"-"},"content":"class IterableChecker(BaseChecker):"},{"lineNumber":1845,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":1846,"author":{"gitId":"-"},"content":"    Checks for non-iterables used in an iterable context."},{"lineNumber":1847,"author":{"gitId":"-"},"content":"    Contexts include:"},{"lineNumber":1848,"author":{"gitId":"-"},"content":"    - for-statement"},{"lineNumber":1849,"author":{"gitId":"-"},"content":"    - starargs in function call"},{"lineNumber":1850,"author":{"gitId":"-"},"content":"    - `yield from`-statement"},{"lineNumber":1851,"author":{"gitId":"-"},"content":"    - list, dict and set comprehensions"},{"lineNumber":1852,"author":{"gitId":"-"},"content":"    - generator expressions"},{"lineNumber":1853,"author":{"gitId":"-"},"content":"    Also checks for non-mappings in function call kwargs."},{"lineNumber":1854,"author":{"gitId":"-"},"content":"    \"\"\""},{"lineNumber":1855,"author":{"gitId":"-"},"content":""},{"lineNumber":1856,"author":{"gitId":"-"},"content":"    __implements__ \u003d (IAstroidChecker,)"},{"lineNumber":1857,"author":{"gitId":"-"},"content":"    name \u003d \"typecheck\""},{"lineNumber":1858,"author":{"gitId":"-"},"content":""},{"lineNumber":1859,"author":{"gitId":"-"},"content":"    msgs \u003d {"},{"lineNumber":1860,"author":{"gitId":"-"},"content":"        \"E1133\": ("},{"lineNumber":1861,"author":{"gitId":"-"},"content":"            \"Non-iterable value %s is used in an iterating context\","},{"lineNumber":1862,"author":{"gitId":"-"},"content":"            \"not-an-iterable\","},{"lineNumber":1863,"author":{"gitId":"-"},"content":"            \"Used when a non-iterable value is used in place where \""},{"lineNumber":1864,"author":{"gitId":"-"},"content":"            \"iterable is expected\","},{"lineNumber":1865,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1866,"author":{"gitId":"-"},"content":"        \"E1134\": ("},{"lineNumber":1867,"author":{"gitId":"-"},"content":"            \"Non-mapping value %s is used in a mapping context\","},{"lineNumber":1868,"author":{"gitId":"-"},"content":"            \"not-a-mapping\","},{"lineNumber":1869,"author":{"gitId":"-"},"content":"            \"Used when a non-mapping value is used in place where \""},{"lineNumber":1870,"author":{"gitId":"-"},"content":"            \"mapping is expected\","},{"lineNumber":1871,"author":{"gitId":"-"},"content":"        ),"},{"lineNumber":1872,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1873,"author":{"gitId":"-"},"content":""},{"lineNumber":1874,"author":{"gitId":"-"},"content":"    @staticmethod"},{"lineNumber":1875,"author":{"gitId":"-"},"content":"    def _is_asyncio_coroutine(node):"},{"lineNumber":1876,"author":{"gitId":"-"},"content":"        if not isinstance(node, astroid.Call):"},{"lineNumber":1877,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":1878,"author":{"gitId":"-"},"content":""},{"lineNumber":1879,"author":{"gitId":"-"},"content":"        inferred_func \u003d safe_infer(node.func)"},{"lineNumber":1880,"author":{"gitId":"-"},"content":"        if not isinstance(inferred_func, astroid.FunctionDef):"},{"lineNumber":1881,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":1882,"author":{"gitId":"-"},"content":"        if not inferred_func.decorators:"},{"lineNumber":1883,"author":{"gitId":"-"},"content":"            return False"},{"lineNumber":1884,"author":{"gitId":"-"},"content":"        for decorator in inferred_func.decorators.nodes:"},{"lineNumber":1885,"author":{"gitId":"-"},"content":"            inferred_decorator \u003d safe_infer(decorator)"},{"lineNumber":1886,"author":{"gitId":"-"},"content":"            if not isinstance(inferred_decorator, astroid.FunctionDef):"},{"lineNumber":1887,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1888,"author":{"gitId":"-"},"content":"            if inferred_decorator.qname() !\u003d ASYNCIO_COROUTINE:"},{"lineNumber":1889,"author":{"gitId":"-"},"content":"                continue"},{"lineNumber":1890,"author":{"gitId":"-"},"content":"            return True"},{"lineNumber":1891,"author":{"gitId":"-"},"content":"        return False"},{"lineNumber":1892,"author":{"gitId":"-"},"content":""},{"lineNumber":1893,"author":{"gitId":"-"},"content":"    def _check_iterable(self, node, check_async\u003dFalse):"},{"lineNumber":1894,"author":{"gitId":"-"},"content":"        if is_inside_abstract_class(node) or is_comprehension(node):"},{"lineNumber":1895,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1896,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(node)"},{"lineNumber":1897,"author":{"gitId":"-"},"content":"        if not inferred:"},{"lineNumber":1898,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1899,"author":{"gitId":"-"},"content":"        if not is_iterable(inferred, check_async\u003dcheck_async):"},{"lineNumber":1900,"author":{"gitId":"-"},"content":"            self.add_message(\"not-an-iterable\", args\u003dnode.as_string(), node\u003dnode)"},{"lineNumber":1901,"author":{"gitId":"-"},"content":""},{"lineNumber":1902,"author":{"gitId":"-"},"content":"    def _check_mapping(self, node):"},{"lineNumber":1903,"author":{"gitId":"-"},"content":"        if is_inside_abstract_class(node):"},{"lineNumber":1904,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1905,"author":{"gitId":"-"},"content":"        if isinstance(node, astroid.DictComp):"},{"lineNumber":1906,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1907,"author":{"gitId":"-"},"content":"        inferred \u003d safe_infer(node)"},{"lineNumber":1908,"author":{"gitId":"-"},"content":"        if inferred is None or inferred is astroid.Uninferable:"},{"lineNumber":1909,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1910,"author":{"gitId":"-"},"content":"        if not is_mapping(inferred):"},{"lineNumber":1911,"author":{"gitId":"-"},"content":"            self.add_message(\"not-a-mapping\", args\u003dnode.as_string(), node\u003dnode)"},{"lineNumber":1912,"author":{"gitId":"-"},"content":""},{"lineNumber":1913,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1914,"author":{"gitId":"-"},"content":"    def visit_for(self, node):"},{"lineNumber":1915,"author":{"gitId":"-"},"content":"        self._check_iterable(node.iter)"},{"lineNumber":1916,"author":{"gitId":"-"},"content":""},{"lineNumber":1917,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1918,"author":{"gitId":"-"},"content":"    def visit_asyncfor(self, node):"},{"lineNumber":1919,"author":{"gitId":"-"},"content":"        self._check_iterable(node.iter, check_async\u003dTrue)"},{"lineNumber":1920,"author":{"gitId":"-"},"content":""},{"lineNumber":1921,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1922,"author":{"gitId":"-"},"content":"    def visit_yieldfrom(self, node):"},{"lineNumber":1923,"author":{"gitId":"-"},"content":"        if self._is_asyncio_coroutine(node.value):"},{"lineNumber":1924,"author":{"gitId":"-"},"content":"            return"},{"lineNumber":1925,"author":{"gitId":"-"},"content":"        self._check_iterable(node.value)"},{"lineNumber":1926,"author":{"gitId":"-"},"content":""},{"lineNumber":1927,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\", \"not-a-mapping\")"},{"lineNumber":1928,"author":{"gitId":"-"},"content":"    def visit_call(self, node):"},{"lineNumber":1929,"author":{"gitId":"-"},"content":"        for stararg in node.starargs:"},{"lineNumber":1930,"author":{"gitId":"-"},"content":"            self._check_iterable(stararg.value)"},{"lineNumber":1931,"author":{"gitId":"-"},"content":"        for kwarg in node.kwargs:"},{"lineNumber":1932,"author":{"gitId":"-"},"content":"            self._check_mapping(kwarg.value)"},{"lineNumber":1933,"author":{"gitId":"-"},"content":""},{"lineNumber":1934,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1935,"author":{"gitId":"-"},"content":"    def visit_listcomp(self, node):"},{"lineNumber":1936,"author":{"gitId":"-"},"content":"        for gen in node.generators:"},{"lineNumber":1937,"author":{"gitId":"-"},"content":"            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"},{"lineNumber":1938,"author":{"gitId":"-"},"content":""},{"lineNumber":1939,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1940,"author":{"gitId":"-"},"content":"    def visit_dictcomp(self, node):"},{"lineNumber":1941,"author":{"gitId":"-"},"content":"        for gen in node.generators:"},{"lineNumber":1942,"author":{"gitId":"-"},"content":"            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"},{"lineNumber":1943,"author":{"gitId":"-"},"content":""},{"lineNumber":1944,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1945,"author":{"gitId":"-"},"content":"    def visit_setcomp(self, node):"},{"lineNumber":1946,"author":{"gitId":"-"},"content":"        for gen in node.generators:"},{"lineNumber":1947,"author":{"gitId":"-"},"content":"            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"},{"lineNumber":1948,"author":{"gitId":"-"},"content":""},{"lineNumber":1949,"author":{"gitId":"-"},"content":"    @check_messages(\"not-an-iterable\")"},{"lineNumber":1950,"author":{"gitId":"-"},"content":"    def visit_generatorexp(self, node):"},{"lineNumber":1951,"author":{"gitId":"-"},"content":"        for gen in node.generators:"},{"lineNumber":1952,"author":{"gitId":"-"},"content":"            self._check_iterable(gen.iter, check_async\u003dgen.is_async)"},{"lineNumber":1953,"author":{"gitId":"-"},"content":""},{"lineNumber":1954,"author":{"gitId":"-"},"content":""},{"lineNumber":1955,"author":{"gitId":"-"},"content":"def register(linter):"},{"lineNumber":1956,"author":{"gitId":"-"},"content":"    \"\"\"required method to auto register this checker\"\"\""},{"lineNumber":1957,"author":{"gitId":"-"},"content":"    linter.register_checker(TypeChecker(linter))"},{"lineNumber":1958,"author":{"gitId":"-"},"content":"    linter.register_checker(IterableChecker(linter))"}],"authorContributionMap":{"anubh-v":16,"-":1942}},{"path":"tests/functional/a/assert_on_string_literal.py","fileType":"py","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"# pylint: disable\u003dmissing-module-docstring, undefined-variable"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"assert [foo, bar], \"No AssertionError\""},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"assert \"There is an AssertionError\" # [assert-on-string-literal]"},{"lineNumber":4,"author":{"gitId":"-"},"content":"assert \"\" # [assert-on-string-literal]"}],"authorContributionMap":{"anubh-v":3,"-":1}},{"path":"tests/functional/i/isinstance_second_argument.py","fileType":"py","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#pylint: disable\u003dmissing-docstring, undefined-variable, invalid-name, too-few-public-methods, wrong-import-position,import-error"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import collections"},{"lineNumber":4,"author":{"gitId":"-"},"content":"from unknown import Unknown"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"# Positive test cases"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"class A:"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"    pass"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"class B(A):"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    pass"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"isinstance(A(), A)"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"isinstance(A(), B)"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"isinstance(-9999, int)"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"isinstance(True and False, bool)"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"isinstance(\"a \u0027string\u0027\", type(\"test\"))"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"isinstance(3.123213, collections.OrderedDict)"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"isinstance(foo, (int, collections.Counter))"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"isinstance(\"a string\", ((int, type(False)), (float, set), str))"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"isinstance(10, (int,) + (str, bool) + (dict, list, tuple))"},{"lineNumber":24,"author":{"gitId":"-"},"content":"isinstance(10, tuple(Unknown))"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"# Negative test cases"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"isinstance({a:1}, hash) # [isinstance-second-argument-not-valid-type]"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"isinstance(64, hex) # [isinstance-second-argument-not-valid-type]"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"isinstance({b: 100}, (hash, dict)) # [isinstance-second-argument-not-valid-type]"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"isinstance(\"string\", ((dict, iter), str, (int, bool))) # [isinstance-second-argument-not-valid-type]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"isinstance(int, 1) # [isinstance-second-argument-not-valid-type]"}],"authorContributionMap":{"anubh-v":25,"-":6}}]
