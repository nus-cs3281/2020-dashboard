[
  {
    "path": ".github/ISSUE_TEMPLATE/bug-report.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "name: Bug Report"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "about: Something isn\u0027t working as expected? Create a report to help us improve."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "labels: \"c.Bug\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Before opening a new issue, please search existing issues:  https://github.com/reposense/RepoSense/issues"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**Tell us about your environment**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "* **RepoSense Version:**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "* **OS and Version:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "* **Web Browser and Version (if applicable):**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**Please include the steps to reproduce the bug.**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "1. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "1. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**What was expected to happen?**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**What actually happened? Please include a screenshot of the output.**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**If possible, include the URL to your RepoSense report or log files (if any).**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 31
    }
  },
  {
    "path": ".github/ISSUE_TEMPLATE/documentation.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "name: Documentation"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "about: Suggest better documentation coverage for a particular tool or process."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "labels: \"a-Docs\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Before opening a new issue, please search existing issues:  https://github.com/reposense/RepoSense/issues"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**What problem(s) did you run into that caused you to request additional documentation? What, if any, existing documentation relates to this proposal?**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    Mention the part of the documentation you\u0027re referring to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    and how it relates to your request."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**What would you like added or modified in the documentation?**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!-- "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    Summarize the suggested addition to or"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    modification of existing documentation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 22
    }
  },
  {
    "path": ".github/ISSUE_TEMPLATE/feature-request.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "name: Feature Request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "about: Suggest a new idea/feature for RepoSense"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "labels: \"c.Feature\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Before opening a new issue, please search existing issues:  https://github.com/reposense/RepoSense/issues"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**What feature(s) would you like to see in RepoSense?**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Provide a clear and concise description of the feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**Is the feature request related to a problem?**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Provide a clear and concise description of what the problem is."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Ex. I have an issue when [...]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**If possible, describe the solution**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Here would be a good place to talk about the solution or the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  approach that can be taken."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**If applicable, describe alternatives you\u0027ve considered**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Let us know about other solutions you\u0027ve tried or researched."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "**Additional context**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  Is there anything else that can be added about the proposal?"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "  You might want to link related issues here if you haven\u0027t already."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 45
    }
  },
  {
    "path": ".pug-lintrc.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowAttributeConcatenation\": true,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowAttributeTemplateString\": null,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowClassAttributeWithStaticValue\": true,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowIdAttributeWithStaticValue\": true,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowHtmlText\": null,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowMultipleLineBreaks\": true,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowTemplateString\": null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"disallowTrailingSpaces\": true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"maximumLineLength\": 120,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireClassLiteralsBeforeAttributes\": true,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireIdLiteralsBeforeAttributes\": true,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireLineFeedAtFileEnd\": true,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireLowerCaseAttributes\": true,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireLowerCaseTags\": true,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"requireStrictEqualityOperators\": true,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"validateAttributeSeparator\": { \"separator\": \", \", \"multiLineSeparator\": \",\\n  \" },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"validateDivTags\": true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"validateIndentation\": 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * TODO"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * Add rule for line wraps when available"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  */"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 24
    }
  },
  {
    "path": ".travis.yml",
    "fileType": "yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    - name: Deploy MarkBind to gh pages"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      language: node"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      node_js:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        - lts/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      install:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        - npm i -g markbind-cli"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      script: cd docs \u0026\u0026 markbind build --baseUrl /RepoSense"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      deploy:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        provider: pages"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        skip_cleanup: true"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        github_token: $GITHUB_TOKEN"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        keep_history: true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        local_dir: docs/_site"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        on:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          branch: master"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    - name: Ubuntu 14.04 JDK 8"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      language: java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      os: linux"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      jdk: openjdk8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      before_install:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        - sudo apt-get update"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        - sudo apt-get --only-upgrade install openjdk-8-jdk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        - echo -e \"Actual JDK in use -- \"; java -version"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    - name: macOS 10.13.6 JDK 8"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      language: java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      os: osx"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      osx_image: xcode10.1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      env:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        - HOMEBREW_NO_AUTO_UPDATE\u003d1 # Prevent time-consuming brew update"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      before_install:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        - *common_before_install"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        - brew install cask"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        - brew cask install AdoptOpenJDK/openjdk/adoptopenjdk8"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        - export JAVA_HOME\u003d`/usr/libexec/java_home -v 1.8`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        - echo -e \"Actual JDK in use -- \"; java -version"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    - name: \"Cypress frontend tests\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      os: linux"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      dist: xenial"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      addons:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        chrome: stable"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      services:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        - xvfb"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      before_install:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        - *common_before_install"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        - sudo apt-get install -y libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      script:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        - ./gradlew frontendTest -Pci"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "script:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  - ./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  - npm run lint"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  - time travis_retry ./gradlew clean checkstyleMain checkstyleTest test systemTest coverage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "before_install: \u0026common_before_install"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  - npm install --only\u003ddev"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "before_cache:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  npm: true,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/Library/Caches/Homebrew"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.cache"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "after_success:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  - bash \u003c(curl -s https://codecov.io/bash)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  - |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    if [ \"$TRAVIS_JOB_NAME\" \u003d \"Ubuntu 14.04 JDK 8\" ];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    then"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      git fetch --all \u0026\u0026 git config --global user.email \"-\" \u0026\u0026 git config --global user.name \"-\" \u0026\u0026 ./gradlew run -Dargs\u003d\"--since d1\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      npm install -g surge"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      npm install -g markbind-cli"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      (cd docs \u0026\u0026 markbind build)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      ./config/travis/deploy-surge.sh"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    fi"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 18,
      "jamessspanggg": 9,
      "-": 57
    }
  },
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# RepoSense"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/08a3527378464ed4a5ad62e27f590d6a)](https://www.codacy.com/app/reposense/RepoSense?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dreposense/RepoSense\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov.io](https://codecov.io/gh/reposense/RepoSense/branch/master/graphs/badge.svg?branch\u003dmaster)](http://codecov.io/github/reposense/RepoSense?branch\u003dmaster)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![Netlify Status](https://api.netlify.com/api/v1/badges/260983b3-589e-4619-a2e8-0bfb7a2b4422/deploy-status)](https://app.netlify.com/sites/reposense/deploys)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "RepoSense is a contribution analysis tool for Git repositories. It is particularly useful for those who want a chronological visualisation of the code contributions and commits made to a group of repositories. Educators can use RepoSense to track the work done in class projects, while team leads may use it to oversee their project teams."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "RepoSense generates a static HTML report that includes contribution information for each author in each target repository."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "The features of the report include:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Visualization for contribution frequency"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Visualization for contribution amount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Code review panel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Comparison of contribution between authors"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Filtering and sorting of authors"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentations"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* **User Guide** [[**Current Build**]](https://github.com/reposense/RepoSense/blob/master/docs/UserGuide.md) [[**Latest Release**]](https://github.com/reposense/RepoSense/blob/release/docs/UserGuide.md)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [**Developer Guide**](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "RepoSense is a project based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg/), and is funded by a grant from [NUS Center for Development of Teaching and Learning](http://www.cdtl.nus.edu.sg/)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Our project team and the list of contributors are [here](docs/about.md)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Contributing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "We welcome pull requests. Please read the [contribution guidelines](docs/Process.md#how-to-contribute-to-the-reposense-repository) before starting work on one."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The web previews of RepoSense is powered by Netlify and Surge."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca href\u003d\"https://www.netlify.com\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cimg src\u003d\"https://www.netlify.com/img/global/badges/netlify-color-bg.svg\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca href\u003d\"https://surge.sh\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cimg width\u003d\"55px\" src\u003d\"https://surge.sh/images/logos/svg/surge-logo.svg\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/a\u003e"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 4,
      "Tejas2805": 1,
      "jamessspanggg": 6,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\t\"ignoreGlobList\": [\"**.adoc\", \"collate**\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\"formats\": [\"gradle\", \"pug\", \"java\", \"js\", \"md\", \"scss\", \"yml\"],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\t\"ignoreCommitList\": [\"7b96c563eb2d3612aa5275364333664a18f01491\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"90018e49f129ce7e0abdc8b18e91c9813588c601\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"b8dbc3cf3c7c334665a828cf4236dcb442228c94\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"832dd728bbfa203d92e4548325d64d5a151c013f\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"503c43ed1c90e8dcb46173c8f7c8e62f9286acbf\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"14faede3d27097a74063fd407b210f8a5f7e3de5\"],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\t\"authors\":"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\t["
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"githubId\": \"eugenepeh\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"displayName\": \"Eugene\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"authorNames\": [\"Eugene Peh\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\t\t\"githubId\": \"jamessspanggg\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\t\t\"displayName\": \"James\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\t\t\"authorNames\": [\"James Pang\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"githubId\": \"ongspxm\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"displayName\": \"Metta\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"authorNames\": [\"Metta Ong\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"githubId\": \"yamidark\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"displayName\": \"Jun An\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"authorNames\": [\"Jun An\"],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"ignoreGlobList\": [\"**.html\", \"**.jade\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"githubId\": \"yong24s\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"displayName\": \"Yong Hao\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"authorNames\": [\"Yong Hao TENG\"],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"ignoreGlobList\": [\"**.css\", \"**.html\", \"**.jade\", \"**.js\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 6,
      "-": 34
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 \u0027:/!*/require_trailing_whitespaces/*\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 1,
      "-": 25
    }
  },
  {
    "path": "config/travis/deploy-surge.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "# Split on \"/\", ref: http://stackoverflow.com/a/5257398/689223"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "REPO_SLUG_ARRAY\u003d(${TRAVIS_REPO_SLUG//\\// })"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "REPO_OWNER\u003d${REPO_SLUG_ARRAY[0]}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "REPO_NAME\u003d${REPO_SLUG_ARRAY[1]}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "DASHBOARD_DEPLOY_PATH\u003d./reposense-report"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "MARKBIND_DEPLOY_PATH\u003d./docs/_site"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "DEPLOY_SUBDOMAIN_UNFORMATTED_LIST\u003d()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "if [ \"$TRAVIS_PULL_REQUEST\" !\u003d \"false\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  DEPLOY_SUBDOMAIN_UNFORMATTED_LIST+\u003d(${TRAVIS_PULL_REQUEST}-pr)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "elif [ -n \"${TRAVIS_TAG// }\" ] #TAG is not empty"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #sorts the tags and picks the latest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #sort -V does not work on the travis machine"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #sort -V              ref: http://stackoverflow.com/a/14273595/689223"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #sort -t ...          ref: http://stackoverflow.com/a/4495368/689223"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #reverse with sed     ref: http://stackoverflow.com/a/744093/689223"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  #git tags | ignore release candidates | sort versions | reverse | pick first line"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  LATEST_TAG\u003d$(git tag | grep -v rc | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | sed \u00271!G;h;$!d\u0027 | sed -n 1p)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  echo $LATEST_TAG"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  if [ \"$TRAVIS_TAG\" \u003d\u003d \"$LATEST_TAG\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    DEPLOY_SUBDOMAIN_UNFORMATTED_LIST+\u003d(latest)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  DEPLOY_SUBDOMAIN_UNFORMATTED_LIST+\u003d(${TRAVIS_TAG}-tag)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "else"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  DEPLOY_SUBDOMAIN_UNFORMATTED_LIST+\u003d(${TRAVIS_BRANCH}-branch)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "fi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "for DEPLOY_SUBDOMAIN_UNFORMATTED in \"${DEPLOY_SUBDOMAIN_UNFORMATTED_LIST[@]}\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "do"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  # replaces \"/\" or \".\" with \"-\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  # sed -r is only supported in linux, ref http://stackoverflow.com/a/2871217/689223"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  # Domain names follow the RFC1123 spec [a-Z] [0-9] [-]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  # The length is limited to 253 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  # https://en.wikipedia.org/wiki/Domain_Name_System#Domain_name_syntax"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  DEPLOY_SUBDOMAIN\u003d$(echo \"$DEPLOY_SUBDOMAIN_UNFORMATTED\" | sed -r \u0027s/[\\/|\\.]+/\\-/g\u0027)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  if [ -z \"${DEPLOY_SUBDOMAIN}\" ] # empty deploy subdomains, skip deployment"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    continue"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  DASHBOARD_DEPLOY_DOMAIN\u003dhttps://dashboard-${DEPLOY_SUBDOMAIN}-${REPO_NAME}-${REPO_OWNER}.surge.sh"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  echo \"Deploy domain: ${DASHBOARD_DEPLOY_DOMAIN}\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  surge --project ${DASHBOARD_DEPLOY_PATH} --domain $DASHBOARD_DEPLOY_DOMAIN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  MARKBIND_DEPLOY_DOMAIN\u003dhttps://docs-${DEPLOY_SUBDOMAIN}-${REPO_NAME}-${REPO_OWNER}.surge.sh"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  echo \"Deploy domain: ${MARKBIND_DEPLOY_DOMAIN}\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  surge --project ${MARKBIND_DEPLOY_PATH} --domain $MARKBIND_DEPLOY_DOMAIN;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  if [ \"$TRAVIS_PULL_REQUEST\" !\u003d \"false\" ] # only create github statuses when it is a PR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  then"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    # Create github statuses that redirects users to the deployed dashboard and markbind docs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/statuses/${TRAVIS_PULL_REQUEST_SHA}?access_token\u003d${GITHUB_API_TOKEN}\" \\"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -H \"Content-Type: application/json\" \\"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -X POST \\"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -d \"{\\\"state\\\": \\\"success\\\",\\\"context\\\": \\\"dashboard/surge/deploy/${DEPLOY_SUBDOMAIN}\\\", \\\"description\\\": \\\"Deploy domain: ${DASHBOARD_DEPLOY_DOMAIN}\\\", \\\"target_url\\\": \\\"${DASHBOARD_DEPLOY_DOMAIN}\\\"}\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/statuses/${TRAVIS_PULL_REQUEST_SHA}?access_token\u003d${GITHUB_API_TOKEN}\" \\"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -H \"Content-Type: application/json\" \\"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -X POST \\"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -d \"{\\\"state\\\": \\\"success\\\",\\\"context\\\": \\\"docs/surge/deploy/${DEPLOY_SUBDOMAIN}\\\", \\\"description\\\": \\\"Deploy domain: ${MARKBIND_DEPLOY_DOMAIN}\\\", \\\"target_url\\\": \\\"${MARKBIND_DEPLOY_DOMAIN}\\\"}\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  fi"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "done"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 67
    }
  },
  {
    "path": "docs/Build.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Build from Source\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Build from Source"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This guide explains how to compile the executable Jar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download our source code by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * using Git clone \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     e.g. `git clone https://github.com/reposense/RepoSense.git` \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   * or download and extract our [zip file](https://github.com/reposense/RepoSense/archive/master.zip)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "2. In the `RepoSense` directory, execute the below command in the terminal \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   `gradlew shadowJar`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "3. The executable Jar file will be generated in the folder `build` \u003e `jar` with the name `RepoSense.jar` upon successful build."
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 8,
      "-": 11
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Developer Guide\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# RepoSense - Developer Guide"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Thank you for your interest in contributing to RepoSense!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "### Prerequisites"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. **JDK `1.8.0_60`** or later. You may download the JDK [here](https://www.oracle.com/technetwork/java/javase/downloads/index.html)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. **git `2.14`** or later on the command line. You may download git [here](https://git-scm.com/downloads)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " \u003e Type `git --version` on your OS terminal and ensure that you have the correct version of **git**."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "### Setting up the project in your computer using IntelliJ"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open *IntelliJ* (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct *JDK* version for *Gradle*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    1. Click `New…​` and find the directory of the *JDK*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that the selected version of `Gradle JVM` matches our prerequisite."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `OK` to accept the all the other default settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "### Verifying the setup"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that *Gradle* builds without error by running the command `gradlew clean build`, and ensure that it finishs with a `BUILD SUCCESSFUL` message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the tests to ensure that they all pass by running the command `gradlew test systemtest`, and ensure that it finishs with a `BUILD SUCCESSFUL` message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e Ensure that you are on the project root directory when using the `gradlew` commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuring the Java coding style"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows [oss-generic coding standards](https://oss-generic.github.io/process/docs/CodingStandards.html). *IntelliJ’s* default style is mostly compliant with our *Java* coding convention but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Go to `File` \u003e `Settings…`​ (*Windows/Linux*), or `IntelliJ IDEA` \u003e `Preferences…`​ (*macOS*)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   * For `Class count to use import with \u0027*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   * For `Import Layout`, follow this image below:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "   ![import-order](images/import-order.png)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Optionally, you can follow the [Using Checkstyle]({{baseUrl}}/UsingCheckstyle.html) document to configure *Intellij* to check style-compliance as you write code."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuring the JavaScript and CSS coding style"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "Our project follows the [Airbnb Javascript Style Guide](https://github.com/airbnb/javascript) and [OSS CSS Coding Standard](https://oss-generic.github.io/process/codingStandards/CodingStandard-Css.html), which is governed by the Eslint and Stylelint respectively. We have our own customized style checker for the Pug files, which is governed by pug-lint. Their configuration files can be found at the root of the project. Please run a `npm run lint` from the project root directory and fix all of the lint errors before committing your code for final review.  You can also use the `npm run lintfix` script to automatically fix some of the javascript and css lint errors!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Eslint, Stylelint and their accompanying modules can be installed through NPM, so do ensure that you got it [installed](https://www.npmjs.com/get-npm) if you are working on the report."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuring Cypress for automated front-end testing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "We use [Cypress](https://www.cypress.io/) for automated end-to-end front-end testing. \u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "#### To write tests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a new test file in `frontend/cypress/tests`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. At project root start *Cypress Test Runner* by running `gradlew cypress`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the top right hand corner, set `Chrome` as the default browser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Under **Integration Tests**, click on the newly created test file to run it"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Cypress Test Runner](images/cypress-test-runner.jpg \"Cypress Test Runner\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Read [Cypress\u0027s Documentation](https://docs.cypress.io/api/commands/document.html#Syntax) to familiarize yourself with its syntax and [Cypress\u0027s debugging guide](https://docs.cypress.io/guides/guides/debugging.html#Log-Cypress-events) to tackle problems with your tests."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "#### To run all tests locally"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1.  At project root, run `gradlew frontendTest`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e If you encountered an invalid browser error, please ensure that you have `Chrome` installed in the default installation directory. Otherwise, follow the instructions [here](https://docs.cypress.io/guides/guides/debugging.html#Launching-browsers) to create symbolic links so Cypress can locate `Chrome` in your system."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### (Optional) Using Vue.js devtools for frontend debugging on Chrome"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. On your Chrome, visit the website of [Vue.js devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd) and add the extension."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Go the detail page of this extension in Chrome\u0027s extension management panel and select `Allow access to file URLs`. If you are unable to locate it, copy the link: `chrome://extensions/?id\u003dnhdogjmejiglipccpnnnanhbledajbpd` and visit it on your Chrome."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open any report generated by RepoSense."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. Press `F12` or right click and choose `inspect` at the report page."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "1. Choose `Vue` at the navigation bar."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "![Choose Vue](images/choose-vue.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "1. Debug using the tool."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "![Use Vue](images/use-vue.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e See its [Github](https://github.com/vuejs/vue-devtools) page for more details."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Before writing code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Do check out our [process guide]({{baseUrl}}/Process.html) before submitting any PR with your changes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### Building and running RepoSense from code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. Execute the following command on the OS terminal inside the project directory. \u003cbr/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Usage: `gradlew run -Dargs\u003d\"([--config CONFIG_FOLDER] | [--repos REPO_PATH_OR_URL...]) [--view [REPORT_FOLDER]] [--output OUTPUT_DIRECTORY] [--since DD/MM/YYYY] [--until DD/MM/YYYY] [--formats FORMAT...] [--ignore-standalone-config] [--timezone ZONE_ID[±hh[mm]]]\"` \u003cbr/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Named Arguments:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "--help, -h           Show help message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "--version, -V        Show the version of RepoSense."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "--view [PATH], -v [PATH]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                     Starts a server to display the report in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                     provided directory. If used as a flag (with no"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                     argument), generates a report and automatically"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                     displays the report."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "--output PATH, -o PATH"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                     The directory to output the report folder,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                     reposense-report. If not provided, the report"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                     folder will be created in the current working"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                     directory."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "--since dd/MM/yyyy, -s dd/MM/yyyy"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                     The date to start filtering."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "--until dd/MM/yyyy, -u dd/MM/yyyy"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                     The date to stop filtering."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "--formats [FORMAT [FORMAT ...]], -f [FORMAT [FORMAT ...]]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                     The alphanumeric file formats to process."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                     If not provided, all file formats will be"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                     used."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                     Please refer to userguide for more information."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "--ignore-standalone-config, -i"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                     A flag to ignore the standalone config file in"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                     the repo."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "--timezone ZONE_ID[±hh[mm]], -t ZONE_ID[±hh[mm]]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                     The timezone to use for the generated report."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                     One kind of valid timezones is relative to UTC."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                     E.g. UTC, UTC+08, UTC-1030."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                     If not provided, system default timezone will be used."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "--config PATH, -c PATH"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                     The directory containing the config files. If not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                     provided, the config files will be obtained from"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                     the current working directory."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "--repo LOCATION [LOCATION ...], --repos LOCATION [LOCATION ...], -r LOCATION [LOCATION ...]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                     The GitHub URL or disk locations to clone repository."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with no specify arguments: (find and use config files in current working directory)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with config files and automatically open the report:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "gradlew run -Dargs\u003d\"--config ./config/ --output output_path/ --since 21/10/2017 --until 21/11/2019 --formats java adoc js --view\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with config files and choose the timezone used to be UTC+8:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "gradlew run -Dargs\u003d\"--config ./config/ --output output_path/ --timezone UTC+08\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with repository locations and automatically open the report:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"--repos https://github.com/reposense/RepoSense.git https://github.com/se-edu/collate.git --output output_path/ --since 21/10/2017 --until 21/11/2017 --formats java adoc js --view\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with repository locations but ignore the standalone config file:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"--repos https://github.com/reposense/RepoSense.git https://github.com/se-edu/collate.git --ignore-standalone-config\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to view the report:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"--view output_path/reposense-report\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with config files using the alias of argument:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "gradlew run -Dargs\u003d\"-c ./config/ -o output_path/ -s 21/10/2017 -u 21/11/2017 -f java adoc js\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`-Dargs\u003d\"...\"` uses the same argument format as mentioned above."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Our documentation is powered by [MarkBind](https://markbind.org/)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Downloading MarkBind"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Run the following command to install MarkBind."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "$ npm install -g markbind-cli"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Previewing the documentation site"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Run the following command while in the `docs` directory. It will generate a website from your documentation files, start a web server, and open a live preview of your site in your default Browser."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "$ markbind serve"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### MarkBind features"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "MarkBind\u0027s list of comprehensive features is available [here](https://markbind.org/userGuide/index.html)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "## Architecture"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " ![architecture](images/architecture.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*Figure 1. Overall architecture of RepoSense*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "### Parser(ConfigParser)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`Parser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser) contains three components:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`ArgsParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/ArgsParser.java): Parses the user-supplied command line arguments into a `CliArguments` object."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`CsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/CsvParser.java): Abstract generic class for CSV parsing functionality. The following three classes extend `CsvParser`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   * [`AuthorConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/AuthorConfigCsvParser.java): Parses the `author-config.csv` config file into a list of `AuthorConfiguration` for each repository to analyze."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   * [`GroupConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/GroupConfigCsvParser.java) Parses the `group-config.csv` config file into a list of `GroupConfiguration` for each repository to analyze."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   * [`RepoConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/RepoConfigCsvParser.java): Parses the `repo-config.csv` config file into a list of `RepoConfiguration` for each repository to analyze."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`JsonParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/JsonParser.java): Abstract generic class for JSON parsing functionality. The following class extends `JsonParser` class:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   * [`StandaloneConfigJsonParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/StandaloneConfigJsonParser.java): Parses the `_reposense/config.json` config file into a `StandaloneConfig`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "### Git"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`Git`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git) package contains the wrapper classes for respective *git* commands."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitBlame`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitBlame.java): Wrapper class for `git blame` functionality. Traces the revision and author last modified each line of a file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitBranch`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitBranch.java): Wrapper class for `git branch` functionality. Gets the name of the working branch of the target repo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitCheckout`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitCheckout.java): Wrapper class for `git checkout` functionality. Checks out the repository by branch name or commit hash."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitClone`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitClone.java): Wrapper class for `git clone` functionality. Clones the repository from *GitHub* into a temporary folder in order to run the analysis."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitDiff`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitDiff.java): Wrapper class for `git diff` functionality. Obtains the changes between commits."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitLog`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitLog.java): Wrapper class for `git log` functionality. Obtains the commit logs and the authors\u0027 info."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitLsTree`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitLsTree.java): Wrapper class for `git ls-tree` functionality. Ensures that the tracked files do not contain any paths with illegal characters for Windows users."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitRevList`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitRevList.java): Wrapper class for `git rev-list` functionality. Retrieves the commit objects in reverse chronological order."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitRevParse`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitRevParse.java): Wrapper class for `git rev-parse` functionality. Ensures that the branch of the repo is to be analyzed exists."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitShortlog`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitShortlog.java): Wrapper class for `git shortlog` functionality. Obtains the list of authors who have contributed to the target repo."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`GitUtil`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitUtil.java): Contains helper functions used by the other Git classes above."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### CommitsReporter"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`CommitsReporter`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitsReporter.java) is responsible for analyzing the **commit** history and generating a [`CommitContributionSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitContributionSummary.java) for each repository. `CommitContributionSummary` contains information such as each author\u0027s daily and weekly contribution and the variance of their contribution. `CommitsReporter`,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`CommitInfoExtractor`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitInfoExtractor.java) to run the `git log` command, which generates the statistics of each commit made within date range."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. generates a [`CommitInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitInfo.java) for each commit, which contains the `infoLine` and `statLine`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`CommitInfoAnalyzer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitInfoAnalyzer.java) to extract the relevant data from `CommitInfo` into a [`CommitResult`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitResult.java), such as the number of line insertions and deletions in the commit and the author of the commit."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`CommitResultAggregator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitResultAggregator.java) to aggregate all `CommitResult` into a [`CommitContributionSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitContributionSummary.java)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "### AuthorshipReporter"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`AuthorshipReporter`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/AuthorshipReporter.java) is responsible for analyzing the white listed **files**, traces the original author for each line of text/code, and generating an [`AuthorshipSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/AuthorshipSummary.java) for each repository. `AuthorshipSummary` contains the analysis results of the white listed files and the amount of line contributions each author made. `AuthorshipReporter`,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`FileInfoExtractor`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileInfoExtractor.java) to traverse the repository to find all relevant files."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. generates a [`FileInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/FileInfo.java) for each relevant file, which contains the path to the file and a list of [`LineInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/LineInfo.java) representing each line of the file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`FileInfoAnalyzer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileInfoAnalyzer.java) to analyze each file, using `git blame` or annotations, and finds the `Author` for each `LineInfo`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. generates a [`FileResult`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/FileResult.java) for each file, which consolidates the authorship results into a *Map* of each author\u0027s line contribution to the file."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " 1. uses [`FileResultAggregator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileResultAggregator.java) to aggregate all `FileResult` into an `AuthorshipSummary`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "### ReportGenerator(Main)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`ReportGenerator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ReportGenerator.java),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " 1. uses `GitClone` API to clone the repository from *GitHub*."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " 1. copies the template files into the designated output directory."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " 1. uses `CommitReporter` and `AuthorshipReporter` to produce the commit and authorship summary respectively."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " 1. generates the `JSON` files needed to generate the `HTML` report."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "### System"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`System`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system) contains the classes that interact with the Operating System and external processes."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`CommandRunner`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/CommandRunner.java) creates processes that executes commands on the terminal. It consists of many *git* commands."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`LogsManager`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/LogsManager.java) uses the `java.util.logging` package for logging. The `LogsManager` class is used to manage the logging levels and logging destinations. Log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`ReportServer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/ReportServer.java) starts a server to display the report on the browser. It depends on the `net.freeutils.httpserver` package."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[`Model`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model) holds the data structures that are commonly used by the different aspects of *RepoSense*."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`Author`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/Author.java) stores the `GitHub ID` of an author. Any contributions or commits made by the author, using his/her `GitHub ID` or aliases, will be attributed to the same `Author` object. It is used by `AuthorshipReporter` and `CommitsReporter` to attribute the commit and file contributions to the respective authors."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`CliArguments`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/CliArguments.java) stores the parsed command line arguments supplied by the user. It contains the configuration settings such as the CSV config file to read from, the directory to output the report to, and date range of commits to analyze. These configuration settings are passed into `RepoConfiguration`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`FileTypeManager`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/FileTypeManager.java) stores the file format to be analyzed and the custom groups specified by the user for any repository."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * [`RepoConfiguration`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/RepoConfiguration.java) stores the configuration information from the CSV config file for a single repository, which are the repository\u0027s orgarization, name, branch, list of authors to analyse, date range to analyze commits and files from `CliArguments`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": " These configuration information are used by:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    - `GitClone` to determine the location to clone the repository from and which branch to check out to."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    - `AuthorshipReporter` and `CommitsReporter` to determine the range of commits and files to analyze."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    - `ReportGenerator` to determine the directory to output the report."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "## HTML Report"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The source files for the report is located in [`frontend/src`](https://github.com/reposense/RepoSense/blob/master/frontend/src) and is built by [spuild](https://github.com/ongspxm/spuild2) before being packaged into the JAR file to be extracted as part of the report."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The main HTML file is generated from [`frontend/src/index.pug`](https://github.com/reposense/RepoSense/blob/master/frontend/src/index.pug)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "[Vue](https://vuejs.org/v2/api/) (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. It is heavily utilized in the report to dynamically update the information in the various views. (Style guide available [here](https://vuejs.org/v2/style-guide/), Developer tool available [here](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)). Vue lifecycle hooks are the defined methods which gets executed in a certain stage of the Vue object lifespan. The following is the Vue lifecycle diagram taken from [here](https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram) indicating the hook sequence:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "![vue lifecycle diagram](images/vue-lifecycle-diagram.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "The following is a snapshot of the report:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "![report screenshot](images/report-summary.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "### Report Architecture"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "![report architecture](images/report-architecture.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The main Vue object (`window.app`) is responsible for the loading of the report (through `summary.json`). Its `repos` attribute is tied to the global `window.REPOS`, and is passed into the various other modules when the information is needed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "`window.app` is broken down into two main parts"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "- the summary view"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "- and the tabbed interface"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The summary view acts as the main report which shows the various calculations. \u003c/br\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "The tabbed interface is responsible for loading various modules such as authorship and zoom to display additional information."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "### Javascript Files"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**main.js**](#main-main-js) - main controller that pushes content into different modules"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**api.js**](#data-loader-api-js) - loading and parsing of the report content"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**v_summary.js**](#summary-view-v-summary-js) - module that supports the summary view"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**v_authorship.js**](#authorship-view-v-authorship-js) - module that supports the authorship tab view"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**v_zoom.js**](#zoom-view-v-zoom-js) - module that supports the zoom tab view"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**v_ramp.js**](#ramp-view-v-ramp-js) - module that supports the ramp chart view"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "- [**v_segment.js**](#segment-view-v-segment-js) - module that supports the code segment view"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "### JSON Report Files"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "- **summary.json** - a list of all the repositories and their respective details"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "- **projName/commits.json** - contains information of the users\u0027 commits information (e.g. line deletion, insertion, etc), grouped by date"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "- **projName/authorship.json** - contains information from git blame, detailing the author of each line for all the processed files"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Main ([main.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/main.js))"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "This contains the logic for main VueJS object, `window.app`, which is responsible for passing the necessary data into the relevant modules to be loaded."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`v_summary`, `v_authorship`, `v_zoom`, `v_segment` and `v_ramp` are components which will be embedded into report and will render the corresponding content based on the data passed into it from the main `window.app`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "#### Loading of report information"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The main Vue object depends on the `summary.json` data to determine the right `commits.json` files to load into memory. This is handled by `api.js` which loads the relevant file information from the network files if it is available, otherwise a report archive, `archive.zip`, have to be used."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Once the relevant `commit.json` files are loaded, all the repo information will be passed into `v_summary` to be loaded in the summary view as the relevant ramp charts."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "#### Activating additional view modules"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Most activity or actions should happen within the module itself, but in the case where there is a need to spawn or alter the view of another module, an event is emitted from the first module to the main Vue object (`window.app`), which then handles the data received and passes it along to the relevant modules."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#### Hash link"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Other than the global main Vue object, another global variable we have is the `window.hashParams`. This object is reponsible for generating the relevant permalink for a specific view of the summary module for the report."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Data loader ([api.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/api.js))"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "This is the module that is in charge of loading and parsing the data files generated as part of the report."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#### Loading from ZIP file"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Due to security design, most modern browsers (e.g. Chrome) do not allow web pages to obtain local files using the directory alone. As such, a ZIP archive of the report information will be produced alongside the report generation."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "This archive will be used in place of the network files to load information into the report, in the case when the network files are unavailable."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The API module will be handling all request for all the JSON data files. If the network file is not available, the files will be obtained from the zip archive provided."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#### Retrieving and parsing information"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "After the JSON files are loaded from their respective sources, the data will be parsed as objects and included inside the global storage object, `window.REPOS`,  in the right format."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "For the basic skeleton of `window.REPOS`, refer to the generated `summary.json` file in the report for more details."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Summary View ([v_summary.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/v_summary.js))"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "The `v_summary` module is in charge of loading the ramp charts from the corresponding `commits.json`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "![summary architecture](images/report-architecture-summary.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#### Initializing the data for the ramp charts"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "The summary module is activated after the information is loaded from the main Vue.JS object. At creation, the `repo` attribute is populated with the `window.REPOS` object, which contains information loaded from `summary.json`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#### Filtering users and repositories"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "The commits information is retrieved from the corresponding project folders for each repository. These information will be filtered and sorted before passed into the template to be displayed as ramp charts."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Authorship View ([v_authorship.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/v_authorship.js))"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "The authorship module retrieves the relevant information from the corresponding `authorship.json` file if it is not yet loaded. If it has been loaded, the data will be written into `window.REPOS` and be read from there instead."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "![authorship architecture](images/report-architecture-authorship.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#### Showing relevant information by authors"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "The files will be filtered, picking only files the selected author has written in. The lines are then split into chunks of \"touched\" and \"untouched\" code segments to be displayed in the tab view which will be popped up on the right side of the screen."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Zoom View ([v_zoom.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/v_zoom.js))"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "The `v_zoom` module is in charge of filtering and displaying the commits from selected sub-range of a ramp chart."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Ramp View ([v_ramp.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/v_ramp.js))"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "The `v_ramp` module is responsible for receiving the relevant information from `v_summary` and generating ramp charts that contain ramp slices."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#### Padding for dates"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "For ramps between the date ranges, the slices will be selected and it will be pre and post padded with empty slices to align the ramp slice between the `sinceDate` and `untilDate`. The ramps will then be rendered with the slices in the right position."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Segment View ([v_segment.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/static/js/v_segment.js))"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "The `v-segment` module is used as a component in `v_authorship`. It separates the code in terms of \"touched\" and \"untouched\" segments and only loads each \"untouched\" segment when it is toggled."
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "jamessspanggg": 97,
      "-": 256,
      "ang-zeyu": 1
    }
  },
  {
    "path": "docs/Process.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Process\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Process"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "We generally follow the  [The OSS-Generic Reference Process](https://oss-generic.github.io/process/) but with the following deviations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* We will squash the commits when merging a PR. Therefore, there is no need to follow a strict commit organization or write elaborate commit messages for each commit. There is no need to use CanIHasReview tool either. However, when pushing new commits to your PR branch, do tidy up _new_ commits (i.e., commits not yet pushed) e.g., squash noise commits."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* When syncing local branch with upstream, use _merge_ rather than _rebase_ to avoid the need to force push your branch."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## How to contribute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s a quick guide on how you can contribute to our repository:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Look for an open issue to work on](https://github.com/reposense/RepoSense/issues), or start a fresh issue to discuss a potential feature or bug."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "2. Make a fork of our repository, and create a new branch (with a meaningful name)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "3. Start making your changes while following our Coding Standard for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[Java](https://oss-generic.github.io/process/codingStandards/CodingStandard-Java.html),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[JavaScript](https://docs.google.com/document/d/1gZ6WG6HBTJYHAtVkz9kzi_SUuzfXqzO-SvFnLuag2xM/pub?embedded\u003dtrue),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "[CSS](https://oss-generic.github.io/process/codingStandards/CodingStandard-Css.html),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "and [HTML](https://oss-generic.github.io/process/codingStandards/CodingStandard-Html.html)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "4. Open a pull request and propose a good commit message for your pull request by following our [commit organization](https://oss-generic.github.io/process/docs/FormatsAndConventions.html#commit-message)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "5. Let us know when you are ready for a review! If you haven\u0027t heard back from us after a couple of days, do probe us by leaving a comment on the pull request."
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 8,
      "-": 19
    }
  },
  {
    "path": "docs/PublishingGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Publishing Guide\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "# Automate publishing of your report to GitHub Pages"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "You can use either [Travis-CI](https://travis-ci.org/) or [GitHub Actions](https://github.com/features/actions) to automate RepoSense report generation and publish the report online to [GitHub Pages](https://pages.github.com/) for free."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Using Travis"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Fork publish-RepoSense repository using this [link](https://github.com/RepoSense/publish-RepoSense/fork)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Follow this [section](#granting-write-access-to-reposense-for-publishing) to generate a `personal access token` or `deploy key` on GitHub for report publishing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Sign up and login to [Travis-CI](https://travis-ci.org/)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Go to [your account](https://travis-ci.org/account/repositories), click on **Sync account** to fetch all your repositories into Travis-CI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Go to [your publish-RepoSense fork in Travis-CI](https://travis-ci.org/search/publish-RepoSense/), under **Current** tab click on **Activate repository**."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. In the same page, click on **More options** on the right then access **Settings**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "![Travis-CI Dashboard](images/publishingguide-travissetting.jpg \"Travis-CI Dashboard\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Under **Environment Variables**, name a variable as `GITHUB_TOKEN` or `GITHUB_DEPLOY_KEY` depending on your earlier choice and paste the content that was copied earlier to its value field; then click **Add**. Ensure that the `Display value in build log` is **switched off** for security reasons:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Travis-CI Environment Variable](images/publishingguide-githubtoken.jpg \"Travis-CI Environment Variable\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Edit [run.sh](https://github.com/reposense/publish-RepoSense/edit/master/run.sh), [repo-config.csv](https://github.com/reposense/publish-RepoSense/edit/master/configs/repo-config.csv) and [author-config.csv](https://github.com/reposense/publish-RepoSense/edit/master/configs/author-config.csv) to customize the command line parameters or repositories to be analyzed. You may read our [User Guide](UserGuide.md#customizing-the-analysis) for more information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. To access your site, go to the settings of your fork in GitHub, under **GitHub Pages** section, look for `Your site is published at [LINK]`. It should look something like `https://[YOUR_GITHUB_ID].github.io/publish-RepoSense`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "![GitHub Setting](images/publishingguide-githubsetting.jpg \"GitHub Setting\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The changes made to the configuration files should trigger Travis-CI to generate your report. Otherwise, follow the [next section](#keeping-your-site-up-to-date-with-your-code-contribution) to manually trigger a build. \u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "It takes a few minutes for report generation. Meanwhile, you can monitor the progress live at [Travis-CI\u0027s Builds](https://travis-ci.org/dashboard/builds). \u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Try accessing your site again when a green tick appears beside your fork."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Using GitHub Actions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Fork publish-RepoSense repository using this [link](https://github.com/RepoSense/publish-RepoSense/fork)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Follow this [section](#granting-write-access-to-reposense-for-publishing) to generate a `personal access token` or `deploy key` on GitHub for report publishing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Go to the [secrets settings](https://github.com/reposense/publish-RepoSense/settings/secrets) of your publish-RepoSense fork, add a new secret as `ACCESS_TOKEN` or `DEPLOY_KEY` depending on your earlier choice and paste the content that was copied earlier to its value field; then click **Add secret**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "![GitHub Actions Secrets](images/publishingguide-secrets.png \"GitHub Actions Secrets\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Edit [run.sh](https://github.com/reposense/publish-RepoSense/edit/master/run.sh), [repo-config.csv](https://github.com/reposense/publish-RepoSense/edit/master/configs/repo-config.csv) and [author-config.csv](https://github.com/reposense/publish-RepoSense/edit/master/configs/author-config.csv) to customize the command line parameters or repositories to be analyzed. You may read our [User Guide](UserGuide.md#customizing-the-analysis) for more information."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. To access your site, go to the settings of your fork in GitHub, under **GitHub Pages** section, look for `Your site is published at [LINK]`. It should look something like `https://[YOUR_GITHUB_ID].github.io/publish-RepoSense`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "![GitHub Setting](images/publishingguide-githubsetting.jpg \"GitHub Setting\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003e The changes made to the configuration files should trigger GitHub Actions to generate your report. Otherwise, follow the [next section](#keeping-your-site-up-to-date-with-your-code-contribution) to manually trigger a build. \u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "It takes a few minutes for report generation. Meanwhile, you can monitor the progress live at the [actions page](https://github.com/reposense/publish-RepoSense/actions) of your fork. \u003cbr/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Granting write-access to RepoSense for publishing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "We recommmend use of [personal access token](https://github.blog/2013-05-16-personal-api-tokens/) for ease of setup and [deploy key](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) for enhanced security."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### If you wish to use `personal access token`:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Follow this [guide](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) and give only `public_repo` permission."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. **Copy** the token for later use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### If you wish to use `deploy key`:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e For Windows users, `ssh-keygen` and `base64` are accessible using [`Git Bash`](https://gitforwindows.org/)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Use `ssh-keygen` to create a public/private key pair without a passphrase. \u003cbr/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `ssh-keygen -t ecdsa -b 521 -f id_reposense -q -N \"\"`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Go to the [deploy key settings](https://github.com/reposense/publish-RepoSense/settings/keys) of your publish-RepoSense fork and create a new deploy key with the contents of `id_reposense.pub`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. **Copy** the base64 encoded content of the private key for later use. \u003cbr/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `cat id_reposense | base64 -w 0`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Keeping your site up-to-date with your code contribution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Using Travis"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[Travis-CI](https://travis-ci.org/) offers `Cron Jobs` in intervals of daily, weekly or monthly."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Login to [Travis-CI](https://travis-ci.org/)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Go to [your fork in Travis-CI](https://travis-ci.org/search/publish-RepoSense/), click on **More options** on the right then access **Settings**."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Under **Cron Jobs**, choose **master** for `Branch`, **Always run** for `Options` and pick an `Interval` of your choice; then click **Add**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Travis-CI Cron](images/publishingguide-cronsetting.jpg \"Travis-CI Cron\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can manually trigger an update."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Go to [your fork in Travis-CI](https://travis-ci.org/search/publish-RepoSense/), click on **More options** on the right then **Trigger build**."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. In the pop up, click **Trigger custom build**."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Using GitHub Actions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "1. Edit [main.yml](https://github.com/reposense/publish-RepoSense/edit/master/.github/workflows/main.yml) and uncomment the `schedule:` section."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. You may change the expression after `cron:` to a schedule of your choice. Read more about cron syntax [here](https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Commit your changes."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Alternatively, you can trigger an update by pushing an empty commit to your fork. Currently, the GitHub Actions UI does not support the manual execution of workflows."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Specifying which version of RepoSense to use"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "As RepoSense is being actively developed, its master branch is frequently updated with new features and fixes. \u003cbr/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For stablility or familiarity, you may want to use the release. \u003cbr/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Use our latest release (Stable)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "You can find the changelog of latest release [here](https://github.com/reposense/RepoSense/releases/latest)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Edit line 10 of [run.sh](https://github.com/reposense/publish-RepoSense/edit/master/run.sh) to use `--release`. \u003cbr /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {start-from\u003d10}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "./get-reposense.py --release"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Use our master branch (Beta)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "You can find the list of commits to master branch [here](https://github.com/reposense/RepoSense/commits/master) and planned features/fixes [here](https://github.com/reposense/RepoSense/milestones)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Edit line 10 of [run.sh](https://github.com/reposense/publish-RepoSense/edit/master/run.sh) to use `--master`. \u003cbr /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {start-from\u003d10}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "./get-reposense.py --master"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "### Use a specific version of release"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Be sure to read and understand [all breaking changes and bugs](https://github.com/reposense/RepoSense/releases) before proceeding."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Edit line 10 of [run.sh](https://github.com/reposense/publish-RepoSense/edit/master/run.sh) to use `--tag TAG`, where `TAG` is the [target version of release](https://github.com/reposense/RepoSense/tags). \u003cbr /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {start-from\u003d10}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "./get-reposense.py --tag v1.6.1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Managing your configuration files with the help of collaborators"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "If you use RepoSense to monitor a large number of collaborators, it may be more systematic to have them update their git configurations into your fork using pull-requests."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "To ensure that their pull-requests are correct, we can use [Netlify](https://www.netlify.com/) to preview how the changes would look like in production, before deploying them into GitHub Pages."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Sign up and login to [Netlify](https://www.netlify.com/)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Use this [link](https://app.netlify.com/start) to create a new site."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. Select **GitHub** as your Git provider and authorize Netlify in the pop up if prompted."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "1. If this is your first time using Netlify, pick `publish-RepoSense` when prompted to install Netlify; \u003cbr/\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Otherwise, choose `publish-RepoSense` when prompted to link a repository. \u003cbr/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*If you can\u0027t find your fork, then Netlify may only have access to selective repositories. \u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Click on the link in `Can\u0027t see your repo here? Configure the Netlify app on GitHub` to give Netlify access to your fork.*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. In the next page, leave `master` as the **Branch to deploy**, enter `pip install requests \u0026\u0026 ./run.sh` for **Build command** and `reposense-report` for **Publish directory**."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. To save, click on **Deploy site**."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "1. To test, go to an open pull-request, scroll down and in `All checks have passed`, click on **Details** beside `deploy/netlify — Deploy preview ready!`, and the report should open in a new tab:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "![Netlify Preview](images/publishingguide-netlifypreview.png \"Netlify Preview\")"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 44,
      "jamessspanggg": 37,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"User Guide\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "# RepoSense - User Guide"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "First, ensure that you have the necessary prerequisites:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* **Java 8** (JRE `1.8.0_60`) or later. You may download Java [here](https://www.java.com/en/)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* **git `2.14`** or later on the command line (run `git --version` in your OS terminal to confirm). You may download git [here](https://git-scm.com/downloads)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Next, download the latest executable Jar from our [releases](https://github.com/reposense/RepoSense/releases/latest). Alternatively, you can follow this guide on [Using RepoSense with Netlify]({{baseUrl}}/UserGuide.html#quickstart-reposense-with-netlify) which will allow you to use the latest version of RepoSense online without having to download any files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The simplest use case for RepoSense is to generate a report for the entire history of a repo. Here are the steps:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate the report for the repo by executing the following command in a terminal:\u003cbr/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Format : `java -jar RepoSense.jar --repo FULL_REPO_URL` (note the `.git` at the end)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   Example: `java -jar RepoSense.jar --repo https://github.com/reposense/RepoSense.git`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Note: The above command will analyze the commits made within one month from the date of report generation. Append `--since d1` if you wish to analyze from the date of the first commit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. The previous step analyzes the default branch of the repo and creates the report in a directory named `reposense-report`. Run the following command to view the report (it will open up in your default Browser):\u003cbr/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   `java -jar RepoSense.jar --view reposense-report`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can combine the 2 steps by running the following command to generate the report and automatically open it afterwards:\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    `java -jar RepoSense.jar --repo FULL_REPO_URL --view`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Interpreting the Report"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "As the report consist of static pages, it can be viewed using a Web Browser, and can be deployed on most Web hosting platforms (such as [GitHub Pages](https://pages.github.com/)). Assuming the report has been generated already, here are the two options to load the report onto a Browser:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Run RepoSense with the `--view` option:\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  Format: `java -jar RepoSense.jar --view REPORT_FOLDER`\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  Example: `java -jar RepoSense.jar --view ./myReport/reposense-report`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Open the `index.html` (in the report directory) using a Browser and if the report was not loaded automatically, upload the `archive.zip` (in the same directory) manually."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example of how the report looks like:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "![report](images/report-features.png)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "It consists of four main parts: the [_Chart Panel_](#chart-panel), the [_Code Panel_](#code-panel), the [_Commits Panel_](#commits-panel), and the [_Tool Bar_](#tool-bar), each of which is explained in the sections below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "### Chart Panel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Ramp Charts](images/rampchart.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The `Chart Panel` (an example is shown above) contains _Ramp Charts_ and _Contribution Bars_."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**Ramp Chart**: This is a visualization of frequency and quantity of contributions of an author for a specific repository."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* **Title**: Each title consists of the **index**, the **name** of the author, number of lines written to the repo, a button to view author\u0027s **code**, a button to view author\u0027s **repo** and a button to view the **commits** made by the author."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* **Rows**: Each _row_ (i.e., light blue rectangle) represents the contribution timeline of an author for a specific repository."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **Ramp**: Each row contains **ramps** -- the pointy saw-tooth shapes you see in the screenshot above. A ramp represents the contributions of an author possibly aggregated over a period (e.g., a day or a week)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  * The area of the ramp is proportional to the amount of contribution the author did at that time period."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  * The position of the right edge of the ramp (perpendicular to the blue bar) represents the period (the day or the week) in which the contribution was made."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  * Hover the pointer over a ramp to see the total number of lines represented by that ramp."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  * Click on the ramp to see on GitHub the list of commits represented by that ramp."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* To make comparison between two authors easier, the color of the ramps that represent different authors\u0027 contributions at the same time period are the same."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Ramps representing big contributions can overlap with earlier time periods. This represents the possibility that if the work committed during a specific period is big, it could have started in an earlier time period."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**Contribution Bar**: The total amount of code contributed by an author during the _total analysis period_ is represented by the length of the **red bars** (called _contribution bars_) that appear at the bottom of the row."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Hover over a contribution bar to see the exact amount of the contribution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* If an author contributed significantly higher than other authors, the contribution bar can span multiple lines (see the 2nd author in the screenshot for an example)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "### Code Panel"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cimg src\u003d\"images/code-panel.png\" alt\u003d\"code panel\" width\u003d\"468\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The `Code Panel` allows users to see the code attributed to a specific author. Click on the `\u003c/\u003e` icon beside the name of the author in the `Chart Panel` to display the `Code Panel` on the right."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* The Code Panel shows the files that contain author\u0027s contributions, sorted by the number of lines written."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Select the radio button to enable one of the following 2 filters. Note that only 1 of the 2 filters is active at any time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    * Type file path glob in glob filter to include files matching the glob expression."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    * Select the checkboxes to include files of preferred file extensions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the file title toggles the file content."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the first icon beside the file title opens the history view of the file on github."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the second icon beside the file title opens the blame view of the file on github."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Code attributed to the author is highlighted in green."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Non-trivial code segments that are not written by the selected author are hidden by default, but you can toggle them by clicking on the :heavy_plus_sign: icon."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "### Commits Panel"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cimg src\u003d\"images/commits-panel.png\" alt\u003d\"commits panel\" width\u003d\"468\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `Commits Panel` allows users to see the commits attributed to a specific author. Hold `Command`\u0026#8984; **(MacOS)** or `Ctrl` **(other OSes)** and click on the ramp chart in the `Chart Panel` to select the time range where you want to display the `Commit Panel` for on the right. \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "![Opening commits panel](images/opening-commits-panel.gif)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The `Commits Panel` shows the commits that contain author\u0027s contributions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The commits can be sorted by the date it was committed or by LoC."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The tags of the commits will also be displayed on top, if any."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Clicking on a tag will direct you to the commit having that particular tag."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* The date range for the `Chart Panel` can be updated by clicking on the \"Show ramp chart for this period\" below the name of the author."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* The ramp slices displayed in the ramp chart for the `Commits Panel` represents individual commits."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* The commit messages body can be expanded or collapsed by clicking on the `...` icon beside each commit message title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* To promote and encourage the 50/72 rule for commit messages, a dotted border will be shown for:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  * Commit message subject that exceeds 50 characters."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  * Commit message body after the 72nd character mark."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Tool Bar"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Tool Bar` at the top provides a set of configuration options that control the Chart Panel."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* `Search` : filters the author and repository by keywords."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "  * Multiple keywords/terms can be used, separated by spaces."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  * Entries that contain _any_ (not necessarily _all_) of the search terms will be displayed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  * The keywords used to filter author and repository are case-insensitive."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `Group by` : grouping criteria for the rows of results"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "  * `None` : results will not be grouped in any particular way."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Repo/Branch` : results will be grouped by repositories and its\u0027 associating branches."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Author` : results will be grouped by the name of the author. Contributions made to multiple repositories by a particular author will be grouped under the author."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `Sort groups by`: sorting criteria for the main group. See note [1] below."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Group title` : groups will be sorted by the title of the group (in bold text) in alphabetical order."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Contribution` : groups will be sorted by the combined contributions within a group, in the order of number of lines added"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * `Variance` : groups will be sorted by how far the daily contributions are spread out from their average value among all authors involved. Detailed definition of variance is located [here](https://en.wikipedia.org/wiki/Variance)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* `Sort within groups by`: sorting criteria within each group"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * `Title` : each group will be internally sorted by it\u0027s title in alphabetical order."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * `Contribution` : each group will be internally sorted by individual contributions in the order of number of lines added"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  * `Variance` : each group will be internally sorted by how far the daily contributions are spread out from their average value by each author into a particular repo. Detailed definition of variance is located [here](https://en.wikipedia.org/wiki/Variance)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `Granularity` : the period of time for which commits are aggregated in the Ramp Chart."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    * `Commit`: each commit made is shown as one ramp"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    * `Day`: commits within a day (commits made within 00:00 to 23:59) are shown as one ramp"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    * `Week`: commits within a week (from Monday 00:00 to Sunday 23:59) are shown as one ramp"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `Since`, `Until` : the date range for the Ramp Chart (not applied to the Contribution Bars)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `Reset date range` : resets the date range of the Ramp Chart to the default date range."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `Breakdown by file type` : toggles the contribution bar to either display the bar by :"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    * the total lines of codes added (if checkbox is left unchecked), or"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * a breakdown of the number of lines of codes added to each file type (if checkbox is checked). More info on note [3] below."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `Merge group` : merges all the ramp charts of each group into a single ramp chart; aggregates the contribution of each group."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * viewing of authored code of the group as a whole is available when `group by repos`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Notes:\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[1] **`Sort groups by`**: each main group has its own index and percentile according to its ranking position after sorting (e.g.,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "if the groups are sorted by contribution in descending order, a 25% percentile indicates that the group is in the top 25% of the whole cohort in terms of contribution)\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[2] **`Repo/Branch`**: the repo/branch name is constructed as `ORGANIZATION/REPOSITORY[BRANCH]` (e.g., `resposense/reposense[master]`)\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[3] The total contribution of each group will get updated based on the checked file types and will be taken into account when sorting criteria is contribution."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "**Bookmarking a specific toolbar setting and the opened code panel**: The URL changes according to the toolbar configuration and opened code panel viewed. You can save a specific configuration of the report by bookmarking the url (using browser functionality)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "## Configuring a Repo to Provide Additional Data to RepoSense"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "When a repo is being analyzed by RepoSense, there are **two ways repo owners can provide additional details to RepoSense**: using a config file, or annotating code using `@@author` tags. The two approaches are explained in the sections below."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "### Provide Data Using a json Config File"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Repo owners can provide the following additional information to RepoSense using a config file that we call the **_standalone config file_**:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* which files/authors/commits to analyze/omit"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* which git and GitHub usernames belong to which authors"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* the display of an author"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "To use this feature, add a `_reposense/config.json` to the root of your repo using the format in the example below ([another example](https://github.com/reposense/RepoSense/blob/master/_reposense/config.json)) and **commit it** (reason: RepoSense can see committed code only):"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "```json {.no-line-numbers}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "  \"formats\": [\"html\", \"css\"],"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "  \"ignoreCommitList\": [\"90018e49f129ce7e0abdc8b18e91c9813588c601\", \"67890def\"],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "  \"ignoreAuthorList\": [\"charlie\"],"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  ["
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"alice\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "      \"emails\": [\"alice@example.com\", \"alicet@example.com\"],"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"Alice T.\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"AT\", \"A\"],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \"ignoreGlobList\": [\"**.css\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"bob\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Note: all fields are optional unless specified otherwise."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "**Fields to provide _repository-level_ info**:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreGlobList`: Folders/files to ignore, specified using the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* `formats`: File formats to analyze. Default: all file formats"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreCommitList`: The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreAuthorList`: The list of authors to ignore during analysis. Authors specified in `authors` field or `author-config.csv` will be also be omitted if they are in this list. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "**Fields to provide _author-level_ info**:\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Note: `authors` field should contain _all_ authors that should be captured in the analysis."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* `githubId`: GitHub username of the author. :exclamation: Mandatory field."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `emails`: Associated GitHub emails of the author. This can be found in your [GitHub settings](https://github.com/settings/emails)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `displayName`: Name to display on the report for this author."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* `authorNames`: Git Author Name(s) used in the author\u0027s commits. By default RepoSense assumes an author would use her GitHub username as the Git username too. The meaning of _Git Author Name_ is explained in [_A Note About Git Author Name_](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreGlobList`: _Additional_ (i.e. on top of the repo-level `ignoreGlobList`) folders/files to ignore for a specific author . In the example above, the actual `ignoreGlobList` for `alice` would be `[\"about-us/**\", \"**index.html\", \"**.css\"]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "To verify your standalone configuration is as intended, add the `_reposense/config.json` to your local copy of repo and run RepoSense against it as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Format : `java -jar RepoSense.jar --repo LOCAL_REPO_LOCATION` \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* Example: `java -jar RepoSense.jar --repo c:/myRepose/foo/bar`\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "After that, view the report to see if the configuration you specified in the config file is being reflected correctly in the report."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "##### **A Note About Git Author Name**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`Git Author Name` refers to the customizable author\u0027s display name set in the local `.gitconfig` file. For example, in the Git Log\u0027s display:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "commit cd7f610e0becbdf331d5231887d8010a689f87c7"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ConfiguredAuthorName \u003cauthor@example.com\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Date:   Fri Feb 9 19:14:41 2018 +0800"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    Make some changes to show my new author\u0027s name"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "commit e3f699fd4ef128eebce98d5b4e5b3bb06a512f49"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ActualGitHubId \u003cauthor@example.com\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Date:   Fri Feb 9 19:13:13 2018 +0800"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Initial commit"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " ..."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`ActualGitHubId` and `ConfiguredAuthorName` are both `Git Author Name` of the same author.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "To find the author name that you are currently using for your current git repository, run the following command within your git repository:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "To set the author name to the value you want (e.g., to set it to your GitHub username) for your current git repository, you can use the following command ([more info](https://www.git-tower.com/learn/git/faq/change-author-name-email)):"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \"YOUR_AUTHOR_NAME”"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "To set the author name to use a default value you want for future git repositories, you can use the following command:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "git config --global user.name \"YOUR_AUTHOR_NAME”"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "RepoSense expects the Git Author Name to be the same as author\u0027s GitHub username. If an author\u0027s `Git Author Name` is different from her `GitHub ID`, the `Git Author Name` needs to be specified in the standalone config file. If the author has more than one `Git Author Name`, multiple values can be entered too."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Note: Symbols such as `\"`, `!`, `/` etc. in your author name will be omitted, which may reduce the accuracy of the analysis if 2 names in the repository are approximately similar."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "### Provide Data Using `@@author` Tags"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to override the code authorships deduced by RepoSense (which is based on Git blame/log data), you can use `@@author` tags to specify certain code segments should be credited to a certain author irrespective of git history. An example scenario where this is useful is when a method was originally written by one author but a second author did some minor refactoring to it; in this case RepoSense might attribute the code to the second author while you may want to attribute the code to the first author."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "There are 2 types of `@@author` tags:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "- Start Tags (format: `@@author AUTHOR_GITHUB_ID`): A start tag indicates the start of a code segment written by the author identified by the `AUTHOR_GITHUB_ID`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "- End Tags (format: `@@author`): Optional. An end tag indicates the end of a code segment written by the author identified by the `AUTHOR_GITHUB_ID` of the start tag."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Note: If an end tag is not provided, the code till the next start tag (or the end of the file) will be attributed to the author specified in the start tag above. Use only when necessary to minimize polluting your code with these extra tags."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The `@@author` tags should be enclosed within a comment, using the comment syntax of the file in concern. Below are some examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "![author tags](images/add-author-tags.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Special thanks to [Collate](https://github.com/se-edu/collate) for providing the inspiration for this functionality."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Note: Remember to **commit** the files after the changes. (reason: RepoSense can see committed code only)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "## Customizing the Analysis"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The analysis can be customized using additional command line parameters or using config files. The two approaches are explained in the sections below."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### Customize Using Command Line Parameters"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, `java -jar RepoSense.jar` takes the following parameter:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--repo, -r REPO_LOCATION`**: The URL or the disk location of the git repositories to analyze (`-r` as alias).\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  Example using URL: `--repo https://github.com/reposense/RepoSense.git`\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "  Example using disk location: `--repo C:\\Users\\user\\Desktop\\GitHub\\RepoSense`\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "  Example using alias: `-r https://github.com/reposense/RepoSense.git`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, there are some _optional_ extra parameters you can use to customize the analysis further:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--output, -o OUTPUT_DIRECTORY`**: Indicates where to save the report generated (`-o` as alias). Default: current directory.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "  Example: `--output ./foo` or `-o ./foo` (in this case, the report will be in the `./foo/reposense-report` folder)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--since, -s START_DATE`**: The start date of analysis (`-s` as alias). Format: `DD/MM/YYYY`\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--since 21/10/2017` or `-s 21/10/2017` \u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e Note: -"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e - If the start date is not specified, only commits made one month before the end date (if specified) or the date of generating the report, will be captured and analyzed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e - If `d1` is specified as the start date (`--since d1` or `-s d1`), then the earliest commit date of all repositories will be taken as the since date."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--until, -u END_DATE`**: The end date of analysis (`-u` as alias). The analysis includes the end date. Format: `DD/MM/YYYY`\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--until 21/10/2017` or `-u 21/10/2017` \u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e Note: If the end date is not specified, the date of generating the report will be taken as the end date."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--formats, -f LIST_OF_FORMATS`**: A space-separated list of file extensions that should be included in the analysis (`-f` as alias). Default: all file formats\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--formats css fxml gradle` or `-f css fxml gradle`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--ignore-standalone-config, -i`**: A flag to ignore the standalone config file in the repo (`-i` as alias). This flag will overwrite the `Ignore standalone config` field in the csv config file. Default: the standalone config file is not ignored.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--ignore-standalone-config` or `-i`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--view, -v [REPORT_FOLDER]`**: A flag to launch the report automatically after processing (`-v` as alias). Note that if the `REPORT_FOLDER` argument is given, no analysis will be performed and the report specified by the argument will be opened.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Example:`--view` or `-v`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--timezone, -t ZONE_ID`**: Indicates the timezone which will be used for the generated report. One kind of valid timezones is relative to UTC. E.g. `UTC`, `UTC+08`, `UTC-1030`. Format: `ZONE_ID[±hh[mm]]`. Default: system\u0027s default timezone.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--timezone UTC+08` or `-t UTC-1030`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s an example of a command using all parameters:\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`java -jar RepoSense.jar --repo https://github.com/reposense/RepoSense.git --output ./report_folder --since 31/1/2017 --until 31/12/2018 --formats java adoc xml --view --ignore-standalone-config --timezone UTC+08`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s an example of a command using all alias of parameters:\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`java -jar RepoSense.jar -r https://github.com/reposense/RepoSense.git -o ./report_folder -s 31/1/2017 -u 31/12/2018 -f java adoc xml -v -i`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Also, there are two _information_ parameters you can use to know more about RepoSense:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--help, -h`**: Show help message."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--version, -V`**: Show the version of RepoSense."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "### Customize Using csv Config Files"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Another, more powerful, way to customize the analysis is by using dedicated config files. In this case you need to use the `--config` parameter instead of the `--repo` parameter when running RepoSense, as follows:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* **`--config, -c CONFIG_DIRECTORY`**: The directory in which you have the config files (`-c` as alias).\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`java -jar RepoSense.jar --config  ./config` or `java -jar RepoSense.jar -c  ./config`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "The directory used with the `--config` parameter should contain a `repo-config.csv` file and, optionally, an `author-config.csv` file or `group-config.csv` file or both, all of which are described in the sections below."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#### `repo-config.csv`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "`repo-config.csv` file contains repo-level config data as follows:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* First row: column headings, ignored by RepoSense"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* Second row onwards: each row represents a repository\u0027s configuration"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Repository\u0027s Location|Branch|File formats|Ignore Glob List|Ignore standalone config|Ignore Commits List|Ignore Authors List"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "---------------------|------|------------|----------------|------------------------|-------------------|-------------------"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`https://github.com/foo/bar.git`|`master`|`override:java;css`|`test/**`|`yes`|`2fb6b9b2dd9fa40bf0f9815da2cb0ae8731436c7;c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151`|`Alice`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "When using standalone config (if it is not ignored), it is possible to override specific values from the standalone config by prepending the entered value with `override:`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Column Name | Explanation"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Repository\u0027s Location | The `GitHub URL` or `Disk Path` to the git repository e.g., `https://github.com/foo/bar.git` or `C:\\Users\\user\\Desktop\\GitHub\\foo\\bar`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Branch | The branch to analyze in the target repository e.g., `master`. Default: the default branch of the repo"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] File formats\u003csup\u003e*+\u003c/sup\u003e | The file extensions to analyze. Default: all file formats"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Glob List\u003csup\u003e*+\u003c/sup\u003e | The list of file path globs to ignore during analysis for each author. e.g., `test/**;temp/**`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore standalone config | To ignore the standalone config file (if any) in target repository, enter **`yes`**. If the cell is empty, the standalone config file in the repo (if any) will take precedence over configurations provided in the csv files."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Commit List\u003csup\u003e*+\u003c/sup\u003e | The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Authors List\u003csup\u003e*+\u003c/sup\u003e | The list of authors to ignore during analysis. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e+ **Overrideable column**: prepend with `override:` to use entered value(s) instead of value(s) from standalone config.\u003c/sup\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#### `author-config.csv`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can use a `author-config.csv` (which should be in the same directory as `repo-config.csv` file) to provide more details about the authors to analyze ([example](author-config.csv)). It should contain the following columns:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Column Name | Explanation"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Branch | The branch to analyze for this author e.g., `master`. Default: the author will be bound to all the repos in `repo-config.csv` that has the same repo\u0027s location, irregardless of branch"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Author\u0027s GitHub ID | GitHub username of the target author e.g., `JohnDoe`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Author\u0027s Emails\u003csup\u003e*\u003c/sup\u003e | Associated Github emails of the author. This can be found in your [GitHub settings](https://github.com/settings/emails)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Author\u0027s Display Name | The name to display for the author. Default: author\u0027s GitHub username."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Author\u0027s Git Author Name\u003csup\u003e*\u003c/sup\u003e | The meaning of _Git Author Name_ is explained in [_A Note About Git Author Name_](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Glob List\u003csup\u003e*\u003c/sup\u003e | Files to ignore for this author, in addition to files ignored by the patterns specified in `repo-config.csv`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Note: the first row consists of config headings, which is ignored by RepoSense."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "If `author-config.csv` is not given and the repo has not provide author details in a standalone config file, all the authors of the repositories within the date range specified (if any) will be analyzed."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#### `group-config.csv`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can provide a `group-config.csv`(which should be in the same directory as `repo-config.csv` file) to provide details on any custom groupings for files in specified repositories ([example](group-config.csv)). It should contain the following columns:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Column Name | Explanation"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Group Name | Name of the group e.g.,`test`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Globs * | The list of file path globs to include for specified group. e.g.,`**/test/*;**.java`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Note that a file in a given repository should only be tagged to one group. \u003cbr\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.: `example.java` in `example-repo` can either be in `test` group or in `code` group, but not in both `test` and `code` group. If multiple groups are specified for a given file, the latter group (i.e.: `code` group) is set for the file."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Note: the first row consists of config headings, which is ignored by RepoSense."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "## Analyzing Multiple Repos"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "This section assumes that you have read the earlier sections of the user guide."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "The simplest way to analyze multiple repos in one go is to use the `--repos` parameter in place of the `--repo` parameter when running RepoSense."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* Format : `java -jar RepoSense.jar --repos REPO_LIST` \u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* Example: `java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar` analyzes the two specified repos (one remote, one local) and generates one report containing details of both."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can use csv config files to further customize the analysis:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* `repo-config.csv`: Add a new row, to analyze a new repo ([example](repo-config.csv))."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* `author-config.csv`: Add a new row, to specific the authors to analyze for the target repo(s) ([example](author-config.csv))."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* `group-config.csv`: Add a new row, to customize the grouping of files for the target repo(s) ([example](group-config.csv))."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "## Quickstart RepoSense with Netlify"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "To enjoy a real time RepoSense report on your target repositories, all you need is Netlify and a fork of this repo. Follow [this guide]({{baseUrl}}/UsingNetlifyGuide.html) to get started."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "## Automating publishing of the report to GitHub Pages"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Follow this [guide]({{baseUrl}}/PublishingGuide.html) to automate publishing of your report to GitHub Pages."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: Does RepoSense work on private repositories?"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** *RepoSense* will first clone the git repository to be analyzed, thus if you do not have access to the repository, we are unable to run the analysis.\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "To enable *RepoSense* to work on private repositories, ensure that you have enabled access to your private repository in your git terminal first, before running the analysis."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: How does formats work?"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** **Formats** are the [file extensions](https://techterms.com/definition/fileextension), which is the **suffix** at the end of a filename that indicates what type of file it is.\u003cbr\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The formats/file extensions to be analyzed by *RepoSense* can be specified through the [standalone config file](#provide-data-using-a-json-config-file), [repo-config file](#repo-configcsv) and [command line](#customize-using-command-line-parameters)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: How does ignore glob list work?"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** [Glob](https://en.wikipedia.org/wiki/Glob_(programming)) is the pattern to specify a set of filenames with [wildcard characters](https://www.computerhope.com/jargon/w/wildcard.htm). **Ignore glob list** is the list of patterns to specify all the files in the repository which should be ignored from analysis.\u003cbr\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "The ignore glob list can be specified through the [standalone config file](#provide-data-using-a-json-config-file), [repo-config file](#repo-config-csv) and [author-config file](#author-config-csv)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: My commit contributions does not appear in the ramp chart (despite appearing in the contribution bar and code panel)?"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** This is probably a case of giving an incorrect author name alias (or github ID) in your [author-config file](#author-config-csv).\u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Please refer to [A Note About Git Author Name](#a-note-about-git-author-name) above on how to find out the correct author name you are using, and how to change it.\u003cbr\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Also ensure that you have added all author name aliases that you may be using (if you are using multiple computers or have previously changed your author name).\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you may choose to configure RepoSense to track using your GitHub email instead in your [standalone config file](#provide-data-using-a-json-config-file) or [author-config file](#author-config-csv), which is more accurate compared to author name aliases. The associated GitHub email you are using can be found in your [GitHub settings](https://github.com/settings/emails)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: My contribution bar and code panel is empty (despite having lots of commit contributions in the ramp chart)?"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** The contribution bar and code panel records the lines you have authored to the **latest** commit of the repository and branch you are analyzing. As such, it is possible that while you have lots of commit contributions, your final authorship contribution is low if you have only deleted lines, someone else have overwritten your code and taken authorship for it (currently, *RepoSense* does not have functionality to track overwritten lines).\u003cbr\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "It is also possible that another user has overriden the authorship of your lines using the [@@author tags](#provide-data-using-author-tags)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: I have added/edited the standalone config file in my local repository, but RepoSense is not using it when running the analysis?"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** Ensure that you have committed the changes to your standalone config file first before running the analysis, as *RepoSense* is unable to detect uncommitted changes to your local repository."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: I am able to run RepoSense on my repository on a Linux/Mac OS, but it fails on a Windows OS?"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** It is possible you may have some file names with [special characters](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions) in them, which is disallowed in Windows OS. As such, *RepoSense* is unable to fully clone your repository, thus failing the analysis."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "#### Q: Why are some files not captured by RepoSense?"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "**A:** The files may be [binary files](https://en.wikipedia.org/wiki/Binary_file). RepoSense does not analyze binary files. Common binary files include images (`.jpg`, `.png`), applications (`.exe`), zip files (`.zip`, `.rar`) and certain document types (`.docx`, `.pptx`)."
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 5,
      "jamessspanggg": 19,
      "-": 393,
      "0blivious": 8
    }
  },
  {
    "path": "docs/UsingCheckstyle.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Using Checkstyle-IDEA\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "2. Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "3. Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "4. Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility. \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`. \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cimg src\u003d\"images/checkstyle-idea-scan-scope.png\" width\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "5. Click the plus sign under `Configuration File`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "6. Enter an arbitrary description e.g. `reposense`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "7. Select `Use a local Checkstyle file`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "8. Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "9. Click `Next` \u003e `Finish`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "10. Mark `Active` for the newly imported check configuration. \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cimg src\u003d\"images/checkstyle-idea-configuration.png\" width\u003d\"700\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "11. Click `OK`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 8,
      "-": 32
    }
  },
  {
    "path": "docs/UsingNetlifyGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Using Netlify Guide\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "# Using RepoSense with Netlify"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Netlify\u0027s continuous web deployment platform enables you to deploy RepoSense online, analyzes your target repository(s) and generates the git contribution report in real time for free. The deployment can be synchronized to the updates on your target repository(s) and you can perform everything through the browser without downloading any files."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Fork the RepoSense repository using this [link](https://github.com/repoSense/RepoSense/fork)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Follow this [guide](https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/) to set up Netlify in your forked repository. You will need to use the following in [Step 5](https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/#step-5-configure-your-settings):"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   **Build command**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   ``` {.no-line-numbers}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ./gradlew run -Dargs\u003d\"--repos YOUR_TARGET_REPO\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   **Publish directory**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   ``` {.no-line-numbers}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ./reposense-report"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "These steps will allow you to take the first look at your report. To enable continuous deployment of the report, refer below to [Continuous deployment using Netlify](#continuous-deployment-using-netlify) for further instructions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Continuous deployment using Netlify"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Click on **Settings** in the top, choose **Build \u0026 deploy** from the left panel and scroll to **Build hooks**."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ![Build hooks](images/using-netlify-build-hooks.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Click **Add build hook**, give your webhook a name, and choose the `master` branch to build. A Netlify URL will be generated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Go to your target repository (the repository you want to analyze) and click on **Settings**."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Select **Webhooks** on left panel and click on **Add webhook**."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ![Add webhook](images/using-netlify-add-hook.png)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Copy the Netlify URL and paste it in the URL form field."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   ![Webhook url](images/using-netlify-url.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "   \u003e Note: Although the build url is not that secretive, it should be kept safe to prevent any misuse."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Select **application.json** as content type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Select **Let me select individual events** and based on your requirements check the checkboxes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Leave the **Active** checkbox checked."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "1. Click on **Add webhook** to save the webhook and add it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003e This should cause Netlify to deploy your site each and every time based on your checked checkboxes. Please make sure your forked repository is **up-to-date** with upstream to enjoy the latest features."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## If you wish to customize using `config files`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Using `config files` lets you generate a more customised report. Please refer to [how to customize using csv config files](UserGuide.md#customize-using-csv-config-files) for a more detailed explanation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "In **Step 5** for **Build Command** use:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "./gradlew run -Dargs\u003d\"--config ./config/\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Alternatively, if you want to customise the location of the config files, use:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "``` {.no-line-numbers}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "./gradlew run -Dargs\u003d\"--config YOUR_CONFIG_FILE_LOCATION\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 44,
      "jamessspanggg": 15
    }
  },
  {
    "path": "docs/_markbind/footers/footer.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfooter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cdiv class\u003d\"text-center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003csmall\u003e[Generated by {{MarkBind}}]\u003c/small\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/footer\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 6
    }
  },
  {
    "path": "docs/_markbind/headers/header.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cheader\u003e\u003cnavbar type\u003d\"dark\" placement\u003d\"top\" type\u003d\"inverse\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003e\u003cimg width\u003d\"30px\" src\u003d\"{{baseUrl}}/favicon.ico\"\u003e\u003c/img\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/index.html\" class\u003d\"nav-link\"\u003eHOME\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUSER GUIDE\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDEVELOPER GUIDE\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/about.html\" class\u003d\"nav-link\"\u003eABOUT\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003ca href\u003d\"https://github.com/RepoSense/reposense\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c/li\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cli slot\u003d\"right\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003cform class\u003d\"navbar-form\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/form\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/navbar\u003e\u003c/header\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 15
    }
  },
  {
    "path": "docs/_markbind/navigation/mainNav.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cnavigation\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* \u003cspan class\u003d\"lead\"\u003e**[Home]({{baseUrl}}/index.html)**\u003c/span\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* \u003cspan class\u003d\"lead\"\u003e**User Guide**\u003c/span\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Getting Started]({{baseUrl}}/UserGuide.html#getting-started)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Interpreting the Report]({{baseUrl}}/UserGuide.html#interpreting-the-report)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Configuring a Repo to Provide Additional Data to RepoSense]({{baseUrl}}/UserGuide.html#configuring-a-repo-to-provide-additional-data-to-reposense)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Customizing the Analysis]({{baseUrl}}/UserGuide.html#customizing-the-analysis)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Analyzing Multiple Repos]({{baseUrl}}/UserGuide.html#analyzing-multiple-repos)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Quickstart RepoSense with Netlify]({{baseUrl}}/UserGuide.html#quickstart-reposense-with-netlify)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Automate publishing of the report to GitHub Pages]({{baseUrl}}/UserGuide.html#automating-publishing-of-the-report-to-github-pages)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [FAQ]({{baseUrl}}/UserGuide.html#faq)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* \u003cspan class\u003d\"lead\"\u003e**Developer Guide**\u003c/span\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Setting up]({{baseUrl}}/DeveloperGuide.html#setting-up)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Documentation]({{baseUrl}}/DeveloperGuide.html#documentation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Architecture]({{baseUrl}}/DeveloperGuide.html#architecture)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [HTML Report]({{baseUrl}}/DeveloperGuide.html#html-report)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* \u003cspan class\u003d\"lead\"\u003e**About**\u003c/span\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Current Team]({{baseUrl}}/about.html#current-team)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    * [Past Members]({{baseUrl}}/about.html#past-members)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/navigation\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 25
    }
  },
  {
    "path": "docs/_markbind/variables.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"jsonVariableExample\": \"Your variables can be defined here as well\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 3
    }
  },
  {
    "path": "docs/_markbind/variables.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cvariable name\u003d\"example\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "To inject this HTML segment in your markbind files, use {{ example }} where you want to place it."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "More generally, surround the segment\u0027s id with double curly braces."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/variable\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cvariable from\u003d\"variables.json\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 6
    }
  },
  {
    "path": "docs/about.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"About Us\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  pageNav: 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# RepoSense Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg/)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Current Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "### [Damith C. Rajapakse](http://www.comp.nus.edu.sg/~damithch)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://avatars.githubusercontent.com/u/1673303?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### [Peh Xian Bin, Eugene](https://github.com/eugenepeh)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://avatars.githubusercontent.com/u/19277206?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Project Lead [2018 May - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "### [Teng Yong Hao](https://github.com/yong24s)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/2003406?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Mentor [2018 Dec - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "### [Wang Chao](https://github.com/fzdy1914)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/35621726?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Committer [2019 May - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 Dec - 2019 May]\u003cbr/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### [James Pang Mun Wai](https://github.com/jamessspanggg)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/32864116?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Contributor [2019 May - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Lee Jin Yao](https://github.com/jylee-git)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/35756209?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "**Role**: Contributor [2019 May - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Liu Yiwen](https://github.com/0blivious)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2019 August - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Tejas Bhuwania](https://github.com/Tejas2805)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/35946746?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2019 August - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Anubhav](https://github.com/anubh-v)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2019 September - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Ang Ze Yu](https://github.com/ang-zeyu)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2020 January - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Chong Chee Yuan](https://github.com/ccyccyccy)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2020 January - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Ni Tianzhen](https://github.com/niqiukun)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2020 January - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Yash Chowdhary](https://github.com/yash-chowdhary)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/21968718?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2020 January - ]\u003cbr/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "## Past Members"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "### [Ma Tanghao](https://github.com/harryggg)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Main developer for the initial version [2017 May - 2018 May]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Ong Shu Peng](https://github.com/ongspxm)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/1430854?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Area Lead for UI [2018 Dec - 2019 May]\u003cbr/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Tan Jun An](https://github.com/yamidark)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/18352498?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Area Lead for Code Quality [2018 Aug - 2019 April]\u003cbr/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "Committer [2018 May - 2018 Aug]\u003cbr/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "### [Aditya Agarwal](https://github.com/adityaa1998)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 May - 2018 Aug]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### [Apoorva Ullas](https://github.com/apoorva17)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 Aug - 2019 May]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "### [Chelsey Ong Hee](https://github.com/chelseyong)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 Dec - 2019 May]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### [Gilbert Emerson](https://github.com/emer7)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 Dec - 2019 May]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### [Teo Ming Yi](https://github.com/myteo)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Contributor [2018 Dec - 2019 May]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "---"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "### [Jin Minjia](https://github.com/bluein-green)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "**Role**: Contributor [2019 May - 2019 Aug]\u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 56,
      "jamessspanggg": 8,
      "-": 74
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  title: \"Home\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  header: header.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "# RepoSense"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/08a3527378464ed4a5ad62e27f590d6a)](https://www.codacy.com/app/reposense/RepoSense?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dreposense/RepoSense\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![codecov.io](https://codecov.io/gh/reposense/RepoSense/branch/master/graphs/badge.svg?branch\u003dmaster)](http://codecov.io/github/reposense/RepoSense?branch\u003dmaster)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "[![Netlify Status](https://api.netlify.com/api/v1/badges/260983b3-589e-4619-a2e8-0bfb7a2b4422/deploy-status)](https://app.netlify.com/sites/reposense/deploys)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "RepoSense is a contribution analysis tool for Git repositories. It is particularly useful for those who want a chronological visualisation of the code contributions and commits made to a group of repositories. Educators can use RepoSense to track the work done in class projects, while team leads may use it to oversee their project teams."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "RepoSense generates a static HTML report that includes contribution information for each author in each target repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "The features of the report include:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Visualization for contribution frequency"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Visualization for contribution amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Code review panel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Comparison of contribution between authors"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* Filtering and sorting of authors"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "Here is a look at some of these features:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "\u003ctabs\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003ctab header\u003d\"Visualisation of contributions\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  ![Overview](images/rampchart.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003c/tab\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003ctab header\u003d\"Collation of all contributed code\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  The report\u0027s Code Panel captures all the code written by each author."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003cpic src\u003d\"images/code-panel.png\" width\u003d\"450\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003c/tab\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003ctab header\u003d\"Collation of all commits\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  The report\u0027s Commit Panel captures all the commits made by each author."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  ![Commit Panel](images/opening-commits-panel.gif)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u003c/tab\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "\u003c/tabs\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Documentations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* **User Guide** [[**Current Build**]](https://github.com/reposense/RepoSense/blob/master/docs/UserGuide.md) [[**Latest Release**]](https://github.com/reposense/RepoSense/blob/release/docs/UserGuide.md)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "* [**Developer Guide**]({{baseUrl}}/DeveloperGuide.html)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "RepoSense is a project based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg/), and is funded by a grant from [NUS Center for Development of Teaching and Learning](http://www.cdtl.nus.edu.sg/)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "Our project team and the list of contributors are [here]({{baseUrl}}/about.html)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Contributing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "We welcome pull requests. Please read the [contribution guidelines]({{baseUrl}}/Process.html#how-to-contribute-to-the-reposense-repository) before starting work on one."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "The web previews of RepoSense is powered by Netlify and Surge."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca href\u003d\"https://www.netlify.com\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cimg src\u003d\"https://www.netlify.com/img/global/badges/netlify-color-bg.svg\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003ca href\u003d\"https://surge.sh\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cimg width\u003d\"55px\" src\u003d\"https://surge.sh/images/logos/svg/surge-logo.svg\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/a\u003e"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 23,
      "jamessspanggg": 40
    }
  },
  {
    "path": "docs/site.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \"baseUrl\": \"\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \"titlePrefix\": \"RepoSense\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \"ignore\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"_markbind/layouts/*\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"_markbind/logs/*\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"_site/*\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"site.json\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"*.md\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"*.mbd\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"*.mbdf\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"*.njk\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \".git/*\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \"pages\": ["
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \"src\": \"index.md\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \"glob\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \"**/index.md\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \"**/*.+(md|mbd)\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \"glob\": \"**/*.+(md|mbd)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \"layout\": \"default\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \"deploy\": {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"message\": \"Site Update.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 33
    }
  },
  {
    "path": "frontend/cypress/tests/chartView/chartView_contributionBar.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "describe(\u0027contribution bar\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  it(\u0027same length when breakdown selected\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    let expectedWidthSum \u003d 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027.summary-chart__contrib--bar\u0027).then((ele) \u003d\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      let i;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      for (i \u003d 0; i \u003c ele.length; i +\u003d 1) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedWidthSum +\u003d parseFloat(ele[i].style.width.split(\u0027%\u0027)[0]);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027breakdown by file type\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        .check();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    let actualWidthSum \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027.summary-chart__contrib--bar\u0027).then((ele) \u003d\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      let i;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      for (i \u003d 0; i \u003c ele.length; i +\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        actualWidthSum +\u003d parseFloat(ele[i].style.width.split(\u0027%\u0027)[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    expect(actualWidthSum.toFixed(3)).to.be.equal(expectedWidthSum.toFixed(3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  it(\u0027no contribution bar when breakdown selected and all file types unchecked\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027breakdown by file type\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .check();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027All\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .uncheck();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027.summary-chart__contrib--bar\u0027).should(\u0027not.visible\u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  it(\u0027display selected file types only\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    let expectedWidthSum \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027breakdown by file type\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .check();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027.summary-chart__contrib--bar\u0027).then((ele) \u003d\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      expectedWidthSum +\u003d parseFloat(ele[0].style.width.split(\u0027%\u0027)[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027All\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .uncheck();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027#summary-wrapper label\u0027).contains(\u0027gradle\u0027).siblings().filter(\u0027input\u0027)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .check();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    let actualWidthSum \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    cy.get(\u0027.summary-chart__contrib--bar\u0027).then((ele) \u003d\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      for (i \u003d 0; i \u003c ele.length; i +\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        actualWidthSum +\u003d parseFloat(ele[i].style.width.split(\u0027%\u0027)[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    expect(actualWidthSum.toFixed(3)).to.be.equal(expectedWidthSum.toFixed(3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "0blivious": 38
    }
  },
  {
    "path": "frontend/cypress/tests/chartView/chartView_filterBreakdown.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "describe(\u0027filter breakdown\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027check breakdown by file type should show file types\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // should show file type checkboxes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary div.fileTypes\u0027)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // should show file type legends"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts div.summary-charts__fileType--breakdown\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027uncheck all file types should show no file types\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // uncheck all file types"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary div.fileTypes input:visible[id\u003d\"all\"]\u0027)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .uncheck()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.checked\u0027);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // should not show file type legends"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts div.summary-charts__fileType--breakdown\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.visible\u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027uncheck file type should uncheck all option and not show legend\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // uncheck gradle file type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary div.fileTypes input[id\u003d\"gradle\"]\u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .uncheck()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.checked\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // should not show gradle file type legend"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts \u003e div \u003e div.summary-charts__fileType--breakdown span\u0027)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.contain.text\u0027, \u0027gradle\u0027);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // all option should be unchecked"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary div.fileTypes input[id\u003d\"all\"]\u0027)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.checked\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 58
    }
  },
  {
    "path": "frontend/cypress/tests/chartView/chartView_mergeGroup.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "describe(\u0027merge group\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027check and uncheck merge group when group by repos\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027groupByRepos\u0027);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // after checking merge group, only one merged repo group will show"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts\u0027).find(\u0027.summary-chart\u0027)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.length\u0027, 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .uncheck()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.checked\u0027);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // after un-checking merge group, all 5 summary charts will show"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts\u0027).find(\u0027.summary-chart\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.length\u0027, 5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027check and uncheck merge group when group by authors\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027groupByAuthors\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // after checking merge group, 5 merged author groups will show"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts\u0027).find(\u0027.summary-chart\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.length\u0027, 5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .uncheck()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027not.be.checked\u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // after un-checking merge group, all 5 summary charts will show"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary-charts\u0027).find(\u0027.summary-chart\u0027)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.length\u0027, 5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027merge group option should be disabled when group by none\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027groupByNone\u0027);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.disabled\u0027);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 67
    }
  },
  {
    "path": "frontend/cypress/tests/chartView/chartView_reload.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "describe(\u0027reload page\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027reload page should restore all controls\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // search"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .type(\u0027eugene\u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // group by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027groupByAuthors\u0027);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // sort groups by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027↓ contribution\u0027);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // sort within groups by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027↓ contribution\u0027);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // granularity"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.granularity \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .select(\u0027week\u0027);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // since date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .type(\u00272018-06-10\u0027);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // until date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .type(\u00272019-06-10\u0027);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // break down by file type"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.filter-breakdown \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // merge group"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.reload();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u0027eugene\u0027);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u0027groupByAuthors\u0027);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u0027totalCommits dsc\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u0027totalCommits dsc\u0027);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027div.mui-select.granularity \u003e select:visible\u0027)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u0027week\u0027);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u00272018-06-10\u0027);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027have.value\u0027, \u00272019-06-10\u0027);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.filter-breakdown \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 75
    }
  },
  {
    "path": "frontend/cypress/tests/chartView/chartView_zoomFeature.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "describe(\u0027zoom features in code view\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  const zoomKey \u003d Cypress.platform \u003d\u003d\u003d \u0027darwin\u0027 ? \u0027{meta}\u0027 : \u0027{ctrl}\u0027;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027click on view commits button\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027.icon-button.fa-list-ul\u0027)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#tab-zoom\u0027)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027zoom into ramp\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // clicking from the 10th px to the 50th px in the ramp"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click(10, 20)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click(50, 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#tab-zoom\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027zoom into ramp when merge group\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // clicking from the 10th px to the 50th px in the ramp"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click(10, 20)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click(50, 20);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#tab-zoom\u0027)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 47
    }
  },
  {
    "path": "frontend/cypress/tests/codeView/codeView.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "describe(\u0027code view\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  it(\u0027at first start shows tutorial message\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#tabs-wrapper\u0027)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#tab-empty \u003e .title\u0027).then(($ele) \u003d\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      const expected \u003d \u0027To view the code attributed to a specific author, click the    icon next to that author\\\u0027s name.To hide the code view, click the    icon on the left.\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      const message \u003d $ele.text();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      expect(expected).to.equal(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  it(\u0027can be closed\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#tabs-wrapper\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    cy.get(\u0027#app #tab-resize .tab-close\u0027)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        .click();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#tabs-wrapper\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        .should(\u0027not.exist\u0027);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  it(\u0027merge group and view code for entire repository\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait(); // ensure everything is loaded"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .check({ force: true })"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.checked\u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027.icon-button.fa-code\u0027)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .should(\u0027be.visible\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 19,
      "-": 27,
      "ang-zeyu": 1
    }
  },
  {
    "path": "frontend/cypress/tests/codeView/codeView_load_benchmark.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "describe(\u0027load code view benchmark\u0027, function() {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  const NUM_TRIALS \u003d 5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  const THRESHOLD_LOADING_TIME \u003d 8000;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  const THRESHOLD_LOADING_TIME_SECONDS \u003d THRESHOLD_LOADING_TIME / 1000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  const BUFFER_PERCENTAGE \u003d 0.1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  const BUFFER_SUGGESTED_TIME \u003d 3000;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  const ALLOWED_BUFFER_TIME \u003d BUFFER_PERCENTAGE * THRESHOLD_LOADING_TIME \u003e\u003d BUFFER_SUGGESTED_TIME"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                              ? BUFFER_PERCENTAGE * THRESHOLD_LOADING_TIME : BUFFER_SUGGESTED_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  const ALLOWED_BUFFER_TIME_SECONDS \u003d ALLOWED_BUFFER_TIME / 1000;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  const MAXIMUM_LOADING_TIME \u003d THRESHOLD_LOADING_TIME + ALLOWED_BUFFER_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  let isATrialWithinMaxTime \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  const timeTrial \u003d function(i) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      let startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      // ensure that icons are loaded"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      Cypress.wait();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      cy.get(\u0027#summary-wrapper .sort-within-group select\u0027)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        .select(\u0027totalCommits dsc\u0027);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      cy.get(\u0027.icon-button.fa-code\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .first()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        .click()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(() \u003d\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          startTime \u003d performance.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .should(\u0027be.visible\u0027)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .then(() \u003d\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          const endTime \u003d performance.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          const loadingTime \u003d endTime - startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          const loadingTimeSeconds \u003d loadingTime / 1000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          cy.log(`trial ${i+1} loading time: ${loadingTimeSeconds.toFixed(3)}s`);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          if (loadingTime \u003c\u003d MAXIMUM_LOADING_TIME) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            isATrialWithinMaxTime \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  for (let i \u003d 0; i \u003c NUM_TRIALS; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    it(`time taken to load code view (trial ${i+1})`, function() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      if (isATrialWithinMaxTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.skip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      timeTrial(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  it(`at least one trial is within ${THRESHOLD_LOADING_TIME_SECONDS}(+${ALLOWED_BUFFER_TIME_SECONDS})s`, function() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    assert.isTrue(isATrialWithinMaxTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "-": 60
    }
  },
  {
    "path": "frontend/cypress/tests/codeView/codeView_toolBar_searchBox.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "describe(\u0027search bar\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  it(\u0027non-existent author shows no result\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    cy.get(\u0027#app #tab-resize .tab-close\u0027).click();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper input[type\u003dtext]\u0027)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        .type(\u0027abcdef\u0027)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        .type(\u0027{enter}\u0027);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // Enter does not work. Related issue: https://github.com/cypress-io/cypress/issues/3405"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    // Let\u0027s manually submit form"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper form.summary-picker\u0027)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        .submit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper #summary-charts\u0027).then(($ele) \u003d\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      const content \u003d $ele.html();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      expect(content).to.be.empty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  it(\u0027unique author shows one result\u0027, () \u003d\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    cy.get(\u0027#app #tab-resize .tab-close\u0027).click();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper input[type\u003dtext]\u0027)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .type(\u0027Yong Hao TENG\u0027)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        .type(\u0027{enter}\u0027);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Enter does not work. Related issue: https://github.com/cypress-io/cypress/issues/3405"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Let\u0027s manually submit form"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper form.summary-picker\u0027)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .submit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    Cypress.wait();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    cy.get(\u0027#summary-wrapper #summary-charts\u0027).then(($ele) \u003d\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      const children \u003d $ele.children().length;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      expect(children).to.equal(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ang-zeyu": 2
    }
  },
  {
    "path": "frontend/src/index.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "html"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  head"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    title RepoSense Report"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"shortcut icon\", type\u003d\"image/x-icon\", href\u003d\"favicon.ico\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://fonts.googleapis.com/css?family\u003dTitillium+Web\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/normalize.css@8.0/normalize.min.css\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/muicss@0.9/dist/css/mui.min.css\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/highlight.js@9.14/styles/color-brewer.min.css\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/vue-loading-spinner@1.0/dist/vue-loading-spinner.css\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/panels.css\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/style.css\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_authorship.css\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_ramp.css\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_summary.css\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_zoom.css\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // indirect dependencies"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\", defer\u003dTrue)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/@fortawesome/vue-fontawesome@0.1.9/index.min.js\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/jszip@3.1/dist/jszip.min.js\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/seedrandom@3.0.5/seedrandom.min.js\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/vue-loading-spinner@1.0/dist/vue-loading-spinner.js\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/npm/vue@2.5/dist/vue.js\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(src\u003d\"https://unpkg.com/vuex@3.1.3/dist/vuex.js\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/highlight.min.js\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/asciidoc.min.js\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/gradle.min.js\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/plaintext.min.js\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/scss.min.js\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/yaml.min.js\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  body"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    #app"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      v-resizer("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-if\u003d\"userUpdated\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-bind:is-tab-active\u003d\"isTabActive\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-on:close-tab\u003d\"deactivateTab\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      )"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        #summary-wrapper(slot\u003d\"left\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          .summary-status(v-if\u003d\"loadedRepo\u003crepoLength\") Loading repos ... {{ loadedRepo }} / {{ repoLength }}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-summary.tab-padding("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            ref\u003d\"summary\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            v-bind:repos\u003d\"users\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            v-bind:error-messages\u003d\"errorMessages\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            v-on:get-dates\u003d\"receiveDates\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          )"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          .timestamp-footer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            span Generated by\u0026nbsp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            a("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              v-bind:href\u003d\"getRepoSenseHomeLink()\", target\u003d\"_blank\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              strong RepoSense"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            span \u0026nbsp;("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            a("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              v-bind:href\u003d\"getUserGuideVersionLink()\", target \u003d\"_blank\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              strong User Guide - {{ repoSenseVersion }}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            span ) on {{ creationDate }}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "          .report-generation-time(style\u003d\"display: none;\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            span {{ reportGenerationTime }}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        #tabs-wrapper(ref\u003d\"tabWrapper\", slot\u003d\"right\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          .tab-content.panel-padding"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .tab-panes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-authorship#tab-authorship.tab-pane("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                v-if\u003d\"tabType \u003d\u003d\u003d \u0027authorship\u0027\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:key\u003d\"generateKey(tabInfo.tabAuthorship)\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:info\u003d\"tabInfo.tabAuthorship\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-zoom#tab-zoom.tab-pane("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                v-else-if\u003d\"tabType \u003d\u003d\u003d \u0027zoom\u0027\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:key\u003d\"generateKey(tabInfo.tabZoom)\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                v-bind:info\u003d\"tabInfo.tabZoom\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "              #tab-empty.tab-pane(v-else)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .title"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                  span To view the code attributed to a specific author, click the \u0026nbsp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                  font-awesome-icon(icon\u003d\"code\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                  span \u0026nbsp; icon next to that author\u0027s name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                  br"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                  span To hide the code view, click the \u0026nbsp;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                  font-awesome-icon(icon\u003d\"caret-right\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                  span \u0026nbsp; icon on the left."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "      template(v-else)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        .empty Please upload a .zip file generated by RepoSense."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        form#file-upload(onsubmit\u003d\"return false;\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "          input(type\u003d\"file\", accept\u003d\".zip\", v-on:change\u003d\"updateReportZip\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "          .loader(v-if\u003d\"isLoading\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            circle-spinner"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            .loading Loading resources..."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    vuetemplate#v_resizer"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      include resizer.pug"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    vuetemplate#v_summary"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      include summary.pug"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vuetemplate#v_summary_charts"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      include summary_charts.pug"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    vuetemplate#v_ramp"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      include ramp.pug"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    vuetemplate#v_zoom"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      include tabs/zoom.pug"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    vuetemplate#v_segment"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      include tabs/segment.pug"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    vuetemplate#v_authorship"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      include tabs/authorship.pug"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/api.js\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(type\u003d\"module\", src\u003d\"static/js/store.js\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/safari_date.js\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    script(src\u003d\"static/js/v_resizer.js\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/v_ramp.js\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/v_zoom.js\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(src\u003d\"static/js/v_summary_charts.js\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/v_segment.js\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/v_summary.js\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    script(src\u003d\"static/js/v_authorship.js\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    script(type\u003d\"module\", src\u003d\"static/js/main.js\")"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "anubh-v": 2,
      "Tejas2805": 13,
      "jamessspanggg": 2,
      "-": 79,
      "0blivious": 15,
      "ang-zeyu": 11
    }
  },
  {
    "path": "frontend/src/ramp.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".ramp"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  template(v-if\u003d\"tframe \u003d\u003d\u003d \u0027commit\u0027\")"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    template(v-for\u003d\"(slice, j) in user.commits\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      a.ramp__slice("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        draggable\u003d\"false\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-on:click\u003d\"rampClick\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        v-for\u003d\"(commit, k) in slice.commitResults\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        v-if\u003d\"commit.insertions\u003e0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        v-bind:href\u003d\"getLink(user, commit)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        v-bind:title\u003d\"`[${slice.date}] ${commit.messageTitle}: ${commit.insertions} lines`\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        v-bind:class\u003d\"\u0027ramp__slice--color\u0027 + getSliceColor(slice.date)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        v-bind:style\u003d\"{\\"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "          zIndex: user.commits.length - j,\\"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "          borderLeftWidth: getWidth(commit) + \u0027em\u0027,\\"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "          right: ((getSlicePos(slice.date)\\"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + (getCommitPos(k, slice.commitResults.length))) * 100) + \u0027%\u0027\\"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "          }\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      )"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  template(v-else)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    a.ramp__slice("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      draggable\u003d\"false\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      v-on:click\u003d\"rampClick\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      v-for\u003d\"(slice, j) in user.commits\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      v-if\u003d\"slice.insertions \u003e 0\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      v-bind:title\u003d\"`${tframe \u003d\u003d\u003d \u0027day\u0027 \\"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        ? \u0027[\u0027 + slice.date + \u0027] Daily\u0027 \\"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        : \u0027[\u0027 + slice.date + \u0027 till \u0027 + slice.endDate + \u0027] Weekly\u0027} contribution: ${slice.insertions} lines`\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:href\u003d\"getLink(user, slice)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:class\u003d\"\u0027ramp__slice--color\u0027 + getSliceColor(slice.date)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:style\u003d\"[\\"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          {\\"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            zIndex: user.commits.length - j,\\"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            borderLeftWidth: getWidth(slice) + \u0027em\u0027,\\"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            right: (getSlicePos(tframe \u003d\u003d\u003d \u0027day\u0027 ? slice.date : slice.endDate) * 100) + \u0027%\u0027 \\"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          },\\"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          /* disallow clickable ramp slices when merging groups that are grouped by authors \\"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "             as unable to form a url that navigates to different repositories of the same author */\\"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          mergegroup \u0026\u0026 groupby \u003d\u003d\u003d \u0027groupByAuthors\u0027 ?\\"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            { cursor: \u0027auto\u0027, pointerEvents: \u0027none\u0027 }  :\\"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            { cursor: \u0027pointer\u0027, pointerEvents: \u0027auto\u0027 }\\"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      ]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 3,
      "-": 38,
      "ang-zeyu": 2
    }
  },
  {
    "path": "frontend/src/resizer.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "#app-wrapper("
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  v-bind:style\u003d\"appStyles\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  @mousemove\u003d\"mouseMove\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  @mouseup\u003d\"deregisterMouseMove\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  @mouseleave\u003d\"deregisterMouseMove\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  #tab-resize-guide(v-bind:style\u003d\"guideStyles\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .left-resize-container"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    slot(name\u003d\"left\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  #tab-resize("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @mousedown.left\u003d\"registerMouseMove\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    v-show\u003d\"isTabActive\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  )"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    .tab-close(v-on:click\u003d\"$emit(\u0027close-tab\u0027)\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      i.fas.fa-caret-right"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .right-resize-container("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    v-bind:style\u003d\"rightContainerStyles\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    v-if\u003d\"isTabActive\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    slot(name\u003d\"right\")"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 20
    }
  },
  {
    "path": "frontend/src/static/css/_colors.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "@import \u0027utils\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * MUI Colors module"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "// COLOR FUNCTION"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@function mui-color($mui-key1, $mui-key2: \u0027500\u0027) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  // check key1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  @if validate-map-key($mui-colors, $mui-key1) \u003d\u003d false {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  $mui-mapVal: map-get($mui-colors, $mui-key1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  // use second key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  @if type-of($mui-mapVal) \u003d\u003d \u0027map\u0027 {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // check key2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @if validate-map-key($mui-mapVal, $mui-key2) \u003d\u003d false {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      @return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    $mui-mapVal: map-get($mui-mapVal, $mui-key2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  @return $mui-mapVal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "// COLOR MAP"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "$mui-colors: ("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027red\u0027: ("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FFEBEE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #FFCDD2,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #EF9A9A,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #E57373,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #EF5350,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #F44336,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #E53935,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #D32F2F,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #C62828,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #B71C1C,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FF8A80,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FF5252,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #FF1744,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #D50000,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027pink\u0027: ("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FCE4EC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #F8BBD0,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #F48FB1,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #F06292,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #EC407A,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #E91E63,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #D81B60,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #C2185B,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #AD1457,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #880E4F,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FF80AB,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FF4081,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #F50057,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #C51162,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027purple\u0027: ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #F3E5F5,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #E1BEE7,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #CE93D8,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #BA68C8,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #AB47BC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #9C27B0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #8E24AA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #7B1FA2,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #6A1B9A,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #4A148C,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #EA80FC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #E040FB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #D500F9,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #AA00FF,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027deep-purple\u0027: ("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #EDE7F6,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #D1C4E9,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #B39DDB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #9575CD,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #7E57C2,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #673AB7,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #5E35B1,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #512DA8,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #4527A0,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #311B92,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #B388FF,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #7C4DFF,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #651FFF,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #6200EA,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027indigo\u0027: ("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E8EAF6,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #C5CAE9,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #9FA8DA,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #7986CB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #5C6BC0,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #3F51B5,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #3949AB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #303F9F,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #283593,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #1A237E,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #8C9EFF,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #536DFE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #3D5AFE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #304FFE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027blue\u0027: ("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E3F2FD,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #BBDEFB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #90CAF9,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #64B5F6,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #42A5F5,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #2196F3,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #1E88E5,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #1976D2,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #1565C0,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #0D47A1,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #82B1FF,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #448AFF,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #2979FF,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #2962FF,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027light-blue\u0027: ("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E1F5FE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #B3E5FC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #81D4FA,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #4FC3F7,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #29B6F6,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #03A9F4,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #039BE5,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #0288D1,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #0277BD,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #01579B,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #80D8FF,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #40C4FF,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #00B0FF,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #0091EA,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027cyan\u0027: ("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E0F7FA,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #B2EBF2,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #80DEEA,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #4DD0E1,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #26C6DA,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #00BCD4,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #00ACC1,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #0097A7,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #00838F,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #006064,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #84FFFF,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #18FFFF,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #00E5FF,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #00B8D4,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027teal\u0027: ("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E0F2F1,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #B2DFDB,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #80CBC4,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #4DB6AC,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #26A69A,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #009688,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #00897B,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #00796B,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #00695C,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #004D40,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #A7FFEB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #64FFDA,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #1DE9B6,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #00BFA5,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027green\u0027: ("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #E8F5E9,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #C8E6C9,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #A5D6A7,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #81C784,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #66BB6A,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #4CAF50,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #43A047,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #388E3C,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #2E7D32,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #1B5E20,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #B9F6CA,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #69F0AE,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #00E676,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #00C853,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027light-green\u0027: ("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #F1F8E9,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #DCEDC8,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #C5E1A5,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #AED581,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #9CCC65,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #8BC34A,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #7CB342,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #689F38,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #558B2F,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #33691E,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #CCFF90,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #B2FF59,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #76FF03,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #64DD17,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027lime\u0027: ("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #F9FBE7,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #F0F4C3,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #E6EE9C,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #DCE775,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #D4E157,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #CDDC39,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #C0CA33,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #AFB42B,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #9E9D24,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #827717,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #F4FF81,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #EEFF41,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #C6FF00,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #AEEA00,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027yellow\u0027: ("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FFFDE7,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #FFF9C4,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #FFF59D,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #FFF176,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #FFEE58,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #FFEB3B,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #FDD835,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #FBC02D,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #F9A825,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #F57F17,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FFFF8D,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FFFF00,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #FFEA00,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #FFD600,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027amber\u0027: ("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FFF8E1,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #FFECB3,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #FFE082,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #FFD54F,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #FFCA28,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #FFC107,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #FFB300,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #FFA000,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #FF8F00,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #FF6F00,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FFE57F,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FFD740,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #FFC400,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #FFAB00,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027orange\u0027: ("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FFF3E0,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #FFE0B2,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #FFCC80,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #FFB74D,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #FFA726,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #FF9800,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #FB8C00,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #F57C00,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #EF6C00,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #E65100,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FFD180,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FFAB40,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #FF9100,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #FF6D00,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027deep-orange\u0027: ("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FBE9E7,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #FFCCBC,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #FFAB91,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #FF8A65,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #FF7043,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #FF5722,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #F4511E,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #E64A19,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #D84315,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #BF360C,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A100\u0027: #FF9E80,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A200\u0027: #FF6E40,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A400\u0027: #FF3D00,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027A700\u0027: #DD2C00,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027brown\u0027: ("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #EFEBE9,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #D7CCC8,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #BCAAA4,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #A1887F,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #8D6E63,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #795548,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #6D4C41,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #5D4037,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #4E342E,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #3E2723,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0027github\u0027: ("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0027title-background\u0027: #FAFBFC,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0027border\u0027: #E1E4E8,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0027authored-code-background\u0027: #E6FFED,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027grey\u0027: ("
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #FAFAFA,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #F5F5F5,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #EEEEEE,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #E0E0E0,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #BDBDBD,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #9E9E9E,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #757575,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #616161,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #424242,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #212121,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027blue-grey\u0027: ("
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u002750\u0027: #ECEFF1,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027100\u0027: #CFD8DC,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027200\u0027: #B0BEC5,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027300\u0027: #90A4AE,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027400\u0027: #78909C,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027500\u0027: #607D8B,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027600\u0027: #546E7A,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027700\u0027: #455A64,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027800\u0027: #37474F,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027900\u0027: #263238,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027black\u0027: #000,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027white\u0027: #FFF,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027black-alpha-12\u0027: rgba(#000, .12),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027black-alpha-38\u0027: rgba(#000, .38),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027black-alpha-54\u0027: rgba(#000, .54),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027black-alpha-87\u0027: rgba(#000, .87),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027white-alpha-12\u0027: rgba(#FFF, .12),"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027white-alpha-30\u0027: rgba(#FFF, .30),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0027white-alpha-70\u0027: rgba(#FFF, .70),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ");"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 3,
      "Tejas2805": 5,
      "-": 333
    }
  },
  {
    "path": "frontend/src/static/css/_utils.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "@function validate-map-key($map, $key) {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  @if map-has-key($map, $key) \u003d\u003d false {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @error \u0027Key `#{$key}` not found\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @return false;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  @return true;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@mixin mini-font {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-size: .65rem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-weight: normal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@mixin medium-font {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-size: .875rem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-weight: normal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@mixin large-font {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-size: 1.5rem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-weight: bold;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 7,
      "Tejas2805": 15
    }
  },
  {
    "path": "frontend/src/static/css/_z-indices.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "@import \u0027utils\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "@function z-index($key) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  @if validate-map-key($z-indices, $key) \u003d\u003d false {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  $mapVal: map-get($z-indices, $key);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  @return $mapVal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "$z-indices: ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u0027app-wrapper\u0027: 50,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u0027center-divider\u0027: 100,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u0027header\u0027: 100,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  \u0027loader\u0027: 10,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ");"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 17
    }
  },
  {
    "path": "frontend/src/static/css/panels.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027z-indices\u0027;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".panel-padding {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  padding: 2rem 1.5rem 2rem 2.2rem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#app-wrapper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  height: 100vh;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  left: 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  position: absolute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  top: 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  width: 100%;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  z-index: z-index(\u0027app-wrapper\u0027);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  #tab-resize {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    background-color: mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: col-resize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    width: 13.250px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    z-index: z-index(\u0027center-divider\u0027);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .tab-close {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    top: calc(50vh - 3rem);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    z-index: z-index(\u0027center-divider\u0027);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    svg {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      background-color: mui-color(\u0027grey\u0027, \u0027300\u0027);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      color: mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding: 3rem .25rem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .left-resize-container {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    min-width: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .right-resize-container {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    flex: 0 0 50%;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    min-width: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  #tab-resize-guide {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    $tabs-width: 50%;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    background-color: mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: col-resize;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    position: fixed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    right: $tabs-width;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    width: 2px;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    z-index: z-index(\u0027center-divider\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  #tabs-wrapper {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    overflow-y: scroll;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    .tab-content {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      display: flex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      .tab-panes {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        text-align: left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        width: 100%;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".fileTypes {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  align-items: center;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  text-align: left;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  .checkboxes {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    label {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      align-items: center;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      border-radius: 5px;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      display: inline-flex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      margin: 0 5px 5px 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      padding: 0 5px;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    span {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      margin-left: .25rem;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".toolbar {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  cursor: pointer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  float: right;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u0026--multiline {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003e a {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      margin: 1px 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      text-align: end;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".sorting {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  align-items: center;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  margin-top: 1.0rem;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .mui-select {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    padding-right: 15px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  select {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @include medium-font;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @include medium-font;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    overflow-y: hidden;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026 \u003e label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-left: 10px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  span {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-left: .25rem;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".panel-title {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  @include large-font;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  display: inline;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".panel-heading {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .group-name {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @include large-font;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .author {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @include medium-font;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-left: .3rem;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .period {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @include medium-font;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-left: 2rem;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 11,
      "Tejas2805": 101,
      "0blivious": 19,
      "ang-zeyu": 32
    }
  },
  {
    "path": "frontend/src/static/css/style.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "@import \u0027z-indices\u0027;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/** global **/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  font-family: \u0027Titillium Web\u0027, sans-serif;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "vuetemplate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  display: none;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  cursor: pointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".wrapper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: center;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".content {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  max-width: 40rem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: left;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".empty {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  margin: 3rem 5rem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: center;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".loader {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  align-items: center;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  background: #FFF;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  flex-direction: column;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  height: 100%;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  justify-content: center;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  position: fixed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  top: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  width: 100%;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  z-index: z-index(\u0027loader\u0027);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  .loading {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 12px;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-padding {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: 2rem 1.5rem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".warn {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  color: mui-color(\u0027red\u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  .summary-charts__title--contribution {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    color: mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "/** navigation bar **/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "header {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  display: flex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  justify-content: center;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  position: relative;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "  z-index: z-index(\u0027header\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  .content {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: space-between;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  .repo,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  .logo {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "#file-upload {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: center;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "#app-wrapper {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  #summary-wrapper {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow-y: scroll;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    .timestamp-footer {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      color: mui-color(\u0027grey\u0027, \u0027700\u0027);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-bottom: 1em;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-left: 1em;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    .error-message-box {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      background-color: mui-color(\u0027red\u0027, \u0027100\u0027);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      border: .1rem solid mui-color(\u0027red\u0027, \u0027900\u0027);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      border-radius: .25rem;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      color: mui-color(\u0027red\u0027, \u0027900\u0027);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "      font-size: .75rem;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-bottom: .9rem;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: .9rem;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      text-align: left;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026__close-button {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        cursor: pointer;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        float: right;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.4rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        font-weight: bold;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: .625rem;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026:hover {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "          color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026__message {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: .1rem solid;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        font-weight: bolder;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-bottom: .5rem;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "      .icon {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-right: .4rem;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-top: .2rem;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        width: 1rem;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026__failed-repo {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .fa-exclamation {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          @include mini-font;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026--name {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "          font-weight: bolder;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "          padding-left: .2rem;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026--reason {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "          padding-left: 3rem;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 3,
      "Tejas2805": 4,
      "-": 140
    }
  },
  {
    "path": "frontend/src/static/css/v_authorship.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/* Authorship */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "#tab-authorship {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .file-content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    background-color: mui-color(\u0027github\u0027, \u0027title-background\u0027);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border: solid mui-color(\u0027github\u0027, \u0027border\u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border-radius: 0 0 4px 4px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border-width: 0 1px 1px 1px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .title {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .contribution {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .radio-button--search {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        float: left;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin: 1.75rem 2.0rem 0 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .radio-button--checkbox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        float: left;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        margin: 0 2.0rem 0 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        vertical-align: middle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      #search {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include medium-font;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-top: 1.25rem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding: .5rem 1.0rem .25rem 1.0rem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        width: 30%;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      #submit-button {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include medium-font;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        background-color: mui-color(\u0027blue\u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin: 1.0rem 0 0 .25rem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding: .5rem 1.0rem .25rem 1.0rem;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      .searchbox {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        margin-bottom: 1em;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .select {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        font-weight: bold;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .loc {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        font-weight: bolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .mui-checkbox--fileType {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        vertical-align: middle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .files {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    clear: left;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .file {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      pre {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        display: grid;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // GitHub\u0027s font family and font size"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        font-size: 12px;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-top: 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .hljs {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          // overwrite hljs library"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          display: inherit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          padding: 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          white-space: pre-wrap;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .title {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      background-color: mui-color(\u0027github\u0027, \u0027title-background\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border: 1px solid mui-color(\u0027github\u0027, \u0027border\u0027);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-radius: 4px 4px 0 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      font-size: medium;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-weight: bold;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin-top: 1rem;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding: .3em .5em;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .path {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        cursor: pointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        overflow-wrap: break-word;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .loc {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .button {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-left: .5rem;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        text-decoration: none;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .icons {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        margin-right: 8px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        vertical-align: middle;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .fileTypeLabel {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include medium-font;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        border-radius: 5px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        display: inline-block;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        font-weight: bold;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        padding: 0 5px;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .segment {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-left: .25rem solid mui-color(\u0027green\u0027);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .code {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        background-color: mui-color(\u0027github\u0027, \u0027authored-code-background\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding-left: 1rem;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .line-number {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        float: left;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // Not allowing user to select text"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        -webkit-touch-callout: none; /* iOS Safari */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        -webkit-user-select: none; /* Safari */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        -khtml-user-select: none; /* Konqueror HTML */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        -moz-user-select: none; /* Firefox */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        -ms-user-select: none; /* Internet Explorer/Edge */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        width: 2rem;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // overwrite all hljs colours"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        [class^\u003d\u0027hljs\u0027] {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .line-content {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding-left: 2rem;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        word-break: break-word;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026.untouched {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        $grey: mui-color(\u0027grey\u0027, \u0027400\u0027);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        border-left: .25rem solid $grey;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        height: 20px; /* height of a single line of code */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        position: relative;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        \u0026.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          height: auto;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          .code {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            background-color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            display: inherit;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          .closer {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .icon {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              \u0026.open {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                display: none;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              \u0026.hide {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                display: inherit;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .code {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          display: none;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .closer {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          cursor: pointer;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          // custom margin for position of toggle icon"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          margin: .2rem 0 0 -.45rem;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          position: absolute;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          \u0026.bottom {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            //custom margin for position of toggle icon at the bottom of segment"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            margin: -1.05rem 0 0 -.45rem;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          .icon {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            background-color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            width: .75em;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026.open {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              display: inherit;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026.hide {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "              display: none;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .empty {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "Tejas2805": 186,
      "jamessspanggg": 7,
      "0blivious": 12,
      "ang-zeyu": 5
    }
  },
  {
    "path": "frontend/src/static/css/v_ramp.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/* Ramp */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".ramp {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  $height: 3rem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  background-color: mui-color(\u0027blue\u0027, \u002750\u0027);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  font-size: 100%;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  height: $height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  overflow: hidden;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  position: relative;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026__slice {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border-left-color: rgba(0, 0, 0, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border-left-style: solid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    height: 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    width: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--color0 {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-bottom: $height rgba(mui-color(\u0027orange\u0027), .5) solid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--color1 {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-bottom: $height rgba(mui-color(\u0027light-blue\u0027), .5) solid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--color2 {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-bottom: $height rgba(mui-color(\u0027green\u0027), .5) solid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--color3 {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-bottom: $height rgba(mui-color(\u0027indigo\u0027), .5) solid;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--color4 {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-bottom: $height rgba(mui-color(\u0027pink\u0027), .5) solid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 39,
      "0blivious": 1
    }
  },
  {
    "path": "frontend/src/static/css/v_summary.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/* Summary */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#summary {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .summary-status {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .icon-button {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .summary-picker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    flex-flow: row wrap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-bottom: 2rem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__section {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      align-items: inherit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: flex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      flex: 0 1 auto;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      flex-flow: inherit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      justify-content: inherit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__checkboxes {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      label {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-left: .5rem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      span {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-left: .25rem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .mui-textfield,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .mui-select {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin: .5rem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding-right: 10px;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .mui-btn {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      background: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      box-shadow: none;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-size: .75rem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-weight: bold;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      left: -8px;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding: 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      vertical-align: middle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .search_box {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      align-items: center;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: flex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    input {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-size: .75rem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding-right: 10px;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-size: .75rem;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      overflow-y: hidden;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      text-align: left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      width: fit-content;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    input,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    select {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-size: .75rem;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .summary-charts {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-bottom: 3rem;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__title {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      align-items: center;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: flex;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-weight: bold;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      text-align: left;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u0026 \u003e * {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        padding-right: .5rem;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--index {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        background: mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        font-size: medium;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        overflow: hidden;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        padding: .1em .25em;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        vertical-align: middle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u0026--groupname {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        font-size: medium;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding: .5rem;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      \u0026--percentile {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include mini-font;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        margin-left: auto;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--contribution {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include mini-font;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        display: inline;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__fileType--breakdown {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      overflow-y: hidden;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026__legend {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        display: inline;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        float: left;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .summary-chart {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin-bottom: 1rem;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    overflow: auto;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__title {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      align-items: center;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      clear: left;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: flex;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026 \u003e * {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding-right: .5rem;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--index,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--repo {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        font-weight: bold;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--index::after {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        content: \u0027.\u0027;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--repo {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        padding-right: .25rem;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--contribution {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include mini-font;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      \u0026--percentile {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        @include mini-font;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        margin-left: auto;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        padding-right: 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__ramp {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      position: relative;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .overlay {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        height: 100%;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        position: absolute;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        top: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        \u0026.show {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          background-color: rgba(mui-color(\u0027white\u0027), .5);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          border: 1px dashed mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        \u0026.edge {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          border-right: 1px dashed mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026__contrib {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      text-align: left;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \u0026--bar {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        background-color: mui-color(\u0027red\u0027);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        float: left;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        height: 4px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        margin-top: 2px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 179,
      "jamessspanggg": 6,
      "0blivious": 15
    }
  },
  {
    "path": "frontend/src/static/css/v_zoom.scss",
    "fileType": "scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "@import \u0027colors\u0027;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".zoom {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026__title {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--granularity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      @include mini-font;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin-top: .5rem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026--tags {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin: .25rem 0 .25rem 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        cursor: pointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026__toggle-commit-message-body {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026__day,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026__title {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /* Tags in commits */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .tag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      @include mini-font;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      background: mui-color(\u0027grey\u0027, \u0027600\u0027);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border-radius: 5px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: inline-block;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin: .2rem .2rem .2rem 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding: 0 3px 0 3px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .fa-tags {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        width: .65rem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/* Commit Message Body in Zoom Tab */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".commit-message {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  padding: 5px;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026:focus,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026:focus-within {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    border: 1px solid mui-color(\u0027blue\u0027, \u0027500\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026.active {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .body {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      background-color: mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border: 1px solid mui-color(\u0027grey\u0027, \u0027700\u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      display: grid;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      margin: .25rem 0 .25rem 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      overflow-x: auto;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      padding: .4rem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      resize: none;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      pre {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        position: relative;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        .dashed-border {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          border-right: 1px dashed mui-color(\u0027grey\u0027, \u0027500\u0027); // 72nd character line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          height: 100%;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          pointer-events: none;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          position: absolute;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          top: 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          width: 72ch;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .body {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .tag {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026:focus {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      border: 1px solid mui-color(\u0027blue\u0027, \u0027500\u0027);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      outline: none;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \u0026--button {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    padding-left: .5rem;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \u0026:hover {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      cursor: pointer;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  pre {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  span.loc {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    color: mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  .message-title {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    display: inline;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    font-family: monospace;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    .within-border {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      display: inline;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    .not-within-border {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      border-left: 1px dashed mui-color(\u0027grey\u0027, \u0027500\u0027); // 50th character line"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      display: inline;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 87,
      "jamessspanggg": 32
    }
  },
  {
    "path": "frontend/src/static/js/api.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// utility functions //"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "window.$ \u003d (id) \u003d\u003e document.getElementById(id);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "window.enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.BASE_URL \u003d \u0027https://github.com\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.DAY_IN_MS \u003d (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "window.HASH_DELIMITER \u003d \u0027~\u0027;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.REPOS \u003d {};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.hashParams \u003d {};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.isMacintosh \u003d navigator.platform.includes(\u0027Mac\u0027);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "const REPORT_DIR \u003d \u0027.\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "const REPORT_ZIP \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.deactivateAllOverlays \u003d function deactivateAllOverlays() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  document.querySelectorAll(\u0027.summary-chart__ramp .overlay\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .forEach((x) \u003d\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        x.className \u003d \u0027overlay\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.getDateStr \u003d function getDateStr(date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  return (new Date(date)).toISOString().split(\u0027T\u0027)[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.getHexToRGB \u003d function getHexToRGB(color) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  // to convert color from hex code to rgb format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const arr \u003d /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  return arr.slice(1).map((val) \u003d\u003e parseInt(val, 16));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.getFontColor \u003d function getFontColor(color) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const result \u003d window.getHexToRGB(color);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const red \u003d result[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const green \u003d result[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const blue \u003d result[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const luminosity \u003d 0.2126 * red + 0.7152 * green + 0.0722 * blue; // per ITU-R BT.709"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  return luminosity \u003c 120 ? \u0027#ffffff\u0027 : \u0027#000000\u0027;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.addHash \u003d function addHash(newKey, newVal) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  window.hashParams[newKey] \u003d newVal;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.removeHash \u003d function removeHash(key) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  delete window.hashParams[key];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.encodeHash \u003d function encodeHash() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const { hashParams } \u003d window;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  window.location.hash \u003d Object.keys(hashParams)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .map((key) \u003d\u003e `${key}\u003d${encodeURIComponent(hashParams[key])}`)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .join(\u0027\u0026\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.decodeHash \u003d function decodeHash() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const hashParams \u003d {};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  window.location.hash.slice(1).split(\u0027\u0026\u0027)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .forEach((param) \u003d\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const [key, val] \u003d param.split(\u0027\u003d\u0027);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            hashParams[key] \u003d decodeURIComponent(val);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          } catch (error) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.userUpdated \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.isLoading \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  window.hashParams \u003d hashParams;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.comparator \u003d (fn, sortingOption \u003d \u0027\u0027) \u003d\u003e function compare(a, b) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  let a1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  let b1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  if (sortingOption) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    a1 \u003d fn(a, sortingOption).toLowerCase"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ? fn(a, sortingOption).toLowerCase()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        : fn(a, sortingOption);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    b1 \u003d fn(b, sortingOption).toLowerCase"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ? fn(b, sortingOption).toLowerCase()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        : fn(b, sortingOption);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    a1 \u003d fn(a).toLowerCase ? fn(a).toLowerCase() : fn(a);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    b1 \u003d fn(b).toLowerCase ? fn(b).toLowerCase() : fn(b);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  if (a1 \u003d\u003d\u003d b1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  } if (a1 \u003c b1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  return 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.toggleNext \u003d function toggleNext(ele) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  // function for toggling unopened code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const targetClass \u003d \u0027active\u0027;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const parent \u003d ele.parentNode;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const classes \u003d parent.className.split(\u0027 \u0027);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  const idx \u003d classes.indexOf(targetClass);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  if (idx \u003d\u003d\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    classes.push(targetClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    classes.splice(idx, 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  parent.className \u003d classes.join(\u0027 \u0027);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.getBaseLink \u003d function getBaseLink(repoId) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  return `${window.BASE_URL}/${"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    window.REPOS[repoId].location.organization}/${"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    window.REPOS[repoId].location.repoName}`;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "window.getGroupName \u003d function getGroupName(group, filterGroupSelection) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  switch (filterGroupSelection) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  case \u0027groupByRepos\u0027:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    return group[0].repoName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  case \u0027groupByAuthors\u0027:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    return group[0].name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    return \u0027\u0027;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "};"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "window.api \u003d {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  loadJSON(fname) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    if (REPORT_ZIP) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const zipObject \u003d REPORT_ZIP.file(fname.slice(2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "      if (zipObject) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return zipObject.async(\u0027text\u0027).then((txt) \u003d\u003e JSON.parse(txt));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      return Promise.reject(new Error(\u0027Zip file is invalid.\u0027));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    return new Promise((resolve, reject) \u003d\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "      const xhr \u003d new XMLHttpRequest();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.open(\u0027GET\u0027, fname);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.onload \u003d function xhrOnload() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (xhr.status \u003d\u003d\u003d 200) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "          resolve(JSON.parse(xhr.responseText));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "          reject(new Error(\u0027Unable to get file.\u0027));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "      };"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.send(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "  loadSummary() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    window.REPOS \u003d {};"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return this.loadJSON(`${REPORT_DIR}/summary.json`)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        .then((data) \u003d\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.creationDate \u003d data.reportGeneratedTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.sinceDate \u003d data.sinceDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.untilDate \u003d data.untilDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.repoSenseVersion \u003d data.repoSenseVersion;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "          window.app.reportGenerationTime \u003d data.reportGenerationTime;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.isSinceDateProvided \u003d data.isSinceDateProvided;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "          window.app.isUntilDateProvided \u003d data.isUntilDateProvided;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "          Object.entries(data.errorList).forEach(([repoName, message]) \u003d\u003e {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            window.app.errorMessages[repoName] \u003d message;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "          const names \u003d [];"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "          data.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            const repoName \u003d `${repo.displayName}`;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            window.REPOS[repoName] \u003d repo;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            names.push(repoName);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "          return names;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "  loadCommits(repoName) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    const folderName \u003d window.REPOS[repoName].outputFolderName;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return this.loadJSON(`${REPORT_DIR}/${folderName}/commits.json`).then((commits) \u003d\u003e {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "      const repo \u003d window.REPOS[repoName];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.keys(commits.authorDisplayNameMap).forEach((author) \u003d\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (author) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "          const obj \u003d {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            name: author,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            repoId: repoName,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            variance: commits.authorContributionVariance[author],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            displayName: commits.authorDisplayNameMap[author],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            dailyCommits: commits.authorDailyContributionsMap[author],"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            totalCommits: commits.authorFinalContributionMap[author],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTypeContribution: commits.authorFileTypeContributionMap[author],"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "          };"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          this.setContributionOfCommitResults(obj.dailyCommits);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "          const searchParams \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "              repo.displayName,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "              obj.displayName, author,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "          ];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "          obj.searchPath \u003d searchParams.join(\u0027_\u0027).toLowerCase();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "          obj.repoName \u003d `${repo.displayName}`;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "          obj.location \u003d `${repo.location.location}`;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "          res.push(obj);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      repo.commits \u003d commits;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      repo.users \u003d res;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      return res;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "  loadAuthorship(repoName) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    const folderName \u003d window.REPOS[repoName].outputFolderName;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return this.loadJSON(`${REPORT_DIR}/${folderName}/authorship.json`)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        .then((files) \u003d\u003e {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "          window.REPOS[repoName].files \u003d files;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "          return files;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  // calculate and set the contribution of each commitResult, since not provided in json file"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  setContributionOfCommitResults(dailyCommits) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    dailyCommits.forEach((commit) \u003d\u003e {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commit.commitResults.forEach((result) \u003d\u003e {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        result.insertions \u003d Object.values(result.fileTypesAndContributionMap)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            .reduce((acc, fileType) \u003d\u003e acc + fileType.insertions, 0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        result.deletions \u003d Object.values(result.fileTypesAndContributionMap)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            .reduce((acc, fileType) \u003d\u003e acc + fileType.deletions, 0);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      });"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    });"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  },"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 11,
      "anubh-v": 1,
      "jamessspanggg": 13,
      "-": 97,
      "0blivious": 119
    }
  },
  {
    "path": "frontend/src/static/js/main.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// eslint-disable-next-line import/extensions"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import store from \u0027./store.js\u0027;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/* global Vue hljs */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Vue.directive(\u0027hljs\u0027, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  inserted(ele, binding) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    const element \u003d ele;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    element.className \u003d binding.value.split(\u0027.\u0027).pop();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    hljs.highlightBlock(element);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Vue.component(\u0027font-awesome-icon\u0027, window[\u0027vue-fontawesome\u0027].FontAwesomeIcon);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "window.app \u003d new window.Vue({"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  el: \u0027#app\u0027,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  store,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    repos: {},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    users: [],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    repoLength: 0,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    loadedRepo: 0,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    userUpdated: false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    isLoading: false,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    isCollapsed: false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    isTabActive: true, // to force tab wrapper to load"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    tabType: \u0027empty\u0027,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    tabInfo: {},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    creationDate: \u0027\u0027,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    errorMessages: {},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  watch: {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u0027$store.state.tabZoomInfo\u0027: function () {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.tabInfo.tabZoom \u003d Object.assign({}, this.$store.state.tabZoomInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.activateTab(\u0027zoom\u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u0027$store.state.tabAuthorshipInfo\u0027: function () {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.tabInfo.tabAuthorship \u003d Object.assign({}, this.$store.state.tabAuthorshipInfo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.activateTab(\u0027authorship\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // model functions //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    updateReportZip(evt) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      this.users \u003d [];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      window.JSZip.loadAsync(evt.target.files[0])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          .then((zip) \u003d\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            window.REPORT_ZIP \u003d zip;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          }, () \u003d\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            window.alert(\u0027Either the .zip file is corrupted, or you uploaded a .zip file that is not generated \u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + \u0027by RepoSense.\u0027);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          })"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          .then(() \u003d\u003e this.updateReportView().then(() \u003d\u003e this.renderTabHash()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    updateReportDir() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      window.REPORT_ZIP \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      this.users \u003d [];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      this.updateReportView().then(() \u003d\u003e this.renderTabHash());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    async updateReportView() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      await window.api.loadSummary().then((names) \u003d\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.repos \u003d window.REPOS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.repoLength \u003d Object.keys(window.REPOS).length;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loadedRepo \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userUpdated \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isLoading \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loadedRepo \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Promise.all(names.map((name) \u003d\u003e ("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "          window.api.loadCommits(name)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "              .then(() \u003d\u003e { this.loadedRepo +\u003d 1; })"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "      }).then(() \u003d\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userUpdated \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isLoading \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getUsers();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "      }).catch((error) \u003d\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userUpdated \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isLoading \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        window.alert(error);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    getUsers() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      const full \u003d [];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.keys(this.repos).forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.repos[repo].users) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "          full.push(this.repos[repo]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      this.users \u003d full;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    // handle opening of sidebar //"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    activateTab(tabName) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "      // changing isTabActive to trigger redrawing of component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isTabActive \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (this.$refs.tabWrapper) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.$refs.tabWrapper.scrollTop \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isTabActive \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isCollapsed \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "      this.tabType \u003d tabName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      window.addHash(\u0027tabOpen\u0027, this.isTabActive);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      window.addHash(\u0027tabType\u0027, this.tabType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    deactivateTab() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isTabActive \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      window.addHash(\u0027tabOpen\u0027, this.isTabActive);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      window.removeHash(\u0027tabType\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    renderAuthorShipTabHash(minDate, maxDate) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      const info \u003d {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        author: hash.tabAuthor,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        repo: hash.tabRepo,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        isMergeGroup: hash.authorshipIsMergeGroup \u003d\u003d\u003d \u0027true\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        minDate,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        maxDate,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "      };"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const tabInfoLength \u003d Object.values(info).filter((x) \u003d\u003e x !\u003d\u003d null).length;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      if (Object.keys(info).length \u003d\u003d\u003d tabInfoLength) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.$store.commit(\u0027updateTabAuthorshipInfo\u0027, info);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "      } else if (hash.tabOpen \u003d\u003d\u003d \u0027false\u0027 || tabInfoLength \u003e 2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        window.app.isTabActive \u003d false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    renderZoomTabHash() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const zoomInfo \u003d {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zAuthor: hash.zA,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zRepo: hash.zR,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zAvgCommitSize: hash.zACS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zSince: hash.zS,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zUntil: hash.zU,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zFilterGroup: hash.zFGS,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zFilterSearch: hash.zFS,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zTimeFrame: hash.zFTF,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zIsMerge: hash.zMG \u003d\u003d\u003d \u0027true\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      };"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const tabInfoLength \u003d Object.values(zoomInfo).filter((x) \u003d\u003e x !\u003d\u003d null).length;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (Object.keys(zoomInfo).length \u003d\u003d\u003d tabInfoLength) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.$store.commit(\u0027updateTabZoomInfo\u0027, zoomInfo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "      } else if (hash.tabOpen \u003d\u003d\u003d \u0027false\u0027 || tabInfoLength \u003e 2) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        window.app.isTabActive \u003d false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    renderTabHash() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      window.decodeHash();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!hash.tabOpen) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isTabActive \u003d hash.tabOpen \u003d\u003d\u003d \u0027true\u0027;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.isTabActive) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hash.tabType \u003d\u003d\u003d \u0027authorship\u0027) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "          let { since, until } \u003d hash;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "          // get since and until dates from window.app if not found in hash"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "          since \u003d since || window.app.sinceDate;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "          until \u003d until || window.app.untilDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "          this.renderAuthorShipTabHash(since, until);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          this.renderZoomTabHash();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    generateKey(dataObj) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      return JSON.stringify(dataObj);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    getRepoSenseHomeLink() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      return \u0027http://reposense.org\u0027;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    getUserGuideVersionLink() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      const version \u003d window.app.repoSenseVersion;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!version) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "        return `${window.BASE_URL}/reposense/RepoSense`;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "      return `${window.BASE_URL}/reposense/RepoSense/blob/${version}/docs/UserGuide.md`;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    receiveDates(dates) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      const [minDate, maxDate] \u003d dates;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.tabType \u003d\u003d\u003d \u0027authorship\u0027) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        this.renderAuthorShipTabHash(minDate, maxDate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    vResizer: window.vResizer,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vZoom: window.vZoom,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vSummary: window.vSummary,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vAuthorship: window.vAuthorship,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    CircleSpinner: window.VueLoadingSpinner.Circle,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    this.updateReportDir();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 2,
      "yash-chowdhary": 2,
      "Tejas2805": 1,
      "jamessspanggg": 18,
      "0blivious": 18,
      "-": 175,
      "ang-zeyu": 3
    }
  },
  {
    "path": "frontend/src/static/js/store.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/* global Vuex */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "const store \u003d new Vuex.Store({"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  state: {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    tabAuthorshipInfo: {},"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    tabZoomInfo: {},"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    summaryDates: {},"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    mergedGroups: [],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  mutations: {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    updateTabZoomInfo(state, info) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      state.tabZoomInfo \u003d info;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    updateTabAuthorshipInfo(state, info) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      state.tabAuthorshipInfo \u003d info;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    updateSummaryDates(state, info) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      state.summaryDates \u003d info;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    updateMergedGroup(state, info) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      state.mergedGroups \u003d info;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "});"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "export default store;"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 4,
      "0blivious": 21
    }
  },
  {
    "path": "frontend/src/static/js/v_authorship.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "const filesSortDict \u003d {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  lineOfCode: (file) \u003d\u003e file.lineCount,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  path: (file) \u003d\u003e file.path,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  fileName: (file) \u003d\u003e file.path.split(/[/]+/).pop(),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  fileType: (file) \u003d\u003e file.fileType,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "const repoCache \u003d [];"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "const minimatch \u003d require(\u0027minimatch\u0027);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "window.vAuthorship \u003d {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  props: [\u0027info\u0027],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  template: window.$(\u0027v_authorship\u0027).innerHTML,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      isLoaded: false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      files: [],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      filterType: \u0027checkboxes\u0027,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      selectedFileTypes: [],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      fileTypes: [],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      filesLinesObj: {},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      fileTypeBlankLinesObj: {},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      filesSortType: \u0027lineOfCode\u0027,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      toReverseSortFiles: true,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      searchBarValue: \u0027\u0027,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  watch: {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    filesSortType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.addHash(\u0027authorshipSortBy\u0027, this.filesSortType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toReverseSortFiles() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.addHash(\u0027reverseAuthorshipOrder\u0027, this.toReverseSortFiles);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    isLoaded() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (this.isLoaded) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.retrieveHashes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.setInfoHash();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    retrieveHashes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.decodeHash();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      switch (hash.authorshipSortBy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      case \u0027path\u0027:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      case \u0027fileName\u0027:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      case \u0027fileType\u0027:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.filesSortType \u003d hash.authorshipSortBy;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // Invalid value, use the default value of \u0027lineOfCode\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.toReverseSortFiles \u003d hash.reverseAuthorshipOrder !\u003d\u003d \u0027false\u0027;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (\u0027authorshipFilesGlob\u0027 in hash) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indicateSearchBar();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.searchBarValue \u003d hash.authorshipFilesGlob;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      } else if (\u0027authorshipFileTypes\u0027 in hash) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        const parsedFileTypes \u003d hash.authorshipFileTypes.split(window.HASH_DELIMITER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.selectedFileTypes \u003d parsedFileTypes.filter((type) \u003d\u003e this.fileTypes.includes(type));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    setInfoHash() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const { addHash, encodeHash } \u003d window;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      // We only set these hashes as they are propagated from summary_charts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      addHash(\u0027tabAuthor\u0027, this.info.author);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      addHash(\u0027tabRepo\u0027, this.info.repo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      addHash(\u0027authorshipIsMergeGroup\u0027, this.info.isMergeGroup);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      encodeHash();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    removeAuthorshipHashes() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipFileTypes\u0027);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipFilesGlob\u0027);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipSortBy\u0027);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027reverseAuthorshipOrder\u0027);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027tabAuthor\u0027);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027tabRepo\u0027);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipIsMergeGroup\u0027);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    initiate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      const repo \u003d window.REPOS[this.info.repo];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getRepoProps(repo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!repo || !this.info.author) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        window.app.isTabActive \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "      if (repoCache.length \u003d\u003d\u003d 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        const toRemove \u003d repoCache.shift();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (toRemove !\u003d\u003d this.info.repo) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "          delete window.REPOS[toRemove].files;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      repoCache.push(this.info.repo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      if (repo.files) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.processFiles(repo.files);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        window.api.loadAuthorship(this.info.repo)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            .then((files) \u003d\u003e this.processFiles(files));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (!this.info.fileTypeColors) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.$root.$emit(\u0027restoreFileTypeColors\u0027, this.info);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    getRepoProps(repo) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      if (repo) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this.info.isMergeGroup) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          // sum of all users\u0027 file type contribution"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          repo.users.forEach((author) \u003d\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.updateTotalFileTypeContribution(author.fileTypeContribution);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          const author \u003d repo.users.find((user) \u003d\u003e user.name \u003d\u003d\u003d this.info.author);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          if (author) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.info.name \u003d author.displayName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.filesLinesObj \u003d author.fileTypeContribution;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    updateTotalFileTypeContribution(fileTypeContribution) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      Object.entries(fileTypeContribution).forEach(([type, cnt]) \u003d\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this.filesLinesObj[type]) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          this.filesLinesObj[type] +\u003d cnt;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          this.filesLinesObj[type] \u003d cnt;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    expandAll() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.selectedFiles.forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        file.active \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        file.wasCodeLoaded \u003d true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    collapseAll() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.selectedFiles.forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        file.active \u003d false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    toggleFileActiveProperty(file) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      file.active \u003d !file.active;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      file.wasCodeLoaded \u003d file.wasCodeLoaded || file.active;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    hasCommits(info) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const { isMergeGroup, author } \u003d info;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const repo \u003d window.REPOS[info.repo];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (repo) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return isMergeGroup"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            ? Object.entries(repo.commits.authorFinalContributionMap).some(([name, cnt]) \u003d\u003e name !\u003d\u003d \u0027-\u0027 \u0026\u0026 cnt \u003e 0)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            : repo.commits.authorFinalContributionMap[author] \u003e 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    splitSegments(lines) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      // split into segments separated by authored"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "      let lastState;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "      let lastId \u003d -1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      const segments \u003d [];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      let blankLineCount \u003d 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "      lines.forEach((line, lineCount) \u003d\u003e {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const isAuthorMatched \u003d this.info.isMergeGroup"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            ? line.author.gitId !\u003d\u003d \u0027-\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            : line.author.gitId \u003d\u003d\u003d this.info.author;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const authored \u003d (line.author \u0026\u0026 isAuthorMatched);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (authored !\u003d\u003d lastState || lastId \u003d\u003d\u003d -1) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "          segments.push({"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            authored,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            lines: [],"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            lineNumbers: [],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "          lastId +\u003d 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "          lastState \u003d authored;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        const content \u003d line.content || \u0027 \u0027;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        segments[lastId].lines.push(content);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        segments[lastId].lineNumbers.push(lineCount + 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (line.content \u003d\u003d\u003d \u0027\u0027 \u0026\u0026 authored) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "          blankLineCount +\u003d 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "      return {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        segments,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        blankLineCount,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      };"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    processFiles(files) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const COLLAPSED_VIEW_LINE_COUNT_THRESHOLD \u003d 2000;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      const fileTypeBlanksInfoObj \u003d {};"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "      files.forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const contributionMap \u003d file.authorContributionMap;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const lineCnt \u003d this.info.isMergeGroup"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            ? this.getContributionFromAllAuthors(contributionMap)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            : contributionMap[this.info.author];"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (lineCnt) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "          const out \u003d {};"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "          out.path \u003d file.path;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "          out.lineCount \u003d lineCnt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          out.active \u003d lineCnt \u003c\u003d COLLAPSED_VIEW_LINE_COUNT_THRESHOLD;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          out.wasCodeLoaded \u003d lineCnt \u003c\u003d COLLAPSED_VIEW_LINE_COUNT_THRESHOLD;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "          out.fileType \u003d file.fileType;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "          const segmentInfo \u003d this.splitSegments(file.lines);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "          out.segments \u003d segmentInfo.segments;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          out.blankLineCount \u003d segmentInfo.blankLineCount;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "          this.addBlankLineCount(file.fileType, segmentInfo.blankLineCount,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "              fileTypeBlanksInfoObj);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "          res.push(out);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "      res.sort((a, b) \u003d\u003e b.lineCount - a.lineCount);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.keys(this.filesLinesObj).forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.filesLinesObj[file] !\u003d\u003d 0) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "          this.fileTypes.push(file);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.selectedFileTypes \u003d this.fileTypes.slice();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "      this.fileTypeBlankLinesObj \u003d fileTypeBlanksInfoObj;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "      this.files \u003d res;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isLoaded \u003d true;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getContributionFromAllAuthors(contributionMap) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return Object.entries(contributionMap).reduce((acc, [author, cnt]) \u003d\u003e (author !\u003d\u003d \u0027-\u0027 ? acc + cnt : acc), 0);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    addBlankLineCount(fileType, lineCount, filesInfoObj) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!filesInfoObj[fileType]) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        filesInfoObj[fileType] \u003d 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      filesInfoObj[fileType] +\u003d lineCount;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    updateSearchBarValue() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.searchBarValue \u003d this.$refs.searchBar.value;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.addHash(\u0027authorshipFilesGlob\u0027, this.searchBarValue);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipFileTypes\u0027);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    updateFileTypeHash() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const fileTypeHash \u003d this.selectedFileTypes.length \u003e 0"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          ? this.selectedFileTypes.reduce((a, b) \u003d\u003e `${a}~${b}`)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          : \u0027\u0027;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.addHash(\u0027authorshipFileTypes\u0027, fileTypeHash);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.removeHash(\u0027authorshipFilesGlob\u0027);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    indicateSearchBar() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.selectedFileTypes \u003d this.fileTypes.slice();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.filterType \u003d \u0027search\u0027;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    indicateCheckBoxes() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.searchBarValue \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.filterType \u003d \u0027checkboxes\u0027;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.updateFileTypeHash();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    getFileLink(file, path) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      const repo \u003d window.REPOS[this.info.repo];"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "      return `${window.BASE_URL}/${"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        repo.location.organization}/${repo.location.repoName}/${path}/${repo.branch}/${file.path}`;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    getFileTypeBlankLineInfo(fileType) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "      return `${fileType}: Blank: ${"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fileTypeBlankLinesObj[fileType]}, Non-Blank: ${"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filesLinesObj[fileType] - this.fileTypeBlankLinesObj[fileType]}`;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    getTotalFileBlankLineInfo() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      return `Total: Blank: ${this.totalBlankLineCount}, Non-Blank: ${"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        this.totalLineCount - this.totalBlankLineCount}`;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    sortingFunction() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      return (a, b) \u003d\u003e (this.toReverseSortFiles ? -1 : 1)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        * window.comparator(filesSortDict[this.filesSortType])(a, b);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    },"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    isSelectAllChecked: {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      get() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this.selectedFileTypes.length \u003d\u003d\u003d this.fileTypes.length;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      },"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      set(value) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (value) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.selectedFileTypes \u003d this.fileTypes.slice();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.selectedFileTypes \u003d [];"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indicateCheckBoxes();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      },"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    selectedFiles() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return this.files.filter((file) \u003d\u003e this.selectedFileTypes.includes(file.fileType)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u0026\u0026 minimatch(file.path, this.searchBarValue || \u0027*\u0027, { matchBase: true, dot: true }))"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "          .sort(this.sortingFunction);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    activeFilesCount() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      return this.selectedFiles.filter((file) \u003d\u003e file.active).length;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    totalLineCount() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      return Object.values(this.fileTypeLinesObj).reduce((acc, val) \u003d\u003e acc + val, 0);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    totalBlankLineCount() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      return Object.values(this.fileTypeBlankLinesObj).reduce((acc, val) \u003d\u003e acc + val, 0);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    fileTypeLinesObj() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "      const numLinesModified \u003d {};"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.entries(this.filesLinesObj)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "          .filter(([, value]) \u003d\u003e value \u003e 0)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "          .forEach(([langType, value]) \u003d\u003e {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            numLinesModified[langType] \u003d value;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "      return numLinesModified;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    this.initiate();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  beforeDestroy() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    this.removeAuthorshipHashes();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vSegment: window.vSegment,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 9,
      "niqiukun": 1,
      "yash-chowdhary": 1,
      "Tejas2805": 8,
      "jamessspanggg": 37,
      "-": 205,
      "0blivious": 25,
      "ang-zeyu": 96
    }
  },
  {
    "path": "frontend/src/static/js/v_ramp.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "window.vRamp \u003d {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  props: [\u0027groupby\u0027, \u0027user\u0027, \u0027tframe\u0027, \u0027avgsize\u0027, \u0027sdate\u0027, \u0027udate\u0027, \u0027mergegroup\u0027],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  template: window.$(\u0027v_ramp\u0027).innerHTML,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      rampSize: 0.01,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    getLink(user, slice) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      const { REPOS } \u003d window;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      const untilDate \u003d this.tframe \u003d\u003d\u003d \u0027week\u0027 ? slice.endDate : slice.date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.mergegroup) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getMergedLink(user, slice, untilDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.tframe \u003d\u003d\u003d \u0027commit\u0027) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return `${window.getBaseLink(user.repoId)}/commit/${slice.hash}`;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return `${window.getBaseLink(user.repoId)}/commits/${REPOS[user.repoId].branch}?`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          + `author\u003d${user.name}\u0026`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          + `since\u003d${slice.date}\u0027T\u002700:00:00+08:00\u0026`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          + `until\u003d${untilDate}\u0027T\u002723:59:59+08:00`;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    getMergedLink(user, slice, untilDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      const { REPOS } \u003d window;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.tframe \u003d\u003d\u003d \u0027commit\u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return `${window.getBaseLink(slice.repoId)}/commit/${slice.hash}`;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return `${window.getBaseLink(user.repoId)}/commits/${REPOS[user.repoId].branch}?`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          + `since\u003d${slice.date}\u0027T\u002700:00:00+08:00\u0026`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          + `until\u003d${untilDate}\u0027T\u002723:59:59+08:00`;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    getWidth(slice) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      if (slice.insertions \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      const newSize \u003d 100 * (slice.insertions / this.avgsize);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "      return Math.max(newSize * this.rampSize, 0.5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // position for commit granularity"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    getCommitPos(i, total) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      return (total - i - 1) * window.DAY_IN_MS / total"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          / (this.getTotalForPos(this.sdate, this.udate) + window.DAY_IN_MS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // position for day granularity"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    getSlicePos(date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      const total \u003d this.getTotalForPos(this.sdate, this.udate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      return (new Date(this.udate) - new Date(date)) / (total + window.DAY_IN_MS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // get duration in miliseconds between 2 date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    getTotalForPos(sinceDate, untilDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      return new Date(untilDate) - new Date(sinceDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    getSliceColor(date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      const timeMs \u003d (new Date(date)).getTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      return (timeMs / window.DAY_IN_MS) % 5;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    // Prevent browser from switching to new tab when clicking ramp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    rampClick(evt) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const isKeyPressed \u003d window.isMacintosh ? evt.metaKey : evt.ctrlKey;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (isKeyPressed) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        evt.preventDefault();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "0blivious": 4,
      "ang-zeyu": 8
    }
  },
  {
    "path": "frontend/src/static/js/v_resizer.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "const DRAG_BAR_WIDTH \u003d 13.25;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "const SCROLL_BAR_WIDTH \u003d 17;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "const GUIDE_BAR_WIDTH \u003d 2;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "const throttledEvent \u003d (delay, handler) \u003d\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  let lastCalled \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  return (...args) \u003d\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    if (Date.now() - lastCalled \u003e delay) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      lastCalled \u003d Date.now();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      handler(...args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "window.vResizer \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  template: window.$(\u0027v_resizer\u0027).innerHTML,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  props: {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    isTabActive: true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      guideWidth: (0.5 * window.innerWidth - (GUIDE_BAR_WIDTH / 2)) / window.innerWidth,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      flexWidth: 0.5,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      isResizing: false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    registerMouseMove() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.isResizing \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    deregisterMouseMove() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.isResizing \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.flexWidth \u003d (this.guideWidth * window.innerWidth + (GUIDE_BAR_WIDTH / 2))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        / window.innerWidth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    appStyles() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      return this.isResizing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ? \u0027user-select: none; cursor: col-resize;\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        : \u0027\u0027;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    guideStyles() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      return this.isResizing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ? `display: block; right: ${this.guideWidth * 100}%;`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        : \u0027\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    rightContainerStyles() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      return `flex: 0 0 ${this.flexWidth * 100}%;`;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    mouseMove() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (this.isResizing) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return throttledEvent(25, (event) \u003d\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          this.guideWidth \u003d ("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Math.min("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Math.max("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    window.innerWidth - event.clientX,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    SCROLL_BAR_WIDTH + DRAG_BAR_WIDTH,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                window.innerWidth - SCROLL_BAR_WIDTH,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            )"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            - (GUIDE_BAR_WIDTH / 2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          ) / window.innerWidth;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      return () \u003d\u003e {};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 76
    }
  },
  {
    "path": "frontend/src/static/js/v_segment.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "window.vSegment \u003d {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  props: [\u0027segment\u0027, \u0027path\u0027],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  template: window.$(\u0027v_segment\u0027).innerHTML,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      loaded: this.segment.authored || this.segment.lines.length \u003c 5,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    loadCode() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      this.loaded \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      // Update button and code css only once code has loaded into DOM"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      this.$nextTick(() \u003d\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        window.toggleNext(this.$el.childNodes[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      });"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    collapseCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const segmentTop \u003d this.$refs.topButton.getBoundingClientRect().top;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      if (segmentTop \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.$refs.topButton.scrollIntoView();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      window.toggleNext(this.$el.childNodes[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ang-zeyu": 9
    }
  },
  {
    "path": "frontend/src/static/js/v_summary.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/* global Vuex */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "const dateFormatRegex \u003d /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$/;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "window.vSummary \u003d {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  props: [\u0027repos\u0027, \u0027errorMessages\u0027],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  template: window.$(\u0027v_summary\u0027).innerHTML,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      checkedFileTypes: [],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      fileTypes: [],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      filtered: [],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      filterSearch: \u0027\u0027,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      filterGroupSelection: \u0027groupByRepos\u0027,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      sortGroupSelection: \u0027groupTitle\u0027, // UI for sorting groups"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      sortWithinGroupSelection: \u0027title\u0027, // UI for sorting within groups"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      sortingOption: \u0027\u0027,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      isSortingDsc: \u0027\u0027,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      sortingWithinOption: \u0027\u0027,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      isSortingWithinDsc: \u0027\u0027,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      filterTimeFrame: \u0027commit\u0027,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      filterBreakdown: false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      tmpFilterSinceDate: \u0027\u0027,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      tmpFilterUntilDate: \u0027\u0027,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      hasModifiedSinceDate: window.app.isSinceDateProvided,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      hasModifiedUntilDate: window.app.isUntilDateProvided,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      filterSinceDate: \u0027\u0027,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      filterUntilDate: \u0027\u0027,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      filterHash: \u0027\u0027,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      minDate: \u0027\u0027,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      maxDate: \u0027\u0027,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      fileTypeColors: {},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      isSafariBrowser: /.*Version.*Safari.*/.test(navigator.userAgent),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      // eslint-disable-next-line new-cap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      randomGenerator: new Math.seedrandom(\u0027Seeded Random Generator\u0027),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  watch: {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    checkedFileTypes() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    filterBreakdown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    sortGroupSelection() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    sortWithinGroupSelection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    filterTimeFrame() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    filterGroupSelection() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const { allGroupsMerged } \u003d this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.getFilteredRepos();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      // merge group is not allowed when group by none"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      // also reset merged groups"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      if (this.filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027 || !allGroupsMerged) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.$store.commit(\u0027updateMergedGroup\u0027, []);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        const mergedGroups \u003d [];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filtered.forEach((group) \u003d\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          mergedGroups.push(this.getGroupName(group));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.$store.commit(\u0027updateMergedGroup\u0027, mergedGroups);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    tmpFilterSinceDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.tmpFilterSinceDate \u0026\u0026 this.tmpFilterSinceDate \u003e\u003d this.minDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterSinceDate \u003d this.tmpFilterSinceDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      } else if (!this.tmpFilterSinceDate) { // If user clears the since date field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterSinceDate \u003d this.minDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    tmpFilterUntilDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.tmpFilterUntilDate \u0026\u0026 this.tmpFilterUntilDate \u003c\u003d this.maxDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterUntilDate \u003d this.tmpFilterUntilDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "      } else if (!this.tmpFilterUntilDate) { // If user clears the until date field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterUntilDate \u003d this.maxDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u0027$store.state.summaryDates\u0027: function () {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.hasModifiedSinceDate \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.hasModifiedUntilDate \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.tmpFilterSinceDate \u003d this.$store.state.summaryDates.since;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.tmpFilterUntilDate \u003d this.$store.state.summaryDates.until;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      window.deactivateAllOverlays();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    mergedGroups() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    checkAllFileTypes: {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      get() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this.checkedFileTypes.length \u003d\u003d\u003d this.fileTypes.length;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      },"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      set(value) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (value) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.checkedFileTypes \u003d this.fileTypes.slice();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.checkedFileTypes \u003d [];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      },"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    avgContributionSize() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "      let totalLines \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "      let totalCount \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      this.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "          if (user.totalCommits \u003e 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            totalCount +\u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            totalLines +\u003d user.totalCommits;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "          }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      return totalLines / totalCount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    allGroupsMerged: {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      get() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (this.mergedGroups.length \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return this.mergedGroups.length \u003d\u003d\u003d this.filtered.length;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      },"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      set(value) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (value) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          const mergedGroups \u003d [];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          this.filtered.forEach((group) \u003d\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            mergedGroups.push(this.getGroupName(group));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          this.$store.commit(\u0027updateMergedGroup\u0027, mergedGroups);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          this.$store.commit(\u0027updateMergedGroup\u0027, []);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      },"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ...Vuex.mapState([\u0027mergedGroups\u0027]),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    dismissTab(event) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      event.target.parentNode.style.display \u003d \u0027none\u0027;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    // view functions //"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    getReportIssueGitHubLink(stackTrace) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "      return `${window.BASE_URL}/reposense/RepoSense/issues/new?title\u003d${this.getReportIssueTitle()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "      }\u0026body\u003d${this.getReportIssueMessage(stackTrace)}`;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    getReportIssueEmailAddress() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "      return \u0027seer@comp.nus.edu.sg\u0027;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    getReportIssueEmailLink(stackTrace) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      return `mailto:${this.getReportIssueEmailAddress()}?subject\u003d${this.getReportIssueTitle()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      }\u0026body\u003d${this.getReportIssueMessage(stackTrace)}`;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    getReportIssueTitle() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      return encodeURI(\u0027Unexpected error with RepoSense version \u0027) + window.app.repoSenseVersion;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    getReportIssueMessage(message) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      return encodeURI(message);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    // model functions //"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    resetFilterSearch() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.filterSearch \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    updateFilterSearch(evt) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "      this.filterSearch \u003d evt.target.value;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    setSummaryHash() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      const { addHash, encodeHash } \u003d window;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027search\u0027, this.filterSearch);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027sort\u0027, this.sortGroupSelection);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027sortWithin\u0027, this.sortWithinGroupSelection);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.hasModifiedSinceDate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        addHash(\u0027since\u0027, this.filterSinceDate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.hasModifiedUntilDate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        addHash(\u0027until\u0027, this.filterUntilDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027timeframe\u0027, this.filterTimeFrame);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      let mergedGroupsHash \u003d this.mergedGroups.join(window.HASH_DELIMITER);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      if (mergedGroupsHash.length \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        mergedGroupsHash \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      addHash(\u0027mergegroup\u0027, mergedGroupsHash);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027groupSelect\u0027, this.filterGroupSelection);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      addHash(\u0027breakdown\u0027, this.filterBreakdown);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (this.filterBreakdown) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const checkedFileTypesHash \u003d this.checkedFileTypes.length \u003e 0"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          ? this.checkedFileTypes.join(window.HASH_DELIMITER)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          : \u0027\u0027;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        addHash(\u0027checkedFileTypes\u0027, checkedFileTypesHash);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        window.removeHash(\u0027checkedFileTypes\u0027);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      encodeHash();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    renderFilterHash() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "      window.decodeHash();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "      const convertBool \u003d (txt) \u003d\u003e (txt \u003d\u003d\u003d \u0027true\u0027);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.search) { this.filterSearch \u003d hash.search; }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.sort) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sortGroupSelection \u003d hash.sort;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.sortWithin) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sortWithinGroupSelection \u003d hash.sortWithin;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.timeframe) { this.filterTimeFrame \u003d hash.timeframe; }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.mergegroup) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // make a copy to prevent custom merged groups from overwritten"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.customMergedGroups \u003d hash.mergegroup;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (hash.since \u0026\u0026 dateFormatRegex.test(hash.since)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterSinceDate \u003d hash.since;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (hash.until \u0026\u0026 dateFormatRegex.test(hash.until)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterUntilDate \u003d hash.until;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.groupSelect) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterGroupSelection \u003d hash.groupSelect;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "      if (hash.breakdown) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterBreakdown \u003d convertBool(hash.breakdown);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (hash.checkedFileTypes !\u003d\u003d null) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        const parsedFileTypes \u003d hash.checkedFileTypes.split(window.HASH_DELIMITER);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.checkedFileTypes \u003d parsedFileTypes.filter((type) \u003d\u003e this.fileTypes.includes(type));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      window.decodeHash();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    restoreMergedGroups() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      if (this.customMergedGroups) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.$store.commit("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            \u0027updateMergedGroup\u0027,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            this.customMergedGroups.split(window.HASH_DELIMITER),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    getDates() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.minDate \u0026\u0026 this.maxDate) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      const minDate \u003d window.app.sinceDate;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      const maxDate \u003d window.app.untilDate;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!this.filterSinceDate) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!this.tmpFilterSinceDate || this.tmpFilterSinceDate \u003c minDate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "          this.tmpFilterSinceDate \u003d minDate;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterSinceDate \u003d minDate;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minDate \u003d minDate;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!this.filterUntilDate) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!this.tmpFilterUntilDate || this.tmpFilterUntilDate \u003e maxDate) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "          this.tmpFilterUntilDate \u003d maxDate;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filterUntilDate \u003d maxDate;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maxDate \u003d maxDate;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      this.$emit(\u0027get-dates\u0027, [this.minDate, this.maxDate]);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    getGroupName(group) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      return window.getGroupName(group, this.filterGroupSelection);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    isMatchSearchedUser(filterSearch, user) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return !filterSearch || filterSearch.toLowerCase()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .split(\u0027 \u0027)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .filter(Boolean)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .some((param) \u003d\u003e user.searchPath.includes(param));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    getFiltered() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "      this.setSummaryHash();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getDates();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      window.deactivateAllOverlays();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.getFilteredRepos();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.getMergedRepos();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    getFilteredRepos() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      // array of array, sorted by repo"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "      const full \u003d [];"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "      // create deep clone of this.repos to not modify the original content of this.repos"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      // when merging groups"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const groups \u003d this.hasMergedGroups() ? JSON.parse(JSON.stringify(this.repos)) : this.repos;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      groups.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        const res \u003d [];"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // filtering"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          if (this.isMatchSearchedUser(this.filterSearch, user)) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.getUserCommits(user, this.filterSinceDate, this.filterUntilDate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.filterTimeFrame \u003d\u003d\u003d \u0027week\u0027) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              this.splitCommitsWeek(user, this.filterSinceDate, this.filterUntilDate);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.updateCheckedFileTypeContribution(user);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            res.push(user);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "          }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        if (res.length) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "          full.push(res);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "      this.filtered \u003d full;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      this.getOptionWithOrder();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const filterControl \u003d {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        filterGroupSelection: this.filterGroupSelection,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        sortingOption: this.sortingOption,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        sortingWithinOption: this.sortingWithinOption,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        isSortingDsc: this.isSortingDsc,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        isSortingWithinDsc: this.isSortingWithinDsc,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      };"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      this.filtered \u003d this.sortFiltered(this.filtered, filterControl);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    getMergedRepos() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.filtered.forEach((group, groupIndex) \u003d\u003e {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (this.mergedGroups.includes(this.getGroupName(group))) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          this.mergeGroupByIndex(this.filtered, groupIndex);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      });"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    mergeGroupByIndex(filtered, groupIndex) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "      const dateToIndexMap \u003d {};"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "      const mergedCommits \u003d [];"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "      const mergedFileTypeContribution \u003d {};"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "      let mergedVariance \u003d 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "      let totalMergedCommits \u003d 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let totalMergedCheckedFileTypeCommits \u003d 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex].forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mergeCommits(user, mergedCommits, dateToIndexMap);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mergeFileTypeContribution(user, mergedFileTypeContribution);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        totalMergedCommits +\u003d user.totalCommits;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        totalMergedCheckedFileTypeCommits +\u003d user.checkedFileTypeContribution;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        mergedVariance +\u003d user.variance;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      mergedCommits.sort(window.comparator((ele) \u003d\u003e ele.date));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex][0].commits \u003d mergedCommits;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex][0].fileTypeContribution \u003d mergedFileTypeContribution;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex][0].totalCommits \u003d totalMergedCommits;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex][0].variance \u003d mergedVariance;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex][0].checkedFileTypeContribution \u003d totalMergedCheckedFileTypeCommits;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      // only take the merged group"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      filtered[groupIndex] \u003d filtered[groupIndex].slice(0, 1);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    hasMergedGroups() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      return this.mergedGroups.length \u003e 0;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    mergeCommits(user, merged, dateToIndexMap) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "      // merge commits with the same date"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "      user.commits.forEach((commit) \u003d\u003e {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        const {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "          commitResults, date, insertions, deletions,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        } \u003d commit;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        // bind repoId to each commit"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        commitResults.forEach((commitResult) \u003d\u003e {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "          commitResult.repoId \u003d user.repoId;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Object.prototype.hasOwnProperty.call(dateToIndexMap, date)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "          const commitWithSameDate \u003d merged[dateToIndexMap[date]];"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "          commitResults.forEach((commitResult) \u003d\u003e {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            commitWithSameDate.commitResults.push(commitResult);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "          commitWithSameDate.insertions +\u003d insertions;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "          commitWithSameDate.deletions +\u003d deletions;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "          dateToIndexMap[date] \u003d Object.keys(dateToIndexMap).length;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "          merged.push(commit);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    mergeFileTypeContribution(user, merged) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.entries(user.fileTypeContribution).forEach((fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        const key \u003d fileType[0];"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        const value \u003d fileType[1];"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Object.prototype.hasOwnProperty.call(merged, key)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "          merged[key] \u003d 0;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        merged[key] +\u003d value;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getRandomHex() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const maxHexColorValue \u003d 16777214;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      // excludes #000000 and #FFFFFF as they are reserved"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return `#${Math.round(this.randomGenerator() * maxHexColorValue + 1).toString(16).padStart(6, \u00270\u0027)}`;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getNonRepeatingColor(existingColors) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let generatedHex \u003d this.getRandomHex();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      while (this.hasSimilarExistingColors(existingColors, generatedHex)) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        generatedHex \u003d this.getRandomHex();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return generatedHex;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    hasSimilarExistingColors(existingColors, newHex) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaEThreshold \u003d 11; // the lower limit of delta E to be similar, more info at http://zschuessler.github.io/DeltaE/learn/"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return existingColors.some((existingHex) \u003d\u003e {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const existingRGB \u003d window.getHexToRGB(existingHex);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const newRGB \u003d window.getHexToRGB(newHex);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return this.deltaE(existingRGB, newRGB) \u003c deltaEThreshold;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      });"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // this delta E (perceptual color distance) implementation taken from @antimatter15 from"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    // github: https://github.com/antimatter15/rgb-lab"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    deltaE(rgbA, rgbB) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const labA \u003d this.rgb2lab(rgbA);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const labB \u003d this.rgb2lab(rgbB);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaL \u003d labA[0] - labB[0];"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaA \u003d labA[1] - labB[1];"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaB \u003d labA[2] - labB[2];"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const c1 \u003d Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const c2 \u003d Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaC \u003d c1 - c2;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let deltaH \u003d deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      deltaH \u003d deltaH \u003c 0 ? 0 : Math.sqrt(deltaH);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sc \u003d 1.0 + 0.045 * c1;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sh \u003d 1.0 + 0.015 * c1;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaLKLSL \u003d deltaL / (1.0);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaCKCSC \u003d deltaC / (sc);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const deltaHKSHS \u003d deltaH / (sh);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const distance \u003d deltaLKLSL * deltaLKLSL + deltaCKCSC * deltaCKCSC + deltaHKSHS * deltaHKSHS;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return distance \u003c 0 ? 0 : Math.sqrt(distance);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    rgb2lab(rgb) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let r \u003d rgb[0] / 255;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let g \u003d rgb[1] / 255;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let b \u003d rgb[2] / 255;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let x;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let y;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      let z;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      r \u003d (r \u003e 0.04045) ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      g \u003d (g \u003e 0.04045) ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      b \u003d (b \u003e 0.04045) ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      x \u003d (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      y \u003d (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      z \u003d (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      x \u003d (x \u003e 0.008856) ? (x ** (1 / 3)) : (7.787 * x) + 16 / 116;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      y \u003d (y \u003e 0.008856) ? (y ** (1 / 3)) : (7.787 * y) + 16 / 116;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      z \u003d (z \u003e 0.008856) ? (z ** (1 / 3)) : (7.787 * z) + 16 / 116;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)];"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    processFileTypes() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "      const selectedColors \u003d [\u0027#ffe119\u0027, \u0027#4363d8\u0027, \u0027#3cb44b\u0027, \u0027#f58231\u0027, \u0027#911eb4\u0027, \u0027#46f0f0\u0027, \u0027#f032e6\u0027,"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "          \u0027#bcf60c\u0027, \u0027#fabebe\u0027, \u0027#008080\u0027, \u0027#e6beff\u0027, \u0027#9a6324\u0027, \u0027#fffac8\u0027, \u0027#800000\u0027, \u0027#aaffc3\u0027, \u0027#808000\u0027, \u0027#ffd8b1\u0027,"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "          \u0027#000075\u0027, \u0027#808080\u0027];"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "      const fileTypeColors \u003d {};"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      let i \u003d 0;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "      this.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "          Object.keys(user.fileTypeContribution).forEach((fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Object.prototype.hasOwnProperty.call(fileTypeColors, fileType)) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              if (i \u003c selectedColors.length) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                fileTypeColors[fileType] \u003d selectedColors[i];"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                i +\u003d 1;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              } else {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                fileTypeColors[fileType] \u003d this.getNonRepeatingColor(Object.values(fileTypeColors));"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (!this.fileTypes.includes(fileType)) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              this.fileTypes.push(fileType);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.fileTypeColors \u003d fileTypeColors;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.checkedFileTypes \u003d this.fileTypes.slice();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    splitCommitsWeek(user, sinceDate, untilDate) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "      const { commits } \u003d user;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const nextMondayDate \u003d this.dateRounding(sinceDate, 0); // round up for the next monday"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "      const nextMondayMs \u003d (new Date(nextMondayDate)).getTime();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sinceMs \u003d new Date(sinceDate).getTime();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "      const untilMs \u003d (new Date(untilDate)).getTime();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "      if (nextMondayDate \u003c\u003d untilDate) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pushCommitsWeek(sinceMs, nextMondayMs - 1, res, commits);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pushCommitsWeek(nextMondayMs, untilMs, res, commits);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pushCommitsWeek(sinceMs, untilMs, res, commits);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      user.commits \u003d res;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    pushCommitsWeek(sinceMs, untilMs, res, commits) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const diff \u003d Math.round(Math.abs((untilMs - sinceMs) / window.DAY_IN_MS));"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const weekInMS \u003d window.DAY_IN_MS * 7;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "      for (let weekId \u003d 0; weekId \u003c diff / 7; weekId +\u003d 1) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const startOfWeekMs \u003d sinceMs + (weekId * weekInMS);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const endOfWeekMs \u003d startOfWeekMs + weekInMS - window.DAY_IN_MS;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        const endOfWeekMsWithinUntilMs \u003d endOfWeekMs \u003c\u003d untilMs ? endOfWeekMs : untilMs;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        const week \u003d {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "          insertions: 0,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "          deletions: 0,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          date: window.getDateStr(startOfWeekMs),"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          endDate: window.getDateStr(endOfWeekMsWithinUntilMs),"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "          commitResults: [],"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addLineContributionWeek(endOfWeekMsWithinUntilMs, week, commits);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (week.commitResults.length \u003e 0) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "          res.push(week);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    addLineContributionWeek(endOfWeekMs, week, commits) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "      // commits are not contiguous, meaning there are gaps of days without"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "      // commits, so we are going to check each commit\u0027s date and make sure"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "      // it is within the duration of a week"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "      while (commits.length \u003e 0"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "          \u0026\u0026 (new Date(commits[0].date)).getTime() \u003c\u003d endOfWeekMs) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        const commit \u003d commits.shift();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        week.insertions +\u003d commit.insertions;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        week.deletions +\u003d commit.deletions;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        commit.commitResults.forEach((commitResult) \u003d\u003e week.commitResults.push(commitResult));"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getUserCommits(user, sinceDate, untilDate) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "      user.commits \u003d [];"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "      const userFirst \u003d user.dailyCommits[0];"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "      const userLast \u003d user.dailyCommits[user.dailyCommits.length - 1];"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!userFirst) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!sinceDate || sinceDate \u003d\u003d\u003d \u0027undefined\u0027) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        sinceDate \u003d userFirst.date;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!untilDate) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        untilDate \u003d userLast.date;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "      user.dailyCommits.forEach((commit) \u003d\u003e {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        const { date } \u003d commit;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date \u003e\u003d sinceDate \u0026\u0026 date \u003c\u003d untilDate) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          const filteredCommit \u003d JSON.parse(JSON.stringify(commit));"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          if (this.filterBreakdown) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.filterCommitByCheckedFileTypes(filteredCommit);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          if (filteredCommit.commitResults.length \u003e 0) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            user.commits.push(filteredCommit);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    filterCommitByCheckedFileTypes(commit) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const filteredCommitResults \u003d commit.commitResults.map((result) \u003d\u003e {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        const filteredFileTypes \u003d this.getFilteredFileTypes(result);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.updateCommitResultWithFileTypes(result, filteredFileTypes);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }).filter((result) \u003d\u003e Object.values(result.fileTypesAndContributionMap).length \u003e 0);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commit.insertions \u003d filteredCommitResults.reduce((acc, result) \u003d\u003e acc + result.insertions, 0);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commit.deletions \u003d filteredCommitResults.reduce((acc, result) \u003d\u003e acc + result.deletions, 0);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commit.commitResults \u003d filteredCommitResults;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getFilteredFileTypes(commitResult) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return Object.keys(commitResult.fileTypesAndContributionMap)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .filter(this.isFileTypeChecked)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .reduce((obj, fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            obj[fileType] \u003d commitResult.fileTypesAndContributionMap[fileType];"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return obj;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          }, {});"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    isFileTypeChecked(fileType) {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return this.checkedFileTypes.includes(fileType);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    updateCommitResultWithFileTypes(commitResult, filteredFileTypes) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commitResult.insertions \u003d Object.values(filteredFileTypes)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .reduce((acc, fileType) \u003d\u003e acc + fileType.insertions, 0);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commitResult.deletions \u003d Object.values(filteredFileTypes)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .reduce((acc, fileType) \u003d\u003e acc + fileType.deletions, 0);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      commitResult.fileTypesAndContributionMap \u003d filteredFileTypes;"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "    getOptionWithOrder() {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "      [this.sortingOption, this.isSortingDsc] \u003d this.sortGroupSelection.split(\u0027 \u0027);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "      [this.sortingWithinOption, this.isSortingWithinDsc] \u003d this.sortWithinGroupSelection.split(\u0027 \u0027);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    sortFiltered(filtered, filterControl) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const { filterGroupSelection } \u003d filterControl;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "      this.getOptionWithOrder();"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "      let full \u003d [];"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027) {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        // push all repos into the same group"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        full[0] \u003d this.groupByNone(filtered, filterControl);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } else if (filterGroupSelection \u003d\u003d\u003d \u0027groupByAuthors\u0027) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        full \u003d this.groupByAuthors(filtered, filterControl);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        full \u003d this.groupByRepos(filtered, filterControl);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return full;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    // updating filters programically //"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    resetDateRange() {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      this.hasModifiedSinceDate \u003d false;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      this.hasModifiedUntilDate \u003d false;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "      this.tmpFilterSinceDate \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "      this.tmpFilterUntilDate \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      window.removeHash(\u0027since\u0027);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      window.removeHash(\u0027until\u0027);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "    updateTmpFilterSinceDate(event) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "      const since \u003d event.target.value;"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "      this.hasModifiedSinceDate \u003d true;"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!this.isSafariBrowser) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterSinceDate \u003d since;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        event.target.value \u003d this.filterSinceDate;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "      if (dateFormatRegex.test(since) \u0026\u0026 since \u003e\u003d this.minDate) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterSinceDate \u003d since;"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        event.currentTarget.style.removeProperty(\u0027border-bottom-color\u0027);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid since date detected"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        event.currentTarget.style.borderBottomColor \u003d \u0027red\u0027;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    updateTmpFilterUntilDate(event) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "      const until \u003d event.target.value;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "      this.hasModifiedUntilDate \u003d true;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!this.isSafariBrowser) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterUntilDate \u003d until;"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        event.target.value \u003d this.filterUntilDate;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "      if (dateFormatRegex.test(until) \u0026\u0026 until \u003c\u003d this.maxDate) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tmpFilterUntilDate \u003d until;"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        event.currentTarget.style.removeProperty(\u0027border-bottom-color\u0027);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid until date detected"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        event.currentTarget.style.borderBottomColor \u003d \u0027red\u0027;"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    updateCheckedFileTypeContribution(ele) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let validCommits \u003d 0;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      Object.keys(ele.fileTypeContribution).forEach((fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (this.checkedFileTypes.includes(fileType)) {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          validCommits +\u003d ele.fileTypeContribution[fileType];"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      ele.checkedFileTypeContribution \u003d validCommits;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    groupByRepos(repos, sortingControl) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "      const sortedRepos \u003d [];"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        sortingWithinOption, sortingOption, isSortingDsc, isSortingWithinDsc,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } \u003d sortingControl;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sortWithinOption \u003d sortingWithinOption \u003d\u003d\u003d \u0027title\u0027 ? \u0027displayName\u0027 : sortingWithinOption;"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sortOption \u003d sortingOption \u003d\u003d\u003d \u0027groupTitle\u0027 ? \u0027searchPath\u0027 : sortingOption;"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "      repos.forEach((users) \u003d\u003e {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this.filterBreakdown \u0026\u0026 sortWithinOption \u003d\u003d\u003d \u0027totalCommits\u0027) {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          users.sort(window.comparator((ele) \u003d\u003e ele.checkedFileTypeContribution));"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          users.sort(window.comparator((ele) \u003d\u003e ele[sortWithinOption]));"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (isSortingWithinDsc) {"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "          users.reverse();"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        sortedRepos.push(users);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      sortedRepos.sort(window.comparator(this.sortingHelper, sortOption));"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (isSortingDsc) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        sortedRepos.reverse();"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "      return sortedRepos;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    groupByNone(repos, sortingControl) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "      const sortedRepos \u003d [];"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const { sortingOption, isSortingDsc } \u003d sortingControl;"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const isSortingGroupTitle \u003d sortingOption \u003d\u003d\u003d \u0027groupTitle\u0027;"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "      repos.forEach((users) \u003d\u003e {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "          sortedRepos.push(user);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "      sortedRepos.sort(window.comparator((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isSortingGroupTitle) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "          return repo.searchPath + repo.name;"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this.filterBreakdown \u0026\u0026 sortingOption \u003d\u003d\u003d \u0027totalCommits\u0027) {"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          return repo.checkedFileTypeContribution;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return repo[sortingOption];"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "      }));"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (isSortingDsc) {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        sortedRepos.reverse();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "      return sortedRepos;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    groupByAuthors(repos, sortingControl) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "      const authorMap \u003d {};"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "      const filtered \u003d [];"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        sortingWithinOption, sortingOption, isSortingDsc, isSortingWithinDsc,"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } \u003d sortingControl;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sortWithinOption \u003d sortingWithinOption \u003d\u003d\u003d \u0027title\u0027 ? \u0027searchPath\u0027 : sortingWithinOption;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const sortOption \u003d sortingOption \u003d\u003d\u003d \u0027groupTitle\u0027 ? \u0027displayName\u0027 : sortingOption;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "      repos.forEach((users) \u003d\u003e {"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "          if (Object.keys(authorMap).includes(user.name)) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            authorMap[user.name].push(user);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "          } else {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "            authorMap[user.name] \u003d [user];"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "          }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "      Object.keys(authorMap).forEach((author) \u003d\u003e {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this.filterBreakdown \u0026\u0026 sortWithinOption \u003d\u003d\u003d \u0027totalCommits\u0027) {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          authorMap[author].sort(window.comparator((repo) \u003d\u003e repo.checkedFileTypeContribution));"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          authorMap[author].sort(window.comparator((repo) \u003d\u003e repo[sortWithinOption]));"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (isSortingWithinDsc) {"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "          authorMap[author].reverse();"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "        filtered.push(authorMap[author]);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      filtered.sort(window.comparator(this.sortingHelper, sortOption));"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (isSortingDsc) {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        filtered.reverse();"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "      return filtered;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "    getGroupCommitsVariance(total, group) {"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (this.filterBreakdown \u0026\u0026 this.sortingOption \u003d\u003d\u003d \u0027totalCommits\u0027) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return total + group.checkedFileTypeContribution;"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "      return total + group[this.sortingOption];"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    sortingHelper(element, sortingOption) {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "      return sortingOption \u003d\u003d\u003d \u0027totalCommits\u0027 || sortingOption \u003d\u003d\u003d \u0027variance\u0027"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "          ? element.reduce(this.getGroupCommitsVariance, 0)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "          : element[0][sortingOption];"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    },"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    restoreZoomFiltered(info) {"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zSince, zUntil, zTimeFrame, zIsMerge, zFilterSearch,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } \u003d info;"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const filtered \u003d [];"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const groups \u003d JSON.parse(JSON.stringify(this.repos));"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      groups.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          // only filter users that match with zoom user and previous searched user"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          if (this.matchZoomUser(info, user) \u0026\u0026 this.isMatchSearchedUser(zFilterSearch, user)) {"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.getUserCommits(user, zSince, zUntil);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (zTimeFrame \u003d\u003d\u003d \u0027week\u0027) {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              this.splitCommitsWeek(user, zSince, zUntil);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.updateCheckedFileTypeContribution(user);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            res.push(user);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      });"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (res.length) {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        filtered.push(res);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (zIsMerge) {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.mergeGroupByIndex(filtered, 0);"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return filtered[0][0];"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    matchZoomUser(info, user) {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zIsMerge, zFilterGroup, zRepo, zAuthor,"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } \u003d info;"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (zIsMerge) {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return zFilterGroup \u003d\u003d\u003d \u0027groupByRepos\u0027"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          ? user.repoName \u003d\u003d\u003d zRepo"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          : user.name \u003d\u003d\u003d zAuthor;"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return user.repoName \u003d\u003d\u003d zRepo \u0026\u0026 user.name \u003d\u003d\u003d zAuthor;"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    dateRounding(datestr, roundDown) {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      // rounding up to nearest monday"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const date \u003d new Date(datestr);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const day \u003d date.getUTCDay();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let datems \u003d date.getTime();"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (roundDown) {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        datems -\u003d ((day + 6) % 7) * window.DAY_IN_MS;"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        datems +\u003d ((8 - day) % 7) * window.DAY_IN_MS;"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return window.getDateStr(datems);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    this.processFileTypes();"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "    this.renderFilterHash();"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getFiltered();"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  beforeMount() {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    this.$root.$on(\u0027restoreCommits\u0027, (info) \u003d\u003e {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const zoomFilteredUser \u003d this.restoreZoomFiltered(info);"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      info.zUser \u003d zoomFilteredUser;"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    });"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    this.$root.$on(\u0027restoreFileTypeColors\u0027, (info) \u003d\u003e {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      info.fileTypeColors \u003d this.fileTypeColors;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    });"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  },"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  mounted() {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    this.$store.commit(\u0027updateMergedGroup\u0027, []);"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    // restoring custom merged groups after watchers finish their job"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    setTimeout(() \u003d\u003e {"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.restoreMergedGroups();"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }, 0);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vSummaryCharts: window.vSummaryCharts,"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 4,
      "niqiukun": 89,
      "yash-chowdhary": 6,
      "jamessspanggg": 239,
      "-": 486,
      "0blivious": 103
    }
  },
  {
    "path": "frontend/src/static/js/v_summary_charts.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/* global Vuex */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "window.vSummaryCharts \u003d {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  props: [\u0027checkedFileTypes\u0027, \u0027filtered\u0027, \u0027fileTypeColors\u0027, \u0027avgContributionSize\u0027, \u0027filterBreakdown\u0027,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      \u0027filterGroupSelection\u0027, \u0027filterTimeFrame\u0027, \u0027filterSinceDate\u0027, \u0027filterUntilDate\u0027, \u0027isMergeGroup\u0027,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u0027minDate\u0027, \u0027maxDate\u0027, \u0027filterSearch\u0027],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  template: window.$(\u0027v_summary_charts\u0027).innerHTML,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      drags: [],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    };"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    avgCommitSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let totalCommits \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let totalCount \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.filteredRepos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        repo.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          user.commits.forEach((slice) \u003d\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (slice.insertions \u003e 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              totalCount +\u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              totalCommits +\u003d slice.insertions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return totalCommits / totalCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    filteredRepos() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return this.filtered.filter((repo) \u003d\u003e repo.length \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ...Vuex.mapState([\u0027mergedGroups\u0027]),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getFileTypeContributionBars(fileTypeContribution) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      let currentBarWidth \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const fullBarWidth \u003d 100;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const contributionPerFullBar \u003d (this.avgContributionSize * 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const allFileTypesContributionBars \u003d {};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      Object.keys(fileTypeContribution)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          .filter((fileType) \u003d\u003e this.checkedFileTypes.includes(fileType))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          .forEach((fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            const contribution \u003d fileTypeContribution[fileType];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            let barWidth \u003d (contribution / contributionPerFullBar) * fullBarWidth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            const contributionBars \u003d [];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // if contribution bar for file type is able to fit on the current line"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (currentBarWidth + barWidth \u003c fullBarWidth) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              contributionBars.push(barWidth);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              currentBarWidth +\u003d barWidth;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              // take up all the space left on the current line"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              contributionBars.push(fullBarWidth - currentBarWidth);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              barWidth -\u003d fullBarWidth - currentBarWidth;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              // additional bar width will start on a new line"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              const numOfFullBars \u003d Math.floor(barWidth / fullBarWidth);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              for (let i \u003d 0; i \u003c numOfFullBars; i +\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                contributionBars.push(fullBarWidth);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              const remainingBarWidth \u003d barWidth % fullBarWidth;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              if (remainingBarWidth !\u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                contributionBars.push(remainingBarWidth);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              currentBarWidth \u003d remainingBarWidth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            allFileTypesContributionBars[fileType] \u003d contributionBars;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return allFileTypesContributionBars;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getFileTypes(repo) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const fileTypes \u003d [];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      repo.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Object.keys(user.fileTypeContribution).forEach((fileType) \u003d\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          if (this.checkedFileTypes.includes(fileType) \u0026\u0026 !fileTypes.includes(fileType)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            fileTypes.push(fileType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return fileTypes;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getGroupTotalContribution(group) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const property \u003d this.filterBreakdown ? \u0027checkedFileTypeContribution\u0027 : \u0027totalCommits\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return group.reduce((acc, ele) \u003d\u003e acc + ele[property], 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    getUserTotalContribution(user) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return this.filterBreakdown ? user.checkedFileTypeContribution : user.totalCommits;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getContributionBars(totalContribution) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const contributionLimit \u003d (this.avgContributionSize * 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const cnt \u003d parseInt(totalContribution / contributionLimit, 10);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      for (let cntId \u003d 0; cntId \u003c cnt; cntId +\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        res.push(100);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const last \u003d (totalContribution % contributionLimit) / contributionLimit;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (last !\u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        res.push(last * 100);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return res;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getAuthorProfileLink(userName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return `https://github.com/${userName}`;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getRepoLink(repo) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const { REPOS } \u003d window;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const { location, branch } \u003d REPOS[repo.repoId];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (Object.prototype.hasOwnProperty.call(location, \u0027organization\u0027)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return `${window.BASE_URL}/${location.organization}/${location.repoName}/tree/${branch}`;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return repo.location;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // triggering opening of tabs //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    openTabAuthorship(user, repo, index, isMerged) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const { minDate, maxDate, fileTypeColors } \u003d this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const info \u003d {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        minDate,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        maxDate,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author: user.name,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        repo: user.repoName,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        name: user.displayName,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        isMergeGroup: isMerged,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        location: this.getRepoLink(repo[index]),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        repoIndex: index,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        totalCommits: user.totalCommits,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        fileTypeColors,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.$store.commit(\u0027updateTabAuthorshipInfo\u0027, info);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    openTabZoomSubrange(user, evt, isMerge) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const isKeyPressed \u003d window.isMacintosh ? evt.metaKey : evt.ctrlKey;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (isKeyPressed) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (this.drags.length \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.dragViewDown(evt);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          this.dragViewUp(evt);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      // skip if accidentally clicked on ramp chart"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (this.drags.length \u003d\u003d\u003d 2 \u0026\u0026 this.drags[1] - this.drags[0]) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const tdiff \u003d new Date(this.filterUntilDate) - new Date(this.filterSinceDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const idxs \u003d this.drags.map((x) \u003d\u003e x * tdiff / 100);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const tsince \u003d window.getDateStr(new Date(this.filterSinceDate).getTime() + idxs[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        const tuntil \u003d window.getDateStr(new Date(this.filterSinceDate).getTime() + idxs[1]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.drags \u003d [];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.openTabZoom(user, tsince, tuntil, isMerge);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    openTabZoom(user, since, until, isMerge) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        avgCommitSize, filterGroupSelection, filterTimeFrame, filterSearch,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      } \u003d this;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const clonedUser \u003d Object.assign({}, user); // so that changes in summary won\u0027t affect zoom"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const info \u003d {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zRepo: user.repoName,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zAuthor: user.name,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zFilterGroup: filterGroupSelection,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zTimeFrame: filterTimeFrame,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zAvgCommitSize: avgCommitSize,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zUser: clonedUser,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zLocation: this.getRepoLink(user),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zSince: since,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zUntil: until,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        zIsMerge: isMerge,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zFilterSearch: filterSearch,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      };"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.$store.commit(\u0027updateTabZoomInfo\u0027, info);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getBaseTarget(target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return target.className \u003d\u003d\u003d \u0027summary-chart__ramp\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          ? target"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          : this.getBaseTarget(target.parentElement);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    dragViewDown(evt) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      window.deactivateAllOverlays();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const pos \u003d evt.clientX;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const ramp \u003d this.getBaseTarget(evt.target);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.drags \u003d [pos];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const base \u003d ramp.offsetWidth;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const offset \u003d ramp.parentElement.offsetLeft;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const overlay \u003d ramp.getElementsByClassName(\u0027overlay\u0027)[0];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.style.marginLeft \u003d \u00270\u0027;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.style.width \u003d `${(pos - offset) * 100 / base}%`;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.className +\u003d \u0027 edge\u0027;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    dragViewUp(evt) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      window.deactivateAllOverlays();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const ramp \u003d this.getBaseTarget(evt.target);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const base \u003d ramp.offsetWidth;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.drags.push(evt.clientX);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.drags.sort((a, b) \u003d\u003e a - b);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const offset \u003d ramp.parentElement.offsetLeft;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.drags \u003d this.drags.map((x) \u003d\u003e (x - offset) * 100 / base);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const overlay \u003d ramp.getElementsByClassName(\u0027overlay\u0027)[0];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.style.marginLeft \u003d `${this.drags[0]}%`;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.style.width \u003d `${this.drags[1] - this.drags[0]}%`;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      overlay.className +\u003d \u0027 show\u0027;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    getPercentile(index) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      if (this.filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return (Math.round((index + 1) * 1000 / this.filtered[0].length) / 10).toFixed(1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return (Math.round((index + 1) * 1000 / this.filtered.length) / 10).toFixed(1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    },"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    getGroupName(group) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      return window.getGroupName(group, this.filterGroupSelection);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    isGroupMerged(groupName) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      return this.mergedGroups.includes(groupName);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    handleMergeGroup(groupName) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const info \u003d this.mergedGroups;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      info.push(groupName);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.$store.commit(\u0027updateMergedGroup\u0027, info);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    handleExpandGroup(groupName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      const info \u003d this.mergedGroups.filter((x) \u003d\u003e x !\u003d\u003d groupName);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      this.$store.commit(\u0027updateMergedGroup\u0027, info);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vRamp: window.vRamp,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  },"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29,
      "jamessspanggg": 11,
      "0blivious": 220
    }
  },
  {
    "path": "frontend/src/static/js/v_zoom.js",
    "fileType": "js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "window.vZoom \u003d {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  props: [\u0027info\u0027],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  template: window.$(\u0027v_zoom\u0027).innerHTML,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      showAllCommitMessageBody: true,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      expandedCommitMessagesCount: this.totalCommitMessageBodyCount,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      commitsSortType: \u0027time\u0027,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      toReverseSortedCommits: true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    sortingFunction() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      const commitSortFunction \u003d this.commitsSortType \u003d\u003d\u003d \u0027time\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ? (commit) \u003d\u003e commit.date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        : (commit) \u003d\u003e commit.insertions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      return (a, b) \u003d\u003e (this.toReverseSortedCommits ? -1 : 1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        * window.comparator(commitSortFunction)(a, b);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    filteredUser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zUser, zSince, zUntil, zTimeFrame,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      } \u003d this.info;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const filteredUser \u003d Object.assign({}, zUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const date \u003d zTimeFrame \u003d\u003d\u003d \u0027week\u0027 ? \u0027endDate\u0027 : \u0027date\u0027;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      filteredUser.commits \u003d zUser.commits.filter("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          (commit) \u003d\u003e commit[date] \u003e\u003d zSince \u0026\u0026 commit[date] \u003c\u003d zUntil,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      ).sort(this.sortingFunction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      return filteredUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    totalCommitMessageBodyCount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      let nonEmptyCommitMessageCount \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      this.filteredUser.commits.forEach((commit) \u003d\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commit.commitResults.forEach((commitResult) \u003d\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          if (commitResult.messageBody !\u003d\u003d \u0027\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            nonEmptyCommitMessageCount +\u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "      return nonEmptyCommitMessageCount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    initiate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (!this.info.zUser) { // restoring zoom tab from reloaded page"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.restoreZoomTab();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    openSummary() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const info \u003d { since: this.info.zSince, until: this.info.zUntil };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      this.$store.commit(\u0027updateSummaryDates\u0027, info);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    getSliceLink(slice) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (this.info.zIsMerge) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return `${window.getBaseLink(slice.repoId)}/commit/${slice.hash}`;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      return `${window.getBaseLink(this.info.zUser.repoId)}/commit/${slice.hash}`;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    scrollToCommit(tag, commit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      const el \u003d this.$el.getElementsByClassName(`${commit} ${tag}`)[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      if (el) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        el.focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    restoreZoomTab() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      // restore selected user\u0027s commits from v_summary"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      this.$root.$emit(\u0027restoreCommits\u0027, this.info);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    setInfoHash() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const { addHash, encodeHash } \u003d window;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        zAvgCommitSize, zSince, zUntil, zFilterGroup,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        zTimeFrame, zIsMerge, zAuthor, zRepo, zFilterSearch,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      } \u003d this.info;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zA\u0027, zAuthor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zR\u0027, zRepo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zACS\u0027, zAvgCommitSize);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zS\u0027, zSince);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zFS\u0027, zFilterSearch);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zU\u0027, zUntil);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zMG\u0027, zIsMerge);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zFTF\u0027, zTimeFrame);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      addHash(\u0027zFGS\u0027, zFilterGroup);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      encodeHash();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    toggleAllCommitMessagesBody(isActive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      this.showAllCommitMessageBody \u003d isActive;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const toRename \u003d this.showAllCommitMessageBody ? \u0027commit-message message-body active\u0027 : \u0027commit-message message-body\u0027;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      const commitMessageClasses \u003d document.getElementsByClassName(\u0027commit-message message-body\u0027);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      Array.from(commitMessageClasses).forEach((commitMessageClass) \u003d\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        commitMessageClass.className \u003d toRename;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      this.expandedCommitMessagesCount \u003d isActive ? this.totalCommitMessageBodyCount : 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    updateExpandedCommitMessagesCount() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      this.expandedCommitMessagesCount \u003d document.getElementsByClassName(\u0027commit-message message-body active\u0027)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "          .length;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    removeZoomHashes() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zA\u0027);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zR\u0027);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zFS\u0027);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zACS\u0027);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zS\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zU\u0027);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zFGS\u0027);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zFTF\u0027);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.removeHash(\u0027zMG\u0027);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      window.encodeHash();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    this.initiate();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  mounted() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    this.setInfoHash();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    this.updateExpandedCommitMessagesCount();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  beforeDestroy() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    this.removeZoomHashes();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  },"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    vRamp: window.vRamp,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 59,
      "-": 66,
      "0blivious": 13,
      "ang-zeyu": 4
    }
  },
  {
    "path": "frontend/src/summary.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#summary"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  form.summary-picker.mui-form--inline(onsubmit\u003d\"return false;\")"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .summary-picker__section"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-textfield.search_box"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        input.summary-picker__search(type\u003d\"text\", v-on:change\u003d\"updateFilterSearch\", v-model\u003d\"filterSearch\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label search"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        button.mui-btn.mui-btn--raised(type\u003d\"button\", v-on:click.prevent\u003d\"resetFilterSearch\") x"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-select.grouping"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        select(v-model\u003d\"filterGroupSelection\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"groupByNone\") None"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"groupByRepos\") Repo/Branch"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"groupByAuthors\") Author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label group by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-select.sort-group"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        select(v-model\u003d\"sortGroupSelection\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"groupTitle\") \u0026uarr; group title"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"groupTitle dsc\") \u0026darr; group title"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"totalCommits\") \u0026uarr; contribution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"totalCommits dsc\") \u0026darr; contribution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"variance\") \u0026uarr; variance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"variance dsc\") \u0026darr; variance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label sort groups by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-select.sort-within-group"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        select("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-model\u003d\"sortWithinGroupSelection\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-bind:disabled\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027 || allGroupsMerged\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"title\") \u0026uarr; title"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"title dsc\") \u0026darr; title"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"totalCommits\") \u0026uarr; contribution"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"totalCommits dsc\") \u0026darr; contribution"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"variance\") \u0026uarr; variance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"variance dsc\") \u0026darr; variance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label sort within groups by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      .mui-select.granularity"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        select(v-model\u003d\"filterTimeFrame\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"commit\") Commit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"day\") Day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          option(value\u003d\"week\") Week"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label granularity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-textfield.summary-picker__date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        input(v-if\u003d\"isSafariBrowser\", type\u003d\"text\", placeholder\u003d\"yyyy-mm-dd\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:value\u003d\"filterSinceDate\", v-on:keyup.enter\u003d\"updateTmpFilterSinceDate\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          onkeydown\u003d\"formatInputDateOnKeyDown(event)\", oninput\u003d\"appendDashInputDate(event)\", maxlength\u003d10)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        input(v-else, type\u003d\"date\", name\u003d\"since\", v-bind:value\u003d\"filterSinceDate\", v-on:input\u003d\"updateTmpFilterSinceDate\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          v-bind:min\u003d\"minDate\", v-bind:max\u003d\"filterUntilDate\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label since"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-textfield.summary-picker__date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        input(v-if\u003d\"isSafariBrowser\", type\u003d\"text\", placeholder\u003d\"yyyy-mm-dd\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:value\u003d\"filterUntilDate\", v-on:keyup.enter\u003d\"updateTmpFilterUntilDate\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          onkeydown\u003d\"formatInputDateOnKeyDown(event)\", oninput\u003d\"appendDashInputDate(event)\", maxlength\u003d10)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        input(v-else, type\u003d\"date\", name\u003d\"until\", v-bind:value\u003d\"filterUntilDate\", v-on:input\u003d\"updateTmpFilterUntilDate\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          v-bind:min\u003d\"filterSinceDate\", v-bind:max\u003d\"maxDate\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label until"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .mui-textfield.summary-picker__date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a(v-on:click\u003d\"resetDateRange\") Reset date range"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .summary-picker__checkboxes.summary-picker__section"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        label.filter-breakdown"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          input.mui-checkbox.summary-picker__checkbox(type\u003d\"checkbox\", v-model\u003d\"filterBreakdown\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-on:change\u003d\"setSummaryHash()\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          span breakdown by file type"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label.merge-group("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:style\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027 ? { opacity:0.5 } : { opacity:1.0 }\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          input.summary-picker__checkbox.mui-checkbox("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            type\u003d\"checkbox\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            v-model\u003d\"allGroupsMerged\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:disabled\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          )"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          span merge all groups"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  .error-message-box(v-if\u003d\"Object.entries(errorMessages).length\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .error-message-box__close-button(v-on:click\u003d\"dismissTab($event)\") \u0026times;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .error-message-box__message The following issues occurred when analyzing the following repositories:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .error-message-box__failed-repo(v-for\u003d\"errorBlock in errorMessages\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      font-awesome-icon(icon\u003d\"exclamation\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      span.error-message-box__failed-repo--name {{ errorBlock.repoName }}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .error-message-box__failed-repo--reason("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-if\u003d\"errorBlock.errorMessage.startsWith(\u0027Unexpected error stack trace\u0027)\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      )"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        span Oops, an unexpected error occurred. If this is due to a problem in RepoSense, please report in\u0026nbsp;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:href\u003d\"getReportIssueGitHubLink(errorBlock.errorMessage)\", target\u003d\"_blank\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          strong our issue tracker\u0026nbsp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        span or email us at\u0026nbsp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:href\u003d\"getReportIssueEmailLink(errorBlock.errorMessage)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          span {{ getReportIssueEmailAddress() }}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .error-message-box__failed-repo--reason(v-else) {{ errorBlock.errorMessage }}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  .fileTypes(v-if\u003d\"filterBreakdown\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .checkboxes.mui-form--inline(v-if\u003d\"Object.keys(fileTypeColors).length \u003e 0\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      label(style\u003d\u0027background-color: #000000; color: #ffffff\u0027)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        input.mui-checkbox--fileType#all(type\u003d\"checkbox\", v-model\u003d\"checkAllFileTypes\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        span All:\u0026nbsp;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      template(v-for\u003d\"fileType in Object.keys(fileTypeColors)\" )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        label("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:key\u003d\"fileType\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:style\u003d\"{ \u0027background-color\u0027: fileTypeColors[fileType], \\"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \u0027color\u0027: this.getFontColor(fileTypeColors[fileType])}\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          input.mui-checkbox--fileType("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            type\u003d\"checkbox\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:id\u003d\"fileType\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:value\u003d\"fileType\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-model\u003d\"checkedFileTypes\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          )"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          span {{ fileType }}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  v-summary-charts("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filtered\u003d\"filtered\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:file-type-colors\u003d\"fileTypeColors\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:checked-file-types\u003d\"checkedFileTypes\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:avg-contribution-size\u003d\"avgContributionSize\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filter-group-selection\u003d\"filterGroupSelection\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filter-breakdown\u003d\"filterBreakdown\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filter-time-frame\u003d\"filterTimeFrame\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filter-since-date\u003d\"filterSinceDate\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:filter-until-date\u003d\"filterUntilDate\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:filter-search\u003d\"filterSearch\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:min-date\u003d\"minDate\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    v-bind:max-date\u003d\"maxDate\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  )"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 3,
      "Tejas2805": 1,
      "jamessspanggg": 8,
      "0blivious": 110
    }
  },
  {
    "path": "frontend/src/summary_charts.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#summary-charts"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  .summary-charts(v-for\u003d\"(repo, i) in filteredRepos\")"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .summary-charts__title(v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByNone\u0027\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .summary-charts__title--index {{ i+1 }}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .summary-charts__title--groupname"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        template(v-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByRepos\u0027\") {{ repo[0].repoName }}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        template("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-else-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByAuthors\u0027\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:class\u003d\" { warn: repo[0].name \u003d\u003d\u003d \u0027-\u0027 }\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ) {{ repo[0].displayName }} ({{ repo[0].name }})"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .summary-charts__title--contribution("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title\u003d\"Total contribution of group\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      ) [{{ getGroupTotalContribution(repo) }} lines]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      a("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-if\u003d\"!isGroupMerged(getGroupName(repo))\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-on:click\u003d\"handleMergeGroup(getGroupName(repo))\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        title\u003d\"click to merge group\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      )"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        font-awesome-icon.icon-button(:icon\u003d\"[\u0027fas\u0027, \u0027chevron-up\u0027]\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      a("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-if\u003d\"isGroupMerged(getGroupName(repo))\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        v-on:click\u003d\"handleExpandGroup(getGroupName(repo))\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        title\u003d\"click to expand group\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      )"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        font-awesome-icon.icon-button(:icon\u003d\"[\u0027fas\u0027, \u0027chevron-down\u0027]\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      a("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        v-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByRepos\u0027\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-bind:href\u003d\"getRepoLink(repo[0])\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title\u003d\"click to view group\u0027s repo\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      )"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        font-awesome-icon.icon-button(:icon\u003d\"[\u0027fab\u0027, \u0027github\u0027]\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      a("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-else-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByAuthors\u0027\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-bind:href\u003d\"getAuthorProfileLink(repo[0].name)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title\u003d\"click to view author\u0027s profile\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      )"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        font-awesome-icon.icon-button(icon\u003d\"user\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      template(v-if\u003d\"isGroupMerged(getGroupName(repo))\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        a("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByAuthors\u0027\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          title\u003d\"click to view group\u0027s code\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          onclick\u003d\"deactivateAllOverlays()\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-on:click\u003d\"openTabAuthorship(repo[0], repo, 0, isGroupMerged(getGroupName(repo)))\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(icon\u003d\"code\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          title\u003d\"click to view breakdown of commits\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          onclick\u003d\"deactivateAllOverlays()\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-on:click\u003d\"openTabZoom(repo[0], filterSinceDate, filterUntilDate, isGroupMerged(getGroupName(repo)))\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(icon\u003d\"list-ul\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      .summary-charts__title--percentile {{ getPercentile(i) }} %"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .summary-charts__fileType--breakdown(v-if\u003d\"filterBreakdown\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      template(v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByNone\u0027\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .summary-charts__fileType--breakdown__legend("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-for\u003d\"fileType in getFileTypes(repo)\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:key\u003d\"fileType\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            icon\u003d\"circle\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:style\u003d\"{ \u0027color\u0027: fileTypeColors[fileType] }\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          )"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          span \u0026nbsp; {{ fileType }} \u0026nbsp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    .summary-chart(v-for\u003d\"(user, j) in repo\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      .summary-chart__title(v-if\u003d\"!isGroupMerged(getGroupName(repo))\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        .summary-chart__title--index {{ j+1 }}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .summary-chart__title--repo(v-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027\") {{ user.repoName }}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .summary-chart__title--author-repo(v-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByAuthors\u0027\") {{ user.repoName }}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .summary-chart__title--name("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByAuthors\u0027\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:class\u003d\"{ warn: user.name \u003d\u003d\u003d \u0027-\u0027 }\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ) {{ user.displayName }} ({{ user.name }})"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .summary-chart__title--contribution [{{ getUserTotalContribution(user) }} lines]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        a("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByRepos\u0027\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-bind:href\u003d\"getRepoLink(repo[j])\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          title\u003d\"click to view repo\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        )"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(:icon\u003d\"[\u0027fab\u0027, \u0027github\u0027]\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        a("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          v-if\u003d\"filterGroupSelection !\u003d\u003d \u0027groupByAuthors\u0027\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-bind:href\u003d\"getAuthorProfileLink(repo[j].name)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          title\u003d\"click to view author\u0027s profile\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        )"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(icon\u003d\"user\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          title\u003d\"click to view author\u0027s code\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          onclick\u003d\"deactivateAllOverlays()\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-on:click\u003d\"openTabAuthorship(user, repo, j, isGroupMerged(getGroupName(repo)))\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(icon\u003d\"code\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        a("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          title\u003d\"click to view breakdown of commits\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          onclick\u003d\"deactivateAllOverlays()\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-on:click\u003d\"openTabZoom(user, filterSinceDate, filterUntilDate, isGroupMerged(getGroupName(repo)))\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.icon-button(icon\u003d\"list-ul\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .summary-chart__title--percentile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-if\u003d\"filterGroupSelection \u003d\u003d\u003d \u0027groupByNone\u0027\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ) {{ getPercentile(j) }} %"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .summary-chart__ramp("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        v-on:click\u003d\"openTabZoomSubrange(user, $event, isGroupMerged(getGroupName(repo)))\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      )"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-ramp("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:groupby\u003d\"filterGroupSelection\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:user\u003d\"user\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:tframe\u003d\"filterTimeFrame\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:sdate\u003d\"filterSinceDate\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:udate\u003d\"filterUntilDate\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          v-bind:avgsize\u003d\"avgCommitSize\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          v-bind:mergegroup\u003d\"isGroupMerged(getGroupName(repo))\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        .overlay"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .summary-chart__contribution"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        template(v-if\u003d\"filterBreakdown\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          .summary-chart__contrib("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-for\u003d\"(widths, fileType) in getFileTypeContributionBars(user.fileTypeContribution)\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          )"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .summary-chart__contrib--bar("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-for\u003d\"width in widths\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-bind:style\u003d\"{ width: width + \u0027%\u0027,\\"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0027background-color\u0027: fileTypeColors[fileType] }\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-bind:title\u003d\"fileType + \u0027: \u0027 + user.fileTypeContribution[fileType] + \u0027 lines, \u0027\\"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + \u0027total: \u0027 + user.checkedFileTypeContribution + \u0027 lines \u0027 + \u0027(contribution from \u0027 + minDate + \u0027 to \u0027\\"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + maxDate + \u0027)\u0027\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            )"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        template(v-else)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          .summary-chart__contrib("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:title\u003d\"\u0027Total contribution from \u0027 + minDate + \u0027 to \u0027 + maxDate + \u0027: \u0027\\"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              + user.totalCommits + \u0027 lines\u0027\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .summary-chart__contrib--bar("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-for\u003d\"width in getContributionBars(user.totalCommits)\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-bind:style\u003d\"{ width: width+\u0027%\u0027 }\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            )"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 23,
      "niqiukun": 21,
      "Tejas2805": 4,
      "jamessspanggg": 1,
      "0blivious": 82,
      "ang-zeyu": 5
    }
  },
  {
    "path": "frontend/src/tabs/authorship.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#authorship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .panel-title"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    span Code Panel"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  .toolbar--multiline(v-if\u003d\"hasCommits(info)\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    a(v-if\u003d\"activeFilesCount \u003c this.selectedFiles.length\", v-on:click\u003d\"expandAll()\") show all file details"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    a(v-if\u003d\"activeFilesCount \u003e 0\", v-on:click\u003d\"collapseAll()\") hide all file details"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .panel-heading"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    a.group-name("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:href\u003d\"info.location\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      v-bind:title\u003d\"\u0027Click to open the repo\u0027\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    ) {{ info.repo }}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    .author(v-if\u003d\"!info.isMergeGroup\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      span \u0026#8627; \u0026nbsp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      span {{ info.name }} ({{ info.author }})"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .period"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      span \u0026#8627; \u0026nbsp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      span {{ info.minDate }} to {{ info.maxDate }} \u0026nbsp;\u0026nbsp; ({{ selectedFiles.length }} files changed)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .title"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    .contribution(v-if\u003d\"isLoaded \u0026\u0026 files.length!\u003d0\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      .sorting.mui-form--inline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        .mui-select"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          select(v-model\u003d\"filesSortType\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            option(value\u003d\"lineOfCode\") LoC"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            option(value\u003d\"path\") Path"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            option(value\u003d\"fileName\") File Name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            option(value\u003d\"fileType\") File Type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          label sort by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .mui-select.sort-order"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          select(v-model\u003d\"toReverseSortFiles\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            option(v-bind:value\u003d\u0027true\u0027) Descending"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            option(v-bind:value\u003d\u0027false\u0027) Ascending"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          label order"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      .searchbox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        input.radio-button--search("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          type\u003d\"radio\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          value\u003d\"search\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          v-model\u003d\"filterType\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          v-on:change\u003d\"indicateSearchBar(); updateSearchBarValue();\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        )"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        .file-picker.mui-form--inline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          input#search("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            type\u003d\"search\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            placeholder\u003d\"Filter by glob\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            ref\u003d\"searchBar\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            v-bind:value\u003d\"searchBarValue\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            v-on:focus\u003d\"indicateSearchBar\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            v-on:keyup.enter\u003d\"updateSearchBarValue\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          )"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          button#submit-button("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            type\u003d\"button\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            v-on:click\u003d\"indicateSearchBar(); updateSearchBarValue();\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          ) Filter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .fileTypes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        input.radio-button--checkbox("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          type\u003d\"radio\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          value\u003d\"checkboxes\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          v-model\u003d\"filterType\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          v-on:change\u003d\"indicateCheckBoxes\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        )"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .checkboxes.mui-form--inline(v-if\u003d\"files.length \u003e 0\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          label(style\u003d\u0027background-color: #000000; color: #ffffff\u0027)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            input.mui-checkbox--fileType(type\u003d\"checkbox\", v-model\u003d\"isSelectAllChecked\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            span(v-bind:title\u003d\"getTotalFileBlankLineInfo()\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              span All\u0026nbsp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              span {{ totalLineCount }}\u0026nbsp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              span ({{ totalBlankLineCount }})\u0026nbsp;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          template(v-for\u003d\"fileType in Object.keys(fileTypeLinesObj)\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            label("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-bind:key\u003d\"fileType\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-bind:style\u003d\"{\\"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0027background-color\u0027: info.fileTypeColors[fileType],\\"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0027color\u0027: this.getFontColor(info.fileTypeColors[fileType])\\"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                }\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            )"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              input.mui-checkbox--fileType(type\u003d\"checkbox\", v-bind:id\u003d\"fileType\", v-bind:value\u003d\"fileType\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                v-on:change\u003d\"indicateCheckBoxes\", v-model\u003d\"selectedFileTypes\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "              span(v-bind:title\u003d\"getFileTypeBlankLineInfo(fileType)\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                span {{ fileType }}\u0026nbsp;{{ fileTypeLinesObj[fileType] }}\u0026nbsp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                span ({{ fileTypeBlankLinesObj[fileType] }})\u0026nbsp;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  .files(v-if\u003d\"isLoaded\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    .empty(v-if\u003d\"files.length \u003d\u003d\u003d 0\") nothing to see here :("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    template(v-for\u003d\"(file, i) in selectedFiles\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      .file(v-bind:key\u003d\"file.path\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        .title"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          span.path(v-on:click\u003d\"toggleFileActiveProperty(file)\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            font-awesome-icon(icon\u003d\"caret-down\", fixed-width, v-show\u003d\"file.active\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            font-awesome-icon(icon\u003d\"caret-right\", fixed-width, v-show\u003d\"!file.active\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            span {{ i + 1 }}. \u0026nbsp;\u0026nbsp; {{ file.path }} \u0026nbsp;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          span.icons"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            a("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "              v-bind:href\u003d\"getFileLink(file, \u0027commits\u0027)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "              title\u003d\"click to view the history view of file\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "              font-awesome-icon.button(icon\u003d\"history\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            a("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "              v-bind:href\u003d\"getFileLink(file, \u0027blame\u0027)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "              title\u003d\"click to view the blame view of file\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "              font-awesome-icon.button(icon\u003d\"user-edit\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          span.fileTypeLabel("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-bind:style\u003d\"{\\"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              \u0027background-color\u0027: info.fileTypeColors[file.fileType],\\"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              \u0027color\u0027: this.getFontColor(info.fileTypeColors[file.fileType])\\"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              }\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "          ) {{ file.fileType }}\u0026nbsp;{{ file.lineCount }}\u0026nbsp;({{ file.blankLineCount }})"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        pre.hljs.file-content(v-if\u003d\"file.wasCodeLoaded\", v-show\u003d\"file.active\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          template(v-for\u003d\"segment in file.segments\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            v-segment(v-bind:segment\u003d\"segment\", v-bind:path\u003d\"file.path\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  .empty(v-else) loading..."
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 7,
      "niqiukun": 1,
      "Tejas2805": 18,
      "jamessspanggg": 4,
      "-": 31,
      "0blivious": 22,
      "ang-zeyu": 28
    }
  },
  {
    "path": "frontend/src/tabs/segment.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".segment(v-bind:class\u003d\"{ untouched: !segment.authored, active: segment.lines.length \u003c 5 }\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .closer(v-if\u003d\"!segment.authored \u0026\u0026 segment.lines.length \u003e 4\", v-on:click\u003d\"loadCode()\", ref\u003d\"topButton\")"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    font-awesome-icon.icon.open(icon\u003d\"plus-circle\", v-bind:title\u003d\"\u0027Click to open code\u0027\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    font-awesome-icon.icon.hide(icon\u003d\"chevron-circle-down\", v-bind:title\u003d\"\u0027Click to hide code\u0027\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  div(v-if\u003d\"loaded\", v-hljs\u003d\"path\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    .code(v-for\u003d\"(line, index) in segment.lines\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      .line-number {{ segment.lineNumbers[index] + \"\\n\" }}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      .line-content {{ line + \"\\n\" }}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  .closer.bottom(v-if\u003d\"!segment.authored \u0026\u0026 segment.lines.length \u003e 4\", v-on:click\u003d\"collapseCode\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    font-awesome-icon.icon.hide(icon\u003d\"chevron-circle-up\", v-bind:title\u003d\"\u0027Click to hide code\u0027\")"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "-": 5,
      "ang-zeyu": 2
    }
  },
  {
    "path": "frontend/src/tabs/zoom.pug",
    "fileType": "pug",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#zoom"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .panel-title"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    span Commits Panel"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  .toolbar--multiline(v-if\u003d\"filteredUser.commits.length \u0026\u0026 totalCommitMessageBodyCount\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    a("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      v-if\u003d\"expandedCommitMessagesCount \u003c totalCommitMessageBodyCount\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      v-on:click\u003d\"toggleAllCommitMessagesBody(true)\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ) show all commit messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    a("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      v-if\u003d\"expandedCommitMessagesCount \u003e 0\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      v-on:click\u003d\"toggleAllCommitMessagesBody(false)\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ) hide all commit messages"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .panel-heading"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .group-name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      span("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        v-if\u003d\"info.zFilterGroup \u003d\u003d\u003d \u0027groupByAuthors\u0027\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      ) {{ filteredUser.displayName }} ({{ filteredUser.name }})"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      a("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        v-else,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        v-bind:href\u003d\"info.zLocation\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        v-bind:title\u003d\"\u0027Click to open the repo\u0027\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        span {{ filteredUser.repoName }}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .author(v-if\u003d\"!info.zIsMerge\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      span \u0026#8627; \u0026nbsp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      span(v-if\u003d\"info.zFilterGroup \u003d\u003d\u003d \u0027groupByAuthors\u0027\") {{ filteredUser.repoName }}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      span(v-else) {{ filteredUser.displayName }} ({{ filteredUser.name }})"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .period"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      span \u0026#8627; \u0026nbsp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      span {{ info.zSince }} to {{ info.zUntil }} \u0026nbsp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      a(v-on:click\u003d\"openSummary\") [Show ramp chart for this period]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .zoom__title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    .zoom__title--granularity granularity: one ramp per {{ info.zTimeFrame }}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    .zoom__title--tags"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      template(v-for\u003d\"commit in filteredUser.commits\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        template(v-for\u003d\"commitResult in commit.commitResults\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          template(v-if\u003d\"commitResult.tags\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .tag("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-for\u003d\"tag in commitResult.tags\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "              v-on:click\u003d\"scrollToCommit(tag, `tag ${commitResult.hash}`)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            )"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "              font-awesome-icon(icon\u003d\"tags\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              span \u0026nbsp;{{ tag }}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  v-ramp("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:groupby\u003d\"info.zFilterGroup\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    v-bind:user\u003d\"filteredUser\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:tframe\u003d\"info.zTimeFrame\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:sdate\u003d\"info.zSince\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:udate\u003d\"info.zUntil\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:avgsize\u003d\"info.zAvgCommitSize\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    v-bind:mergegroup\u003d\"info.zIsMerge\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  .sorting.mui-form--inline"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .mui-select"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      select(v-model\u003d\"commitsSortType\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        option(value\u003d\"time\") Time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        option(value\u003d\"lineOfCode\") LoC"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      label sort by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    .mui-select"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      select(v-model\u003d\"toReverseSortedCommits\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        option(v-bind:value\u003d\u0027true\u0027) Descending"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        option(v-bind:value\u003d\u0027false\u0027) Ascending"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      label order"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  .zoom__day(v-for\u003d\"day in filteredUser.commits\", v-bind:key\u003d\"day.date\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    h3(v-if\u003d\"info.zTimeFrame \u003d\u003d\u003d \u0027week\u0027\") Week of {{ day.date }}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    h3(v-else) {{ day.date }}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    template"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      //- use tabindex to enable focus property on div"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      .commit-message("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        tabindex\u003d\"-1\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        v-for\u003d\"slice in day.commitResults\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        v-bind:key\u003d\"slice.hash\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        v-bind:class\u003d\"{ \u0027message-body active\u0027: slice.messageBody !\u003d\u003d \u0027\u0027 }\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "      )"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        a.message-title(v-bind:href\u003d\"getSliceLink(slice)\", target\u003d\"_blank\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .within-border {{ slice.messageTitle.substr(0, 50) }}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          .not-within-border(v-if\u003d\"slice.messageTitle.length \u003e 50\") {{ slice.messageTitle.substr(50) }}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        span \u0026nbsp; ({{ slice.insertions }} lines) \u0026nbsp;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        template(v-if\u003d\"slice.tags\", v-for\u003d\"tag in slice.tags\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "          .tag(tabindex\u003d\"-1\", v-bind:class\u003d\"[`${slice.hash}`, tag]\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            font-awesome-icon(icon\u003d\"tags\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            span \u0026nbsp;{{ tag }}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        a("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "          v-if\u003d\"slice.messageBody !\u003d\u003d \u0027\u0027\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "          v-on:click\u003d\"updateExpandedCommitMessagesCount\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "          onclick\u003d\"toggleNext(this)\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "          title\u003d\"Click to show/hide the commit message body\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "          font-awesome-icon.commit-message--button(icon\u003d\"ellipsis-h\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        .body(v-if\u003d\"slice.messageBody !\u003d\u003d \u0027\u0027\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "          pre {{ slice.messageBody }}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            .dashed-border"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "niqiukun": 9,
      "Tejas2805": 24,
      "jamessspanggg": 22,
      "-": 18,
      "0blivious": 18
    }
  },
  {
    "path": "package.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"name\": \"reposense\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"version\": \"1.0.0\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \"description\": \"[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense) [![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \"main\": \"index.js\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \"directories\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"doc\": \"docs\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \"scripts\": {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \"lint\": \"eslint frontend/src/**/*js frontend/cypress/**.js \u0026\u0026 stylelint frontend/src/**/*.scss \u0026\u0026 npm run puglint\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \"puglint\": \"pug-lint frontend/src/index.pug frontend/src/ramp.pug frontend/src/summary.pug frontend/src/summary_charts.pug frontend/src/resizer.pug frontend/src/tabs/authorship.pug frontend/src/tabs/segment.pug frontend/src/tabs/zoom.pug\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \"lintfix\": \"eslint --fix frontend/src/**/*js frontend/cypress/**.js \u0026\u0026 stylelint --fix frontend/src/**/*.scss\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"browserify\": \"browserify -t vueify -e frontend/src/static/js/v_authorship.js -o frontend/build/static/js/v_authorship.js\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"spuild\": \"spuild frontend\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \"repository\": {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"type\": \"git\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"url\": \"git+https://github.com/reposense/RepoSense.git\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \"author\": \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \"license\": \"ISC\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \"bugs\": {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"url\": \"https://github.com/reposense/RepoSense/issues\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \"homepage\": \"https://github.com/reposense/RepoSense#readme\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \"dependencies\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"minimatch\": \"^3.0.4\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"pug-lint\": \"^2.6.0\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"spuild\": \"1.0.2\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"stylelint-config-standard\": \"^18.3.0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \"devDependencies\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"browserify\": \"^16.2.3\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint\": \"^4.19.1\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint-config-airbnb-base\": \"^13.0.0\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"eslint-plugin-import\": \"^2.13.0\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"stylelint\": \"^10.1.0\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"stylelint-order\": \"^3.0.1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"vueify\": \"^9.4.1\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "-": 37,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/reposense/RepoSense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.helper.HelpScreenException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.AuthorConfiguration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.GroupConfiguration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.ArgsParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.GroupConfigCsvParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.parser.InvalidCsvException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.ReportServer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.util.TimeUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * The main RepoSense class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoSense {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int SERVER_PORT_NUMBER \u003d 9000;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss yyyy z\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VERSION_UNSPECIFIED \u003d \"unspecified\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The entry point of the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            TimeUtil.startTimer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            CliArguments cliArguments \u003d ArgsParser.parse(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cliArguments instanceof ViewCliArguments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                ReportServer.startServer(SERVER_PORT_NUMBER, (("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        ViewCliArguments) cliArguments).getReportDirectoryPath().toAbsolutePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (cliArguments instanceof ConfigCliArguments) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                configs \u003d getRepoConfigurations((ConfigCliArguments) cliArguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (cliArguments instanceof LocationsCliArguments) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                configs \u003d getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"CliArguments\u0027s subclass type is unhandled.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    cliArguments.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPath\u003e reportFoldersAndFiles \u003d ReportGenerator.generateReposReport(configs,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    cliArguments.getOutputFilePath().toAbsolutePath().toString(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatter.format(ZonedDateTime.now(cliArguments.getZoneId())),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    cliArguments.getSinceDate(), cliArguments.getUntilDate(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    TimeUtil::getElapsedTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.zipFoldersAndFiles(reportFoldersAndFiles, cliArguments.getOutputFilePath().toAbsolutePath(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    \".json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.info(TimeUtil.getElapsedTimeMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cliArguments.isAutomaticallyLaunching()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        } catch (IOException | ParseException | InvalidCsvException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (HelpScreenException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // help message was printed by the ArgumentParser; it is safe to exit."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code ConfigCliArguments}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if user-supplied csv file does not exists or is not readable."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws InvalidCsvException if user-supplied repo-config csv is malformed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(ConfigCliArguments cliArguments)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            throws IOException, InvalidCsvException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration.merge(repoConfigs, authorConfigs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            // FileNotFoundException thrown as author-config.csv is not found."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // Ignore exception as the file is optional."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        } catch (IOException | InvalidCsvException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            // for all IO and invalid csv exceptions, log the error and continue"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            groupConfigs \u003d new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            // FileNotFoundException thrown as groups-config.csv is not found."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            // Ignore exception as the file is optional."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        } catch (IOException | InvalidCsvException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            // for all other IO and invalid csv exceptions, log the error and continue"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoConfigs;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code LocationsCliArguments}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(LocationsCliArguments cliArguments) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String locationString : cliArguments.getLocations()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                configs.add(new RepoConfiguration(new RepoLocation(locationString)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (InvalidLocationException ile) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.log(Level.WARNING, ile.getMessage(), ile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return configs;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getVersion() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String version \u003d RepoSense.class.getPackage().getImplementationVersion();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (version \u003d\u003d null || version.equals(VERSION_UNSPECIFIED)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            version \u003d System.getProperty(\"version\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return version;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 21,
      "jamessspanggg": 4,
      "-": 127
    }
  },
  {
    "path": "src/main/java/reposense/authorship/FileInfoAnalyzer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.analyzer.AnnotatorAnalyzer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitBlame;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Analyzes the target and information given in the {@code FileInfo}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileInfoAnalyzer {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(FileInfoAnalyzer.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int AUTHOR_NAME_OFFSET \u003d \"author \".length();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int AUTHOR_EMAIL_OFFSET \u003d \"author-mail \".length();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int AUTHOR_TIME_OFFSET \u003d \"author-time \".length();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int AUTHOR_TIMEZONE_OFFSET \u003d \"author-tz \".length();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int FULL_COMMIT_HASH_LENGTH \u003d 40;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_FILE_MISSING \u003d \"Unable to analyze the file located at \\\"%s\\\" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"as the file is missing from your system. Skipping this file.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Analyzes the lines of the file, given in the {@code fileInfo}, that has changed in the time period provided"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * by {@code config}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Returns null if the file is missing from the local system, or none of the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Author} specified in {@code config} contributed to the file in {@code fileInfo}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static FileResult analyzeFile(RepoConfiguration config, FileInfo fileInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String relativePath \u003d fileInfo.getPath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        if (FileUtil.isEmptyFile(config.getRepoRoot(), relativePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        aggregateBlameAuthorInfo(config, fileInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AnnotatorAnalyzer.aggregateAnnotationAuthorInfo(fileInfo, config.getAuthorEmailsAndAliasesMap());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!config.getAuthorList().isEmpty() \u0026\u0026 fileInfo.isAllAuthorsIgnored(config.getAuthorList())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return generateFileResult(fileInfo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates and returns a {@code FileResult} with the authorship results from {@code fileInfo} consolidated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileResult generateFileResult(FileInfo fileInfo) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (LineInfo line : fileInfo.getLines()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Author author \u003d line.getAuthor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            authorContributionMap.put(author, authorContributionMap.getOrDefault(author, 0) + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FileResult(fileInfo.getPath(), fileInfo.getFileType(), fileInfo.getLines(), authorContributionMap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Author} for each line in {@code fileInfo} based on the git blame analysis on the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void aggregateBlameAuthorInfo(RepoConfiguration config, FileInfo fileInfo) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String blameResults \u003d getGitBlameResult(config, fileInfo.getPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] blameResultLines \u003d blameResults.split(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d Paths.get(fileInfo.getPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Long sinceDateInMs \u003d config.getSinceDate().getTime();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Long untilDateInMs \u003d config.getUntilDate().getTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int systemRawOffset \u003d TimeZone.getTimeZone(ZoneId.systemDefault()).getRawOffset();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (int lineCount \u003d 0; lineCount \u003c blameResultLines.length; lineCount +\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            String commitHash \u003d blameResultLines[lineCount].substring(0, FULL_COMMIT_HASH_LENGTH);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            String authorName \u003d blameResultLines[lineCount + 1].substring(AUTHOR_NAME_OFFSET);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String authorEmail \u003d blameResultLines[lineCount + 2]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .substring(AUTHOR_EMAIL_OFFSET).replaceAll(\"\u003c|\u003e\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Long commitDateInMs \u003d Long.parseLong(blameResultLines[lineCount + 3].substring(AUTHOR_TIME_OFFSET)) * 1000;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            String authorTimeZone \u003d blameResultLines[lineCount + 4].substring(AUTHOR_TIMEZONE_OFFSET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Author author \u003d config.getAuthor(authorName, authorEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            int authorRawOffset \u003d TimeZone.getTimeZone(ZoneOffset.of(authorTimeZone)).getRawOffset();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (systemRawOffset !\u003d authorRawOffset) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                // adjust commit date according to difference in timezone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                commitDateInMs +\u003d authorRawOffset - systemRawOffset;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            if (!fileInfo.isFileLineTracked(lineCount / 5) || author.isIgnoringFile(filePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || CommitHash.isInsideCommitList(commitHash, config.getIgnoreCommitList())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || commitDateInMs \u003c sinceDateInMs || commitDateInMs \u003e untilDateInMs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                author \u003d Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            fileInfo.setLineAuthor(lineCount / 5, author);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the analysis result from running git blame on {@code filePath}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getGitBlameResult(RepoConfiguration config, String filePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return GitBlame.blame(config.getRepoRoot(), filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 4,
      "jamessspanggg": 20,
      "-": 98
    }
  },
  {
    "path": "src/main/java/reposense/authorship/analyzer/AnnotatorAnalyzer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.authorship.analyzer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Analyzes the authorship of a {@code FileInfo} using the given annotations on the file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AnnotatorAnalyzer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String AUTHOR_TAG \u003d \"@@author\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REGEX_AUTHOR_NAME_FORMAT \u003d \"([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern PATTERN_AUTHOR_NAME_FORMAT \u003d Pattern.compile(REGEX_AUTHOR_NAME_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MATCHER_GROUP_AUTHOR_NAME \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overrides the authorship information in {@code fileInfo} based on annotations given on the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void aggregateAnnotationAuthorInfo(FileInfo fileInfo, Map\u003cString, Author\u003e authorAliasMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        Optional\u003cAuthor\u003e currentAnnotatedAuthor \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d Paths.get(fileInfo.getPath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (LineInfo lineInfo : fileInfo.getLines()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineInfo.getContent().contains(AUTHOR_TAG)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                Optional\u003cAuthor\u003e newAnnotatedAuthor \u003d findAuthorInLine(lineInfo.getContent(), authorAliasMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                if (!newAnnotatedAuthor.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    // end of an author tag should belong to the current author too."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    // if an end author tag was used without a corresponding starting tag, attribute the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    // line to UNKNOWN_AUTHOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    lineInfo.setAuthor(currentAnnotatedAuthor.orElse(Author.UNKNOWN_AUTHOR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                } else if (newAnnotatedAuthor.get().isIgnoringFile(filePath)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    newAnnotatedAuthor \u003d Optional.empty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                //set a new author"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                currentAnnotatedAuthor \u003d newAnnotatedAuthor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            currentAnnotatedAuthor.ifPresent(lineInfo::setAuthor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the author name from the given {@code line}, finds the corresponding {@code Author}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * in {@code authorAliasMap}, and returns this {@code Author} stored in an {@code Optional}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return {@code Optional.of(Author#UNKNOWN_AUTHOR)} if no matching {@code Author} is found,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         {@code Optional.empty()} if an end author tag is used (i.e. \"@@author\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *         or if the extracted author name is too short."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static Optional\u003cAuthor\u003e findAuthorInLine(String line, Map\u003cString, Author\u003e authorAliasMap) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] split \u003d line.split(AUTHOR_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d extractAuthorName(split[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            return Optional.of(authorAliasMap.getOrDefault(name, Author.UNKNOWN_AUTHOR));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the name that follows the specific format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an empty string if no such author was found, the new author name otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractAuthorName(String authorTagParameters) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedParameters \u003d authorTagParameters.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d PATTERN_AUTHOR_NAME_FORMAT.matcher(trimmedParameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean foundMatch \u003d matcher.find();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!foundMatch) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return matcher.group(MATCHER_GROUP_AUTHOR_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 19,
      "-": 66
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitInfoAnalyzer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static reposense.util.StringsUtil.removeQuote;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.commits.model.ContributionPair;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Analyzes commit information found in the git log."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommitInfoAnalyzer {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final DateFormat GIT_STRICT_ISO_DATE_FORMAT \u003d new SimpleDateFormat(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String TAB_SPLITTER \u003d \"\\t\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String BINARY_FILE_CONTRIBUTION \u003d \"-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int STAT_ADDITION_INDEX \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int STAT_DELETION_INDEX \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int STAT_FILE_PATH_INDEX \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoAnalyzer.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_START_ANALYZING_COMMIT_INFO \u003d \"Analyzing commits info for %s (%s)...\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_SPLITTER \u003d \"\\\\|\\\\n\\\\|\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String REF_SPLITTER \u003d \",\\\\s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String NEW_LINE_SPLITTER \u003d \"\\\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String TAG_PREFIX \u003d \"tag:\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int COMMIT_HASH_INDEX \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int AUTHOR_INDEX \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int EMAIL_INDEX \u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DATE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MESSAGE_TITLE_INDEX \u003d 4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MESSAGE_BODY_INDEX \u003d 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int REF_NAME_INDEX \u003d 6;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern INSERTION_PATTERN \u003d Pattern.compile(\"([0-9]+) insertion\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern DELETION_PATTERN \u003d Pattern.compile(\"([0-9]+) deletion\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern MESSAGEBODY_LEADING_PATTERN \u003d Pattern.compile(\"^ {4}\", Pattern.MULTILINE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Analyzes each {@code CommitInfo} in {@code commitInfos} and returns a list of {@code CommitResult} that is not"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * specified to be ignored or the author is inside {@code config}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cCommitResult\u003e analyzeCommits(List\u003cCommitInfo\u003e commitInfos, RepoConfiguration config) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(String.format(MESSAGE_START_ANALYZING_COMMIT_INFO, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commitInfos.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(commitInfo -\u003e analyzeCommit(commitInfo, config))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(commitResult -\u003e !commitResult.getAuthor().equals(Author.UNKNOWN_AUTHOR)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 !CommitHash.isInsideCommitList(commitResult.getHash(), config.getIgnoreCommitList()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(CommitResult::getTime))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the relevant data from {@code commitInfo} into a {@code CommitResult}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static CommitResult analyzeCommit(CommitInfo commitInfo, RepoConfiguration config) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String infoLine \u003d commitInfo.getInfoLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String statLine \u003d commitInfo.getStatLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String[] elements \u003d infoLine.split(LOG_SPLITTER, 7);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d elements[COMMIT_HASH_INDEX];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d config.getAuthor(elements[AUTHOR_INDEX], elements[EMAIL_INDEX]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d GIT_STRICT_ISO_DATE_FORMAT.parse(elements[DATE_INDEX]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse the date from git log result for commit.\", pe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String messageTitle \u003d (elements.length \u003e MESSAGE_TITLE_INDEX) ? elements[MESSAGE_TITLE_INDEX] : \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String messageBody \u003d (elements.length \u003e MESSAGE_BODY_INDEX)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                ? getCommitMessageBody(elements[MESSAGE_BODY_INDEX]) : \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String[] refs \u003d (elements.length \u003e REF_NAME_INDEX)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                ? elements[REF_NAME_INDEX].split(REF_SPLITTER)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                : new String[]{\"\"};"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String[] tags \u003d Arrays.stream(refs).filter(ref -\u003e ref.contains(TAG_PREFIX)).toArray(String[]::new);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (tags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            tags \u003d null; // set to null so it won\u0027t be converted to json"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            extractTagNames(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (statLine.isEmpty()) { // empty commit, no files changed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return new CommitResult(author, hash, date, messageTitle, messageBody, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String[] statInfos \u003d statLine.split(NEW_LINE_SPLITTER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String[] fileTypeContributions \u003d Arrays.copyOfRange(statInfos, 0, statInfos.length - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e fileTypeAndContributionMap \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                getFileTypesAndContribution(fileTypeContributions, config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return new CommitResult(author, hash, date, messageTitle, messageBody, tags, fileTypeAndContributionMap);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the number of lines added and deleted for the specified file types in {@code config}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static Map\u003cFileType, ContributionPair\u003e getFileTypesAndContribution(String[] filePathContributions,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            RepoConfiguration config) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (String filePathContribution : filePathContributions) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            String[] infos \u003d filePathContribution.split(TAB_SPLITTER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (isBinaryContribution(infos[STAT_ADDITION_INDEX], infos[STAT_DELETION_INDEX])) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                continue; // skip binary file contributions"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            int addition \u003d Integer.parseInt(infos[STAT_ADDITION_INDEX]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            int deletion \u003d Integer.parseInt(infos[STAT_DELETION_INDEX]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            String filePath \u003d extractFilePath(infos[STAT_FILE_PATH_INDEX]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            FileType fileType \u003d config.getFileType(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (!fileTypesAndContributionMap.containsKey(fileType)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                fileTypesAndContributionMap.put(fileType, new ContributionPair());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            ContributionPair contributionPair \u003d fileTypesAndContributionMap.get(fileType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            contributionPair.addInsertions(addition);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            contributionPair.addDeletions(deletion);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return fileTypesAndContributionMap;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Extracts the correct file path from the unprocessed git log {@code filePath}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static String extractFilePath(String filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String filteredFilePath \u003d filePath;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (filteredFilePath.contains(MOVED_FILE_INDICATION)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // moved file has the format: fileA \u003d\u003e newPosition/fileA"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            filteredFilePath \u003d filteredFilePath.substring(filePath.indexOf(MOVED_FILE_INDICATION)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    + MOVED_FILE_INDICATION.length());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // Removes the trailing \u0027}\u0027 character from the file name, as renamed file names have ending \u0027}\u0027 character."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            filteredFilePath \u003d filteredFilePath.replaceAll(\"}$\", \"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // Removes the trailing double quotes from the file name, as filenames that have special characters"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // will be escaped and surrounded by double quotes automatically. e.g. READ\\ME.md -\u003e \"READ\\\\ME.md\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        filteredFilePath \u003d removeQuote(filteredFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return filteredFilePath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Detects binary file contribution based on the git log {@code addition} and {@code deletion}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static boolean isBinaryContribution(String addition, String deletion) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // git log returns \"-\" for binary file additions and deletions"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return addition.equals(BINARY_FILE_CONTRIBUTION) \u0026\u0026 deletion.equals(BINARY_FILE_CONTRIBUTION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Extracts the tag names in {@code tags}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static void extractTagNames(String[] tags) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            tags[i] \u003d tags[i].substring(tags[i].lastIndexOf(TAG_PREFIX) + TAG_PREFIX.length()).trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getCommitMessageBody(String raw) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d MESSAGEBODY_LEADING_PATTERN.matcher(raw);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return matcher.replaceAll(\"\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 99,
      "-": 92,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitInfoExtractor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Extracts commit information of a repository."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommitInfoExtractor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoExtractor.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_START_EXTRACTING_COMMIT_INFO \u003d \"Extracting commits info for %s (%s)...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String INFO_STAT_SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern TRAILING_NEWLINES_PATTERN \u003d Pattern.compile(\"\\n+$\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts out and returns the raw information of each commit for the repo in {@code config}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cCommitInfo\u003e extractCommitInfos(RepoConfiguration config) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(String.format(MESSAGE_START_EXTRACTING_COMMIT_INFO, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e repoCommitInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : config.getAuthorList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            String gitLogResult \u003d GitLog.getWithFiles(config, author);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cCommitInfo\u003e authorCommitInfos \u003d parseGitLogResults(gitLogResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            repoCommitInfos.addAll(authorCommitInfos);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoCommitInfos;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code gitLogResult} into a list of {@code CommitInfo} and returns it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cCommitInfo\u003e parseGitLogResults(String gitLogResult) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cCommitInfo\u003e commitInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] rawCommitInfos \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rawCommitInfos.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            //no log (maybe because no contribution for that file type)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return commitInfos;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Starts from 1 as index 0 is always empty."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c rawCommitInfos.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Matcher matcher \u003d TRAILING_NEWLINES_PATTERN.matcher(rawCommitInfos[i]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String rawCommitInfo \u003d matcher.replaceAll(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            int statLineSeparatorIndex \u003d rawCommitInfo.lastIndexOf(INFO_STAT_SEPARATOR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String infoLine \u003d rawCommitInfo.substring(0, statLineSeparatorIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            String statLine \u003d rawCommitInfo.substring(statLineSeparatorIndex + 1).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            commitInfos.add(new CommitInfo(infoLine, statLine));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(commitInfos);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commitInfos;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 4,
      "-": 68
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/CommitResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the result from analyzing a {@code CommitInfo}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommitResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String hash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String messageTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String messageBody;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final String[] tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final transient Author author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final transient Date time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public CommitResult(Author author, String hash, Date time, String messageTitle, String messageBody, String[] tags,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.hash \u003d hash;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.messageTitle \u003d messageTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.messageBody \u003d messageBody;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.fileTypesAndContributionMap \u003d fileTypesAndContributionMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public CommitResult(Author author, String hash, Date time, String messageTitle, String messageBody, String[] tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.hash \u003d hash;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.messageTitle \u003d messageTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.messageBody \u003d messageBody;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.fileTypesAndContributionMap \u003d Collections.emptyMap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessageTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return messageTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessageBody() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return messageBody;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String[] getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHash() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return hash;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getInsertions() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int insertions \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (ContributionPair contributionPair : fileTypesAndContributionMap.values()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            insertions +\u003d contributionPair.getInsertions();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return insertions;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDeletions() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int deletions \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (ContributionPair contributionPair : fileTypesAndContributionMap.values()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            deletions +\u003d contributionPair.getDeletions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return deletions;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public Map\u003cFileType, ContributionPair\u003e getFileTypesAndContributionMap() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return fileTypesAndContributionMap;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommitResult)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitResult otherCommitResult \u003d (CommitResult) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return author.equals(otherCommitResult.author)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 hash.equals(otherCommitResult.hash)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 time.equals(otherCommitResult.time)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 messageTitle.equals(otherCommitResult.messageTitle)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 messageBody.equals(otherCommitResult.messageBody)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 Arrays.equals(tags, otherCommitResult.tags)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 fileTypesAndContributionMap.equals(otherCommitResult.fileTypesAndContributionMap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return hash.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 38,
      "-": 71,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/ContributionPair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Stores the insertions and deletions as a pair."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class ContributionPair {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private int insertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private int deletions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ContributionPair() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ContributionPair(int insertions, int deletions) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.insertions \u003d insertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.deletions \u003d deletions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public int getInsertions() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return insertions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public int getDeletions() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return deletions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void addInsertions(int insertions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.insertions +\u003d insertions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void addDeletions(int deletions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.deletions +\u003d deletions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!(other instanceof ContributionPair)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ContributionPair otherContributionPair \u003d (ContributionPair) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return insertions \u003d\u003d otherContributionPair.insertions \u0026\u0026 deletions \u003d\u003d otherContributionPair.deletions;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 47
    }
  },
  {
    "path": "src/main/java/reposense/git/GitBlame.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static reposense.util.StringsUtil.addQuote;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.StringsUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains git blame related functionalities."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Git blame is responsible for showing which revision and author last modified each line of a file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitBlame {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMIT_HASH_REGEX \u003d \"(^[0-9a-f]{40} .*)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String AUTHOR_NAME_REGEX \u003d \"(^author .*)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String AUTHOR_EMAIL_REGEX \u003d \"(^author-mail .*)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AUTHOR_TIME_REGEX \u003d \"(^author-time [0-9]+)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AUTHOR_TIMEZONE_REGEX \u003d \"(^author-tz .*)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String COMBINATION_REGEX \u003d COMMIT_HASH_REGEX + \"|\" + AUTHOR_NAME_REGEX + \"|\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            + AUTHOR_EMAIL_REGEX + \"|\" + AUTHOR_TIME_REGEX + \"|\" + AUTHOR_TIMEZONE_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the raw git blame result for the {@code fileDirectory}, performed at the {@code root} directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String blame(String root, String fileDirectory) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String blameCommand \u003d \"git blame -w --line-porcelain\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        blameCommand +\u003d \" \" + addQuote(fileDirectory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return StringsUtil.filterText(runCommand(rootPath, blameCommand), COMBINATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/reposense/git/GitDiff.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains git diff related functionalities."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Git diff is responsible for obtaining the changes between commits, commit and working tree, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitDiff {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHECKED_OUT_COMMIT_REFERENCE \u003d \"HEAD\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the git diff result of the current commit compared to {@code lastCommitHash}, without any context."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String diffCommit(String root, String lastCommitHash) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return runCommand(rootPath, \"git diff -U0 --ignore-submodules\u003dall \" + lastCommitHash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of committed files with the corresponding number of lines added and deleted in the repo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code repoRoot}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cString\u003e getModifiedFilesList(Path repoRoot) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String diffCommand \u003d String.format(\"git diff --ignore-submodules\u003dall --numstat %s %s\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                EMPTY_TREE_HASH, CHECKED_OUT_COMMIT_REFERENCE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String diffResult \u003d runCommand(repoRoot.toAbsolutePath(), diffCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(diffResult.split(\"\\n\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/reposense/git/GitLog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains git log related functionalities."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Git log is responsible to obtain the commit logs and the authors\u0027 info."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitLog {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMIT_INFO_DELIMITER \u003d \"(?m)^\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PRETTY_FORMAT_STRING \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \"\\\"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c%n%H|%n|%aN|%n|%aE|%n|%cI|%n|%s|%n|%w(0,4,4)%b%w(0,0,0)|%n|%D|\\\"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the git commit log info of {@code Author}, in the repository specified in {@code config}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String get(RepoConfiguration config, Author author) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Path rootPath \u003d Paths.get(config.getRepoRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"git log --no-merges -i \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --shortstat\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return runCommand(rootPath, command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the git commit log info of {@code Author}, with the files changed, in the repository specified in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code config}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getWithFiles(RepoConfiguration config, Author author) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Path rootPath \u003d Paths.get(config.getRepoRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"git log --no-merges -i \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --numstat --shortstat\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return runCommand(rootPath, command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/reposense/model/Author.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.PathMatcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Git Author."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_NO_AUTHOR_WITH_COMMITS_FOUND \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"NO AUTHOR WITH COMMITS FOUND WITHIN THIS PERIOD OF TIME\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String UNKNOWN_AUTHOR_GIT_ID \u003d \"-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STANDARD_GITHUB_EMAIL_DOMAIN \u003d \"@users.noreply.github.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_UNCOMMON_EMAIL_PATTERN \u003d \"The provided email, %s, uses uncommon pattern.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_UNCOMMON_GLOB_PATTERN \u003d \"The provided ignore glob, %s, uses uncommon pattern.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMON_EMAIL_REGEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \"^([a-zA-Z0-9_\\\\-\\\\.\\\\+]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMON_GLOB_REGEX \u003d \"^[-a-zA-Z0-9 _/\\\\\\\\*!{}\\\\[\\\\]!(),:.]*$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Author UNKNOWN_AUTHOR \u003d new Author(UNKNOWN_AUTHOR_GIT_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String gitId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cString\u003e emails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient String displayName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cString\u003e authorAliases;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cString\u003e ignoreGlobList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient PathMatcher ignoreGlobMatcher;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author(String gitId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.gitId \u003d gitId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d gitId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorAliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreGlobList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addStandardGitHubEmail(this.emails);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author(StandaloneAuthor sa) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String gitId \u003d sa.getGithubId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(sa.getEmails());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayName \u003d !sa.getDisplayName().isEmpty() ? sa.getDisplayName() : sa.getGithubId();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e authorAliases \u003d sa.getAuthorNames();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d sa.getIgnoreGlobList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.gitId \u003d gitId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorAliases \u003d authorAliases;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        setEmails(emails);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author(Author another) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.gitId \u003d another.gitId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emails \u003d another.emails;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d another.gitId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorAliases \u003d another.authorAliases;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        this.ignoreGlobList \u003d another.ignoreGlobList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreGlobMatcher \u003d another.ignoreGlobMatcher;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that all the strings in the {@code emails} only contains commonly used email patterns."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if any of the values do not meet the criteria."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void validateEmails(List\u003cString\u003e emails) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String email : emails) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!email.matches(COMMON_EMAIL_REGEX)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_EMAIL_PATTERN, email));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that all the strings in the {@code ignoreGlobList} only contains commonly used glob patterns."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if any of the values do not meet the criteria."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void validateIgnoreGlobs(List\u003cString\u003e ignoreGlobList) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String glob : ignoreGlobList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!glob.matches(COMMON_GLOB_REGEX)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_GLOB_PATTERN, glob));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getGitId() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return gitId;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getEmails() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmails(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        validateEmails(emails);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emails \u003d new ArrayList\u003c\u003e(emails);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addStandardGitHubEmail(this.emails);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDisplayName(String displayName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAuthorAliases() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorAliases;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorAliases(List\u003cString\u003e authorAliases) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorAliases \u003d authorAliases;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        validateIgnoreGlobs(ignoreGlobList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreGlobList \u003d new ArrayList\u003c\u003e(ignoreGlobList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Validates and adds a list of ignore glob into the {@code Author} class instance variable without duplicates"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the ignore glob matcher."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void importIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        validateIgnoreGlobs(ignoreGlobList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ignoreGlobList.forEach(ignoreGlob -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (!this.ignoreGlobList.contains(ignoreGlob)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                this.ignoreGlobList.add(ignoreGlob);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Returns true if this author is ignoring the {@code filePath} based on its ignore glob matcher."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public boolean isIgnoringFile(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return ignoreGlobMatcher.matches(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Author)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Author otherAuthor \u003d (Author) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.gitId.equalsIgnoreCase(otherAuthor.gitId);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return gitId !\u003d null ? gitId.toLowerCase().hashCode() : 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return gitId;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the {@code PathMatcher} to the new ignore glob list set."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Called after a new ignore glob list is set."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateIgnoreGlobMatcher() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String globString \u003d \"glob:{\" + String.join(\",\", ignoreGlobList) + \"}\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ignoreGlobMatcher \u003d FileSystems.getDefault().getPathMatcher(globString);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the standard github email to {@code emails} if doesn\u0027t exist."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addStandardGitHubEmail(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String standardGitHubEmail \u003d getGitId() + STANDARD_GITHUB_EMAIL_DOMAIN;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!emails.contains(standardGitHubEmail)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            emails.add(standardGitHubEmail);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anubh-v": 9,
      "-": 182,
      "0blivious": 7
    }
  },
  {
    "path": "src/main/java/reposense/model/AuthorConfiguration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents author configuration information from CSV config file for a single repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AuthorConfiguration {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(AuthorConfiguration.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern EMAIL_PLUS_OPERATOR_PATTERN \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"^(?\u003cprefix\u003e.+)\\\\+(?\u003csuffix\u003e.*)(?\u003cdomain\u003e@.+)$\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private RepoLocation location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String branch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cAuthor\u003e authorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient Map\u003cString, Author\u003e authorEmailsAndAliasesMap \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient Map\u003cAuthor, String\u003e authorDisplayNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AuthorConfiguration(RepoLocation location) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this(location, DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AuthorConfiguration(RepoLocation location, String branch) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears authors information and use the information provided from {@code standaloneConfig}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void update(StandaloneConfig standaloneConfig, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e newAuthorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Author\u003e newAuthorEmailsAndAliasesMap \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cAuthor, String\u003e newAuthorDisplayNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (StandaloneAuthor sa : standaloneConfig.getAuthors()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Author author \u003d new Author(sa);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            author.importIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            newAuthorList.add(author);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            newAuthorDisplayNameMap.put(author, author.getDisplayName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e(author.getAuthorAliases());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(author.getEmails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            aliases.add(author.getGitId());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            aliases.forEach(alias -\u003e newAuthorEmailsAndAliasesMap.put(alias, author));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            emails.forEach(email -\u003e newAuthorEmailsAndAliasesMap.put(email, author));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorList(newAuthorList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorEmailsAndAliasesMap(newAuthorEmailsAndAliasesMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorDisplayNameMap(newAuthorDisplayNameMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AuthorConfiguration)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration otherAuthorConfig \u003d (AuthorConfiguration) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.equals(otherAuthorConfig.location)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 branch.equals(otherAuthorConfig.branch)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 authorList.equals(otherAuthorConfig.authorList)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 authorEmailsAndAliasesMap.equals(otherAuthorConfig.authorEmailsAndAliasesMap)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 authorDisplayNameMap.equals(otherAuthorConfig.authorDisplayNameMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorDisplayNameMap;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorDisplayNameMap \u003d authorDisplayNameMap;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getBranch() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return branch;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setBranch(String branch) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d branch;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cAuthor\u003e getAuthorList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the details of {@code author} to {@code AuthorConfiguration} including the default alias, aliases"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * and display name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAuthorDetails(Author author) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set GitHub Id and its corresponding email as default"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(author.getGitId()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, author.getAuthorAliases());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorDisplayName(author, author.getDisplayName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Propagates {@code ignoreGlobList} to {@code author}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void propagateIgnoreGlobList(Author author, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author.importIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds author to the {@code AuthorList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthor(Author author) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        authorList.add(author);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorDetails(author);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code author} to the {@code AuthorList}, and propagates {@code ignoreGlobList} to the {@code author}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthor(Author author, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        addAuthor(author);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        propagateIgnoreGlobList(author, ignoreGlobList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the authors provided in {@code ignoredAuthorsList} from the author list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeIgnoredAuthors(List\u003cString\u003e ignoredAuthorsList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String author : ignoredAuthorsList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            if (authorEmailsAndAliasesMap.containsKey(author)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                removeAuthorInformation(author);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Removes all information of the {@code author} from the configs"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Precondition: {@code author} must be present in {@code authorEmailsAndAliasesMap}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * @param author Can be an author\u0027s git ID, email, or alias"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void removeAuthorInformation(String author) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Author authorToRemove \u003d authorEmailsAndAliasesMap.get(author);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        authorList.remove(authorToRemove);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        authorDisplayNameMap.remove(authorToRemove);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        authorEmailsAndAliasesMap.remove(authorToRemove.getGitId());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        List\u003cString\u003e aliases \u003d authorToRemove.getAuthorAliases();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        aliases.forEach(alias -\u003e authorEmailsAndAliasesMap.remove(alias));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        List\u003cString\u003e emails \u003d authorToRemove.getEmails();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        emails.forEach(email -\u003e authorEmailsAndAliasesMap.remove(email));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds new authors from {@code authorList} and sets the default alias, aliases, emails and display name"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the new authors. Skips authors that have already been added previously."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthors(List\u003cAuthor\u003e authorList, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : authorList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            if (containsAuthor(author)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.warning(String.format("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Skipping author as %s already in repository %s %s\", author.getGitId(), location, branch));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            addAuthor(author, ignoreGlobList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsAuthor(Author author) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorList.contains(author);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorList(List\u003cAuthor\u003e authorList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorList \u003d authorList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears author mapping information and resets it with the details of current author list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetAuthorInformation() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        authorEmailsAndAliasesMap.clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        authorDisplayNameMap.clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        authorList.forEach(this::setAuthorDetails);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, Author\u003e getAuthorEmailsAndAliasesMap() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorEmailsAndAliasesMap;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorEmailsAndAliasesMap(Map\u003cString, Author\u003e authorEmailsAndAliasesMap) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorEmailsAndAliasesMap \u003d authorEmailsAndAliasesMap;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDisplayName(Author author, String displayName) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        authorDisplayNameMap.put(author, displayName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthorEmailsAndAliasesMapEntry(Author author, List\u003cString\u003e values) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        values.forEach(value -\u003e authorEmailsAndAliasesMap.put(value, author));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoLocation getLocation() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Attempts to find matching {@code Author} given a name and an email."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * If no matching {@code Author} is found, {@code Author#UNKNOWN_AUTHOR} is returned."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author getAuthor(String name, String email) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (authorEmailsAndAliasesMap.containsKey(name)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return authorEmailsAndAliasesMap.get(name);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (authorEmailsAndAliasesMap.containsKey(email)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return authorEmailsAndAliasesMap.get(email);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d EMAIL_PLUS_OPERATOR_PATTERN.matcher(email);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return authorEmailsAndAliasesMap.getOrDefault(matcher.group(\"suffix\") + matcher.group(\"domain\"),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    Author.UNKNOWN_AUTHOR);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDefaultBranch() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.branch.equals(DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 19,
      "-": 226,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/reposense/model/CliArguments.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents command line arguments user supplied when running the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class CliArguments {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path outputFilePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date sinceDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date untilDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isSinceDateProvided;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isUntilDateProvided;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cFileType\u003e formats;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    protected boolean isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ZoneId zoneId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ZoneId getZoneId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return zoneId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getOutputFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return outputFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getSinceDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return sinceDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getUntilDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return untilDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSinceDateProvided() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return isSinceDateProvided;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUntilDateProvided() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return isUntilDateProvided;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFileType\u003e getFormats() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return formats;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAutomaticallyLaunching() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public boolean isStandaloneConfigIgnored() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CliArguments)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments otherCliArguments \u003d (CliArguments) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.outputFilePath.equals(otherCliArguments.outputFilePath)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.sinceDate.equals(otherCliArguments.sinceDate)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.untilDate.equals(otherCliArguments.untilDate)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSinceDateProvided \u003d\u003d otherCliArguments.isSinceDateProvided"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isUntilDateProvided \u003d\u003d otherCliArguments.isUntilDateProvided"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.formats.equals(otherCliArguments.formats)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isAutomaticallyLaunching \u003d\u003d otherCliArguments.isAutomaticallyLaunching"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                \u0026\u0026 this.isStandaloneConfigIgnored \u003d\u003d otherCliArguments.isStandaloneConfigIgnored"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.zoneId.equals(otherCliArguments.zoneId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 6,
      "-": 76
    }
  },
  {
    "path": "src/main/java/reposense/model/ConfigCliArguments.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.GroupConfigCsvParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents command line arguments user supplied when running the program with mandatory field -config."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigCliArguments extends CliArguments {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configFolderPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path repoConfigFilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path authorConfigFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path groupConfigFilePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigCliArguments(Path configFolderPath, Path outputFilePath, Date sinceDate,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Date untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            List\u003cFileType\u003e formats, boolean isAutomaticallyLaunching,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            boolean isStandaloneConfigIgnored, ZoneId zoneId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configFolderPath \u003d configFolderPath.equals(EMPTY_PATH)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                ? configFolderPath.toAbsolutePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                : configFolderPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.repoConfigFilePath \u003d configFolderPath.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorConfigFilePath \u003d configFolderPath.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.groupConfigFilePath \u003d configFolderPath.resolve(GroupConfigCsvParser.GROUP_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.outputFilePath \u003d outputFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isSinceDateProvided \u003d isSinceDateProvided;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isUntilDateProvided \u003d isUntilDateProvided;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zoneId \u003d zoneId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigFolderPath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFolderPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRepoConfigFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoConfigFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAuthorConfigFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfigFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getGroupConfigFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return groupConfigFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ConfigCliArguments)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigCliArguments otherConfigCliArguments \u003d (ConfigCliArguments) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.repoConfigFilePath.equals(otherConfigCliArguments.repoConfigFilePath)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.authorConfigFilePath.equals(otherConfigCliArguments.authorConfigFilePath)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.groupConfigFilePath.equals(otherConfigCliArguments.groupConfigFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/reposense/model/FileType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.PathMatcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSerializationContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a file type for use in {@link FileTypeManager}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern FILE_FORMAT_VALIDATION_PATTERN \u003d Pattern.compile(\"^\\\\w+$\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ILLEGAL_FILE_FORMAT \u003d \"The provided file format, %s, contains illegal \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"characters.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e paths;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private PathMatcher pathsGlob;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileType(String label, List\u003cString\u003e paths) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        validateFileTypeLabel(label);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setPaths(paths);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cFileType\u003e convertFormatStringsToFileTypes(List\u003cString\u003e formats) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return formats.stream().map(FileType::convertStringFormatToFileType).collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code FileType} with label named {@code format} and globs that include all files that end with"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code format}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static FileType convertStringFormatToFileType(String format) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        validateFileFormat(format);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FileType(format, Collections.singletonList(\"**\" + format));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that the string {@code label} is a valid file type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code label} is an empty string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void validateFileTypeLabel(String label) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (label.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that {@code format} is a valid file format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code format} is not alphanumeric."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void validateFileFormat(String format) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FILE_FORMAT_VALIDATION_PATTERN.matcher(format).matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(MESSAGE_ILLEGAL_FILE_FORMAT, format));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setPaths(List\u003cString\u003e paths) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.paths \u003d paths;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setPathsGlobMatcher(paths);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFileGlobMatching(String fileName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return pathsGlob.matches(Paths.get(fileName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setPathsGlobMatcher(List\u003cString\u003e filePaths) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String globString \u003d \"glob:{\" + String.join(\",\", filePaths) + \"}\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pathsGlob \u003d FileSystems.getDefault().getPathMatcher(globString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this.label.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof FileType)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileType otherFileType \u003d (FileType) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.label.equals(otherFileType.label) \u0026\u0026 this.paths.equals(otherFileType.paths);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overrides the Gson serializer to serialize only the label of each file type instead on the entire object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class FileTypeSerializer implements JsonSerializer\u003cFileType\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public JsonElement serialize(FileType fileType, Type typeOfSource, JsonSerializationContext context) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JsonPrimitive(fileType.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/java/reposense/model/FileTypeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code FileTypeManager} is responsible for holding a list of whitelisted formats and user-specified custom"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * groupings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileTypeManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DEFAULT_GROUP \u003d \"other\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FileType DEFAULT_GROUP_TYPE \u003d new FileType(DEFAULT_GROUP, Collections.singletonList(\"**\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFileType\u003e formats;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFileType\u003e groups;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileTypeManager(List\u003cFileType\u003e formats) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the assigned file type of the file {@code fileName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileType getFileType(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCustomGroups()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return getFileFormat(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FileType result \u003d DEFAULT_GROUP_TYPE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FileType group : groups) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (group.isFileGlobMatching(fileName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                result \u003d group;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file format of the given {@code fileName}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file type \"other\" if the format of the file is not of the standard type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FileType getFileFormat(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hasSpecifiedFormats()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            for (FileType format : formats) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                if (format.isFileGlobMatching(fileName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    return format;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"This exception should not happen as we have performed the whitelisted formats check.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] tok \u003d fileName.split(\"[./\\\\\\\\]+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String label \u003d tok[tok.length - 1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                FileType.validateFileFormat(label);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FileType(label, Collections.singletonList(\"**\" + label));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                return DEFAULT_GROUP_TYPE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFileType\u003e getAllFileTypes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return hasCustomGroups() ? groups : formats;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code fileName}\u0027s file type is inside the list of specified formats to be analyzed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isInsideWhitelistedFormats(String fileName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return !hasSpecifiedFormats() || getFormats().stream().anyMatch(format -\u003e format.isFileGlobMatching(fileName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFileType\u003e getFormats() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return formats;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFormats(List\u003cFileType\u003e formats) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasSpecifiedFormats() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return !formats.isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFileType\u003e getGroups() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds new groups from {@code groupList}. Skips groups that have already been added previously."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addGroups(List\u003cFileType\u003e groupList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        groupList.stream().filter(group -\u003e !this.containsGroup(group)).forEach(groups::add);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean containsGroup(FileType group) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGroups(List\u003cFileType\u003e groups) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.groups \u003d groups;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean hasCustomGroups() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return !groups.isEmpty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof FileTypeManager)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FileTypeManager otherFileType \u003d (FileTypeManager) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.groups.equals(otherFileType.groups) \u0026\u0026 this.formats.equals(otherFileType.formats);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/reposense/model/LocationsCliArguments.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents command line arguments user supplied when running the program with mandatory field -repos."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class LocationsCliArguments extends CliArguments {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e locations;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocationsCliArguments(List\u003cString\u003e locations, Path outputFilePath, Date sinceDate,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            Date untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, List\u003cFileType\u003e formats,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isAutomaticallyLaunching, boolean isStandaloneConfigIgnored, ZoneId zoneId) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.locations \u003d locations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.outputFilePath \u003d outputFilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isSinceDateProvided \u003d isSinceDateProvided;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isUntilDateProvided \u003d isUntilDateProvided;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zoneId \u003d zoneId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getLocations() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof LocationsCliArguments)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        LocationsCliArguments otherLocationsCliArguments \u003d (LocationsCliArguments) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                \u0026\u0026 this.locations.equals(otherLocationsCliArguments.locations);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/reposense/model/RepoConfiguration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitBranch;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.GitBranchException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents configuration information from CSV config file for a single repository."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfiguration {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(RepoConfiguration.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private RepoLocation location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String branch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String displayName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String outputFolderName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient Date sinceDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient Date untilDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient String repoFolderName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient FileTypeManager fileTypeManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cString\u003e ignoredAuthorsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient AuthorConfiguration authorConfig;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient boolean isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cCommitHash\u003e ignoreCommitList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient boolean isFormatsOverriding;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient boolean isIgnoreGlobListOverriding;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient boolean isIgnoreCommitListOverriding;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient boolean isIgnoredAuthorsListOverriding \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(location, DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location, String branch) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(location, branch, Collections.emptyList(), Collections.emptyList(), false, Collections.emptyList(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location, String branch, List\u003cFileType\u003e formats, List\u003cString\u003e ignoreGlobList,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStandaloneConfigIgnored, List\u003cCommitHash\u003e ignoreCommitList, boolean isFormatsOverriding,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isIgnoreGlobListOverriding, boolean isIgnoreCommitListOverriding) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorConfig \u003d new AuthorConfiguration(location, branch);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreGlobList \u003d ignoreGlobList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fileTypeManager \u003d new FileTypeManager(formats);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreCommitList \u003d ignoreCommitList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isFormatsOverriding \u003d isFormatsOverriding;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isIgnoreGlobListOverriding \u003d isIgnoreGlobListOverriding;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isIgnoreCommitListOverriding \u003d isIgnoreCommitListOverriding;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String organization \u003d location.getOrganization();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String repoName \u003d location.getRepoName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        displayName \u003d repoName + \"[\" + branch + \"]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        outputFolderName \u003d repoName + \"_\" + branch;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        repoFolderName \u003d repoName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (organization !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            repoFolderName \u003d organization + \"_\" + repoFolderName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            displayName \u003d organization + \"/\" + displayName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            outputFolderName \u003d organization + \"_\" + outputFolderName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setDatesToRepoConfigs(List\u003cRepoConfiguration\u003e configs, Date sinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (RepoConfiguration config : configs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            config.setSinceDate(sinceDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            config.setUntilDate(untilDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges a {@code RepoConfiguration} from {@code repoConfigs} with an {@code AuthorConfiguration} from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code authorConfigs} if their {@code RepoLocation} and branch matches"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void merge(List\u003cRepoConfiguration\u003e repoConfigs, List\u003cAuthorConfiguration\u003e authorConfigs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AuthorConfiguration authorConfig : authorConfigs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if (authorConfig.getLocation().isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                for (RepoConfiguration repoConfig : repoConfigs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    repoConfig.addAuthors(authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            List\u003cRepoConfiguration\u003e locationMatchingRepoConfigs \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    getMatchingRepoConfigsByLocation(repoConfigs, authorConfig.getLocation());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (locationMatchingRepoConfigs.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.warning(String.format("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        \"Repository %s is not found in repo-config.csv.\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        authorConfig.getLocation()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (authorConfig.isDefaultBranch()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                locationMatchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    matchingRepoConfig.addAuthors(authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            RepoConfiguration branchMatchingRepoConfig \u003d getMatchingRepoConfig(repoConfigs, authorConfig);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (branchMatchingRepoConfig \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                if (!authorConfig.isDefaultBranch()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    logger.warning(String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                            \"Repository %s (branch %s) is not found in repo-config.csv.\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                            authorConfig.getLocation(), authorConfig.getBranch()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            branchMatchingRepoConfig.addAuthors(authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the list of groups in {@code groupConfigs} to the respective {@code repoConfigs}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setGroupConfigsToRepos(List\u003cRepoConfiguration\u003e repoConfigs,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cGroupConfiguration\u003e groupConfigs) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (GroupConfiguration groupConfig : groupConfigs) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            List\u003cRepoConfiguration\u003e matchingRepoConfigs;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (groupConfig.getLocation().isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                matchingRepoConfigs \u003d repoConfigs;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                matchingRepoConfigs \u003d getMatchingRepoConfigsByLocation(repoConfigs,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                        groupConfig.getLocation());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            if (matchingRepoConfigs.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.warning(String.format("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Repository %s is not found in repo-config.csv.\", groupConfig.getLocation()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            matchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                matchingRepoConfig.addGroups(groupConfig.getGroupsList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Iterates through {@code repoConfigs} to find a {@code RepoConfiguration} with {@code RepoLocation} and branch"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * that matches {@code authorConfig}. Returns {@code null} if no match is found."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private static RepoConfiguration getMatchingRepoConfig("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e repoConfigs, AuthorConfiguration authorConfig) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (authorConfig.isDefaultBranch()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        for (RepoConfiguration repoConfig : repoConfigs) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            if (repoConfig.getLocation().equals(authorConfig.getLocation())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 repoConfig.getBranch().equals(authorConfig.getBranch())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                return repoConfig;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of {@link RepoConfiguration} where the {@link RepoLocation} matches {@code targetRepoLocation}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static List\u003cRepoConfiguration\u003e getMatchingRepoConfigsByLocation("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs, RepoLocation targetRepoLocation) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return configs.stream().filter(config -\u003e config.getLocation().equals(targetRepoLocation))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code formats} to {@code RepoConfiguration} in {@code configs} if its format list is empty."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFormatsToRepoConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cFileType\u003e formats) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        for (RepoConfiguration config : configs) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!config.fileTypeManager.hasSpecifiedFormats()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                config.fileTypeManager.setFormats(formats);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Sets each {@code RepoConfiguration} in {@code configs} to ignore its standalone config, if"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * {@code ignoreAllStandaloneConfigs} is true."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setStandaloneConfigIgnoredToRepoConfigs("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs, boolean ignoreAllStandaloneConfigs) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        if (ignoreAllStandaloneConfigs) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            configs.stream().forEach(config -\u003e config.setStandaloneConfigIgnored(true));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears authors information and use the information provided from {@code standaloneConfig}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void update(StandaloneConfig standaloneConfig) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // only assign the new values when all the fields in {@code standaloneConfig} pass the validations."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e replacementFileTypes \u003d FileType.convertFormatStringsToFileTypes(standaloneConfig.getFormats());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitHash.validateCommits(standaloneConfig.getIgnoreCommitList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isIgnoreGlobListOverriding) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            ignoreGlobList \u003d standaloneConfig.getIgnoreGlobList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFormatsOverriding) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTypeManager.setFormats(replacementFileTypes);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isIgnoreCommitListOverriding) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            ignoreCommitList \u003d CommitHash.convertStringsToCommits(standaloneConfig.getIgnoreCommitList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isIgnoredAuthorsListOverriding) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            ignoredAuthorsList \u003d standaloneConfig.getIgnoreAuthorList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.update(standaloneConfig, ignoreGlobList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Attempts to find matching {@code Author} given a name and an email."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * If no matching {@code Author} is found, {@code Author#UNKNOWN_AUTHOR} is returned."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author getAuthor(String name, String email) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfig.getAuthor(name, email);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates branch with {@code currentBranch} if default branch is specified."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateBranch(String currentBranch) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (branch.equals(DEFAULT_BRANCH)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            setBranch(currentBranch);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the current branch and updates branch with current branch if default branch is specified."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateBranch() throws GitBranchException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (branch.equals(DEFAULT_BRANCH)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            String currentBranch \u003d GitBranch.getCurrentBranch(getRepoRoot());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            setBranch(currentBranch);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the path to the root folder of the repository."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRepoRoot() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        String path \u003d FileUtil.REPOS_ADDRESS + File.separator + getRepoFolderName() + File.separator;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRepoName().isEmpty()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            path +\u003d getRepoName() + File.separator;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the name of the folder containing the cloned repository; the parent directory of the repo\u0027s root folder."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRepoFolderName() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoFolderName;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RepoConfiguration)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration otherRepoConfig \u003d (RepoConfiguration) other;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.equals(otherRepoConfig.location)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 branch.equals(otherRepoConfig.branch)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 authorConfig.equals(otherRepoConfig.authorConfig)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ignoreGlobList.equals(otherRepoConfig.ignoreGlobList)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ignoredAuthorsList.equals(otherRepoConfig.ignoredAuthorsList)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isStandaloneConfigIgnored \u003d\u003d otherRepoConfig.isStandaloneConfigIgnored"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fileTypeManager.equals(otherRepoConfig.fileTypeManager)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isFormatsOverriding \u003d\u003d otherRepoConfig.isFormatsOverriding"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isIgnoreGlobListOverriding \u003d\u003d otherRepoConfig.isIgnoreGlobListOverriding"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isIgnoreCommitListOverriding \u003d\u003d otherRepoConfig.isIgnoreCommitListOverriding"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isIgnoredAuthorsListOverriding \u003d\u003d otherRepoConfig.isIgnoredAuthorsListOverriding;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfig.getAuthorDisplayNameMap();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.setAuthorDisplayNameMap(authorDisplayNameMap);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getBranch() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        return branch;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setBranch(String branch) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        updateDisplayName(branch);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        updateOutputFolderName(branch);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d branch;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.setBranch(branch);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateDisplayName(String branch) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d displayName.substring(0, displayName.lastIndexOf(\u0027[\u0027) + 1) + branch + \"]\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateOutputFolderName(String branch) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        this.outputFolderName \u003d outputFolderName.substring(0, outputFolderName.lastIndexOf(\u0027_\u0027) + 1) + branch;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreGlobList \u003d ignoreGlobList;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCommitHash\u003e getIgnoreCommitList() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        return ignoreCommitList;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoreCommitList \u003d ignoreCommitList;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getIgnoredAuthorsList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.ignoredAuthorsList;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoredAuthorsList(List\u003cString\u003e ignoredAuthorsList) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ignoredAuthorsList \u003d ignoredAuthorsList;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isIgnoredAuthorsListOverriding() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isIgnoredAuthorsListOverriding;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIsIgnoredAuthorsListOverriding(boolean isIgnoredAuthorsListOverriding) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isIgnoredAuthorsListOverriding \u003d isIgnoredAuthorsListOverriding;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeIgnoredAuthors() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.removeIgnoredAuthors(ignoredAuthorsList);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cAuthor\u003e getAuthorList() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfig.getAuthorList();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthor(Author author) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.addAuthor(author, this.getIgnoreGlobList());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthors(List\u003cAuthor\u003e authorList) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.addAuthors(authorList, this.getIgnoreGlobList());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorConfiguration(AuthorConfiguration authorConfig) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorConfig \u003d authorConfig;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : authorConfig.getAuthorList()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            AuthorConfiguration.propagateIgnoreGlobList(author, ignoreGlobList);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsAuthor(Author author) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfig.containsAuthor(author);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears authors information and sets the {@code authorList} to {@code RepoConfiguration}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorList(List\u003cAuthor\u003e authorList) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.setAuthorList(authorList);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.resetAuthorInformation();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        authorList.forEach(author -\u003e AuthorConfiguration.propagateIgnoreGlobList(author, this.getIgnoreGlobList()));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, Author\u003e getAuthorEmailsAndAliasesMap() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorConfig.getAuthorEmailsAndAliasesMap();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorEmailsAndAliasesMap(Map\u003cString, Author\u003e authorEmailsAndAliasesMap) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.setAuthorEmailsAndAliasesMap(authorEmailsAndAliasesMap);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFormats(List\u003cFileType\u003e formats) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        fileTypeManager.setFormats(formats);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setGroups(List\u003cFileType\u003e groups) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        fileTypeManager.setGroups(groups);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addGroups(List\u003cFileType\u003e groups) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        fileTypeManager.addGroups(groups);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all format or group types (depending on whether the user has specified a custom grouping)."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFileType\u003e getAllFileTypes() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileTypeManager.getAllFileTypes();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileType getFileType(String fileName) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileTypeManager.getFileType(fileName);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileTypeManager getFileTypeManager() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileTypeManager;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getSinceDate() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        return sinceDate;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSinceDate(Date sinceDate) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getUntilDate() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        return untilDate;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUntilDate(Date untilDate) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDisplayName(Author author, String displayName) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.setAuthorDisplayName(author, displayName);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthorEmailsAndAliasesMapEntry(Author author, List\u003cString\u003e values) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfig.addAuthorEmailsAndAliasesMapEntry(author, values);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRepoName() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.getRepoName();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getOutputFolderName() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        return outputFolderName;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoLocation getLocation() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getOrganization() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.getOrganization();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isStandaloneConfigIgnored() {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        return isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFormatsOverriding() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        return isFormatsOverriding;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isIgnoreGlobListOverriding() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        return isIgnoreGlobListOverriding;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isIgnoreCommitListOverriding() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        return isIgnoreCommitListOverriding;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 6,
      "-": 452,
      "0blivious": 34
    }
  },
  {
    "path": "src/main/java/reposense/parser/ArgsParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.ArgumentParsers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.helper.HelpScreenException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.impl.Arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.impl.action.HelpArgumentAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.impl.action.VersionArgumentAction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.inf.MutuallyExclusiveGroup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.inf.Namespace;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Verifies and parses a string-formatted date to a {@code CliArguments} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgsParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_REPORT_NAME \u003d \"reposense-report\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] HELP_FLAGS \u003d new String[]{\"--help\", \"-h\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] CONFIG_FLAGS \u003d new String[]{\"--config\", \"-c\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] REPO_FLAGS \u003d new String[]{\"--repo\", \"--repos\", \"-r\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] VIEW_FLAGS \u003d new String[]{\"--view\", \"-v\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] OUTPUT_FLAGS \u003d new String[]{\"--output\", \"-o\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] SINCE_FLAGS \u003d new String[]{\"--since\", \"-s\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] UNTIL_FLAGS \u003d new String[]{\"--until\", \"-u\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] FORMAT_FLAGS \u003d new String[]{\"--formats\", \"-f\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] IGNORE_FLAGS \u003d new String[]{\"--ignore-standalone-config\", \"-i\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] TIMEZONE_FLAGS \u003d new String[]{\"--timezone\", \"-t\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] VERSION_FLAGS \u003d new String[]{\"--version\", \"-V\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(ArgsParser.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROGRAM_USAGE \u003d \"java -jar RepoSense.jar\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROGRAM_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \"RepoSense is a contribution analysis tool for Git repositories.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_HEADER_MUTEX \u003d \"mutual exclusive arguments\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\\\"Since Date\\\" must not be later than today\u0027s date.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_USING_DEFAULT_CONFIG_PATH \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \"Config path not provided, using the config folder as default.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final Path DEFAULT_CONFIG_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + File.separator + \"config\" + File.separator);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentParser getArgumentParser() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentParser parser \u003d ArgumentParsers"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .newFor(PROGRAM_USAGE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .addHelp(false)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .description(PROGRAM_DESCRIPTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        MutuallyExclusiveGroup mutexParser \u003d parser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .required(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Boolean flags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(HELP_FLAGS)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"Show help message.\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .action(new HelpArgumentAction());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.version(\"RepoSense \" + RepoSense.getVersion());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(VERSION_FLAGS)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"Show the version of RepoSense.\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .action(new VersionArgumentAction());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(IGNORE_FLAGS)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(IGNORE_FLAGS[0])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .action(Arguments.storeTrue())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"A flag to ignore the standalone config file in the repo.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(VIEW_FLAGS)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(VIEW_FLAGS[0])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .nargs(\"?\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new ReportFolderArgumentType())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .setConst(EMPTY_PATH)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"Starts a server to display the report in the provided directory. \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If used as a flag (with no argument), \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"generates a report and automatically displays the report.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(OUTPUT_FLAGS)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(OUTPUT_FLAGS[0])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new OutputFolderArgumentType())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(Paths.get(ArgsParser.DEFAULT_REPORT_NAME))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The directory to output the report folder, reposense-report. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If not provided, the report folder will be created in the current working directory.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(SINCE_FLAGS)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(SINCE_FLAGS[0])"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"dd/MM/yyyy\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new SinceDateArgumentType())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(Optional.empty())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The date to start filtering.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(UNTIL_FLAGS)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(UNTIL_FLAGS[0])"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"dd/MM/yyyy\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new UntilDateArgumentType())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(Optional.empty())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The date to stop filtering.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(FORMAT_FLAGS)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(FORMAT_FLAGS[0])"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .nargs(\"*\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"FORMAT\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new AlphanumericArgumentType())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(Collections.emptyList())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The alphanumeric file formats to process.\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If not provided, default file formats will be used.\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Please refer to userguide for more information.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mutex flags - these will always be the last parameters in help message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        mutexParser.addArgument(CONFIG_FLAGS)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(CONFIG_FLAGS[0])"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new ConfigFolderArgumentType())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .setDefault(DEFAULT_CONFIG_PATH)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The directory containing the config files.\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        + \"If not provided, the config files will be obtained from the config folder.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        mutexParser.addArgument(REPO_FLAGS)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(REPO_FLAGS[0])"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"LOCATION\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The GitHub URL or disk locations to clone repository.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(TIMEZONE_FLAGS)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .dest(TIMEZONE_FLAGS[0])"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .metavar(\"ZONE_ID[±hh[mm]]\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .type(new ZoneIdArgumentType())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The timezone to use for the generated report. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"One kind of valid timezones is relative to UTC. E.g. UTC, UTC+08, UTC-1030. \\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If not provided, system default timezone will be used.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given string arguments to a {@code CliArguments} object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws HelpScreenException if given args contain the --help flag. Help message will be printed out"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * by the {@code ArgumentParser} hence this is to signal to the caller that the program is safe to exit."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given string arguments fails to parse to a {@code CliArguments} object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static CliArguments parse(String[] args) throws HelpScreenException, ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentParser parser \u003d getArgumentParser();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Namespace results \u003d parser.parseArgs(args);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Path configFolderPath \u003d results.get(CONFIG_FLAGS[0]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Path reportFolderPath \u003d results.get(VIEW_FLAGS[0]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Path outputFolderPath \u003d results.get(OUTPUT_FLAGS[0]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cDate\u003e cliSinceDate \u003d results.get(SINCE_FLAGS[0]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cDate\u003e cliUntilDate \u003d results.get(UNTIL_FLAGS[0]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isSinceDateProvided \u003d cliSinceDate.isPresent();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isUntilDateProvided \u003d cliUntilDate.isPresent();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Date sinceDate \u003d cliSinceDate.orElse(getDateMinusAMonth(cliUntilDate));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Date untilDate \u003d cliUntilDate.orElse(getCurrentDate());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e locations \u003d results.get(REPO_FLAGS[0]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes(results.get(FORMAT_FLAGS[0]));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStandaloneConfigIgnored \u003d results.get(IGNORE_FLAGS[0]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ZoneId zoneId \u003d results.get(TIMEZONE_FLAGS[0]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            LogsManager.setLogFolderLocation(outputFolderPath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            verifySinceDateIsValid(sinceDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            verifyDatesRangeIsCorrect(sinceDate, untilDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            if (reportFolderPath !\u003d null \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    \u0026\u0026 configFolderPath.equals(DEFAULT_CONFIG_PATH) \u0026\u0026 locations \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewCliArguments(reportFolderPath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isAutomaticallyLaunching \u003d reportFolderPath !\u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isAutomaticallyLaunching \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(String.format(\"Ignoring argument \u0027%s\u0027 for --view.\", reportFolderPath.toString()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (locations !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                return new LocationsCliArguments(locations, outputFolderPath, sinceDate, untilDate, isSinceDateProvided,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                        isUntilDateProvided, formats, isAutomaticallyLaunching, isStandaloneConfigIgnored, zoneId);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (configFolderPath.equals(EMPTY_PATH)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(MESSAGE_USING_DEFAULT_CONFIG_PATH);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ConfigCliArguments(configFolderPath, outputFolderPath, sinceDate, untilDate, isSinceDateProvided,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    isUntilDateProvided, formats, isAutomaticallyLaunching, isStandaloneConfigIgnored, zoneId);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (HelpScreenException hse) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw hse;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArgumentParserException ape) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(getArgumentParser().formatUsage() + ape.getMessage() + \"\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Date} that is one month before {@code cliUntilDate} (if present) or one month before report"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * generation date otherwise."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date getDateMinusAMonth(Optional\u003cDate\u003e cliUntilDate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        cliUntilDate.ifPresent(cal::setTime);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return cal.getTime();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns current date with time set to 23:59:59."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date getCurrentDate() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return cal.getTime();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that {@code sinceDate} is earlier than {@code untilDate}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code sinceDate} supplied is later than {@code untilDate}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void verifyDatesRangeIsCorrect(Date sinceDate, Date untilDate)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sinceDate.getTime() \u003e untilDate.getTime()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that {@code sinceDate} is no later than the date of report generation."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code sinceDate} supplied is later than date of report generation."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void verifySinceDateIsValid(Date sinceDate) throws ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateToday \u003d new Date();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sinceDate.getTime() \u003e dateToday.getTime()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 1,
      "Tejas2805": 8,
      "-": 259
    }
  },
  {
    "path": "src/main/java/reposense/parser/AuthorConfigCsvParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.AuthorConfiguration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for the values parsed from {@code author-config.csv} file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AuthorConfigCsvParser extends CsvParser\u003cAuthorConfiguration\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String AUTHOR_CONFIG_FILENAME \u003d \"author-config.csv\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Positions of the elements of a line in author-config.csv config file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int LOCATION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int BRANCH_POSITION \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int GITHUB_ID_POSITION \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int EMAIL_POSITION \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAY_NAME_POSITION \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int ALIAS_POSITION \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int IGNORE_GLOB_LIST_POSITION \u003d 6;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final int HEADER_SIZE \u003d IGNORE_GLOB_LIST_POSITION + 1; // last position + 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AuthorConfigCsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        super(csvFilePath, HEADER_SIZE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int[] mandatoryPositions() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new int[] {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            GITHUB_ID_POSITION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the csv file line by line and add created {@code AuthorConfiguration} into {@code results} but"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * skips {@code author} already exists in a {@code AuthorConfiguration} that has same {@code location} and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code branch}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void processLine(List\u003cAuthorConfiguration\u003e results, CSVRecord record)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String location \u003d get(record, LOCATION_POSITION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String branch \u003d getOrDefault(record, BRANCH_POSITION, AuthorConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String gitHubId \u003d get(record, GITHUB_ID_POSITION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d getAsList(record, EMAIL_POSITION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayName \u003d get(record, DISPLAY_NAME_POSITION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e aliases \u003d getAsList(record, ALIAS_POSITION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d getAsList(record, IGNORE_GLOB_LIST_POSITION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d findMatchingAuthorConfiguration(results, location, branch);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(gitHubId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (config.containsAuthor(author)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Skipping author as %s already in repository %s %s\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    author.getGitId(), config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        config.addAuthor(author);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setEmails(config, author, emails);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setDisplayName(config, author, displayName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAliases(config, author, gitHubId, aliases);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorIgnoreGlobList(author, ignoreGlobList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an existing {@code AuthorConfiguration} from {@code results} if {@code location} and {@code branch} matches."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Otherwise adds a newly created {@code AuthorConfiguration} into {@code results} and returns it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidLocationException if {@code location} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static AuthorConfiguration findMatchingAuthorConfiguration("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cAuthorConfiguration\u003e results, String location, String branch) throws InvalidLocationException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d new AuthorConfiguration(new RepoLocation(location), branch);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AuthorConfiguration authorConfig : results) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (authorConfig.getLocation().equals(config.getLocation())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 authorConfig.getBranch().equals(config.getBranch())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                return authorConfig;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        results.add(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates {@code emails} to {@code author}, if provided and not empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setEmails(AuthorConfiguration config, Author author, List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setEmails(new ArrayList\u003c\u003e(emails));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates {@code displayName} to {@code author}, if provided and not empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Otherwise, use github id from {@code author}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setDisplayName(AuthorConfiguration config, Author author, String displayName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setDisplayName(!displayName.isEmpty() ? displayName : author.getGitId());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorDisplayName(author, !displayName.isEmpty() ? displayName : author.getGitId());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates {@code gitHubId} and additional {@code aliases} to {@code author}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setAliases(AuthorConfiguration config, Author author, String gitHubId, List\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(gitHubId));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (aliases.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, aliases);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setAuthorAliases(aliases);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the list of globs to ignore for the {@code author} for file analysis."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setAuthorIgnoreGlobList(Author author, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (ignoreGlobList.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 2,
      "-": 142
    }
  },
  {
    "path": "src/main/java/reposense/parser/CsvParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains CSV parsing related functionalities."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class CsvParser\u003cT\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String COLUMN_VALUES_SEPARATOR \u003d \";\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Logger logger \u003d LogsManager.getLogger(CsvParser.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String OVERRIDE_KEYWORD \u003d \"override:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String MESSAGE_EMPTY_LINE \u003d \"[EMPTY LINE]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_UNABLE_TO_READ_CSV_FILE \u003d \"Unable to read the supplied CSV file.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_MALFORMED_LINE_FORMAT \u003d \"Line %d in CSV file, %s, is malformed.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Content: %s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_LINE_PARSE_EXCEPTION_FORMAT \u003d \"Error parsing line %d in CSV file, %s.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Content: %s\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Error: %s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String MESSAGE_EMPTY_CSV_FORMAT \u003d \"The CSV file, %s, is empty.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String MESSAGE_WRONG_HEADER_SIZE \u003d \"Wrong number of columns in header of CSV file, %s. \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            + \"Number of columns in header: %d\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            + \"Expected number of columns: %d\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String MESSAGE_ZERO_VALID_CONFIGS \u003d \"No valid configurations in the %s.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path csvFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private int expectedHeaderSize;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private int numOfLinesBeforeFirstRecord \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if {@code csvFilePath} is an invalid path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public CsvParser(Path csvFilePath, int expectedHeaderSize) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (csvFilePath \u003d\u003d null || !Files.exists(csvFilePath)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            throw new FileNotFoundException(\"Csv file does not exist at the given path.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Use \u0027-help\u0027 to list all the available subcommands and some concept guides.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.csvFilePath \u003d csvFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        this.expectedHeaderSize \u003d expectedHeaderSize;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Parses the csv file associated with this instance of the {@code CsvParser} and returns a {@code List}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * containing the records in this file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws IOException if there are errors accessing the given csv file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws InvalidCsvException if the csv is malformed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public List\u003cT\u003e parse() throws IOException, InvalidCsvException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cT\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterable\u003cCSVRecord\u003e records;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        try (BufferedReader csvReader \u003d new BufferedReader(new FileReader(csvFilePath.toFile()))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            String[] header \u003d getHeader(csvReader);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            records \u003d CSVFormat.DEFAULT.withIgnoreEmptyLines(false).withHeader(header).parse(csvReader);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isLineMalformed(record)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    processLine(results, record);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException pe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    logger.warning(String.format(MESSAGE_LINE_PARSE_EXCEPTION_FORMAT, getLineNumber(record),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                            csvFilePath.getFileName(), getRowContentAsRawString(record), pe.getMessage()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    logger.log(Level.WARNING, iae.getMessage(), iae);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(MESSAGE_UNABLE_TO_READ_CSV_FILE, ioe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        if (results.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            throw new InvalidCsvException(String.format(MESSAGE_ZERO_VALID_CONFIGS, csvFilePath.getFileName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Returns the header of a CSV file, which is assumed to be the first non-empty / non-whitespace line in the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * The line is split into an array of Strings, using the comma symbol as delimiter."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws IOException if there is an error accessing the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws InvalidCsvException if the file has only empty or blank lines."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private String[] getHeader(BufferedReader reader) throws IOException, InvalidCsvException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        // read from file until we encounter a line that is neither blank nor empty"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        while (currentLine.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            currentLine \u003d Optional.ofNullable(reader.readLine())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    .map(String::trim)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    .orElseThrow(() -\u003e new InvalidCsvException(String.format("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                            MESSAGE_EMPTY_CSV_FORMAT, csvFilePath.getFileName())));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            numOfLinesBeforeFirstRecord++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String[] header \u003d currentLine.split(\",\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        validateHeader(header);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code record} does not contain the same number of columns as the header or contains missing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * values at the mandatory columns in CSV format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isLineMalformed(CSVRecord record) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!record.isConsistent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    csvFilePath.getFileName(), getRowContentAsRawString(record)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int position : mandatoryPositions()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            if (record.get(position).isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        csvFilePath.getFileName(), getRowContentAsRawString(record)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the value of {@code record} at {@code colNum}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String get(final CSVRecord record, int colNum) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return record.get(colNum).trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the value of {@code record} at {@code colNum} if present, or"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns {@code defaultValue} otherwise."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getOrDefault(final CSVRecord record, int colNum, String defaultValue) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return get(record, colNum).isEmpty() ? defaultValue : get(record, colNum);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the value of {@code record} at {@code colNum} as a {@code List},"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * delimited by {@code COLUMN_VALUES_SEPARATOR} if it is in {@code record} and not empty, or"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns an empty {@code List} otherwise."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cString\u003e getAsList(final CSVRecord record, int colNum) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (get(record, colNum).isEmpty()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(get(record, colNum).split(COLUMN_VALUES_SEPARATOR))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the values in {@code record} as a list with the {@link CsvParser#OVERRIDE_KEYWORD} prefix removed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an empty list if {@code record} at {@code colNum} is empty."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cString\u003e getAsListWithoutOverridePrefix(final CSVRecord record, int colNum) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e data \u003d getAsList(record, colNum);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isElementOverridingStandaloneConfig(record, colNum)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            data.set(0, data.get(0).replaceFirst(OVERRIDE_KEYWORD, \"\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            data.removeIf(String::isEmpty);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private long getLineNumber(final CSVRecord record) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return  record.getRecordNumber() + numOfLinesBeforeFirstRecord;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code record} at {@code colNum} is prefixed with the override keyword."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isElementOverridingStandaloneConfig(final CSVRecord record, int colNum) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return get(record, colNum).startsWith(OVERRIDE_KEYWORD);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the contents of {@code record} as a raw string."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getRowContentAsRawString(final CSVRecord record) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        StringJoiner inputRowString \u003d new StringJoiner(\",\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        for (String value : record) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            inputRowString.add(value);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String contentAsString \u003d inputRowString.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        if (contentAsString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            contentAsString \u003d MESSAGE_EMPTY_LINE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return contentAsString;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Checks if {@code possibleHeader} contains the expected number of columns."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @throws InvalidCsvException if {@code possibleHeader} does not have as many columns as expected."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private void validateHeader(String[] possibleHeader) throws InvalidCsvException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        int actualNumberOfColumns \u003d possibleHeader.length;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        if (actualNumberOfColumns !\u003d expectedHeaderSize) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            throw new InvalidCsvException(String.format("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    MESSAGE_WRONG_HEADER_SIZE, csvFilePath.getFileName(), actualNumberOfColumns,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                    expectedHeaderSize));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract int[] mandatoryPositions();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the csv file line by line."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * All CsvParsers must use {@link CsvParser#get}, {@link CsvParser#getOrDefault},"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link CsvParser#getAsList} or {@link CsvParser#getAsListWithoutOverridePrefix} to read contents in"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code record} and add created objects into {@code results}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract void processLine(List\u003cT\u003e results, final CSVRecord record) throws ParseException;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 70,
      "-": 168
    }
  },
  {
    "path": "src/main/java/reposense/parser/GroupConfigCsvParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.GroupConfiguration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for the values parsed from {@code group-config.csv} file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GroupConfigCsvParser extends CsvParser\u003cGroupConfiguration\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GROUP_CONFIG_FILENAME \u003d \"group-config.csv\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Positions of the elements of a line in group-config.csv config file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int LOCATION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int GROUP_NAME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int FILES_GLOB_POSITION \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final int HEADER_SIZE \u003d FILES_GLOB_POSITION + 1; // last position + 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GroupConfigCsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        super(csvFilePath, HEADER_SIZE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int[] mandatoryPositions() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new int[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            GROUP_NAME_POSITION, FILES_GLOB_POSITION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the csv file line by line and adds created {@code Group} into {@code results}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void processLine(List\u003cGroupConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String location \u003d get(record, LOCATION_POSITION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String groupName \u003d get(record, GROUP_NAME_POSITION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e globList \u003d getAsList(record, FILES_GLOB_POSITION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration groupConfig \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        groupConfig \u003d findMatchingGroupConfiguration(results, location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FileType group \u003d new FileType(groupName, globList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (groupConfig.containsGroup(group)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Skipping group as %s has already been specified for the repository %s\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    group.toString(), groupConfig.getLocation()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        groupConfig.addGroup(group);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an existing {@code GroupConfiguration} from {@code results} if {@code location} matches."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Otherwise adds a newly created {@code GroupConfiguration} into {@code results} and returns it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidLocationException if {@code location} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static GroupConfiguration findMatchingGroupConfiguration("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cGroupConfiguration\u003e results, String location) throws InvalidLocationException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration config \u003d new GroupConfiguration(new RepoLocation(location));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (GroupConfiguration groupConfig : results) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (groupConfig.getLocation().equals(config.getLocation())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return groupConfig;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        results.add(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 2,
      "-": 80,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/reposense/parser/InvalidCsvException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": " * Signals that there is a major error in a CSV file (e.g. wrong number of columns, zero valid records)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anubh-v"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "public class InvalidCsvException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public InvalidCsvException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 10
    }
  },
  {
    "path": "src/main/java/reposense/parser/RepoConfigCsvParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for the values parsed from {@code repo-config.csv} file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfigCsvParser extends CsvParser\u003cRepoConfiguration\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REPO_CONFIG_FILENAME \u003d \"repo-config.csv\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String IGNORE_STANDALONE_CONFIG_KEYWORD \u003d \"yes\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Positions of the elements of a line in repo-config.csv config file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int LOCATION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int BRANCH_POSITION \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int FILE_FORMATS_POSITION \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int IGNORE_GLOB_LIST_POSITION \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int IGNORE_STANDALONE_CONFIG_POSITION \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int IGNORE_COMMIT_LIST_CONFIG_POSITION \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int IGNORE_AUTHOR_LIST_CONFIG_POSITION \u003d 6;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final int HEADER_SIZE \u003d IGNORE_AUTHOR_LIST_CONFIG_POSITION + 1; // last position + 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfigCsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        super(csvFilePath, HEADER_SIZE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int[] mandatoryPositions() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new int[] {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            LOCATION_POSITION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the csv file line by line and add created {@code RepoConfiguration} into {@code results} but"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * ignores duplicated {@code RepoConfiguration} if there exists one that has same {@code location} and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code branch}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void processLine(List\u003cRepoConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoLocation location \u003d new RepoLocation(get(record, LOCATION_POSITION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String branch \u003d getOrDefault(record, BRANCH_POSITION, RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isFormatsOverriding \u003d isElementOverridingStandaloneConfig(record, FILE_FORMATS_POSITION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                getAsListWithoutOverridePrefix(record, FILE_FORMATS_POSITION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isIgnoreGlobListOverriding \u003d isElementOverridingStandaloneConfig(record, IGNORE_GLOB_LIST_POSITION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d getAsListWithoutOverridePrefix(record, IGNORE_GLOB_LIST_POSITION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isIgnoreCommitListOverriding \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                isElementOverridingStandaloneConfig(record, IGNORE_COMMIT_LIST_CONFIG_POSITION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitHash\u003e ignoreCommitList \u003d CommitHash.convertStringsToCommits("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                getAsListWithoutOverridePrefix(record, IGNORE_COMMIT_LIST_CONFIG_POSITION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isIgnoredAuthorsListOverriding \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                isElementOverridingStandaloneConfig(record, IGNORE_AUTHOR_LIST_CONFIG_POSITION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e ignoredAuthorsList \u003d getAsListWithoutOverridePrefix(record, IGNORE_AUTHOR_LIST_CONFIG_POSITION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String ignoreStandaloneConfig \u003d get(record, IGNORE_STANDALONE_CONFIG_POSITION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isStandaloneConfigIgnored \u003d ignoreStandaloneConfig.equalsIgnoreCase(IGNORE_STANDALONE_CONFIG_KEYWORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isStandaloneConfigIgnored \u0026\u0026 !ignoreStandaloneConfig.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Ignoring unknown value \" + ignoreStandaloneConfig + \" in ignore standalone config column.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration config \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                location, branch, formats, ignoreGlobList, isStandaloneConfigIgnored, ignoreCommitList,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                isFormatsOverriding, isIgnoreGlobListOverriding, isIgnoreCommitListOverriding);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoredAuthorsList(ignoredAuthorsList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIsIgnoredAuthorsListOverriding(isIgnoredAuthorsListOverriding);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (results.contains(config)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Ignoring duplicated repository \" + location + \" \" + branch);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        results.add(config);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 2,
      "-": 92
    }
  },
  {
    "path": "src/main/java/reposense/report/ReportGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.AuthorshipReporter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.AuthorshipSummary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.CommitsReporter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitContributionSummary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitLsTree;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitRevParse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitShortlog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.GitBranchException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.GitCloneException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.InvalidFilePathException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.StandaloneConfig;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.SinceDateArgumentType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.StandaloneConfigJsonParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.exception.NoAuthorsWithCommitsFoundException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.ProgressTracker;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains report generation related functionalities."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReportGenerator {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // zip file which contains all the report template files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by %s (%s).\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ERROR_CREATING_DIRECTORY \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Error has occurred while creating repo directory for %s (%s), will skip this repo.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_NO_STANDALONE_CONFIG \u003d \"%s (%s) does not contain a standalone config file.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_IGNORING_STANDALONE_CONFIG \u003d \"Ignoring standalone config file in %s (%s).\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_MALFORMED_STANDALONE_CONFIG \u003d \"%s/%s/%s is malformed for %s (%s).\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_NO_AUTHORS_SPECIFIED \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \"%s (%s) has no authors specified, using all authors by default.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \"No authors found with commits for %s (%s).\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_START_ANALYSIS \u003d \"Analyzing %s (%s)...\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_COMPLETE_ANALYSIS \u003d \"Analysis of %s (%s) completed!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_REPORT_GENERATED \u003d \"The report is generated at %s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_BRANCH_DOES_NOT_EXIST \u003d \"Branch %s does not exist in %s! Analysis terminated.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_ERROR_CLONING \u003d \"Failed to clone from %s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_BRANCH_DOES_NOT_EXIST \u003d \"Branch \\\"%s\\\" does not exist.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_BRANCH_CONTAINS_ILLEGAL_FILE_PATH \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Branch contains file paths with illegal characters and not analyzable.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_ERROR_CLONING_OR_BRANCHING \u003d \"Exception met while cloning or checking out.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_UNEXPECTED_ERROR \u003d \"Unexpected error stack trace for %s:\\n\u003e%s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date earliestSinceDate \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ProgressTracker progressTracker \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * well as the summary JSON file of all the repos."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the list of file paths that were generated."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if templateZip.zip does not exists in jar file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            String generationDate, Date cliSinceDate, Date untilDate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            boolean isSinceDateProvided, boolean isUntilDateProvided,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            Supplier\u003cString\u003e reportGenerationTimeProvider) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        prepareTemplateFile(outputPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        earliestSinceDate \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        progressTracker \u003d new ProgressTracker(configs.size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e reportFoldersAndFiles \u003d cloneAndAnalyzeRepos(configs, outputPath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Date reportSinceDate \u003d (cliSinceDate.equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                ? earliestSinceDate : cliSinceDate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        Optional\u003cPath\u003e summaryPath \u003d FileUtil.writeJsonFile("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new SummaryJson(configs, generationDate, reportSinceDate, untilDate, isSinceDateProvided,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                        isUntilDateProvided, RepoSense.getVersion(), ErrorSummary.getInstance().getErrorList(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                        reportGenerationTimeProvider.get()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                getSummaryResultPath(outputPath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        summaryPath.ifPresent(reportFoldersAndFiles::add);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(String.format(MESSAGE_REPORT_GENERATED, outputPath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return reportFoldersAndFiles;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Copies the template file to the specified {@code outputPath} for the repo report to be generated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IOException if template resource is not found."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static void prepareTemplateFile(String outputPath) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        FileUtil.copyTemplate(is, outputPath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Groups {@code RepoConfiguration} with the same {@code RepoLocation} together so that they are only cloned once."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e groupConfigsByRepoLocation("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (RepoConfiguration config : configs) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoLocation location \u003d config.getLocation();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!repoLocationMap.containsKey(location)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                repoLocationMap.put(location, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            repoLocationMap.get(location).add(config);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoLocationMap;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clone, analyze and generate the report for repositories in {@code repoLocationMap}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs analysis and report generation of each repository in parallel with the cloning of the next repository."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return A list of paths to the JSON report files generated for each repository."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static List\u003cPath\u003e cloneAndAnalyzeRepos(List\u003cRepoConfiguration\u003e configs, String outputPath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d groupConfigsByRepoLocation(configs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoCloner repoCloner \u003d new RepoCloner();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoLocation clonedRepoLocation \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoLocation\u003e repoLocationList \u003d new ArrayList\u003c\u003e(repoLocationMap.keySet());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoLocation currRepoLocation \u003d repoLocationList.get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        repoCloner.cloneBare(repoLocationMap.get(currRepoLocation).get(0));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 1; index \u003c\u003d repoLocationList.size(); index++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoLocation nextRepoLocation \u003d (index \u003c repoLocationList.size()) ? repoLocationList.get(index) : null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            // Clones the next location while analyzing the previously cloned repos in parallel."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            if (nextRepoLocation !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                repoCloner.cloneBare(repoLocationMap.get(nextRepoLocation).get(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            if (clonedRepoLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                handleCloningFailed(configs, currRepoLocation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                generatedFiles.addAll(analyzeRepos(outputPath, configs, repoLocationMap.get(clonedRepoLocation),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                        repoCloner.getCurrentRepoDefaultBranch()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            currRepoLocation \u003d nextRepoLocation;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        repoCloner.cleanup();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return generatedFiles;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Analyzes all repos in {@code configsToAnalyze} and generates their report."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also removes {@code configsToAnalyze} that failed to analyze from {@code configs}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return A list of paths to the JSON report files generated for the repositories in {@code configsToAnalyze}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static List\u003cPath\u003e analyzeRepos(String outputPath, List\u003cRepoConfiguration\u003e configs,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configsToAnalyze, String defaultBranch) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterator\u003cRepoConfiguration\u003e itr \u003d configsToAnalyze.iterator();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            progressTracker.incrementProgress();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration configToAnalyze \u003d itr.next();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            configToAnalyze.updateBranch(defaultBranch);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Path repoReportDirectory \u003d Paths.get(outputPath, configToAnalyze.getOutputFolderName());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(progressTracker.getProgress() + \" \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                            + MESSAGE_START_ANALYSIS, configToAnalyze.getLocation(), configToAnalyze.getBranch()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                GitRevParse.assertBranchExists(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                GitLsTree.validateFilePaths(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                GitClone.cloneFromBareAndUpdateBranch(Paths.get(FileUtil.REPOS_ADDRESS), configToAnalyze);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                FileUtil.createDirectory(repoReportDirectory);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                generatedFiles.addAll(analyzeRepo(configToAnalyze, repoReportDirectory.toString()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                String logMessage \u003d String.format(MESSAGE_ERROR_CREATING_DIRECTORY,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                        configToAnalyze.getLocation(), configToAnalyze.getBranch());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.log(Level.WARNING, logMessage, ioe);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (GitBranchException gbe) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.log(Level.SEVERE, String.format(MESSAGE_BRANCH_DOES_NOT_EXIST,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                        configToAnalyze.getBranch(), configToAnalyze.getLocation()), gbe);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                handleAnalysisFailed(configs, configToAnalyze,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(LOG_BRANCH_DOES_NOT_EXIST, configToAnalyze.getBranch()));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (InvalidFilePathException ipe) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleAnalysisFailed(configs, configToAnalyze, LOG_BRANCH_CONTAINS_ILLEGAL_FILE_PATH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (GitCloneException gce) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleAnalysisFailed(configs, configToAnalyze, LOG_ERROR_CLONING_OR_BRANCHING);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NoAuthorsWithCommitsFoundException nafe) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.log(Level.WARNING, String.format(MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                        configToAnalyze.getLocation(), configToAnalyze.getBranch()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                generatedFiles.addAll(generateEmptyRepoReport(repoReportDirectory.toString(),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                        Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                generateEmptyRepoReport(repoReportDirectory.toString(), Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.log(Level.SEVERE, sw.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleAnalysisFailed(configs, configToAnalyze,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(LOG_UNEXPECTED_ERROR, configToAnalyze.getLocation(), sw.toString()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return generatedFiles;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Analyzes repo specified by {@code config} and generates the report."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return A list of paths to the JSON report files generated for the repo specified by {@code config}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static List\u003cPath\u003e analyzeRepo("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration config, String repoReportDirectory) throws NoAuthorsWithCommitsFoundException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // preprocess the config and repo"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        updateRepoConfig(config);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        updateAuthorList(config);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitContributionSummary commitSummary \u003d CommitsReporter.generateCommitSummary(config);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorshipSummary authorshipSummary \u003d AuthorshipReporter.generateAuthorshipSummary(config);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e generatedFiles \u003d generateIndividualRepoReport(repoReportDirectory, commitSummary, authorshipSummary);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(String.format(MESSAGE_COMPLETE_ANALYSIS, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return generatedFiles;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code config} with configuration provided by repository if exists."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void updateRepoConfig(RepoConfiguration config) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configJsonPath \u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(configJsonPath)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(String.format(MESSAGE_NO_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (config.isStandaloneConfigIgnored()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(String.format(MESSAGE_IGNORING_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            config.update(standaloneConfig);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JsonSyntaxException jse) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format(MESSAGE_MALFORMED_STANDALONE_CONFIG, config.getDisplayName(),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    iae.getMessage(), config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"This exception should not happen as we have performed the file existence check.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Find and update {@code config} with all the author identities if author list is empty."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also removes ignored authors from author list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void updateAuthorList(RepoConfiguration config) throws NoAuthorsWithCommitsFoundException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        if (config.getAuthorList().isEmpty()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(String.format(MESSAGE_NO_AUTHORS_SPECIFIED, config.getLocation(), config.getBranch()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            if (authorList.isEmpty()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new NoAuthorsWithCommitsFoundException();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            config.setAuthorList(authorList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        config.removeIgnoredAuthors();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code configs} that were not successfully cloned from {@code failedRepoLocation}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * into the list of errors in the summary report and removes them from the list of {@code configs}."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void handleCloningFailed(List\u003cRepoConfiguration\u003e configs, RepoLocation failedRepoLocation) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e failedConfigs \u003d configs.stream()"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(config -\u003e config.getLocation().equals(failedRepoLocation))"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        handleFailedConfigs(configs, failedConfigs, String.format(LOG_ERROR_CLONING, failedRepoLocation));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code failedConfig} that failed analysis into the list of errors in the summary report and"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * removes {@code failedConfig} from the list of {@code configs}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void handleAnalysisFailed(List\u003cRepoConfiguration\u003e configs, RepoConfiguration failedConfig,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        handleFailedConfigs(configs, Collections.singletonList(failedConfig), errorMessage);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code failedConfigs} that failed cloning/analysis into the list of errors in the summary report and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * removes {@code failedConfigs} from the list of {@code configs}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void handleFailedConfigs("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs, List\u003cRepoConfiguration\u003e failedConfigs, String errorMessage) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterator\u003cRepoConfiguration\u003e itr \u003d configs.iterator();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            RepoConfiguration config \u003d itr.next();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            if (failedConfigs.contains(config)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), errorMessage);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                itr.remove();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a report at the {@code repoReportDirectory}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return A list of paths to the JSON report files generated for this empty report."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static List\u003cPath\u003e generateEmptyRepoReport(String repoReportDirectory, String displayName) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson(displayName);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory))"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .ifPresent(generatedFiles::add);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory))"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .ifPresent(generatedFiles::add);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return generatedFiles;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Generates a report for a single repository at {@code repoReportDirectory}."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return A list of paths to the JSON report files generated for this report."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static List\u003cPath\u003e generateIndividualRepoReport("
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            String repoReportDirectory, CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .ifPresent(generatedFiles::add);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory))"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .ifPresent(generatedFiles::add);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return generatedFiles;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getSummaryResultPath(String targetFileLocation) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetFileLocation + \"/\" + SummaryJson.SUMMARY_JSON_FILE_NAME;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndividualAuthorshipPath(String repoReportDirectory) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoReportDirectory + \"/authorship.json\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndividualCommitsPath(String repoReportDirectory) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        return repoReportDirectory + \"/commits.json\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setEarliestSinceDate(Date newEarliestSinceDate) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        if (earliestSinceDate \u003d\u003d null || newEarliestSinceDate.before(earliestSinceDate)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            earliestSinceDate \u003d newEarliestSinceDate;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 10,
      "anubh-v": 51,
      "-": 328
    }
  },
  {
    "path": "src/main/java/reposense/report/SummaryJson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the structure of summary.json file in reposense-report folder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SummaryJson {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUMMARY_JSON_FILE_NAME \u003d \"summary.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String repoSenseVersion;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String reportGeneratedTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private final String reportGenerationTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cRepoConfiguration\u003e repos;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cMap\u003cString, String\u003e\u003e errorList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Date sinceDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Date untilDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isSinceDateProvided;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isUntilDateProvided;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public SummaryJson(List\u003cRepoConfiguration\u003e repos, String reportGeneratedTime, Date sinceDate, Date untilDate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isSinceDateProvided, boolean isUntilDateProvided, String repoSenseVersion,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            List\u003cMap\u003cString, String\u003e\u003e errorList, String reportGenerationTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.repos \u003d repos;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reportGeneratedTime \u003d reportGeneratedTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        this.reportGenerationTime \u003d reportGenerationTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isSinceDateProvided \u003d isSinceDateProvided;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isUntilDateProvided \u003d isUntilDateProvided;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.repoSenseVersion \u003d repoSenseVersion;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.errorList \u003d errorList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/reposense/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.ByteBuffer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.zip.ZipOutputStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains file processing related functionalities."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REPOS_ADDRESS \u003d \"repos\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // zip file which contains all the specified file types"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ZIP_FILE \u003d \"archive.zip\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(FileUtil.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String GITHUB_API_DATE_FORMAT \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ByteBuffer buffer \u003d ByteBuffer.allocate(1 \u003c\u003c 11); // 2KB"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BARE_REPO_SUFFIX \u003d \"_bare\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FILE_PATH \u003d \"\\\"%s\\\" is an invalid file path. Skipping this directory.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_FAIL_TO_ZIP_FILES \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Exception occurred while attempting to zip the report files.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Zips all files of type {@code fileTypes} that are in the directory {@code pathsToZip} into a single file and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * output it to {@code sourceAndOutputPath}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void zipFoldersAndFiles(List\u003cPath\u003e pathsToZip, Path sourceAndOutputPath, String... fileTypes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        zipFoldersAndFiles(pathsToZip, sourceAndOutputPath, sourceAndOutputPath, fileTypes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Zips all files listed in {@code pathsToZip} of type {@code fileTypes} located in the directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code sourcePath} into {@code outputPath}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void zipFoldersAndFiles(List\u003cPath\u003e pathsToZip,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Path sourcePath, Path outputPath, String... fileTypes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                FileOutputStream fos \u003d new FileOutputStream(outputPath + File.separator + ZIP_FILE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                ZipOutputStream zos \u003d new ZipOutputStream(fos)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Path pathToZip : pathsToZip) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPath\u003e allPaths \u003d getFilePaths(pathToZip, fileTypes);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                for (Path path : allPaths) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    String filePath \u003d sourcePath.relativize(path.toAbsolutePath()).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    String zipEntry \u003d Files.isDirectory(path) ? filePath + File.separator : filePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    zos.putNextEntry(new ZipEntry(zipEntry.replace(\"\\\\\", \"/\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        Files.copy(path, zos);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    zos.closeEntry();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(MESSAGE_FAIL_TO_ZIP_FILES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes the JSON file representing the {@code object} at the given {@code path}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * @return An Optional containing the Path to the JSON file, or an empty Optional"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     *         if there was an error while writing the JSON file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public static Optional\u003cPath\u003e writeJsonFile(Object object, String path) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDateFormat(GITHUB_API_DATE_FORMAT)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .registerTypeAdapter(FileType.class, new FileType.FileTypeSerializer())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .setPrettyPrinting()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d gson.toJson(object);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try (PrintWriter out \u003d new PrintWriter(path)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            out.print(result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            out.print(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            return Optional.of(path).map(Paths::get);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the {@code root} directory."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the root path does not exist."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteDirectory(String root) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        File rootDirectory \u003d Paths.get(root).toFile();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rootDirectory.exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            for (File file : rootDirectory.listFiles()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                if (file.isDirectory()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    deleteDirectory(file.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    file.delete();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            rootDirectory.delete();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (rootDirectory.exists()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IOException(String.format(\"Fail to delete directory %s\", rootDirectory));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unzips the contents of the {@code zipSourcePath} into {@code outputPath}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if {@code zipSourcePath} is an invalid path."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void unzip(Path zipSourcePath, Path outputPath) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try (InputStream is \u003d Files.newInputStream(zipSourcePath)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            unzip(is, outputPath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unzips the contents of the {@code is} into {@code outputPath}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if {@code is} refers to an invalid path."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void unzip(InputStream is, Path outputPath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try (ZipInputStream zis \u003d new ZipInputStream(is)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            ZipEntry entry;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(outputPath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((entry \u003d zis.getNextEntry()) !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                Path path \u003d Paths.get(outputPath.toString(), entry.getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                // create the directories of the zip directory"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                if (entry.isDirectory()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    Files.createDirectories(path.toAbsolutePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    zis.closeEntry();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                try (OutputStream output \u003d Files.newOutputStream(path)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    int length;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    while ((length \u003d zis.read(buffer.array())) \u003e 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                        output.write(buffer.array(), 0, length);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                zis.closeEntry();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the template files from {@code sourcePath} to the {@code outputPath}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if {@code is} refers to an invalid path."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void copyTemplate(InputStream is, String outputPath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.unzip(is, Paths.get(outputPath));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code dest} directory if it does not exist."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createDirectory(Path dest) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createDirectories(dest);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the relative path to the bare repo version of {@code config}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getBareRepoPath(RepoConfiguration config) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return Paths.get(FileUtil.REPOS_ADDRESS,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                config.getRepoFolderName(), config.getRepoName() + BARE_REPO_SUFFIX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the folder name of the bare repo version of {@code config}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getBareRepoFolderName(RepoConfiguration config) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return config.getRepoName() + BARE_REPO_SUFFIX;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} is a valid path."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Produces log messages when the invalid file path is skipped."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.log(Level.WARNING, String.format(MESSAGE_INVALID_FILE_PATH, path));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public static boolean isEmptyFile(String directoryPath, String relativeFilePath) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return (new File(directoryPath, relativeFilePath).length() \u003d\u003d 0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of {@code Path} of {@code fileTypes} contained in the given {@code directoryPath} directory."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPath\u003e getFilePaths(Path directoryPath, String... fileTypes) throws IOException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.walk(directoryPath)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(p -\u003e FileUtil.isFileTypeInPath(p, fileTypes) || Files.isDirectory(p))"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code path} contains one of the {@code fileTypes} extension."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isFileTypeInPath(Path path, String... fileTypes) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(fileTypes).anyMatch(path.toString()::endsWith);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 10,
      "-": 223
    }
  },
  {
    "path": "src/main/java/reposense/util/TimeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Contains time related functionalities."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class TimeUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static Long startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Sets the {@code startTime} to be the current time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void startTimer() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the formatted elapsed time from {@code startTime} until current time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public static String getElapsedTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        long endTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        double elapsedTime \u003d (double) (endTime - startTime) / 1_000_000_000.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int elapsedHours \u003d (int) elapsedTime / 3600;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int elapsedMinutes \u003d (int) (elapsedTime % 3600) / 60;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        double elapsedSeconds \u003d elapsedTime % 60;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String formattedElapsedTime \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (elapsedHours \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            formattedElapsedTime +\u003d String.format(\" %d hour(s)\", elapsedHours);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (elapsedMinutes \u003e 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            formattedElapsedTime +\u003d String.format(\" %d minute(s)\", elapsedMinutes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        formattedElapsedTime +\u003d String.format(\" %.2f second(s)\", elapsedSeconds);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return formattedElapsedTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * Returns the formatted elapsed time from {@code startTime} until current time,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * with an additional explanatory string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public static String getElapsedTimeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return \"Elapsed processing time:\" + getElapsedTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 13,
      "jamessspanggg": 33
    }
  },
  {
    "path": "src/systemtest/java/reposense/ConfigSystemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.AuthorConfiguration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.GroupConfiguration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.ArgsParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.GroupConfigCsvParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.SinceDateArgumentType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.ErrorSummary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.InputBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigSystemTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FT_TEMP_DIR \u003d \"ft_temp\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXPECTED_FOLDER \u003d \"expected\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPORT_GENERATED_TIME \u003d \"Tue Jul 24 17:45:15 SGT 2018\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String TEST_REPORT_GENERATION_TIME \u003d \"15 second(s)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.deleteDirectory(FT_TEMP_DIR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ErrorSummary.getInstance().clearErrorList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        FileUtil.deleteDirectory(FT_TEMP_DIR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * since date to capture from the first commit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void testSinceBeginningDateRange() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        generateReport(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualFiles \u003d Paths.get(getClass().getClassLoader()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .getResource(\"sinceBeginningDateRange/expected\").toURI());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAllJson(actualFiles, FT_TEMP_DIR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void test30DaysFromUntilDate() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        generateReport(getInputWithUntilDate(\"1/11/2017\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualFiles \u003d Paths.get(getClass().getClassLoader()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .getResource(\"30daysFromUntilDate/expected\").toURI());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAllJson(actualFiles, FT_TEMP_DIR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * System test with a specified since date and until date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void testDateRange() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        generateReport(getInputWithDates(\"1/9/2017\", \"30/10/2017\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualFiles \u003d Paths.get(getClass().getClassLoader().getResource(\"dateRange/expected\").toURI());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAllJson(actualFiles, FT_TEMP_DIR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getInputWithUntilDate(String untilDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"--until %s\", untilDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getInputWithDates(String sinceDate, String untilDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"--since %s --until %s\", sinceDate, untilDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates the testing report to be compared with expected report."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    private void generateReport(String inputDates) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFolder \u003d Paths.get(getClass().getClassLoader().getResource(\"repo-config.csv\").toURI()).getParent();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(configFolder)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .add(inputDates)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(repoConfigs, authorConfigs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(repoConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setDatesToRepoConfigs("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                repoConfigs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.generateReposReport(repoConfigs, FT_TEMP_DIR, TEST_REPORT_GENERATED_TIME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                cliArguments.getSinceDate(), cliArguments.getUntilDate(), cliArguments.isSinceDateProvided(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                cliArguments.isUntilDateProvided(), () -\u003e TEST_REPORT_GENERATION_TIME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies all JSON files in {@code actualDirectory} with {@code expectedDirectory}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyAllJson(Path expectedDirectory, String actualRelative) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Path filePath : pathStream.collect(Collectors.toList())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (Files.isDirectory(filePath)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    verifyAllJson(filePath, actualRelative);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                if (filePath.toString().endsWith(\".json\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    String relativeDirectory \u003d filePath.toAbsolutePath().toString().split(EXPECTED_FOLDER)[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    assertJson(filePath, relativeDirectory, actualRelative);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the correctness of given JSON file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertJson(Path expectedJson, String expectedPosition, String actualRelative) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualJson \u003d Paths.get(actualRelative, expectedPosition);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(actualJson));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.assertTrue(TestUtil.compareFileContents(expectedJson, actualJson));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.fail(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 5,
      "anubh-v": 6,
      "yash-chowdhary": 3,
      "-": 141
    }
  },
  {
    "path": "src/test/java/reposense/authorship/AnnotatorAnalyzerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import static reposense.model.Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AnnotatorAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Author MAIN_AUTHOR \u003d new Author(MAIN_AUTHOR_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Author FAKE_AUTHOR \u003d new Author(FAKE_AUTHOR_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Date SINCE_DATE \u003d TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 8);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Date UNTIL_DATE \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 10);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Author[] EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            FAKE_AUTHOR, FAKE_AUTHOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Author[] EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST \u003d {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            FAKE_AUTHOR, FAKE_AUTHOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void before() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        super.before();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        config.setSinceDate(SINCE_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        config.setUntilDate(UNTIL_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void analyzeAnnotation_authorNamePresentInConfig_overrideAuthorship() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        config.setAuthorList(Arrays.asList(FAKE_AUTHOR, MAIN_AUTHOR));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        assertAnnotationAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void analyzeAnnotation_authorNameNotInConfig_disownCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        config.setAuthorList(Collections.singletonList(FAKE_AUTHOR));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        assertAnnotationAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public FileResult getFileResult(String relativePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), relativePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        return FileInfoAnalyzer.analyzeFile(config, fileInfo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     * For each line in {@code FileResult}, assert that it is attributed to the expected author."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private void assertAnnotationAnalysisCorrectness(FileResult fileResult, List\u003cAuthor\u003e expectedLineAuthors) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cLineInfo\u003e lines \u003d fileResult.getLines();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        assertEquals(expectedLineAuthors.size(), lines.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        Iterator\u003cAuthor\u003e lineAuthorsItr \u003d expectedLineAuthors.iterator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        Iterator\u003cLineInfo\u003e linesItr \u003d lines.iterator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        while (linesItr.hasNext() \u0026\u0026 lineAuthorsItr.hasNext()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            assertEquals(lineAuthorsItr.next(), linesItr.next().getAuthor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 67,
      "yash-chowdhary": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/reposense/authorship/FileAnalyzerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date BLAME_TEST_SINCE_DATE \u003d TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date BLAME_TEST_UNTIL_DATE \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 8);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date EMAIL_WITH_ADDITION_TEST_SINCE_DATE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            TestUtil.getSinceDate(2019, Calendar.MARCH, 28);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date EMAIL_WITH_ADDITION_TEST_UNTIL_DATE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            TestUtil.getUntilDate(2019, Calendar.MARCH, 28);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date MOVED_FILE_SINCE_DATE \u003d TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Date MOVED_FILE_UNTIL_DATE \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 9);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void blameTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(BLAME_TEST_SINCE_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void movedFileBlameTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(MOVED_FILE_SINCE_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void blameTestDateRange() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), BLAME_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(BLAME_TEST_SINCE_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void movedFileBlameTestDateRange() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), MOVED_FILE_UNTIL_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(MOVED_FILE_SINCE_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeFile_blameTestFileIgnoreFakeAuthorCommitFullHash_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(BLAME_TEST_SINCE_DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoFull);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoShort);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(fileInfoFull, fileInfoShort);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(1).getAuthor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(2).getAuthor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(4).getAuthor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // line added in commit that was ignored"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(Author.UNKNOWN_AUTHOR, fileInfoFull.getLine(3).getAuthor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeFile_blameTestFileIgnoreAllCommit_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(BLAME_TEST_SINCE_DATE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoFull);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(CommitHash.convertStringsToCommits("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                        MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoShort);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(fileInfoFull, fileInfoShort);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileInfoFull.getLines().forEach(lineInfo -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeFile_emailWithAdditionOperator_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(EMAIL_WITH_ADDITION_TEST_SINCE_DATE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(EMAIL_WITH_ADDITION_TEST_UNTIL_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), \"pr_617.java\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, fileInfo.getLines().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        fileInfo.getLines().forEach(lineInfo -\u003e Assert.assertEquals(author, lineInfo.getAuthor()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "jamessspanggg": 24,
      "-": 99
    }
  },
  {
    "path": "src/test/java/reposense/commits/CommitInfoAnalyzerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import org.junit.Assume;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.commits.model.ContributionPair;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.model.FileTypeTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import reposense.util.SystemUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommitInfoAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUMBER_EUGENE_COMMIT \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUMBER_MINGYI_COMMIT \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUMBER_EMPTY_MESSAGE_COMMIT \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final FileType FILETYPE_JAVA \u003d new FileType(\"java\", Collections.singletonList(\"**java\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final FileType FILETYPE_MD \u003d new FileType(\"md\", Collections.singletonList(\"**md\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final FileType FILETYPE_JSON \u003d new FileType(\"json\", Collections.singletonList(\"**json\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final FileType FILETYPE_TXT \u003d new FileType(\"txt\", Collections.singletonList(\"**txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void before() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super.before();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_allAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitInfos.size(), commitResults.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_fakeMainAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - NUMBER_EUGENE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_eugeneAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(NUMBER_EUGENE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_allAuthorSingleCommitIgnoredNoDateRange_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitResultsShort, commitResultsFull);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - 1, commitResultsFull.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_allAuthorMultipleCommitIgnoredNoDateRange_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018, EUGENE_AUTHOR_README_FILE_COMMIT_07052018));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(CommitHash.convertStringsToCommits(Arrays.asList("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitResultsShort, commitResultsFull);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - 2, commitResultsFull.size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_noCommitMessage_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"empty-commit-message\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(YONG_AUTHOR_NAME, new Author(YONG_AUTHOR_NAME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commitResults.removeIf(s -\u003e !s.getMessageTitle().isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(NUMBER_EMPTY_MESSAGE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_emailWithAdditionOperator_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(NUMBER_MINGYI_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_duplicateAuthorsDuplicateCommits_success() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Author author \u003d new Author(EUGENE_AUTHOR_NAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e fileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        fileTypeAndContributionMap.put(FILETYPE_JSON, new ContributionPair(17, 0));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, LATEST_COMMIT_HASH,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                parseGitStrictIsoDate(\"2018-11-08T13:50:40+08:00\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"Add config.json with invalid fields (#2)\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", null, fileTypeAndContributionMap));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        config.setAuthorList(Arrays.asList(author, author));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2018, Calendar.NOVEMBER, 7).getTime());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2018, Calendar.NOVEMBER, 9).getTime());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Assert.assertEquals(actualCommitInfos.size(), 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_multipleCommitsWithCommitMessageBody_success() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(JINYAO_AUTHOR_NAME);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        firstFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(1, 0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        secondFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(0, 1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"2eccc111e813e8b2977719b5959e32b674c56afe\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                parseGitStrictIsoDate(\"2019-06-19T13:02:01+08:00\"), \"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"Hi there!\\n\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n\", null,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                firstFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"8f8359649361f6736c31b87d499a4264f6cf7ed7\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                parseGitStrictIsoDate(\"2019-06-19T13:03:39+08:00\"), \"[#123] Reverted 1st commit\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \"This is a test to see if the commit message body works. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + \"All should be same same.\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n|The end.\", null,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                secondFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"751-CommitInfoAnalyzerTest-analyzeCommits_multipleCommitsWithCommitMessageBody_success\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2019, Calendar.JUNE, 19).getTime());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2019, Calendar.JUNE, 20).getTime());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_commitsWithEmptyCommitMessageTitleOrBody_success() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(JINYAO_AUTHOR_NAME);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        firstFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(1, 0));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        secondFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(0, 1));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // 1st test: Contains commit message title but no commit message body."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"e54ae8fdb77c6c7d2c39131b816bfc03e6a6dd44\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                parseGitStrictIsoDate(\"2019-07-02T12:35:46+08:00\"), \"Test 1: With message title but no body\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", null, firstFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // 2nd test: Contains no commit message title and no commit message body."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"57fa22fc2550210203c2941692f69ccb0cf18252\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2019-07-02T12:36:14+08:00\"), \"\", \"\", null,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                secondFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"751-CommitInfoAnalyzerTest-analyzeCommits_commitsWithEmptyCommitMessageTitleOrBody_success\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2019, Calendar.JULY, 2).getTime());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2019, Calendar.JULY, 3).getTime());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_commitsWithMultipleTags_success() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Author author \u003d new Author(JAMES_AUTHOR_NAME);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        firstFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(2, 1));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        secondFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(1, 0));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"62c3a50ef9b3580b2070deac1eed2b3e2d701e04\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2019-12-20T22:45:18+08:00\"), \"Single Tag Commit\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", new String[] {\"1st\"}, firstFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"c5e36ec059390233ac036db61a84fa6b55952506\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2019-12-20T22:47:21+08:00\"), \"Double Tag Commit\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", new String[] {\"2nd-tag\", \"1st-tag\"}, secondFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setBranch(\"879-CommitInfoAnalyzerTest-analyzeCommits_commitsWithMultipleTags_success\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2019, Calendar.DECEMBER, 20).getTime());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2019, Calendar.DECEMBER, 21).getTime());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_emptyCommits_success() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Author author \u003d new Author(JAMES_AUTHOR_NAME);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"016ab87c4afe89a98225b96c98ff28dd4774410f\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2020-01-27T22:20:51+08:00\"), \"empty commit\", \"\", null));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setBranch(\"1019-CommitInfoAnalyzerTest-emptyCommits\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2020, Calendar.JANUARY, 27).getTime());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2020, Calendar.JANUARY, 28).getTime());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void analyzeCommits_commitsWithBinaryFileContribution_success() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Author author \u003d new Author(JAMES_AUTHOR_NAME);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // binary file contribution will have 0 contribution and won\u0027t be added to fileTypesAndContributionMap"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"a00c51138cbf5ab7d14f52b52abb182c8a369169\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2020-04-06T16:41:10+08:00\"), \"Add binary file\", \"\", null));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setBranch(\"1192-CommitInfoAnalyzerTest-analyzeCommits_commitsWithBinaryContribution_success\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2020, Calendar.APRIL, 6).getTime());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2020, Calendar.APRIL, 7).getTime());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void analyzeCommits_fileNameWithSpecialChars_success() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // Runs test only on non Windows (Unix) operating systems as the file names are invalid in windows"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assume.assumeTrue(!SystemUtil.isWindows());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Author author \u003d new Author(JAMES_ALTERNATIVE_AUTHOR_NAME);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        firstFileTypeAndContributionMap.put(FILETYPE_TXT, new ContributionPair(1, 0));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"cfb3c8dc477cb0af19fce8bead4d278f35afa396\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2020-04-20T12:09:39+08:00\"),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"Create file name without special chars\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", null, firstFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        secondFileTypeAndContributionMap.put(FILETYPE_TXT, new ContributionPair(0, 0));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expectedCommitResults.add(new CommitResult(author, \"17bde492e9a80d8699ad193cf87e677341f936cc\","
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                parseGitStrictIsoDate(\"2020-04-20T12:17:40+08:00\"),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"Rename to file name with special chars\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \"\", null, secondFileTypeAndContributionMap));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setBranch(\"1244-CommitInfoAnalyzerTest-analyzeCommits_fileNameWithSpecialChars_success\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setAuthorList(Collections.singletonList(author));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setSinceDate(new GregorianCalendar(2020, Calendar.APRIL, 20).getTime());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        config.setUntilDate(new GregorianCalendar(2020, Calendar.APRIL, 21).getTime());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assert.assertEquals(2, actualCommitInfos.size());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Assert.assertEquals(expectedCommitResults, actualCommitResults);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Date} from a string {@code gitStrictIsoDate}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    private Date parseGitStrictIsoDate(String gitStrictIsoDate) throws Exception {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        return CommitInfoAnalyzer.GIT_STRICT_ISO_DATE_FORMAT.parse(gitStrictIsoDate);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 8,
      "jamessspanggg": 134,
      "-": 170,
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/test/java/reposense/git/GitBranchTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileTypeTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitBranchTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://github.com/reposense/testrepo-UncommonDefaultBranch.git\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void getCurrentBranch_masterBranch_success() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentBranch \u003d GitBranch.getCurrentBranch(config.getRepoRoot());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(\"master\", currentBranch);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void getCurrentBranch_uncommonDefaultBranch_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration uncommonDefaultConfig \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoLocation(TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION), RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uncommonDefaultConfig.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(uncommonDefaultConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentBranch \u003d GitBranch.getCurrentBranch(uncommonDefaultConfig.getRepoRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(\"uncommon\", currentBranch);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/reposense/git/GitCheckoutTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.CommitNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitCheckoutTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkout_validBranch_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), \"test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(branchFile));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkoutBranchTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(branchFile));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkoutBranch(config.getRepoRoot(), \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(branchFile));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkoutHashTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(newFile));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), FIRST_COMMIT_HASH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(newFile));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void checkoutToDate_validDate_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(newFile));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Date untilDate \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(newFile));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d CommitNotFoundException.class)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void checkoutToDate_invalidDate_throwsEmptyCommitException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Date untilDate \u003d TestUtil.getUntilDate(2015, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/reposense/git/GitCloneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitCloneTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void cloneTest_validRepo_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // As the clone has been performed in the {@code GitTestTemplate},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // this checks whether the clone has been executed successfully by performing a file system check."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Path dir \u003d Paths.get(config.getRepoRoot());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(dir));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/reposense/git/GitDiffTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitDiffTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void diffCommit_validCommitHash_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(diffResult.isEmpty());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void diffCommit_emptyCommitHash_emptyResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), LATEST_COMMIT_HASH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(diffResult.isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void diffCommit_latestCommitHash_emptyResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(diffResult.isEmpty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d RuntimeException.class)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void diffCommit_nonexistentCommitHash_throwsRunTimeException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        GitDiff.diffCommit(config.getRepoRoot(), NONEXISTENT_COMMIT_HASH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void diffCommit_commitContainingSubmodule_ignoresSubmodule() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \"850-GitDiffTest-diffCommit_commitContainingSubmodule_ignoresSubmodule\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), EMPTY_TREE_HASH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Assert.assertFalse(diffResult.contains(\"Subproject commit\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 8,
      "-": 34
    }
  },
  {
    "path": "src/test/java/reposense/git/GitLsTreeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assume;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.InvalidFilePathException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.SystemUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitLsTreeTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Method isValidWindowsFilenameMethod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void beforeClass() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        GitTestTemplate.beforeClass();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isValidWindowsFilenameMethod \u003d GitLsTree.class.getDeclaredMethod(\"isValidWindowsFilename\", String.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        isValidWindowsFilenameMethod.setAccessible(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void after() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "       // Overrides checkout master behaviour in GitTestTemplate as it throws error when run on a bare clone."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidWindowsFilename_validFilenames_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Runs test only on Windows operating systems"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Assume.assumeTrue(SystemUtil.isWindows());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e validDirectoryNames \u003d Arrays.asList(\"com10.txt\", \"folder name/file name.txt\", \".txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String fileName : validDirectoryNames) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.assertTrue((boolean) isValidWindowsFilenameMethod.invoke(null, fileName));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidWindowsFilename_illegalFileNames_fail() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Runs test only on Windows operating systems"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assume.assumeTrue(SystemUtil.isWindows());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e windowsReservedFilenames \u003d Arrays.asList(\"com1.txt\", \"folder/com1.txt\", \"folder/com1/file.txt\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \"nul\", \"fi\\\\le.txt\", \"\\\"file\\\".txt\", \"file.txt.\", \"folder./file.txt\", \"file.txt \", \"folder /file.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String fileName : windowsReservedFilenames) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.assertFalse((boolean) isValidWindowsFilenameMethod.invoke(null, fileName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repo_validFilePaths_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        validateFilePaths(config);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d InvalidFilePathException.class)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void windows_cloneInvalidWindowsFilePaths_throwsInvalidFilePathException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Runs test only on Windows operating systems"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assume.assumeTrue(SystemUtil.isWindows());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"391-invalid-filepaths\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        validateFilePaths(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void unix_cloneInvalidWindowsFilePaths_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Runs test only on non Windows (Unix) operating systems"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assume.assumeTrue(!SystemUtil.isWindows());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"391-invalid-filepaths\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        validateFilePaths(config);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clones a bare repo in {@code config} and verifies that the repo contains only file paths that are"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * compatible in Windows."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if it fails to create/delete the folders."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidFilePathException if the repository contains invalid file paths that are not compatible with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Windows."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void validateFilePaths(RepoConfiguration config) throws IOException, InvalidFilePathException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.cloneBare(config, FileUtil.getBareRepoFolderName(config));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        GitLsTree.validateFilePaths(config, FileUtil.getBareRepoPath(config));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "anubh-v": 2,
      "-": 88
    }
  },
  {
    "path": "src/test/java/reposense/git/GitRevParseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.exception.GitBranchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitRevParseTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void assertBranchExists_withExistingBranch_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"master\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        GitRevParse.assertBranchExists(config, Paths.get(config.getRepoRoot()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test (expected \u003d GitBranchException.class)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void assertBranchExists_withNonExistentBranch_throwsGitBranchException() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"nonExistentBranch\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        GitRevParse.assertBranchExists(config, Paths.get(config.getRepoRoot()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/reposense/model/AuthorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.AssertUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmail_validEmails_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] emails \u003d new String[] {\"tester@test.net\", \"developer@example.com\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setEmails(Arrays.asList(emails));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // The additional 1 email comes from the Standard GitHub Email."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(emails.length + 1, author.getEmails().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(author.getEmails().containsAll(Arrays.asList(emails)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmail_invalidEmails_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] emails \u003d new String[] {\"this.”is\\\\ invalid”@example.com\", \"developer@example.com\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Arrays.asList(emails)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Collections.singletonList(\"\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreGlobList_validGlobRegex_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] testPaths \u003d new String[] {\"docs/UserGuide.adoc\", \"collated/codeeong.md\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, author.getIgnoreGlobList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(author.getIgnoreGlobList().containsAll(Arrays.asList(ignoreGlobs)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(testPaths).forEach(value -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                Assert.assertTrue(author.isIgnoringFile(Paths.get(value))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreGlobList_quoteInGlobPattern_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\\\"\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreGlobList_semicolonInGlobPattern_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc; echo hi\", \"collated/**\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void appendIgnoreGlobList_validGlobRegex_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] moreIgnoreGlobs \u003d new String[] {\"**[!(.md)]\", \"C:\\\\\\\\Program Files\\\\\\\\**\"};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] testPaths \u003d new String[] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \"docs/UserGuide.adoc\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \"collated/codeeong.md\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \"C:\\\\Program Files\\\\RepoSense\\\\README.md\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \"/this/is/not/a/md/file.txt\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ignoreGlobList.addAll(Arrays.asList(moreIgnoreGlobs));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author.importIgnoreGlobList(Arrays.asList(moreIgnoreGlobs));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(4, author.getIgnoreGlobList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(author.getIgnoreGlobList().containsAll(ignoreGlobList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(testPaths).forEach(value -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                Assert.assertTrue(author.isIgnoringFile(Paths.get(value))));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void appendIgnoreGlobList_appendOrOperator_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**[!(.md)] | rm -rf /\", \"C:\\\\Program Files\\\\**\"};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author.importIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 2,
      "-": 93,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/reposense/model/RepoConfigurationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.ArgsParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.GroupConfigCsvParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.InputBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfigurationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path IGNORE_STANDALONE_TEST_CONFIG_FILES \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getResource(\"RepoConfigurationTest/repoconfig_ignoreStandAlone_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getResource(\"RepoConfigurationTest/repoconfig_ignoreStandAloneKeyword_test\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getFile()).toPath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path FORMATS_TEST_CONFIG_FILES \u003d new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_formats_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path WITHOUT_FORMATS_TEST_CONFIG_FILES \u003d new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_withoutformats_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path GROUPS_TEST_CONFIG_FILES \u003d new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_groups_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path OVERRIDE_STANDALONE_TEST_CONFIG_FILE \u003d new File(RepoConfigurationTest.class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"RepoConfigurationTest/repoconfig_overrideStandAlone_test\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path IGNORE_AUTHORS_TEST_CONFIG_FILE \u003d new File(RepoConfigurationTest.class.getClassLoader()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_ignoreAuthors_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST \u003d new File(RepoConfigurationTest.class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"RepoConfigurationTest/repoconfig_ignoreStandaloneOverrideCsv_test\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_MINIMAL_STANDALONE_CONFIG \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://github.com/reposense/testrepo-minimalstandaloneconfig.git\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_AUTHOR \u003d new Author(\"lithiumlkid\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_AUTHOR \u003d new Author(\"codeeong\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author THIRD_AUTHOR \u003d new Author(\"jordancjq\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FOURTH_AUTHOR \u003d new Author(\"lohtianwei\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_ALIASES \u003d Collections.singletonList(\"Ahmad Syafiq\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e THIRD_AUTHOR_ALIASES \u003d Collections.singletonList(\"Jordan Chong\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FOURTH_AUTHOR_ALIASES \u003d Collections.singletonList(\"Tianwei\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"*.aa1\", \"**.aa2\", \"**.java\", \"collated**\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"\", \"collated**\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e THIRD_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**[!(.md)]\", \"collated**\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FOURTH_AUTHOR_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFileType\u003e CONFIG_FORMATS \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java\", \"adoc\", \"md\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final List\u003cFileType\u003e FIRST_CONFIG_GROUPS \u003d Arrays.asList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"test\", Collections.singletonList(\"src/test**\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"code\", Collections.singletonList(\"**.java\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final List\u003cFileType\u003e SECOND_CONFIG_GROUPS \u003d Arrays.asList("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e CLI_FORMATS \u003d Arrays.asList(\"css\", \"html\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static RepoConfiguration repoDeltaStandaloneConfig;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public static void setUp() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FIRST_AUTHOR.setAuthorAliases(FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        THIRD_AUTHOR.setAuthorAliases(THIRD_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        FOURTH_AUTHOR.setAuthorAliases(FOURTH_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        THIRD_AUTHOR.setIgnoreGlobList(THIRD_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        FOURTH_AUTHOR.setIgnoreGlobList(FOURTH_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(THIRD_AUTHOR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(FOURTH_AUTHOR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.addAuthorEmailsAndAliasesMapEntry(FIRST_AUTHOR, FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.addAuthorEmailsAndAliasesMapEntry(FOURTH_AUTHOR, FOURTH_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Ahm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Cod\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setAuthorDisplayName(THIRD_AUTHOR, \"Jor\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setAuthorDisplayName(FOURTH_AUTHOR, \"Loh\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setEmails(Arrays.asList(\"codeeong@gmail.com\", \"33129797+codeeong@users.noreply.github.com\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : expectedAuthors) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            repoDeltaStandaloneConfig.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        repoDeltaStandaloneConfig.setFormats(CONFIG_FORMATS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void cleanRepoDirectory() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoConfig_usesStandaloneConfig_success() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_ignoresStandaloneConfig_success() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(author);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.addAuthorEmailsAndAliasesMapEntry(author, FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setFormats(CONFIG_FORMATS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_TEST_CONFIG_FILES)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoConfig_ignoresStandaloneConfigInCli_success() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .addIgnoreStandaloneConfig()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                cliArguments.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_ignoreStandaloneConfigInCli_overrideCsv() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                new RepoLocation(TEST_REPO_BETA), \"master\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .addIgnoreStandaloneConfig()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                cliArguments.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        GitClone.clone(repoBetaActualConfig);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        GitClone.clone(repoDeltaActualConfig);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_withoutIgnoreStandaloneConfigInCli_useCsv() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                new RepoLocation(TEST_REPO_BETA), \"master\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "                cliArguments.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        GitClone.clone(repoBetaActualConfig);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        GitClone.clone(repoDeltaActualConfig);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, repoDeltaActualConfig);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_wrongKeywordUseStandaloneConfig_success() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_withFormats_ignoreCliFormats() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(FORMATS_TEST_CONFIG_FILES)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(CONFIG_FORMATS, actualConfigs.get(0).getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_withoutFormats_useCliFormats() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e actualFormats \u003d actualConfigs.get(0).getFileTypeManager().getFormats();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(FileType.convertFormatStringsToFileTypes(CLI_FORMATS), actualFormats);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_withCustomGroups_useCustomGroups() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(GROUPS_TEST_CONFIG_FILES).build();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setGroupConfigsToRepos(actualConfigs, groupConfigs);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertEquals(2, actualConfigs.size());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertEquals(FIRST_CONFIG_GROUPS, actualConfigs.get(0).getFileTypeManager().getGroups());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertEquals(SECOND_CONFIG_GROUPS, actualConfigs.get(1).getFileTypeManager().getGroups());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_withoutFormatsAndCliFormats_useAllFormats() throws Exception {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES).build();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, actualConfigs.get(0).getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoConfig_emptyLocationDifferentBranch_equal() throws Exception {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationEmptyBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationDefaultBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationWithBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"master\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(emptyLocationDefaultBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(emptyLocationWithBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoConfig_sameLocationDifferentBranch_notEqual() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration validLocationValidBranchRepoConfig \u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration validLocationDefaultBranchRepoConfig \u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertNotEquals(validLocationDefaultBranchRepoConfig, validLocationValidBranchRepoConfig);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_overrideStandaloneConfig_success() throws Exception {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(), Collections.emptyList(), false, Collections.emptyList(),"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                true, true, true);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIsIgnoredAuthorsListOverriding(true);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoredAuthorsList(Arrays.asList(\"lithiumlkid\"));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        Author[] authors \u003d new Author[]{FIRST_AUTHOR, SECOND_AUTHOR, THIRD_AUTHOR, FOURTH_AUTHOR};"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : authors) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            Author expectedAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e expectedAuthorIgnoreGlobList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedAuthorIgnoreGlobList.addAll(author.getIgnoreGlobList());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            // Authors\u0027 original ignoreGlobList contains values from StandaloneConfig repo level, thus need to remove"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedAuthorIgnoreGlobList.removeAll(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedAuthor.setIgnoreGlobList(expectedAuthorIgnoreGlobList);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedAuthorList.add(expectedAuthor);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthorList);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorDisplayNameMap(repoDeltaStandaloneConfig.getAuthorDisplayNameMap());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorEmailsAndAliasesMap(repoDeltaStandaloneConfig.getAuthorEmailsAndAliasesMap());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(OVERRIDE_STANDALONE_TEST_CONFIG_FILE)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoConfig_minimalStandaloneConfig_fieldsAssignedDefaultValues() throws Exception {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                \"master\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        Author firstAuthor \u003d new Author(\"bluein-green\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        Author secondAuthor \u003d new Author(\"jylee-git\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d Arrays.asList(firstAuthor, secondAuthor);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoreGlobList(Collections.emptyList());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setFormats(Collections.emptyList());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoreCommitList(Collections.emptyList());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG),"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                \"master\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_removeIgnoredAuthors_success() throws Exception {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(author);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.addAuthorEmailsAndAliasesMapEntry(author, FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setFormats(CONFIG_FORMATS);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setIgnoredAuthorsList(Arrays.asList(\"jordancjq\", \"Eugene Peh\"));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(IGNORE_AUTHORS_TEST_CONFIG_FILE)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(formats)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        Method updateAuthorList \u003d ReportGenerator.class.getDeclaredMethod(\"updateAuthorList\", RepoConfiguration.class);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        updateAuthorList.setAccessible(true);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        updateAuthorList.invoke(null, actualConfig);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 64,
      "yash-chowdhary": 7,
      "-": 373,
      "0blivious": 6
    }
  },
  {
    "path": "src/test/java/reposense/model/StandaloneConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.StandaloneConfigJsonParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StandaloneConfigTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/valid_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_IGNOREGLOB_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/lithiumlkid_invalidIgnoreGlob_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_FORMATS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/invalidFormats_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_IGNORECOMMIT_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/invalidIgnoreCommit_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SPECIAL_CHARACTER_AUTHOR_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/specialCharacterAuthor_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHORS_TRAILING_COMMAS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/authors_trailingCommas_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path LITHIUMLKID_TRAILING_COMMAS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigTest/lithiumlkid_trailingCommas_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static StandaloneConfig validStandaloneConfig;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public static void setUp() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        validStandaloneConfig \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_validJson_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_specialCharacterAuthor_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(SPECIAL_CHARACTER_AUTHOR_CONFIG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_trailingCommasInList_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(AUTHORS_TRAILING_COMMAS_CONFIG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(validStandaloneConfig, standaloneConfig);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d JsonSyntaxException.class)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_trailingCommasInMaps_throwsJsonSyntaxException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        new StandaloneConfigJsonParser().parse(LITHIUMLKID_TRAILING_COMMAS_CONFIG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_invalidIgnoreGlob_throwIllegalArgumentException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNOREGLOB_CONFIG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_invalidFormats_throwIllegalArgumentException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_FORMATS_CONFIG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_invalidIgnoreCommit_throwIllegalArgumentException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNORECOMMIT_CONFIG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 8,
      "-": 83
    }
  },
  {
    "path": "src/test/java/reposense/parser/ArgsParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.helper.HelpScreenException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileTypeTest;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.InputBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgsParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path PROJECT_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final Path CONFIG_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + File.separator + \"config\" + File.separator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path CONFIG_FOLDER_ABSOLUTE \u003d new File(ArgsParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"cli_location_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path OUTPUT_DIRECTORY_ABSOLUTE \u003d new File(ArgsParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"output\").getFile()).toPath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path CONFIG_FOLDER_RELATIVE \u003d PROJECT_DIRECTORY.relativize(CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path OUTPUT_DIRECTORY_RELATIVE \u003d PROJECT_DIRECTORY.relativize(OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_CONFIG_CSV_FILE \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            CONFIG_FOLDER_ABSOLUTE.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_CSV_FILE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            CONFIG_FOLDER_ABSOLUTE.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NONEXISTENT_DIRECTORY \u003d \"some_non_existent_dir/\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final InputBuilder DEFAULT_INPUT_BUILDER \u003d new InputBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_REPOSENSE \u003d \"https://github.com/reposense/RepoSense.git\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_CHARLIE \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DEFAULT_TIMEZONE \u003d \"UTC+08\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void before() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DEFAULT_INPUT_BUILDER.reset().addConfig(CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void after() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.deleteDirectory(PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_allCorrectInputs_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .addSinceDate(\"01/07/2017\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .addUntilDate(\"30/11/2017\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(\"java adoc html css js\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .addIgnoreStandaloneConfig()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .addTimezone(DEFAULT_TIMEZONE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d HelpScreenException.class)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_help_throwsHelpScreenException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"--help\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_allCorrectInputsAlias_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-c %s -o %s -s 01/07/2017 -u 30/11/2017 -f java adoc html css js -i -v -t %s\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE, DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_withExtraWhitespaces_success() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).addWhiteSpace(5)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE).addWhiteSpace(4)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .addSinceDate(\"01/07/2017\").addWhiteSpace(3)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .addUntilDate(\"30/11/2017\").addWhiteSpace(6)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .addFormats(\"java   adoc  html      css js   \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .addIgnoreStandaloneConfig().addWhiteSpace(1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView().addWhiteSpace(4)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .addTimezone(DEFAULT_TIMEZONE).addWhiteSpace(5)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \"java\", \"adoc\", \"html\", \"css\", \"js\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_configFolderOnly_success() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // Optional arguments have default values"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertDateDiffEndOfDay(cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // Optional arguments have default values"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertDateDiffEndOfDay(cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.systemDefault(), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_viewOnly_success() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addView(OUTPUT_DIRECTORY_ABSOLUTE).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_withIgnore_success() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                .addIgnoreStandaloneConfig()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputWithAlias \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                .add(\"-i\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArgumentsWithAlias \u003d ArgsParser.parse(translateCommandline(inputWithAlias));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArgumentsWithAlias instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(((LocationsCliArguments) cliArgumentsWithAlias).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(cliArguments, cliArgumentsWithAlias);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_withoutIgnore_success() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_viewOnlyWithoutArgs_returnsConfigCliArguments() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addView().build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertEquals(CONFIG_DIRECTORY.toString(), ("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_configFolderAndOutputDirectory_success() throws Exception {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        Path expectedRelativeOutputDirectoryPath \u003d OUTPUT_DIRECTORY_RELATIVE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        Path expectedAbsoluteOutputDirectoryPath \u003d OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                .addOutput(OUTPUT_DIRECTORY_RELATIVE)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile(expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile(expectedAbsoluteOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_configFolderAndViewWithouthArgs_returnsConfigCliArguments() throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_configFolderAndViewWithArgs_returnsConfigCliArguments() throws Exception {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void sinceDate_correctFormat_success() throws Exception {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01/07/2017\").build();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void untilDate_correctFormat_success() throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"30/11/2017\").build();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void sinceDate_withExtraDate_success() throws Exception {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"\\\"01/07/2017 01/07/2018\\\"\").build();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void untilDate_withExtraTime_success() throws Exception {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"\\\"30/11/2017 10:10:10\\\"\").build();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void formats_inAlphanumeric_success() throws Exception {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\"java js css 7z\").build();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"java\", \"js\", \"css\", \"7z\"));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_validGitRepoLocations_repoConfigurationListCorrectSize() throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, repoConfigs.size());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_repoLocationsAndView_returnsLocationCliArguments() throws Exception {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView()"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_repoLocationsOnly_success() throws Exception {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_repoLocationsAndViewWithArgs_returnsLocationsCliArguments() throws Exception {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_viewWithArgCwd_returnsViewCliArguments() throws Exception {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addView(new File(\".\").toPath()).build();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void parse_configOrLocationsSimilar_success() throws Exception {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments configCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(configCliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualRepoConfigs \u003d"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                RepoSense.getRepoConfigurations((ConfigCliArguments) configCliArguments);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d new InputBuilder().addRepos(TEST_REPO_BETA, TEST_REPO_CHARLIE, TEST_REPO_DELTA).build();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments locationCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(locationCliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e expectedRepoConfigs \u003d"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "                RepoSense.getRepoConfigurations((LocationsCliArguments) locationCliArguments);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(actualRepoConfigs, expectedRepoConfigs);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void emptyArgs_defaultConfigFolderPath() throws Exception {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(new String[]{});"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertEquals(CONFIG_DIRECTORY.toString(), ("
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_repoAliases_sameResult() throws Exception {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(TEST_REPO_BETA).build();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments repoAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d new InputBuilder().add(String.format(\"--repos %s\", TEST_REPO_BETA)).build();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments reposAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(repoAliasCliArguments, reposAliasCliArguments);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_invalidRepoLocation_emptyRepoConfigurationList() throws Exception {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addRepos(\"https://githubaaaa.com/asdasdasdasd/RepoSense\").build();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(repoConfigs.isEmpty());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void absoluteConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        Path absDirectory \u003d PROJECT_DIRECTORY.getParent().toAbsolutePath();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(absDirectory).build();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void relativeConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        Path relDirectory \u003d PROJECT_DIRECTORY.getParent();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(relDirectory).build();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_notExistsConfigFolder_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        Path absConfigFolder \u003d PROJECT_DIRECTORY.resolve(\"non_existing_random_folder\");"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(absConfigFolder).build();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_configCsvFileAsConfigFolder_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(REPO_CONFIG_CSV_FILE).build();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_missingConfigValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(new File(\"\").toPath()).build();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void outputPath_nonExistentDirectory_success() throws Exception {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        Path nonExistentDirectory \u003d PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        Path expectedRelativeOutputDirectoryPath \u003d nonExistentDirectory.resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addOutput(nonExistentDirectory).build();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void sinceDate_unsupportedFormats_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01 July 17\").build();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void untilDate_unsupportedFormats_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"11/31/2017\").build();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void sinceDate_laterThanUntilDate_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01/12/2017\")"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "                .addUntilDate(\"30/11/2017\")"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void formats_notInAlphanumeric_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\".java\").build();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_mutuallyExclusiveArgumentsConfigAndReposTogether_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "                .addRepos(TEST_REPO_REPOSENSE)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_extraArgumentForIgnore_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addIgnoreStandaloneConfig().add(\"true\").build();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_withTimezone_success() throws Exception {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        String zoneId \u003d \"UTC+11\";"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        zoneId \u003d \"UTC-1030\";"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"UTC+00\").build();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(ZoneId.of(\"UTC\"), cliArguments.getZoneId());"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_incorrectTimezone_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"UTC+\").build();"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void parse_timezoneWithoutArgument_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"\").build();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that {@code actualSinceDate} is exactly one month before {@code untilDate}."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if {@code actualSinceDate} is not one month before {@code untilDate}."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertDateDiffOneMonth(Date actualSinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.setTime(untilDate);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        assert actualSinceDate.equals(cal.getTime());"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that {@code actualUntilDate} falls on the date of report generation with time at 23:59:59."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if {@code actualUntilDate} does not fall on the date of report generation"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "     * with time at 23:59:59."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertDateDiffEndOfDay(Date actualUntilDate) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        assert actualUntilDate.equals(cal.getTime());"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 40,
      "anubh-v": 1,
      "Tejas2805": 4,
      "-": 574
    }
  },
  {
    "path": "src/test/java/reposense/parser/AuthorConfigParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.AuthorConfiguration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AuthorConfigParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_EMPTY_LOCATION_FILE \u003d new File(AuthorConfigParserTest.class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"AuthorConfigParserTest/authorconfig_emptyLocation_test.csv\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_EMPTY_CONFIG_FILE \u003d new File(AuthorConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"AuthorConfigParserTest/require_trailing_whitespaces/authorconfig_emptyConfig_test.csv\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d new File(AuthorConfigParserTest.class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"AuthorConfigParserTest/authorconfig_noSpecialCharacter_test.csv\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE \u003d new File(AuthorConfigParserTest.class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"AuthorConfigParserTest/authorconfig_specialCharacter_test.csv\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE \u003d new File(AuthorConfigParserTest.class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"AuthorConfigParserTest/authorconfig_commasAndDoubleQuotes_test.csv\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE \u003d new File(AuthorConfigParserTest.class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"AuthorConfigParserTest/authorconfig_multipleEmails_test.csv\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_INVALID_LOCATION \u003d new File(AuthorConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"AuthorConfigParserTest/authorconfig_invalidLocation_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_INVALID_HEADER_SIZE \u003d new File(AuthorConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"AuthorConfigParserTest/authorconfig_invalidHeaderSize_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(FIRST_AUTHOR, SECOND_AUTHOR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"ProcessedCooked\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"codeeong\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"jordancjq\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"Tay Fan Gao, Douya\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"\\\"\\\"Tora, S/O,\\\" Doyua, T.\\\"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"jordancjq\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(\"Tay Fan Gao, Douya \\\"SOC, Y2S1\\\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"Borex T\\\"ony Tong\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Map\u003cAuthor, List\u003cString\u003e\u003e AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Stream.of(new Object[][]{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    {FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR, FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    {SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR, SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS},"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    {THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }).collect(Collectors.toMap(data -\u003e (Author) data[0], data -\u003e (List\u003cString\u003e) data[1]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Map\u003cAuthor, String\u003e AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Stream.of(new Object[][]{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    {FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR, FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    {SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR, SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    {THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }).collect(Collectors.toMap(data -\u003e (Author) data[0], data -\u003e (String) data[1]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_EMAIL_LIST \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"nbr@example.com\", \"nbriannl@test.net\", \"nbriannl@users.noreply.github.com\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_noSpecialCharacter_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_emptyLocation_success() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration expectedConfig \u003d new AuthorConfiguration(new RepoLocation(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_LOCATION_FILE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration authorConfig \u003d authorConfigs.get(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, authorConfigs.size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getLocation(), authorConfig.getLocation());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getBranch(), authorConfig.getBranch());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test (expected \u003d InvalidCsvException.class)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_emptyConfig_throwsInvalidCsvException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_CONFIG_FILE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_specialCharacter_success() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_multipleEmails_success() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Author actualAuthor \u003d config.getAuthorList().get(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(FIRST_AUTHOR_EMAIL_LIST.size(), actualAuthor.getEmails().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(actualAuthor.getEmails().containsAll(FIRST_AUTHOR_EMAIL_LIST));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_invalidLocation_success() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_INVALID_LOCATION);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(3, config.getAuthorList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test (expected \u003d InvalidCsvException.class)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void authorConfig_invalidHeaderSize_throwsInvalidCsvException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_INVALID_HEADER_SIZE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void parse_multipleColumnsWithCommasAndDoubleQuotes_success() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP, config.getAuthorDisplayNameMap());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.size(), config.getAuthorList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorList().forEach(author -\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.get(author), author.getAuthorAliases());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 10,
      "-": 176
    }
  },
  {
    "path": "src/test/java/reposense/parser/GroupConfigParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.GroupConfiguration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GroupConfigParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path GROUP_CONFIG_MULTI_LOCATION_FILE \u003d new File(GroupConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"GroupConfigParserTest/groupconfig_multipleLocation_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path GROUP_CONFIG_EMPTY_LOCATION_FILE \u003d new File(GroupConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"GroupConfigParserTest/groupconfig_emptyLocation_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path GROUP_CONFIG_INVALID_LOCATION_FILE \u003d new File(GroupConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"GroupConfigParserTest/groupconfig_invalidLocation_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path GROUP_CONFIG_INVALID_HEADER_SIZE_FILE \u003d new File(GroupConfigParserTest.class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"GroupConfigParserTest/groupconfig_invalidHeaderSize_test.csv\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFileType\u003e TEST_REPO_BETA_GROUPS \u003d Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"Code\", Arrays.asList(\"**/*.java\", \"**/*.py\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"Docs\", Collections.singletonList(\"docs/**\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFileType\u003e TEST_REPO_DELTA_GROUPS \u003d Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"Main\", Collections.singletonList(\"src/main/**\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new FileType(\"Test\", Arrays.asList(\"src/test/**\", \"src/systest/**\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void groupConfig_invalidLocation_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_INVALID_LOCATION_FILE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, groupConfigs.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration actualConfig \u003d groupConfigs.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, actualConfig.getGroupsList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void groupConfig_emptyLocation_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_EMPTY_LOCATION_FILE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, groupConfigs.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration actualReposenseConfig \u003d groupConfigs.get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, actualReposenseConfig.getGroupsList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration actualEmptyLocationConfig \u003d groupConfigs.get(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualEmptyLocationConfig.getGroupsList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void groupConfig_multipleLocations_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MULTI_LOCATION_FILE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, groupConfigs.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test (expected \u003d InvalidCsvException.class)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void groupConfig_invalidHeaderSize_throwsInvalidCsvException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_INVALID_HEADER_SIZE_FILE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        groupConfigCsvParser.parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 5,
      "-": 77
    }
  },
  {
    "path": "src/test/java/reposense/parser/RepoConfigParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.AuthorConfiguration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.InputBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfigParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_CONFIG_FOLDER \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"repoconfig_merge_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_EMPTY_BRANCH_CONFIG_FOLDER \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"repoconfig_empty_branch_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d new File(RepoConfigParserTest.class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"RepoConfigParserTest/repoconfig_noSpecialCharacter_test.csv\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_CONFIG_OVERRIDE_KEYWORD_FILE \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigParserTest/repoconfig_overrideKeyword_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_CONFIG_REDUNDANT_LINES_FILE \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigParserTest/require_trailing_whitespaces/repoconfig_redundantLines_test.csv\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_CONFIG_INVALID_HEADER_SIZE_FILE \u003d new File(RepoConfigParserTest.class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .getClassLoader().getResource(\"RepoConfigParserTest/repoconfig_invalidHeaderSize_test.csv\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .getFile()).toPath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MERGE_EMPTY_LOCATION_FOLDER \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"RepoConfigParserTest/repoconfig_merge_empty_location_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    private static final Path REPO_CONFIG_ZERO_VALID_RECORDS \u003d new File(RepoConfigParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "            .getResource(\"CsvParserTest/repoconfig_zeroValidRecords_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH \u003d \"add-config-json\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFileType\u003e TEST_REPO_DELTA_FORMATS \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"fxml\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFileType\u003e TEST_REPO_BETA_CONFIG_FORMATS \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"adoc\", \"md\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_IGNORED_COMMITS \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"abcde12345\", \"67890fdecba\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_CHARLIE_LOCATION \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_CHARLIE_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Arrays.asList(\"Zachary Tang\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Arrays.asList(\"collated**\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.java\", \"collated**\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.doc\", \"collated**\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_noSpecialCharacter_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(config.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(config.getIgnoreCommitList(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(config.isFormatsOverriding());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(config.isIgnoreGlobListOverriding());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(config.isIgnoreCommitListOverriding());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void merge_twoRepoConfigs_success() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration firstRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                TEST_REPO_BETA_MASTER_BRANCH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        firstRepo.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        firstRepo.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        firstRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        firstRepo.addAuthorEmailsAndAliasesMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        firstRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration secondRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        secondRepo.setAuthorList(Arrays.asList(SECOND_AUTHOR));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        secondRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        secondRepo.addAuthorEmailsAndAliasesMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        secondRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(TEST_CONFIG_FOLDER).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, actualConfigs.size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(firstRepo, actualConfigs.get(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(secondRepo, actualConfigs.get(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void merge_emptyLocation_success() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedBetaAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedDeltaAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedBetaConfig \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION), TEST_REPO_BETA_MASTER_BRANCH);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorList(expectedBetaAuthors);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.addAuthorEmailsAndAliasesMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedDeltaConfig \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA_LOCATION), TEST_REPO_DELTA_BRANCH);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setAuthorList(expectedDeltaAuthors);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setFormats(TEST_REPO_DELTA_FORMATS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e expectedConfigs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfigs.add(expectedBetaConfig);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfigs.add(expectedDeltaConfig);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(MERGE_EMPTY_LOCATION_FOLDER).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, actualConfigs.size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfigs, actualConfigs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfigs.get(0), actualConfigs.get(0));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfigs.get(1), actualConfigs.get(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_defaultBranch_success() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d new InputBuilder().addConfig(TEST_EMPTY_BRANCH_CONFIG_FOLDER).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getBranch(), actualConfigs.get(0).getBranch());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getBranch(), authorConfigs.get(0).getBranch());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_overrideKeyword_success() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OVERRIDE_KEYWORD_FILE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(config.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                config.getIgnoreCommitList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(config.isFormatsOverriding());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(config.isIgnoreGlobListOverriding());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(config.isIgnoreCommitListOverriding());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_redundantLines_success() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_REDUNDANT_LINES_FILE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(3, configs.size());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration betaConfig \u003d configs.get(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration charlieConfig \u003d configs.get(1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration deltaConfig \u003d configs.get(2);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), betaConfig.getLocation());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, betaConfig.getBranch());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_CHARLIE_LOCATION), charlieConfig.getLocation());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_CHARLIE_BRANCH, charlieConfig.getBranch());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_DELTA_LOCATION), deltaConfig.getLocation());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(TEST_REPO_DELTA_BRANCH, deltaConfig.getBranch());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(deltaConfig.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test (expected \u003d InvalidCsvException.class)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_invalidHeaderSize_throwsInvalidCsvException() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_INVALID_HEADER_SIZE_FILE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anubh-v"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    @Test (expected \u003d InvalidCsvException.class)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    public void repoConfig_zeroValidRecords_throwsInvalidCsvException() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_ZERO_VALID_RECORDS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "        repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anubh-v"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anubh-v": 16,
      "-": 234
    }
  },
  {
    "path": "src/test/java/reposense/parser/StandaloneConfigJsonParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileTypeTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.StandaloneConfig;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StandaloneConfigJsonParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_MALFORMED_CONFIG \u003d new File("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StandaloneConfigJsonParserTest/standaloneConfig_malformedJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_UNKNOWN_PROPERTY_CONFIG \u003d new File("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_unknownPropertyInJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_CONFIG_FULL \u003d new File("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_full.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_CONFIG_EMPTY_TEXT_FILE \u003d new File("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_emptyText.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_CONFIG_EMPTY_JSON_FILE \u003d new File("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_emptyJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STANDALONE_CONFIG_GITHUBID_ONLY \u003d new File("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_githubId_only.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DUMMY_LOCATION \u003d \"https://github.com/reposense/RepoSense.git\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static RepoConfiguration expectedGithubIdOnlyRepoconfig;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static RepoConfiguration expectedFullRepoConfig;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public static void setUp() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(\"yong24s\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setAuthorAliases(Arrays.asList(\"Yong Hao TENG\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(\"**.css\", \"**.html\", \"**.jade\", \"**.js\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedGithubIdOnlyRepoconfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedGithubIdOnlyRepoconfig.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedGithubIdOnlyRepoconfig.setAuthorList(Arrays.asList(new Author(\"yong24s\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedGithubIdOnlyRepoconfig.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setFormats(FileType.convertFormatStringsToFileTypes("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"gradle\", \"jade\", \"java\", \"js\", \"md\", \"scss\", \"yml\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setIgnoreCommitList(Arrays.asList(new CommitHash("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \"7b96c563eb2d3612aa5275364333664a18f01491\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setIgnoreGlobList(Arrays.asList(\"**.adoc\", \"collate**\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setIgnoredAuthorsList(Arrays.asList(\"yong24s\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setAuthorList(Arrays.asList(author));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.setAuthorDisplayName(author, \"Yong Hao\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(author.getGitId()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.addAuthorEmailsAndAliasesMapEntry(author, author.getAuthorAliases());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedFullRepoConfig.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_parseEmptyTextFile_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_TEXT_FILE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_parseEmptyJsonFile_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_JSON_FILE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_ignoresUnknownProperty_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_UNKNOWN_PROPERTY_CONFIG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_correctConfig_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_FULL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSameConfig(expectedFullRepoConfig, config);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_githubIdOnlyConfig_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_GITHUBID_ONLY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSameConfig(expectedGithubIdOnlyRepoconfig, config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d JsonSyntaxException.class)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void standaloneConfig_malformedJsonFile_throwsJsonSyntaxException() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_MALFORMED_CONFIG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertSameConfig(RepoConfiguration expectedRepoConfig, StandaloneConfig actualStandaloneConfig)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualRepoConfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        actualRepoConfig.update(actualStandaloneConfig);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedRepoConfig, actualRepoConfig);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 8,
      "-": 107
    }
  },
  {
    "path": "src/test/java/reposense/report/RepoClonerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoClonerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_EMPTY_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Empty.git\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String OUTPUT_PATH \u003d \"repocloner_test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void after() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.deleteDirectory(OUTPUT_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void repoCloner_emptyRepo_failsGracefully() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyRepositoryRepoConfig \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_EMPTY_GIT_LOCATION));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoCloner repoCloner \u003d new RepoCloner();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        repoCloner.cloneBare(emptyRepositoryRepoConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertNull(clonedRepoLocation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/reposense/template/GitTestTemplate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.FileInfoAnalyzer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.FileInfoExtractor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.FileTypeTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains templates for git testing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitTestTemplate {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String DISK_REPO_DISPLAY_NAME \u003d \"testrepo-Alpha_master\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String MINGYI_AUTHOR_NAME \u003d \"myteo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    protected static final String JAMES_AUTHOR_NAME \u003d \"jamessspanggg\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    protected static final String JAMES_ALTERNATIVE_AUTHOR_NAME \u003d \"James Pang\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String JINYAO_AUTHOR_NAME \u003d \"jylee-git\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String LATEST_COMMIT_HASH \u003d \"136c6713fc00cfe79a1598e8ce83c6ef3b878660\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    protected static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static RepoConfiguration config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void before() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void beforeClass() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteRepos();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void afterClass() throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteRepos();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void after() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), \"master\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void deleteRepos() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates the information for test file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileInfo generateTestFileInfo(String relativePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), relativePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileInfo;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileResult getFileResult(String relativePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInfo fileinfo \u003d generateTestFileInfo(relativePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return FileInfoAnalyzer.analyzeFile(config, fileinfo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the correctness of file analysis with regards to the contribution"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * made by author named in {@code FAKE_AUTHOR_NAME}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void assertFileAnalysisCorrectness(FileResult fileResult) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (LineInfo line : fileResult.getLines()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (line.getContent().startsWith(\"fake\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.assertEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.assertNotEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be filtered out in the `git log` command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Author getAlphaAllAliasAuthor() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Author author \u003d new Author(MAIN_AUTHOR_NAME);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "yash-chowdhary": 1,
      "jamessspanggg": 2,
      "-": 127
    }
  },
  {
    "path": "src/test/java/reposense/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.SummaryJson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path FILE_UTIL_TEST_DIRECTORY \u003d new File(FileUtilTest.class.getClassLoader()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"FileUtilTest\").getFile()).toPath().toAbsolutePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path REPO_REPORT_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \"reposense-report-test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path ARCHIVE_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), FileUtil.ZIP_FILE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EXPECTED_UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expectedUnzip\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"testZip.zip\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \"UnzippedFolder\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cPath\u003e REPORT_FOLDER_FILE_PATHS \u003d Arrays.asList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(), \"reposense_testrepo-Beta\").toAbsolutePath(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(), \"reposense_testrepo-Charlie\").toAbsolutePath(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            SummaryJson.SUMMARY_JSON_FILE_NAME).toAbsolutePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EXPECTED_RELEVANT_FOLDER_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \"expectedRelevantUnzippedFiles\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that only the specified files and folders with the corresponding file types get zipped."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void zipFoldersAndFiles_onlyRelevantFiles_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.zipFoldersAndFiles(REPORT_FOLDER_FILE_PATHS, REPO_REPORT_DIRECTORY_PATH, FILE_UTIL_TEST_DIRECTORY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \".json\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.unzip(ARCHIVE_ZIP_PATH, UNZIPPED_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(TestUtil.compareDirectories(EXPECTED_RELEVANT_FOLDER_PATH, UNZIPPED_DIRECTORY_PATH));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void zipFoldersAndFiles_validLocation_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.zipFoldersAndFiles(REPORT_FOLDER_FILE_PATHS, REPO_REPORT_DIRECTORY_PATH, FILE_UTIL_TEST_DIRECTORY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \".json\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void zipFoldersAndFiles_validFileType_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPath\u003e paths \u003d Collections.singletonList(Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test.csv\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.zipFoldersAndFiles(paths, FILE_UTIL_TEST_DIRECTORY, \".csv\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void unzip_validZipFile_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.unzip(TEST_ZIP_PATH, UNZIPPED_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(UNZIPPED_DIRECTORY_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(TestUtil.compareDirectories(EXPECTED_UNZIPPED_DIRECTORY_PATH, UNZIPPED_DIRECTORY_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void unzip_invalidZipFile_fail() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path invalidZipFile \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test.csv\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.unzip(invalidZipFile, FILE_UTIL_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void after() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.deleteIfExists(ARCHIVE_ZIP_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(UNZIPPED_DIRECTORY_PATH)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.deleteDirectory(UNZIPPED_DIRECTORY_PATH.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 6,
      "-": 80
    }
  },
  {
    "path": "src/test/java/reposense/util/StringsUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringsUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STRINGS_UTIL_TEST_DIRECTORY \u003d new File(FileUtilTest.class.getClassLoader()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"StringsUtilTest\").getFile()).toPath().toAbsolutePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yash-chowdhary"
        },
        "content": "    public void filterText_standardInput_success() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Path gitBlameStandardOutputFile \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Paths.get(STRINGS_UTIL_TEST_DIRECTORY.toString(), \"standardBlameOutput.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e lines \u003d Files.readAllLines(gitBlameStandardOutputFile);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String text \u003d String.join(\"\\n\", lines);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d \"a79711ed676fd3a27af2f466be6d5b48177580e0 4 4\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"author example\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String filteredText \u003d StringsUtil.filterText(text, \"(^author .*)|(^[0-9a-f]{40} .*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expected, filteredText);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void replaceSpecialSymbols_noSpecialSymbols_noChange() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String noSpecialSymbolString \u003d \"Just A Normal String\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(noSpecialSymbolString, convertedString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void replaceSpecialSymbols_stringWithSpecialSymbolsToPeriod_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String noSpecialSymbolString \u003d \"($t^!ng W!th $pec!@l Symbols)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedConvertedString \u003d \"..t..ng W.th .pec..l Symbols.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConvertedString, convertedString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yash-chowdhary": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/reposense/util/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.git.GitLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains testing related functionalities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int[] END_OF_DAY_TIME \u003d {23, 59, 59};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int[] START_OF_DAY_TIME \u003d {0, 0, 0};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_COMPARING_FILES \u003d \"Comparing files %s \u0026 %s\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_LINE_CONTENT_DIFFERENT \u003d \"Content different at line number %d:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\u003c\u003c %s\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\u003e\u003e %s\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_LINES_LENGTH_DIFFERENT \u003d \"The files\u0027 lines count do not match.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String TAB_SPLITTER \u003d \"\\t\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final int STAT_FILE_PATH_INDEX \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the files\u0027 contents are the same."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also prints out error message if the lines count are different,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * else prints out the first line of content difference (if any)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean compareFileContents(Path expected, Path actual) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareFileContents(expected, actual, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the files\u0027 contents are the same."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also prints out error message if the lines count are different,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * else prints out maximum {@code maxTraceCounts} lines of content difference (if any)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean compareFileContents(Path expected, Path actual, int maxTraceCounts) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        int traceCounts \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(String.format(MESSAGE_COMPARING_FILES, expected, actual));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] expectedContent \u003d new String(Files.readAllBytes(expected))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .replace(\"\\r\", \"\").split(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] actualContent \u003d new String(Files.readAllBytes(actual))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .replace(\"\\r\", \"\").split(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(expectedContent.length, actualContent.length); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!expectedContent[i].equals(actualContent[i])) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_LINE_CONTENT_DIFFERENT, i + 1, expectedContent[i], actualContent[i]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                if (++traceCounts \u003e\u003d maxTraceCounts) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedContent.length !\u003d actualContent.length) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(MESSAGE_LINES_LENGTH_DIFFERENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (traceCounts \u003e\u003d maxTraceCounts) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code expected} directory has all files with same content as {@code actual} directory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean compareDirectories(Path expected, Path actual) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPath\u003e expectedPaths \u003d Files.walk(expected)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPath\u003e actualPaths \u003d Files.walk(actual)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedPaths.size() !\u003d actualPaths.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedPaths.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(Files.isDirectory(expectedPaths.get(i)) || Files.isDirectory(actualPaths.get(i)))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 !TestUtil.compareFileContents(expectedPaths.get(i), actualPaths.get(i))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Date} object with the specified {@code year}, {@code month}, {@code day}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date getDate(int year, int month, int date, int[] time) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Calendar"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .Builder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDate(year, month, date)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .setTimeOfDay(time[0], time[1], time[2])"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .getTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Wrapper for {@code getDate} method to get since date with time 00:00:00"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Date getSinceDate(int year, int month, int date) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return getDate(year, month, date, START_OF_DAY_TIME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Wrapper for {@code getDate} method to get until date with time 23:59:59"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Date getUntilDate(int year, int month, int date) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return getDate(year, month, date, END_OF_DAY_TIME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares attributes of {@code expectedRepoConfig} and {@code actualRepoConfig}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if any attributes fail equality check."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void compareRepoConfig(RepoConfiguration expectedRepoConfig, RepoConfiguration actualRepoConfig) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig, actualRepoConfig);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedRepoConfig.getAuthorList().size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            compareAuthor(expectedRepoConfig.getAuthorList().get(i), actualRepoConfig.getAuthorList().get(i));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares attributes of {@code expectedAuthor} and {@code actualAuthor}, with exception of it\u0027s display name."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * The display name is not compared as it varies with object construction."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * It is a transient value and it is not needed for object matching."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if any attributes fail equality check."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void compareAuthor(Author expectedAuthor, Author actualAuthor) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getGitId(), actualAuthor.getGitId());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getIgnoreGlobList(), actualAuthor.getIgnoreGlobList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getAuthorAliases(), actualAuthor.getAuthorAliases());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code expectedNumberCommits} is equal to the expected number of commits captured in"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code gitLogResult}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean compareNumberExpectedCommitsToGitLogLines(int expectedNumberCommits, String gitLogResult) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // if git log result is empty, then there are no commits"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (gitLogResult.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return expectedNumberCommits \u003d\u003d 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // (actualSplitGitLogResilt - 1) as the 1st token is always empty."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return expectedNumberCommits \u003d\u003d (gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER).length - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code expectedNumberFilesChanged} is equal to the actual number of files changed in"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code gitLogResult}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean compareNumberFilesChanged(int expectedNumberFilesChanged, String gitLogResult) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // if git log result is empty, then there are no files changed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (gitLogResult.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return expectedNumberFilesChanged \u003d\u003d 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] changesLogged \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // start from index 1 as index 0 is always empty."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c changesLogged.length; i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            filesChanged.addAll(getFilesChangedInCommit(changesLogged[i]));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return filesChanged.size() \u003d\u003d expectedNumberFilesChanged;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code set} of files changed in the commit {@code rawCommitInfo}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getFilesChangedInCommit(String rawCommitInfo) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] commitInfo \u003d rawCommitInfo.replaceAll(\"\\n+$\", \"\").split(\"\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        int fileChangedNum \u003d Integer.parseInt(commitInfo[commitInfo.length - 1].trim().split(\" \")[0]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int fileNum \u003d 0; fileNum \u003c fileChangedNum; fileNum++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            filesChanged.add(getFileChanged(commitInfo[commitInfo.length - 2 - fileNum]));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return filesChanged;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file changed given a {@code rawFileChangedString}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getFileChanged(String rawFileChangedString) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String fileChanged \u003d rawFileChangedString.split(TAB_SPLITTER)[STAT_FILE_PATH_INDEX].trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (fileChanged.contains(MOVED_FILE_INDICATION)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            fileChanged \u003d fileChanged.substring(fileChanged.indexOf(MOVED_FILE_INDICATION)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    + MOVED_FILE_INDICATION.length());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileChanged;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the test environment is on Windows OS."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isWindows() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 7,
      "-": 213
    }
  }
]
