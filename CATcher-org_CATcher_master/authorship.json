[{"path":"main.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { app, BrowserWindow, screen, Menu, nativeTheme, MenuItemConstructorOptions, ipcMain } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import * as path from \u0027path\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import * as url from \u0027url\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { createMenuOptions } from \u0027./electron-utils/menu-bar\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { isDeveloperMode, isLinuxOs, isMacOs, isWindowsOs, getCurrentDirectory, appTitle } from \u0027./electron-utils/supporting-logic\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { getAccessToken } from \u0027./oauth\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const Logger \u003d require(\u0027electron-log\u0027);"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"const ICON_PATH \u003d path.join(__dirname, \u0027dist/favicon.512x512.png\u0027);"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"let win: BrowserWindow \u003d null;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"const isDevMode \u003d isDeveloperMode();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"ipcMain.on(\u0027synchronous-message\u0027, (event) \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  event.returnValue \u003d getCurrentDirectory(isWindowsOs(), isDevMode);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"});"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Will start the OAuth Web Flow and obtain the access token from Github."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"ipcMain.on(\u0027github-oauth\u0027, (event, repoPermissionLevel) \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  getAccessToken(win, repoPermissionLevel).then((data) \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    event.sender.send(\u0027github-oauth-reply\u0027, {token: data.token});"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }).catch(error \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    event.sender.send(\u0027github-oauth-reply\u0027, {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      error: error.message,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      isWindowClosed: error.message \u003d\u003d\u003d \u0027WINDOW_CLOSED\u0027});"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":29,"author":{"gitId":"-"},"content":"});"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"function createWindow() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  Logger.info(\u0027Creating primary window.\u0027);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  const size \u003d screen.getPrimaryDisplay().workAreaSize;"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"  const windowOptions \u003d {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    x: 0,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    y: 0,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    width: size.width,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    height: size.height,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    webPreferences: {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      nodeIntegration: true,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      allowRunningInsecureContent: !isDevMode,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"  };"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  if (isLinuxOs()) {"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"    // app icon needs to be set manually on Linux platforms"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"    windowOptions[\u0027icon\u0027] \u003d ICON_PATH;"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"  // Create the browser window."},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"  win \u003d new BrowserWindow(windowOptions);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  win.setTitle(appTitle);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  nativeTheme.themeSource \u003d \u0027light\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  if (isDevMode) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    require(\u0027electron-reload\u0027)(__dirname, {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      electron: require(`${__dirname}/node_modules/electron`)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    win.loadURL(\u0027http://localhost:4200\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    win.webContents.openDevTools();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    win.loadURL(url.format({"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      pathname: path.join(__dirname, \u0027dist/index.html\u0027),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      protocol: \u0027file:\u0027,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      slashes: true"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  // Emitted when the window is closed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"  win.on(\u0027closed\u0027, () \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    // Dereference the window object, usually you would store window"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    // in an array if your app supports multi windows, this is the time"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    // when you should delete the corresponding element."},{"lineNumber":76,"author":{"gitId":"-"},"content":"    win \u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"try {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  Logger.info(\u0027Initializing Electron app.\u0027);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  // This method will be called when Electron has finished"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  // initialization and is ready to create browser windows."},{"lineNumber":85,"author":{"gitId":"-"},"content":"  // Some APIs can only be used after this event occurs."},{"lineNumber":86,"author":{"gitId":"-"},"content":"  app.on(\u0027ready\u0027, () \u003d\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Electron app in ready state.\u0027);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // Build and Attach Menu-bar template to application."},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const mainMenuTemplate: MenuItemConstructorOptions[] \u003d createMenuOptions(isDevMode);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const mainMenu \u003d Menu.buildFromTemplate(mainMenuTemplate);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    Menu.setApplicationMenu(mainMenu);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    createWindow();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  // Quit when all windows are closed."},{"lineNumber":97,"author":{"gitId":"-"},"content":"  app.on(\u0027window-all-closed\u0027, () \u003d\u003e {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Closing all windows in Electron.\u0027);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    // On OS X it is common for applications and their menu bar"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    // to stay active until the user quits explicitly with Cmd + Q"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    if (!isMacOs()) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      app.quit();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  app.on(\u0027activate\u0027, () \u003d\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Electron app is activated.\u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    // On OS X it\u0027s common to re-create a window in the app when the"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    // dock icon is clicked and there are no other windows open."},{"lineNumber":110,"author":{"gitId":"-"},"content":"    if (win \u003d\u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      createWindow();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"} catch (e) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  Logger.error(\u0027Something went wrong in Electron.\u0027, e);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":11,"-":106}},{"path":"oauth.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"le0tan"},"content":"import { BrowserWindow, shell } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"const nodeUrl \u003d require(\u0027url\u0027);"},{"lineNumber":4,"author":{"gitId":"-"},"content":"const fetch \u003d require(\u0027node-fetch\u0027);"},{"lineNumber":5,"author":{"gitId":"-"},"content":"const Logger \u003d require(\u0027electron-log\u0027);"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const CLIENT_ID \u003d \u00276750652c0c9001314434\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"const BASE_URL \u003d \u0027https://github.com\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const ACCESS_TOKEN_URL \u003d \u0027https://catcher-proxy.herokuapp.com/authenticate\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"const CALLBACK_URL \u003d \u0027http://localhost:4200\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"let authWindow;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Will retrieve the access token from a proxy server which acts as a intermediary to retrieve the tokens from Github."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * @param window - The main window of CATcher."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"export function getAccessToken(window: BrowserWindow, repoPermissionLevel: string): Promise\u003cany\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  return getAuthorizationCode(window, repoPermissionLevel).then((code) \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    const accessTokenUrl \u003d `${ACCESS_TOKEN_URL}/${code}`;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    return fetch(accessTokenUrl).then(res \u003d\u003e res.json()).then(data \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      if (data.error) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        throw(new Error(data.error));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      return data;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }).catch(error \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    throw(error);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Get the authorization code from Github after success login."},{"lineNumber":35,"author":{"gitId":"-"},"content":" * @param parentWindow - The main window of CATcher"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"function getAuthorizationCode(parentWindow: BrowserWindow, repoPermissionLevel: string) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  const oauthUrl \u003d encodeURI(`${BASE_URL}/login/oauth/authorize?client_id\u003d${CLIENT_ID}\u0026scope\u003d${repoPermissionLevel},read:user`);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  return new Promise(function (resolve, reject) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    const windowParams \u003d {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      autoHideMenuBar: true,"},{"lineNumber":44,"author":{"gitId":"le0tan"},"content":"      alwaysOnTop: false,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      fullscreenable: false,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      parent: parentWindow,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      webPreferences: {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        nodeIntegration: true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    authWindow \u003d new BrowserWindow(windowParams);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    authWindow.loadURL(oauthUrl);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    authWindow.show();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    authWindow.on(\u0027closed\u0027, (event) \u003d\u003e {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      reject(new Error(\u0027WINDOW_CLOSED\u0027));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-navigate\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":62,"author":{"gitId":"le0tan"},"content":"      } else {"},{"lineNumber":63,"author":{"gitId":"le0tan"},"content":"        event.preventDefault();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        shell.openExternal(newUrl).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"le0tan"},"content":"    authWindow.webContents.on(\u0027new-window\u0027, (event, url, frameName, disposition, options) \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"le0tan"},"content":"      event.preventDefault();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      shell.openExternal(url).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":71,"author":{"gitId":"le0tan"},"content":"    });"},{"lineNumber":72,"author":{"gitId":"le0tan"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-redirect\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    function onCallback(callbackUrl: string) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      const url_parts \u003d nodeUrl.parse(callbackUrl, true);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      const query \u003d url_parts.query;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      const code \u003d query.code;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      const error \u003d query.error;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      const state \u003d query.state;"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"      if (error !\u003d\u003d undefined \u0026\u0026 state !\u003d\u003d undefined) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        reject(error);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      } else if (code) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        resolve(code);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      setImmediate(function () {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        authWindow.close();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        authWindow.on(\u0027closed\u0027, () \u003d\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          authWindow \u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"le0tan":9,"-":90}},{"path":"src/app/auth/auth.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, HostListener, NgZone, OnDestroy, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../core/services/auth.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Subscription } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ActivatedRoute, Router } from \u0027@angular/router\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../core/services/github.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../core/services/phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { Profile } from \u0027./profiles/profiles.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { filter, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../core/services/githubevent.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../core/services/electron.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { ApplicationService } from \u0027../core/services/application.service\u0027;"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"import { throwIfFalse } from \u0027../shared/lib/custom-ops\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../environments/environment\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../core/models/github-user.model\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"const appSetting \u003d require(\u0027../../../package.json\u0027);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  selector: \u0027app-auth\u0027,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./auth.component.html\u0027,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./auth.component.css\u0027]"},{"lineNumber":26,"author":{"gitId":"-"},"content":"})"},{"lineNumber":27,"author":{"gitId":"-"},"content":"export class AuthComponent implements OnInit, OnDestroy {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  // isReady is used to indicate whether the pre-processing of application is done."},{"lineNumber":29,"author":{"gitId":"-"},"content":"  isReady: boolean;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  // isSettingUpSession is used to indicate whether CATcher is in the midst of setting up the session."},{"lineNumber":31,"author":{"gitId":"-"},"content":"  isSettingUpSession: boolean;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Errors"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  isAppOutdated: boolean;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  versionCheckingError: boolean;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  authState: AuthState;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  accessTokenSubscription: Subscription;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  authStateSubscription: Subscription;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  profileForm: FormGroup;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  profileLocationPrompt: string;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  currentUserName: string;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  constructor(public appService: ApplicationService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              public electronService: ElectronService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              private authService: AuthService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              private githubEventService: GithubEventService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"              private formBuilder: FormBuilder,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"              private router: Router,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"              private titleService: Title,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"              private ngZone: NgZone,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"              private activatedRoute: ActivatedRoute"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.electronService.registerIpcListener(\u0027github-oauth-reply\u0027,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      (event, {token, error, isWindowClosed}) \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (error) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          if (!isWindowClosed) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            this.errorHandlingService.handleError(error);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          this.goToSessionSelect();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.authService.storeOAuthAccessToken(token);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.isReady \u003d false;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    const oauthCode \u003d this.activatedRoute.snapshot.queryParamMap.get(\u0027code\u0027);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    if (this.authService.isAuthenticated()) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      this.router.navigate([this.phaseService.currentPhase]);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    if (oauthCode) { // In the web\u0027s oauth window"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      window.opener.postMessage({ oauthCode }, AppConfig.origin);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      this.listenForCloseOAuthWindowMessage();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    } else { // In the main app window"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      this.checkAppIsOutdated();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      this.initAccessTokenSubscription();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      this.initAuthStateSubscription();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      this.initProfileForm();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"   * A listener for receiving the oauthCode from the oauth window."},{"lineNumber":95,"author":{"gitId":"-"},"content":"   * With the oauth code, we can retrieve the accessToken from the proxy."},{"lineNumber":96,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  @HostListener(\u0027window:message\u0027, [\u0027$event\u0027])"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  onMessage(event: MessageEvent) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    if (event.origin !\u003d\u003d AppConfig.origin) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    const { oauthCode } \u003d event.data;"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    if (!oauthCode) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    const accessTokenUrl \u003d `${AppConfig.accessTokenUrl}/${oauthCode}/client_id/${AppConfig.clientId}`;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    fetch(accessTokenUrl).then(res \u003d\u003e res.json())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"          if (data.error) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw(new Error(data.error));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          this.authService.storeOAuthAccessToken(data.token);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      .catch(err \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(err);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      .finally(() \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!(event.source instanceof MessagePort) \u0026\u0026 !(event.source instanceof ServiceWorker)) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          event.source.postMessage(\u0027close\u0027, AppConfig.origin);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  ngOnDestroy() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    this.electronService.removeIpcListeners(\u0027github-oauth-reply\u0027);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    if (this.authStateSubscription) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      this.authStateSubscription.unsubscribe();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    if (this.accessTokenSubscription) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      this.accessTokenSubscription.unsubscribe();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"   * Checks whether the current version of CATcher is outdated."},{"lineNumber":139,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  checkAppIsOutdated(): void {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    this.appService.isApplicationOutdated().subscribe((isOutdated: boolean) \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      this.isAppOutdated \u003d isOutdated;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      this.isReady \u003d true;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      this.versionCheckingError \u003d false;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      this.isReady \u003d true;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      this.versionCheckingError \u003d true;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   * Informs user of missing profiles file."},{"lineNumber":154,"author":{"gitId":"-"},"content":"   * @param profilesDetails - profiles file information."},{"lineNumber":155,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  onProfilesMissing(profilesDetails: {isDirectoryMessageVisible: boolean, fileName: string, fileDirectory: string}): void {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    this.profileLocationPrompt \u003d profilesDetails.isDirectoryMessageVisible"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      ? \u0027No custom \u0027"},{"lineNumber":159,"author":{"gitId":"-"},"content":"          .concat(profilesDetails[\u0027fileName\u0027])"},{"lineNumber":160,"author":{"gitId":"-"},"content":"          .concat(\u0027 file found in \u0027)"},{"lineNumber":161,"author":{"gitId":"-"},"content":"          .concat(profilesDetails[\u0027fileDirectory\u0027])"},{"lineNumber":162,"author":{"gitId":"-"},"content":"          .concat(\u0027 .\u0027)"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      : \u0027\u0027;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"   * Fills the login form with data from the given Profile."},{"lineNumber":168,"author":{"gitId":"-"},"content":"   * @param profile - Profile selected by the user."},{"lineNumber":169,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  onProfileSelect(profile: Profile): void {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    this.profileForm.get(\u0027session\u0027).setValue(profile.encodedText);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   * Will complete the process of logging in the given user."},{"lineNumber":176,"author":{"gitId":"-"},"content":"   * @param username - The user to log in."},{"lineNumber":177,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  completeLoginProcess(username: string): void {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    this.phaseService.setPhaseOwners(this.currentSessionOrg, username);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    this.userService.createUserModel(username).pipe("},{"lineNumber":182,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.phaseService.sessionSetup()),"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.githubEventService.setLatestChangeEvent()),"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    ).subscribe(() \u003d\u003e {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      this.handleAuthSuccess();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  setupSession() {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    if (this.profileForm.invalid) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    this.isSettingUpSession \u003d true;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    const sessionInformation: string \u003d this.profileForm.get(\u0027session\u0027).value;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    const org: string \u003d this.getOrgDetails(sessionInformation);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    const dataRepo: string \u003d this.getDataRepoDetails(sessionInformation);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    this.githubService.storeOrganizationDetails(org, dataRepo);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    this.phaseService.storeSessionData().pipe("},{"lineNumber":203,"author":{"gitId":"anubh-v"},"content":"      throwIfFalse(isValidSession \u003d\u003e isValidSession,"},{"lineNumber":204,"author":{"gitId":"anubh-v"},"content":"                   () \u003d\u003e new Error(\u0027Invalid Session\u0027))"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    ).subscribe(() \u003d\u003e {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      this.authService.startOAuthProcess();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      this.isSettingUpSession \u003d false;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }, () \u003d\u003e this.isSettingUpSession \u003d false);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"  logIntoAnotherAccount() {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    this.electronService.clearCookies();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    this.authService.startOAuthProcess();"},{"lineNumber":216,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"  onGithubWebsiteClicked() {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    window.open(\u0027https://github.com/\u0027, \u0027_blank\u0027);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    window.location.reload();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"   * Handles the clean up required after authentication and setting up of user data is completed."},{"lineNumber":225,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  handleAuthSuccess() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(appSetting.name"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      .concat(\u0027 \u0027)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      .concat(appSetting.version)"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      .concat(\u0027 - \u0027)"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      .concat(this.phaseService.getPhaseDetail()));"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.Authenticated);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"  goToSessionSelect() {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  isUserNotAuthenticated(): boolean {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.NotAuthenticated;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"  isUserAuthenticating(): boolean {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.AwaitingAuthentication;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"  isAwaitingOAuthUserConfirm(): boolean {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.ConfirmOAuthUser;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"  get currentSessionOrg(): string {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    const sessionInformation: string \u003d this.profileForm.get(\u0027session\u0027).value;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    return this.getOrgDetails(sessionInformation);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":258,"author":{"gitId":"-"},"content":"   * Will wait for the message from parent window to close the window."},{"lineNumber":259,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  private listenForCloseOAuthWindowMessage() {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    window.addEventListener(\u0027message\u0027, (event) \u003d\u003e {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"      if (event.origin !\u003d\u003d AppConfig.origin) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"      if (event.data \u003d\u003d\u003d \u0027close\u0027) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        window.opener.focus();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        window.close();"},{"lineNumber":268,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"   * Extracts the Organization Details from the input sessionInformation."},{"lineNumber":274,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":275,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  private getOrgDetails(sessionInformation: string) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[0];"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":281,"author":{"gitId":"-"},"content":"   * Extracts the Data Repository Details from the input sessionInformation."},{"lineNumber":282,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":283,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  private getDataRepoDetails(sessionInformation: string) {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[1];"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"  private initProfileForm() {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    this.profileForm \u003d this.formBuilder.group({"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      session: [\u0027\u0027, Validators.required],"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":292,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"  private initAuthStateSubscription() {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    this.authStateSubscription \u003d this.authService.currentAuthState.subscribe((state) \u003d\u003e {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        this.authState \u003d state;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"  private initAccessTokenSubscription() {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    this.accessTokenSubscription \u003d this.authService.accessToken.pipe("},{"lineNumber":304,"author":{"gitId":"-"},"content":"      filter((token: string) \u003d\u003e !!token),"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.userService.getAuthenticatedUser())"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    ).subscribe((user: GithubUser) \u003d\u003e {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        this.currentUserName \u003d user.login;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        this.authService.changeAuthState(AuthState.ConfirmOAuthUser);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":312,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":3,"-":310}},{"path":"src/app/auth/profiles/profiles.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { JsonParseErrorDialogComponent } from \u0027./json-parse-error-dialog/json-parse-error-dialog.component\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  trigger,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  state,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  style,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  animate,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  transition"},{"lineNumber":10,"author":{"gitId":"-"},"content":"} from \u0027@angular/animations\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Indicates all the elements that make up a Profile."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"export interface Profile {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  profileName: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  encodedText: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  selector: \u0027app-profiles\u0027,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./profiles.component.html\u0027,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./profiles.component.css\u0027],"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  animations: ["},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // animation triggers go here"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    trigger(\u0027triggerFileInput\u0027, ["},{"lineNumber":29,"author":{"gitId":"-"},"content":"      state(\u0027normal\u0027, style({})),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      state(\u0027pressed\u0027, style({"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        color: \u0027orange\u0027"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      })),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      transition(\u0027normal \u003d\u003e pressed\u0027, ["},{"lineNumber":34,"author":{"gitId":"-"},"content":"        animate(\u00270.25s ease\u0027)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      ]),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      transition(\u0027pressed \u003d\u003e normal\u0027, ["},{"lineNumber":37,"author":{"gitId":"-"},"content":"        animate(\u00270.25s ease\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      ])"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    ])"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":41,"author":{"gitId":"-"},"content":"})"},{"lineNumber":42,"author":{"gitId":"-"},"content":"export class ProfilesComponent implements OnInit {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  private readonly ANIMATION_DURATION: number \u003d 250;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  profiles: Profile[] \u003d []; // List of profiles taken from profiles.json"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  blankProfile: Profile \u003d {profileName: \u0027\u0027, encodedText: \u0027\u0027}; // A blank profile to reset values"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  animationActivated \u003d false; // Assists color change animations."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  private readonly APPLICATION_AND_SUBDIRECTORIES: RegExp \u003d /[\\/\\\\]+[^\\/\\\\]+\\.(exe|app|AppImage|asar).*/g;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  private readonly PROFILES_FILE_NAME \u003d \u0027profiles.json\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  private filePath: string;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"geshuming"},"content":"  selectedProfile: Profile \u003d this.blankProfile;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  @Output() selectedProfileEmitter: EventEmitter\u003cProfile\u003e \u003d new EventEmitter\u003cProfile\u003e();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  @Output() profileDataEmitter: EventEmitter\u003c{}\u003e \u003d new EventEmitter\u003c{}\u003e();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  profilesData \u003d {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    isDirectoryMessageVisible: false,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    fileName: null,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    fileDirectory: null"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  constructor(private electronService: ElectronService, public errorDialog: MatDialog) { }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    const temp \u003d this.electronService.getCurrentDirectory();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.filePath \u003d [temp.replace(this.APPLICATION_AND_SUBDIRECTORIES, \u0027\u0027), this.PROFILES_FILE_NAME].join(\u0027/\u0027);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.readProfiles();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"   * Activates the button selection animation and opens the file selector."},{"lineNumber":74,"author":{"gitId":"-"},"content":"   * @param fileInput - OS default file selector."},{"lineNumber":75,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  fileSelectorInitiation(fileInput: HTMLInputElement): void {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.animationActivated \u003d true;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      this.animationActivated \u003d false;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      fileInput.click();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }, this.ANIMATION_DURATION);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"   * Reads the user selected file"},{"lineNumber":86,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  fileSelected(event: Event): void {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const target \u003d event.target as HTMLInputElement;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const file \u003d target.files[0];"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const reader \u003d new FileReader();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    reader.onload \u003d () \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      if (!(reader.result instanceof ArrayBuffer)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"          this.profiles \u003d JSON.parse(reader.result).profiles"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            .concat(AppConfig.profiles)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            .filter(p \u003d\u003e !!p);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          target.value \u003d \u0027\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (e) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"          this.openErrorDialog();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    reader.readAsText(file);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"   * Processes available Profiles information from application\u0027s directory."},{"lineNumber":109,"author":{"gitId":"-"},"content":"   * The automatic detection of profiles in the current directory will only be available in Electron version."},{"lineNumber":110,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  readProfiles(): void {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    const isFileExists: boolean \u003d this.userProfileFileExists(this.filePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // Informing Parent Component (Auth) of file selection"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.profilesData.fileName \u003d this.PROFILES_FILE_NAME;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.profilesData.fileDirectory \u003d this.filePath.split(this.PROFILES_FILE_NAME)[0];"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.profilesData.isDirectoryMessageVisible \u003d !isFileExists;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.profileDataEmitter.emit(this.profilesData);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    if (this.electronService.isElectron() \u0026\u0026 isFileExists) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      try {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.profiles \u003d [];"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        this.profiles \u003d JSON.parse(this.electronService.readFile(this.filePath))[\u0027profiles\u0027];"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      } catch (e) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        this.openErrorDialog();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"      // Validity Check if custom profile.json file has values in it."},{"lineNumber":128,"author":{"gitId":"-"},"content":"      try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        this.assertProfilesValidity(this.profiles);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      } catch (e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        setTimeout(() \u003d\u003e {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"          this.profiles \u003d AppConfig.profiles || [];"},{"lineNumber":133,"author":{"gitId":"-"},"content":"          this.openErrorDialog();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.profiles \u003d this.profiles"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      .concat(AppConfig.profiles)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      .filter(p \u003d\u003e !!p);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"   * Makes Error dialog visible to the user."},{"lineNumber":145,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  openErrorDialog(): void {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    this.errorDialog.open(JsonParseErrorDialogComponent);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * Verifies that every profile is correctly defined in the array of profiles."},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * @param profiles - Array of profiles sourced from profiles.json"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  assertProfilesValidity(profiles: Profile[]): void {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    if (profiles.filter(profile \u003d\u003e (profile.profileName \u003d\u003d\u003d undefined || profile.encodedText \u003d\u003d\u003d undefined)).length !\u003d\u003d 0) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      throw new Error();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"   * Returns true if the file indicated by the filePath exists."},{"lineNumber":162,"author":{"gitId":"-"},"content":"   * @param filePath - Path of file to check."},{"lineNumber":163,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  userProfileFileExists(filePath: string): boolean {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    return this.electronService.fileExists(filePath);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   * Sends the selected profile information to listening component."},{"lineNumber":170,"author":{"gitId":"-"},"content":"   * @param profile - Profile selected by user."},{"lineNumber":171,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  selectProfile(profile: Profile): void {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    this.selectedProfileEmitter.emit(profile);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geshuming":1,"-":174}},{"path":"src/app/core/models/issue.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Team } from \u0027./team.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027./tester-response.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027./comment.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027./issue-dispute.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027./github/github-issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027./github/github-label.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027./github/github-comment.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { TeamResponseTemplate } from \u0027./templates/team-response-template.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { TesterResponseTemplate } from \u0027./templates/tester-response-template.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { TutorModerationIssueTemplate } from \u0027./templates/tutor-moderation-issue-template.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { TutorModerationTodoTemplate } from \u0027./templates/tutor-moderation-todo-template.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../services/phase.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import * as moment from \u0027moment\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027./hidden-data.model\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class Issue {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  /** Basic Fields */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  readonly globalId: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly id: number;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly created_at: string;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  readonly githubIssue: GithubIssue;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  githubComments: GithubComment[];"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  title: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  description: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  hiddenDataInDescription: HiddenData;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  /** Fields derived from Labels */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  severity: string;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  type: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  responseTag?: string;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  duplicated?: boolean;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  status?: string;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  pending?: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  unsure?: boolean;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  teamAssigned?: Team;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /** Depending on the phase, assignees attribute can be derived from Github\u0027s assignee feature OR from the Github\u0027s issue description */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  assignees?: string[];"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  /** Fields derived from parsing of Github\u0027s issue description */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  duplicateOf?: number;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  teamResponse?: string;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  testerResponses?: TesterResponse[];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  issueComment?: IssueComment; // Issue comment is used for Tutor Response and Tester Response"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  issueDisputes?: IssueDispute[];"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   * Formats the text to create space at the end of the user input to prevent any issues with"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * the markdown interpretation."},{"lineNumber":51,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * Brought over from comment-editor.component.ts"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  static formatText(text: string): string {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d null) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d undefined) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      return undefined;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const newLinesRegex \u003d /[\\n\\r]/gi;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const textSplitArray \u003d text.split(newLinesRegex);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    if (textSplitArray.filter(split \u003d\u003e split.trim() !\u003d\u003d \u0027\u0027).length \u003e 0) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      return `${text}\\n\\n`;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      return text;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"anubh-v"},"content":"  /**"},{"lineNumber":73,"author":{"gitId":"anubh-v"},"content":"   * Processes and cleans a raw issue description obtained from user input."},{"lineNumber":74,"author":{"gitId":"anubh-v"},"content":"   */"},{"lineNumber":75,"author":{"gitId":"anubh-v"},"content":"  static updateDescription(description: string): string {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by bug reporter.\u0027;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(description), defaultString);"},{"lineNumber":78,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":80,"author":{"gitId":"anubh-v"},"content":"  /**"},{"lineNumber":81,"author":{"gitId":"anubh-v"},"content":"   * Processes and cleans a raw team response obtained from user input."},{"lineNumber":82,"author":{"gitId":"anubh-v"},"content":"   */"},{"lineNumber":83,"author":{"gitId":"anubh-v"},"content":"  static updateTeamResponse(teamResponse: string): string {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by team.\u0027;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(teamResponse), defaultString);"},{"lineNumber":86,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":88,"author":{"gitId":"anubh-v"},"content":"  /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"   * Given two strings, returns the first if it is not an empty string or a false value such as null/undefined."},{"lineNumber":90,"author":{"gitId":"anubh-v"},"content":"   * Returns the second string if the first is an empty string."},{"lineNumber":91,"author":{"gitId":"anubh-v"},"content":"   */"},{"lineNumber":92,"author":{"gitId":"anubh-v"},"content":"  private static orDefaultString(stringA: string, def: string): string {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    if (!stringA) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      return def;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"anubh-v"},"content":"    return stringA.length !\u003d\u003d 0 ? stringA : def;"},{"lineNumber":97,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  protected constructor(githubIssue: GithubIssue) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /** Basic Fields */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    this.globalId \u003d githubIssue.id;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    this.id \u003d +githubIssue.number;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    this.created_at \u003d moment(githubIssue.created_at).format(\u0027lll\u0027);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    this.title \u003d githubIssue.title;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    this.hiddenDataInDescription \u003d new HiddenData(githubIssue.body);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.description \u003d Issue.updateDescription(this.hiddenDataInDescription.originalStringWithoutHiddenData);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.githubIssue \u003d githubIssue;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /** Fields derived from Labels */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    this.severity \u003d githubIssue.findLabel(GithubLabel.LABELS.severity);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.type \u003d githubIssue.findLabel(GithubLabel.LABELS.type);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    this.responseTag \u003d githubIssue.findLabel(GithubLabel.LABELS.response);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    this.duplicated \u003d !!githubIssue.findLabel(GithubLabel.LABELS.duplicated, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.status \u003d githubIssue.findLabel(GithubLabel.LABELS.status);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.pending \u003d githubIssue.findLabel(GithubLabel.LABELS.pending);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  public static createPhaseBugReportingIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    return new Issue(githubIssue);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"  public static createPhaseTeamResponseIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const template \u003d new TeamResponseTemplate(githubIssue.comments);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d template.comment;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? Issue.updateTeamResponse(template.teamResponse.content) : undefined;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    issue.duplicateOf \u003d template.duplicateOf !\u003d\u003d undefined ? template.duplicateOf.issueNumber : undefined;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    issue.duplicated \u003d issue.duplicateOf !\u003d\u003d undefined \u0026\u0026 issue.duplicateOf !\u003d\u003d null;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    issue.assignees \u003d githubIssue.assignees.map(assignee \u003d\u003e assignee.login);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  public static createPhaseTesterResponseIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    const template \u003d new TesterResponseTemplate(githubIssue.comments);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d template.comment;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? Issue.updateTeamResponse(template.teamResponse.content) : undefined;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    issue.testerResponses \u003d template.testerResponse !\u003d\u003d undefined ? template.testerResponse.testerResponses : undefined;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  public static createPhaseModerationIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const issueTemplate \u003d new TutorModerationIssueTemplate(githubIssue);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate(githubIssue.comments);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    issue.description \u003d issueTemplate.description.content;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d issueTemplate.teamResponse !\u003d\u003d undefined"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      ? Issue.updateTeamResponse(issueTemplate.teamResponse.content)"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      : undefined;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    issue.issueDisputes \u003d issueTemplate.dispute.disputes;"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    if (todoTemplate.moderation \u0026\u0026 todoTemplate.comment) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      issue.issueDisputes \u003d todoTemplate.moderation.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        dispute.description \u003d issueTemplate.dispute.disputes[i].description;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return dispute;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      issue.issueComment \u003d todoTemplate.comment;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"   * Creates a new copy of an exact same issue."},{"lineNumber":172,"author":{"gitId":"-"},"content":"   * This would come useful in the event when you want to update the issue but not the actual"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   * state of the application."},{"lineNumber":174,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  clone(phase: Phase): Issue {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(this.githubIssue);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"   * Depending on the phase of the peer testing, each phase will have a response associated to them."},{"lineNumber":192,"author":{"gitId":"-"},"content":"   * This function will allow the current instance of issue to retain the state of response of the given `issue`."},{"lineNumber":193,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   * @param phase - The phase in which you want to retain your responses."},{"lineNumber":195,"author":{"gitId":"-"},"content":"   * @param issue - The issue which you want your current instance to retain from."},{"lineNumber":196,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  retainResponses(phase: Phase, issue: Issue) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    this.issueComment \u003d issue.issueComment;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    this.githubComments \u003d issue.githubComments;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        this.description \u003d issue.description;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        this.testerResponses \u003d issue.testerResponses;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        this.issueDisputes \u003d issue.issueDisputes;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   * Updates the tester\u0027s responses and team response based on the given githubComment."},{"lineNumber":221,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the issue with."},{"lineNumber":222,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  updateTesterResponse(githubComment: GithubComment): void {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    const template \u003d new TesterResponseTemplate([githubComment]);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    this.issueComment \u003d template.comment;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    this.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? template.teamResponse.content : undefined;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    this.testerResponses \u003d template.testerResponse !\u003d\u003d undefined ? template.testerResponse.testerResponses : undefined;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":231,"author":{"gitId":"-"},"content":"   * Updates the tutor\u0027s resolution of the disputes with a new version of githubComment."},{"lineNumber":232,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the dispute with."},{"lineNumber":233,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  updateDispute(githubComment: GithubComment): void {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate([githubComment]);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    this.issueComment \u003d todoTemplate.comment;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    this.issueDisputes \u003d todoTemplate.moderation.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      dispute.description \u003d this.issueDisputes[i].description;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      return dispute;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"  createGithubIssueDescription(): string {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    return `${this.description}\\n${this.hiddenDataInDescription.toString()}`;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#dev-response-phase"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  createGithubTeamResponse(): string {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    return `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      `## Duplicate status (if any):\\n${this.duplicateOf ? `Duplicate of #${this.duplicateOf}` : `--`}`;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#tutor-moderation"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  createGithubTutorResponse(): string {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    let tutorResponseString \u003d \u0027# Tutor Moderation\\n\\n\u0027;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    for (const issueDispute of this.issueDisputes) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      tutorResponseString +\u003d issueDispute.toTutorResponseString();"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    return tutorResponseString;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#teams-response-1"},{"lineNumber":263,"author":{"gitId":"-"},"content":"  createGithubTesterResponse(): string {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":265,"author":{"gitId":"-"},"content":"      `# Items for the Tester to Verify\\n${this.getTesterResponsesString(this.testerResponses)}`;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"geshuming"},"content":"  /**"},{"lineNumber":269,"author":{"gitId":"geshuming"},"content":"   * Gets the number of unresolved disputes in an Issue."},{"lineNumber":270,"author":{"gitId":"geshuming"},"content":"   */"},{"lineNumber":271,"author":{"gitId":"geshuming"},"content":"  numOfUnresolvedDisputes(): number {"},{"lineNumber":272,"author":{"gitId":"geshuming"},"content":"    if (!this.issueDisputes) {"},{"lineNumber":273,"author":{"gitId":"geshuming"},"content":"      return 0;"},{"lineNumber":274,"author":{"gitId":"geshuming"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":276,"author":{"gitId":"geshuming"},"content":"    return this.issueDisputes.reduce((prev, current) \u003d\u003e prev + Number(!current.isDone()), 0);"},{"lineNumber":277,"author":{"gitId":"geshuming"},"content":"  }"},{"lineNumber":278,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"  private getTesterResponsesString(testerResponses: TesterResponse[]): string {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    let testerResponsesString \u003d \u0027\u0027;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    for (const testerResponse of testerResponses) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      testerResponsesString +\u003d testerResponse.toString();"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    return testerResponsesString;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"export interface Issues {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  [id: number]: Issue;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"anubh-v"},"content":"export const SEVERITY_ORDER \u003d { \u0027-\u0027: 0 , VeryLow: 1, Low: 2, Medium: 3, High: 4 };"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"anubh-v"},"content":"export const ISSUE_TYPE_ORDER \u003d { \u0027-\u0027: 0 , DocumentationBug: 1, FeatureFlaw: 2, FunctionalityBug: 3  };"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"export enum STATUS {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  Incomplete \u003d \u0027Incomplete\u0027,"},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Done \u003d \u0027Done\u0027,"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"export const IssuesFilter \u003d {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"  phaseBugReporting: {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    Student: \u0027FILTER_BY_CREATOR\u0027,"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    Tutor: \u0027NO_FILTER\u0027,"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":306,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":307,"author":{"gitId":"-"},"content":"  phaseTeamResponse: {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    Student: \u0027FILTER_BY_TEAM\u0027,"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    Tutor: \u0027FILTER_BY_TEAM_ASSIGNED\u0027,"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":312,"author":{"gitId":"-"},"content":"  phaseTesterResponse: {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    Student: \u0027NO_FILTER\u0027,"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    Tutor: \u0027NO_ACCESS\u0027,"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":316,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  phaseModeration: {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    Student: \u0027NO_ACCESS\u0027,"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    Tutor: \u0027FILTER_BY_TEAM_ASSIGNED\u0027,"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":321,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":322,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"geshuming":11,"anubh-v":21,"-":290}},{"path":"src/app/core/models/session.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { pipe } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"export interface SessionData {"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"  openPhases: string[];"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"  phaseBugReporting: string;"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"  phaseTeamResponse: string;"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"  phaseTesterResponse: string;"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"  phaseModeration: string;"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"}"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"export function assertSessionDataIntegrity() {"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"  return pipe("},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"    throwIfFalse(sessionData \u003d\u003e sessionData !\u003d\u003d undefined,"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"      () \u003d\u003e new Error(\u0027Session Data Unavailable\u0027)),"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"    throwIfFalse(isSessionDataCorrectlyDefined,"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"      () \u003d\u003e new Error(\u0027Session Data is Incorrectly Defined\u0027)),"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    throwIfFalse(hasOpenPhases,"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"      () \u003d\u003e new Error(\u0027There are no accessible phases.\u0027)));"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"}"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":" * Ensures that the input session Data has been correctly defined."},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":" * Returns true if satisfies these properties, false otherwise."},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":" * @param sessionData"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":" */"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"function isSessionDataCorrectlyDefined(sessionData: SessionData): boolean {"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"  for (const data of Object.values(sessionData)) {"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    if (data \u003d\u003d\u003d undefined || data \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"      return false;"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"  return true;"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"}"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"function hasOpenPhases(sessionData: SessionData): boolean {"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"  return sessionData.openPhases.length !\u003d\u003d 0;"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"}"}],"authorContributionMap":{"anubh-v":38}},{"path":"src/app/core/models/templates/tutor-moderation-issue-template.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Header, Template } from \u0027./template.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueDisputeSection } from \u0027./sections/issue-dispute-section.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Section } from \u0027./sections/section.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../github/github-issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const tutorModerationIssueDescriptionHeaders \u003d {"},{"lineNumber":8,"author":{"gitId":"geshuming"},"content":"  description: new Header(\u0027Issue Description\u0027, 1),"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  teamResponse: new Header(\u0027Team\\\u0027s Response\u0027, 1),"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  disputes: new Header(\u0027Disputes\u0027, 1)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"};"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"export class TutorModerationIssueTemplate extends Template {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  description: Section;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  teamResponse: Section;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  dispute: IssueDisputeSection;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  constructor(githubIssue: GithubIssue) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    super(Object.values(tutorModerationIssueDescriptionHeaders));"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    const issueContent \u003d githubIssue.body;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    this.description \u003d this.parseDescription(issueContent);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    this.teamResponse \u003d this.parseTeamResponse(issueContent);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    this.dispute \u003d this.parseDisputes(issueContent);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  parseDescription(toParse: string): Section {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    return new Section(this.getSectionalDependency(tutorModerationIssueDescriptionHeaders.description), toParse);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  parseTeamResponse(toParse: string): Section {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    return new Section(this.getSectionalDependency(tutorModerationIssueDescriptionHeaders.teamResponse), toParse);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  parseDisputes(toParse: string): IssueDisputeSection {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    return new IssueDisputeSection(this.getSectionalDependency(tutorModerationIssueDescriptionHeaders.disputes), toParse);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geshuming":1,"-":37}},{"path":"src/app/core/services/data.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { DataFile } from \u0027../models/data-file.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Team } from \u0027../models/team.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"})"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export class DataService {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  public dataFile: DataFile;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"geshuming"},"content":"  /**"},{"lineNumber":18,"author":{"gitId":"geshuming"},"content":"   * Retrieves the csv file from the settings repo and constructs"},{"lineNumber":19,"author":{"gitId":"geshuming"},"content":"   * the required data file for the app."},{"lineNumber":20,"author":{"gitId":"geshuming"},"content":"   */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  getDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    return this.githubService.fetchDataFile().pipe("},{"lineNumber":23,"author":{"gitId":"-"},"content":"      map((allCsvDataWrapper: {}) \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return this.constructData(allCsvDataWrapper);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      map((jsonData: {}) \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.dataFile \u003d \u003cDataFile\u003e{"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          teamStructure: this.extractTeamStructure(jsonData)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return jsonData;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * Merges all parsed Csv Data into a single readable JSON"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * format."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * @param allCsvDataWrapper - Object containing strings of csv data."},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * @return jsonData - Object representing merged data file."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":41,"author":{"gitId":"geshuming"},"content":"  private constructData(allCsvDataWrapper: {}): {} {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    const jsonData: {} \u003d {};"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    const allCsvData: string \u003d allCsvDataWrapper[\u0027data\u0027];"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    jsonData[\u0027roles\u0027] \u003d this.parseRolesData(allCsvData);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    jsonData[\u0027team-structure\u0027] \u003d this.parseTeamStructureData(allCsvData);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    jsonData[\u0027students-allocation\u0027] \u003d this.parseStudentAllocation(allCsvData);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    jsonData[\u0027tutors-allocation\u0027] \u003d this.parseTutorAllocation(allCsvData);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    jsonData[\u0027admins-allocation\u0027] \u003d this.parseAdminAllocation(allCsvData);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    return jsonData;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * Parses the input string containing admin allocation information"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":59,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":60,"author":{"gitId":"geshuming"},"content":"  private parseAdminAllocation(csvInput: string): {} {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    const admins \u003d {};"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    let parsedCSV: {}[];"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      if (entry[ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        admins[entry[NAME].toLowerCase()] \u003d {};"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return admins;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   * Parses the input string containing tutor allocation information"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"geshuming"},"content":"  private parseTutorAllocation(csvInput: string): {} {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const tutors \u003d {};"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    let parsedCSV: {}[];"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase())) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":100,"author":{"gitId":"geshuming"},"content":"      const tutor \u003d entry[NAME].toLowerCase() in tutors ? tutors[entry[NAME].toLowerCase()] : {};"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      tutor[entry[TEAM]] \u003d \u0027true\u0027;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      tutors[entry[NAME].toLowerCase()] \u003d tutor;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    return tutors;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"   * Parses the input string containing student allocation information"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"geshuming"},"content":"  private parseStudentAllocation(csvInput: string): {} {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    // Team Notation"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const TEAM_ID \u003d \u0027teamId\u0027;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    const students \u003d {};"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    let parsedCSV: {}[];"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      const newStudent \u003d {};"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      newStudent[TEAM_ID] \u003d entry[TEAM];"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      students[entry[NAME].toLowerCase()] \u003d newStudent;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return students;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   * Parses the input string containing team structure information"},{"lineNumber":141,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":142,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":143,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":144,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":145,"author":{"gitId":"geshuming"},"content":"  private parseTeamStructureData(csvInput: string): {} {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    const teams \u003d {};"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    let parsedCSV: {}[];"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      const team \u003d entry[TEAM] in teams ? teams[entry[TEAM]] : {};"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      team[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      teams[entry[TEAM]] \u003d team;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    return teams;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   * Parses the input string containing roles information"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":171,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":172,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":173,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":174,"author":{"gitId":"geshuming"},"content":"  private parseRolesData(csvInput: string): {} {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    const roles \u003d {};"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    const students \u003d {};"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    const tutors \u003d {};"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    const admins \u003d {};"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    let parsedCSV: {}[];"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      if (entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        students[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      } else if (entry[ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        tutors[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      } else if (entry[ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        admins[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    roles[\u0027students\u0027] \u003d students;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    roles[\u0027tutors\u0027] \u003d tutors;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    roles[\u0027admins\u0027] \u003d admins;"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    return roles;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * Converts the input csv information to an array of"},{"lineNumber":206,"author":{"gitId":"-"},"content":"   * objects syncrhonously. Each object\u0027s values are"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   * marked by the respective csv table headers."},{"lineNumber":208,"author":{"gitId":"-"},"content":"   * @param csvText - csv information."},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * @return - Subjects that tracks the parsed data."},{"lineNumber":210,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  private csvParser(csvText: string): {}[] {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    const lines \u003d csvText.split(\u0027\\n\u0027).filter(v \u003d\u003e v.trim());"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    const headers \u003d lines[0].split(\u0027,\u0027).map(h \u003d\u003e h.trim());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    for (let i \u003d 1; i \u003c lines.length; i++) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      const line \u003d lines[i].trim();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      if (!line) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        continue;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"      const lineValues \u003d line.split(\u0027,\u0027).map(v \u003d\u003e v.trim());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      const lineObj \u003d {};"},{"lineNumber":222,"author":{"gitId":"-"},"content":"      for (let j \u003d 0; j \u003c headers.length; j++) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (!lineValues[j]) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"          lineObj[headers[j]] \u003d null;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"          lineObj[headers[j]] \u003d lineValues[j];"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      result.push(lineObj);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"  getTeam(teamId: string): Team {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    return this.dataFile.teamStructure.get(teamId);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"  getTeams(): string[] {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    return Array.from(this.dataFile.teamStructure.keys());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"  // returns a mapping from teamId to their respective team structure."},{"lineNumber":243,"author":{"gitId":"-"},"content":"  private extractTeamStructure(jsonData: {}): Map\u003cstring, Team\u003e {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const teamStructure \u003d new Map\u003cstring, Team\u003e();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    const jsonTeamStructure \u003d jsonData[\u0027team-structure\u0027];"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    const teamIds \u003d Object.keys(jsonTeamStructure);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    for (const teamId of teamIds) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      const teamMembers \u003d new Array\u003cUser\u003e();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      const teamMemberIds \u003d Object.keys(jsonTeamStructure[teamId]);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      for (const teamMemberId of teamMemberIds) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        teamMembers.push(\u003cUser\u003e{loginId: teamMemberId, role: UserRole.Student});"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      teamStructure.set(teamId, new Team({id: teamId, teamMembers: teamMembers}));"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    return teamStructure;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    this.dataFile \u003d undefined;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geshuming":11,"-":250}},{"path":"src/app/core/services/github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { catchError, filter, flatMap, map, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { forkJoin, from, Observable, of, throwError } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"import { getNumberOfPages } from \u0027../../shared/lib/github-paginator-parser\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ERRORCODE_NOT_FOUND, ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubRelease } from \u0027../models/github/github.release\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubResponse } from \u0027../models/github/github-response.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssuesCacheManager } from \u0027../models/github/cache-manager/issues-cache-manager.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { IssueLastModifiedManagerModel } from \u0027../models/github/cache-manager/issue-last-modified-manager.model\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { Apollo, QueryRef } from \u0027apollo-angular\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  FetchIssue,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  FetchIssueQuery, FetchIssues, FetchIssuesByTeam, FetchIssuesByTeamQuery, FetchIssuesQuery,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"} from \u0027../../../../graphql/graphql-types\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { GithubGraphqlIssue } from \u0027../models/github/github-graphql.issue\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { ApolloQueryResult } from \u0027apollo-client\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { DocumentNode } from \u0027graphql\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"const Octokit \u003d require(\u0027@octokit/rest\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"const CATCHER_ORG \u003d \u0027CATcher-org\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"const CATCHER_REPO \u003d \u0027CATcher\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"let ORG_NAME \u003d \u0027\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"let MOD_ORG \u003d \u0027\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"let REPO \u003d \u0027\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"let DATA_REPO \u003d \u0027\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"let octokit \u003d new Octokit();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"})"},{"lineNumber":39,"author":{"gitId":"-"},"content":"export class GithubService {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  private static readonly IF_NONE_MATCH_EMPTY \u003d { \u0027If-None-Match\u0027: \u0027\u0027 };"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  private issuesCacheManager \u003d new IssuesCacheManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  private issuesLastModifiedManager \u003d new IssueLastModifiedManagerModel();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  private issueQueryRefs \u003d new Map\u003cNumber, QueryRef\u003cFetchIssueQuery\u003e\u003e();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private apollo: Apollo,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(accessToken: string) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    octokit \u003d new Octokit({"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      auth() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return `Token ${accessToken}`;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  storeOrganizationDetails(orgName: string, dataRepo: string) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    MOD_ORG \u003d orgName;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    DATA_REPO \u003d dataRepo;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  storePhaseDetails(phaseRepoOwner: string, repoName: string) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    REPO \u003d repoName;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    ORG_NAME \u003d phaseRepoOwner;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  fetchIssuesGraphqlByTeam(tutorial: string, team: string, issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":73,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesByTeamQuery, GithubGraphqlIssue\u003e("},{"lineNumber":76,"author":{"gitId":"-"},"content":"          FetchIssuesByTeam,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"              ...graphqlFilter,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"              labels: [...(graphqlFilter.labels ? graphqlFilter.labels : []), team]"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            }, tutorial },"},{"lineNumber":81,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.label.issues.edges,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  fetchIssuesGraphql(issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":91,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesQuery, GithubGraphqlIssue\u003e("},{"lineNumber":94,"author":{"gitId":"-"},"content":"          FetchIssues,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: graphqlFilter },"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.issues.edges,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * Will make multiple request to Github as per necessary and determine whether a graphql fetch is required."},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  private toFetchIssues(filter: RestGithubIssueFilter): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    let responseInFirstPage: GithubResponse\u003cGithubIssue[]\u003e;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return this.getIssuesAPICall(filter, 1).pipe("},{"lineNumber":109,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue[]\u003e) \u003d\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        responseInFirstPage \u003d response;"},{"lineNumber":111,"author":{"gitId":"anubh-v"},"content":"        return getNumberOfPages(response);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      flatMap((numOfPages: number) \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        const apiCalls: Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e[] \u003d [];"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        for (let i \u003d 2; i \u003c\u003d numOfPages; i++) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"          apiCalls.push(this.getIssuesAPICall(filter, i));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return apiCalls.length \u003d\u003d\u003d 0 ? of([]) : forkJoin(apiCalls);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      map((resultArray: GithubResponse\u003cGithubIssue[]\u003e[]) \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        const responses \u003d [responseInFirstPage, ...resultArray];"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        const isCached \u003d responses.reduce((result, response) \u003d\u003e {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"          return result \u0026\u0026 response.isCached;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }, true);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        responses.forEach((resp, index) \u003d\u003e this.issuesCacheManager.set(index + 1, resp));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return !isCached;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      }));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"   * Checks if the specified repository exists."},{"lineNumber":132,"author":{"gitId":"-"},"content":"   * @param owner - Owner of Specified Repository."},{"lineNumber":133,"author":{"gitId":"-"},"content":"   * @param repo - Name of Repository."},{"lineNumber":134,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  isRepositoryPresent(owner: string, repo: string): Observable\u003cboolean\u003e {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return from(octokit.repos.get({owner: owner, repo: repo, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"      map((rawData: {status: number}) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return rawData.status !\u003d\u003d ERRORCODE_NOT_FOUND;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return of(false);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch repo data.\u0027))"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"   * Creates a repository in for the authenticated user location."},{"lineNumber":149,"author":{"gitId":"-"},"content":"   * @param name - Name of Repo to create."},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - That returns true if the repository has been successfully"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   *                                created."},{"lineNumber":152,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  createRepository(name: string): void {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    octokit.repos.createForAuthenticatedUser({name: name});"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"  fetchIssueGraphql(id: number): Observable\u003cGithubGraphqlIssue\u003e {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    if (this.issueQueryRefs.get(id) \u003d\u003d\u003d undefined) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      const newQueryRef \u003d this.apollo.watchQuery\u003cFetchIssueQuery\u003e({"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        query: FetchIssue,"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        variables: {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"          owner: ORG_NAME,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"          name: REPO,"},{"lineNumber":164,"author":{"gitId":"-"},"content":"          issueId: id,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      this.issueQueryRefs.set(id, newQueryRef);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const queryRef \u003d this.issueQueryRefs.get(id);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    return this.toFetchIssue(id).pipe("},{"lineNumber":172,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e from(queryRef.refetch())),"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      map((value: ApolloQueryResult\u003cFetchIssueQuery\u003e) \u003d\u003e {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return new GithubGraphqlIssue(value.data.repository.issue);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new HttpErrorResponse({ status: 304 }))"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"  toFetchIssue(id: number): Observable\u003cboolean\u003e {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    return from(octokit.issues.get({owner: ORG_NAME, repo: REPO, issue_number: id,"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      headers: { \u0027If-Modified-Since\u0027: this.issuesLastModifiedManager.get(id) }})).pipe("},{"lineNumber":184,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch issue.\u0027))"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  fetchAllLabels(): Observable\u003cArray\u003c{}\u003e\u003e {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listLabelsForRepo({owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":194,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch labels.\u0027))"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"   * Creates a label in the current repository."},{"lineNumber":203,"author":{"gitId":"-"},"content":"   * @param formattedLabelName - name of new label."},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * @param labelColor - colour of new label."},{"lineNumber":205,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  createLabel(formattedLabelName: string, labelColor: string): void {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    octokit.issues.createLabel({owner: ORG_NAME, repo: REPO, name: formattedLabelName, color: labelColor});"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"   * Updates a label\u0027s information in the current repository."},{"lineNumber":212,"author":{"gitId":"-"},"content":"   * @param labelName - name of existing label"},{"lineNumber":213,"author":{"gitId":"-"},"content":"   * @param labelColor - new color to be assigned to existing label."},{"lineNumber":214,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":215,"author":{"gitId":"-"},"content":"  updateLabel(labelName: string, labelColor: string): void {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    octokit.issues.updateLabel({owner: ORG_NAME, repo: REPO, name: labelName, current_name: labelName, color: labelColor});"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  closeIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027closed\u0027})).pipe("},{"lineNumber":221,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, labels: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    return from(octokit.issues.create({owner: ORG_NAME, repo: REPO, title: title, body: description, labels: labels})).pipe("},{"lineNumber":230,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"  createIssueComment(issueId: number, description: string): Observable\u003cGithubComment\u003e {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    return from(octokit.issues.createComment({owner: ORG_NAME, repo: REPO, issue_number: issueId,"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      body: description})).pipe("},{"lineNumber":239,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"  updateIssue(id: number, title: string, description: string, labels: string[], assignees?: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({owner: ORG_NAME, repo: REPO, issue_number: id, title: title, body: description, labels: labels,"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      assignees: assignees})).pipe("},{"lineNumber":248,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        return throwError(err);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"  updateIssueComment(issueComment: IssueComment): Observable\u003cGithubComment\u003e {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    return from(octokit.issues.updateComment({owner: ORG_NAME, repo: REPO, comment_id: issueComment.id,"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      body: issueComment.description})).pipe("},{"lineNumber":261,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"  uploadFile(filename: string, base64String: string): Observable\u003cany\u003e {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    return from(octokit.repos.createOrUpdateFile({owner: ORG_NAME, repo: REPO, path: `files/${filename}`,"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      message: \u0027upload file\u0027, content: base64String}));"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"  fetchEventsForRepo(): Observable\u003cany[]\u003e {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listEventsForRepo({owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":274,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":276,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch events for repo.\u0027))"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":279,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"  fetchDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getContents({owner: MOD_ORG, repo: DATA_REPO, path: \u0027data.csv\u0027,"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":284,"author":{"gitId":"-"},"content":"        map(rawData \u003d\u003e {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"          return {data: atob(rawData[\u0027data\u0027][\u0027content\u0027])};"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch data file.\u0027))"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"  fetchLatestRelease(): Observable\u003cGithubRelease\u003e {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getLatestRelease({owner: CATCHER_ORG, repo: CATCHER_REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":293,"author":{"gitId":"-"},"content":"      map(res \u003d\u003e res[\u0027data\u0027]),"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch latest release.\u0027))"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":296,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":299,"author":{"gitId":"-"},"content":"   * Fetches the data file that is regulates session information."},{"lineNumber":300,"author":{"gitId":"-"},"content":"   * @return Observable\u003c{}\u003e representing session information."},{"lineNumber":301,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":302,"author":{"gitId":"-"},"content":"  fetchSettingsFile(): Observable\u003c{}\u003e {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getContents({owner: MOD_ORG, repo: DATA_REPO, path: \u0027settings.json\u0027,"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":305,"author":{"gitId":"-"},"content":"        map(rawData \u003d\u003e JSON.parse(atob(rawData[\u0027data\u0027][\u0027content\u0027]))),"},{"lineNumber":306,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch settings file.\u0027))"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":308,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"  fetchAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    return from(octokit.users.getAuthenticated()).pipe("},{"lineNumber":312,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":314,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":315,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch authenticated user.\u0027))"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"  getRepoURL(): string {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    return ORG_NAME.concat(\u0027/\u0027).concat(REPO);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    if (id) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      this.electronService.openLink(\u0027https://github.com/\u0027.concat(this.getRepoURL()).concat(\u0027/issues/\u0027).concat(String(id)));"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(\u0027Unable to open this issue in Browser\u0027);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":330,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    this.issuesCacheManager.clear();"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    this.issuesLastModifiedManager.clear();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    this.issueQueryRefs.clear();"},{"lineNumber":336,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"  private getIssuesAPICall(filter: RestGithubIssueFilter, pageNumber: number): Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    const apiCall: Promise\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e \u003d octokit.issues.listForRepo({...filter, owner: ORG_NAME,"},{"lineNumber":340,"author":{"gitId":"-"},"content":"      repo: REPO, sort: \u0027created\u0027, direction: \u0027desc\u0027, per_page: 100, page: pageNumber,"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      headers: { \u0027If-None-Match\u0027: this.issuesCacheManager.getEtagFor(pageNumber) }});"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    const apiCall$ \u003d from(apiCall);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    return apiCall$.pipe("},{"lineNumber":344,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        return of(this.issuesCacheManager.get(pageNumber));"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"  private fetchGraphqlList\u003cT, M\u003e("},{"lineNumber":351,"author":{"gitId":"-"},"content":"    query: DocumentNode,"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    variables: {},"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e,"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    Model: new (data) \u003d\u003e M,"},{"lineNumber":355,"author":{"gitId":"-"},"content":"  ): Observable\u003cArray\u003cM\u003e\u003e {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    return from(this.withPagination\u003cT\u003e(pluckEdges)(query, variables)).pipe("},{"lineNumber":357,"author":{"gitId":"-"},"content":"      map((results: Array\u003cApolloQueryResult\u003cT\u003e\u003e) \u003d\u003e {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        const issues \u003d results.reduce((accumulated, current) \u003d\u003e accumulated.concat(pluckEdges(current)), []);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return issues.map(issue \u003d\u003e new Model(issue.node));"},{"lineNumber":360,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        return new HttpErrorResponse({ status: 304 });"},{"lineNumber":363,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":365,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"  private withPagination\u003cT\u003e(pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e) {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    return async ("},{"lineNumber":369,"author":{"gitId":"-"},"content":"      query: DocumentNode,"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      variables: { [key: string]: any } \u003d {}"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    ): Promise\u003cArray\u003cApolloQueryResult\u003cT\u003e\u003e\u003e \u003d\u003e {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      const maxResultsCount \u003d 100;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      const cursor \u003d variables.cursor || null;"},{"lineNumber":374,"author":{"gitId":"-"},"content":"      const graphqlQuery \u003d this.apollo.watchQuery\u003cT\u003e({ query, variables: { ...variables, cursor } });"},{"lineNumber":375,"author":{"gitId":"-"},"content":"      return graphqlQuery.refetch().then(async (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        const intermediate \u003d Array.isArray(results) ? results : [results];"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        const edges \u003d pluckEdges(results);"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        const nextCursor \u003d (edges.length \u003d\u003d\u003d 0) ? null : edges[edges.length - 1].cursor;"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"        if (edges.length \u003c maxResultsCount || !nextCursor) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"          return intermediate;"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        const nextResults \u003d await this.withPagination\u003cT\u003e(pluckEdges)("},{"lineNumber":384,"author":{"gitId":"-"},"content":"          query, {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"            ...variables,"},{"lineNumber":386,"author":{"gitId":"-"},"content":"            cursor: nextCursor,"},{"lineNumber":387,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        return intermediate.concat(nextResults);"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":392,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":393,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":391}},{"path":"src/app/core/services/githubevent.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { map, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"})"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class GithubEventService {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  private lastModified: string; // The timestamp when the title or label of an issue is changed"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  private lastModifiedComment: string; // The timestamp when the comment of an issue is changed"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private issueService: IssueService) { }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   * Calls the Github service api to return the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   * of current repository and store the timestamps of the event in this service"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  setLatestChangeEvent(): Observable\u003cany\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":23,"author":{"gitId":"-"},"content":"        map((response) \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            return response;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          this.setLastModifiedTime(response[0][\u0027created_at\u0027]);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          this.setLastModifiedCommentTime(response[0][\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          return response;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * Returns the result whether the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * of current repository has been retrieved or not."},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * @returns true if the issues were fetched from GitHub."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  reloadPage(): Observable\u003cboolean\u003e {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":41,"author":{"gitId":"-"},"content":"      flatMap((response: any[]) \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          return of(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        const eventResponse \u003d response[0];"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Will only allow page to reload if the latest modify time is different"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // from last modified, meaning that some changes to the repo has occured."},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (eventResponse[\u0027created_at\u0027] !\u003d\u003d this.lastModified ||"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        eventResponse[\u0027issue\u0027][\u0027updated_at\u0027] !\u003d\u003d this.lastModifiedComment) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          this.setLastModifiedTime(eventResponse[\u0027created_at\u0027]);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          this.setLastModifiedCommentTime(eventResponse[\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          return this.issueService.reloadAllIssues().pipe(map((response: any[]) \u003d\u003e true));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return of(false);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"anubh-v"},"content":"  private setLastModifiedTime(lastModified: string): void {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.lastModified \u003d lastModified;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"anubh-v"},"content":"  private setLastModifiedCommentTime(lastModified: string): void {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.lastModifiedComment \u003d lastModified;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.setLastModifiedTime(undefined);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.setLastModifiedCommentTime(undefined);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":69}},{"path":"src/app/core/services/label.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Label } from \u0027../models/label.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/* The threshold to decide if color is dark or light."},{"lineNumber":9,"author":{"gitId":"-"},"content":"A higher threshold value will result in more colors determined to be \"dark\"."},{"lineNumber":10,"author":{"gitId":"-"},"content":"W3C recommendation is 0.179, but 0.184 is chosen so that some colors (like bright red)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"are considered dark (Github too consider them dark) */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"const COLOR_DARKNESS_THRESHOLD \u003d 0.184;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"const COLOR_DARK_TEXT  \u003d \u0027000000\u0027; // Dark color for text with light background"},{"lineNumber":15,"author":{"gitId":"-"},"content":"const COLOR_LIGHT_TEXT  \u003d \u0027FFFFFF\u0027; // Light color for text with dark background"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_SEVERITY \u003d \u0027Severity\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_BUG_TYPE \u003d \u0027Bug Type\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_RESPONSE \u003d \u0027Response\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class LabelService {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private readonly REQUIRED_LABELS \u003d {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    severity: {"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"      VeryLow: new Label(\u0027severity\u0027, \u0027VeryLow\u0027, \u0027ffe0e0\u0027),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      Low: new Label(\u0027severity\u0027, \u0027Low\u0027, \u0027ffcccc\u0027),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      Medium: new Label(\u0027severity\u0027, \u0027Medium\u0027, \u0027ff9999\u0027),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      High: new Label(\u0027severity\u0027, \u0027High\u0027, \u0027ff6666\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    type: {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      DocumentationBug: new Label(\u0027type\u0027, \u0027DocumentationBug\u0027, \u0027d966ff\u0027),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      FeatureFlaw: new Label(\u0027type\u0027, \u0027FeatureFlaw\u0027, \u0027d966ff\u0027),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      FunctionalityBug: new Label(\u0027type\u0027, \u0027FunctionalityBug\u0027, \u00279900cc\u0027)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    response: {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      Accepted: new Label(\u0027response\u0027, \u0027Accepted\u0027, \u002700802b\u0027),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      CannotReproduce: new Label(\u0027response\u0027, \u0027CannotReproduce\u0027, \u0027ffebcc\u0027),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      IssueUnclear: new Label(\u0027response\u0027, \u0027IssueUnclear\u0027, \u0027ffcc80\u0027),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      NotInScope: new Label(\u0027response\u0027, \u0027NotInScope\u0027, \u0027ffcc80\u0027),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      Rejected: new Label(\u0027response\u0027, \u0027Rejected\u0027, \u0027ff9900\u0027)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    status: {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      Done: new Label(\u0027status\u0027, \u0027Done\u0027, \u0027a6a6a6\u0027),"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      Incomplete: new Label(\u0027status\u0027, \u0027Incomplete\u0027, \u0027000000\u0027)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    others: {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      duplicate: new Label(undefined, \u0027duplicate\u0027, \u00270066ff\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  private severityLabels: Label[] \u003d Object.values(this.REQUIRED_LABELS.severity);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  private typeLabels: Label[] \u003d Object.values(this.REQUIRED_LABELS.type);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  private responseLabels: Label[] \u003d Object.values(this.REQUIRED_LABELS.response);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  private statusLabels: Label[] \u003d Object.values(this.REQUIRED_LABELS.status);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  private otherLabels: Label[] \u003d Object.values(this.REQUIRED_LABELS.others);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  private labelArrays \u003d {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    severity: this.severityLabels,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    type: this.typeLabels,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    response: this.responseLabels,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    status: this.statusLabels,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    others: this.otherLabels"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"   * Synchronizes the labels in github with those required by the application."},{"lineNumber":72,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  synchronizeRemoteLabels(): Observable\u003cany\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      return this.githubService.fetchAllLabels().pipe("},{"lineNumber":75,"author":{"gitId":"-"},"content":"        map((response) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          this.ensureRepoHasRequiredLabels(this.parseLabelData(response), this.getRequiredLabelsAsArray());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          return response;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * Returns all the labels of a certain type (e.g severity)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":85,"author":{"gitId":"-"},"content":"   * @return an array of label of that type"},{"lineNumber":86,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  getLabelList(attributeName: string): Label[] {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this.severityLabels;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this.typeLabels;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      case \u0027responseTag\u0027:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      case \u0027response\u0027:"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this.responseLabels;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   * Returns a title for the label type"},{"lineNumber":101,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":102,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  getLabelTitle(attributeName: string): string {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_SEVERITY;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_BUG_TYPE;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      case \u0027responseTag\u0027:"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_RESPONSE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   * Returns the color of the label by searching a list of"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":117,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low / Medium / High / ...)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  getColorOfLabel(labelValue: string): string {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    // TODO: Rewrite function - labelValue insufficient to differentiate between labels. Should use `labelCategory.labelValue` format."},{"lineNumber":121,"author":{"gitId":"-"},"content":"    const WHITE_COLOR \u003d \u0027ffffff\u0027;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      return WHITE_COLOR;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    const existingLabel \u003d this.getRequiredLabelsAsArray().find(label \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelColor \u003d\u003d\u003d undefined) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      return WHITE_COLOR;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      return existingLabel.labelColor;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"  private getRequiredLabelsAsArray(): Label[] {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    let requiredLabels: Label[] \u003d [];"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    for (const category of Object.keys(this.labelArrays)) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      requiredLabels \u003d requiredLabels.concat(this.labelArrays[category]);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    return requiredLabels;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   * Ensures that the repo has the required labels."},{"lineNumber":147,"author":{"gitId":"-"},"content":"   * Compares the actual labels in the repo with the required labels. If an required label is missing,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"   * it is added to the repo. If the required label exists but the label color is not as expected,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   * the color is updated. Does not delete actual labels that do not match required labels."},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * i.e., the repo might have more labels than the required labels after this operation."},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * @param actualLabels: labels in the repo."},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * @param requiredLabels: required labels."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  private ensureRepoHasRequiredLabels(actualLabels: Label[], requiredLabels: Label[]): void {"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    requiredLabels.forEach(label \u003d\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"      // Finds for a label that has the same name as a required label."},{"lineNumber":159,"author":{"gitId":"-"},"content":"      const nameMatchedLabels: Label[] \u003d actualLabels.filter(remoteLabel \u003d\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"          remoteLabel.getFormattedName() \u003d\u003d\u003d label.getFormattedName());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"      if (nameMatchedLabels.length \u003d\u003d\u003d 0) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // Create new Label (Could not find a label with the same name \u0026 category)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        this.githubService.createLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"      } else if (nameMatchedLabels.length \u003d\u003d\u003d 1) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (nameMatchedLabels[0].equals(label)) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"          // the label exists exactly as expected -\u003e do nothing"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"          // the label exists but the color does not match"},{"lineNumber":175,"author":{"gitId":"-"},"content":"          this.githubService.updateLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Unexpected error: the repo has multiple labels with the same name \u0027 + label.getFormattedName());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"   * Parses label information and returns an array of Label objects."},{"lineNumber":187,"author":{"gitId":"-"},"content":"   * @param labels - Label Information from API."},{"lineNumber":188,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  parseLabelData(labels: Array\u003c{}\u003e): Label[] {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    const labelData: Label[] \u003d [];"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    for (const label of labels) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"      let labelCategory: string;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      let labelValue: string;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      const containsDotRegex \u003d /\\./g;"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"      const rawName: string \u003d String(label[\u0027name\u0027]);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"      [labelCategory, labelValue] \u003d containsDotRegex.test(rawName)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        ? String(label[\u0027name\u0027]).split(\u0027.\u0027)"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        : [undefined, rawName];"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"      const labelColor: string \u003d String(label[\u0027color\u0027]);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"      labelData.push(new Label(labelCategory, labelValue, labelColor));"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    return labelData;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   * Returns true if the given color is considered \"dark\""},{"lineNumber":213,"author":{"gitId":"-"},"content":"   * The color is considered \"dark\" if its luminance is less than COLOR_DARKNESS_THRESHOLD"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * @param inputColor: the color"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"  isDarkColor(inputColor: string): boolean {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    const COLOR \u003d (inputColor.charAt(0) \u003d\u003d\u003d \u0027#\u0027) ? inputColor.substring(1, 7) : inputColor;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    const R \u003d parseInt(COLOR.substring(0, 2), 16);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    const G \u003d parseInt(COLOR.substring(2, 4), 16);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    const B \u003d parseInt(COLOR.substring(4, 6), 16);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    const RGB \u003d [R / 255, G / 255, B / 255];"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    const LINEAR_RGB \u003d RGB.map((col) \u003d\u003e {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      if (col \u003c\u003d 0.03928) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return col / 12.92;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      return Math.pow((col + 0.055) / 1.055, 2.4);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    // Calculate the luminance of the color"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    const LUMINANCE \u003d (0.2126 * LINEAR_RGB[0]) + (0.7152 * LINEAR_RGB[1]) + (0.0722 * LINEAR_RGB[2]);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    // The color is \"dark\" if the luminance is lower than the threshold"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    return LUMINANCE \u003c COLOR_DARKNESS_THRESHOLD;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":235,"author":{"gitId":"-"},"content":"   * Returns a css style for the label to use"},{"lineNumber":236,"author":{"gitId":"-"},"content":"   * @param color: the color of the label"},{"lineNumber":237,"author":{"gitId":"-"},"content":"   * @return the style with background-color in rgb"},{"lineNumber":238,"author":{"gitId":"-"},"content":"   * @throws exception if input is an invalid color code"},{"lineNumber":239,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  setLabelStyle(color: string) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    let textColor: string;"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    textColor \u003d this.isDarkColor(color) ? COLOR_LIGHT_TEXT : COLOR_DARK_TEXT;"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    const styles \u003d {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      \u0027background-color\u0027 : `#${color}`,"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      \u0027border-radius\u0027 : \u00273px\u0027,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      \u0027cursor\u0027 : \u0027default\u0027,"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u0027padding\u0027 : \u00273px\u0027,"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      \u0027color\u0027 : `#${textColor}`,"},{"lineNumber":251,"author":{"gitId":"-"},"content":"      \u0027font-weight\u0027 : \u0027410\u0027,"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    return styles;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":256}},{"path":"src/app/core/services/permission.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Phase, PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const enum PermissionLevel { Phase \u003d \u0027Phase\u0027, User \u003d \u0027User\u0027 }"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"const PERMISSIONS \u003d {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  [Phase.phaseBugReporting]: {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: true,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: true,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: true,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: true,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: true,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: true,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  [Phase.phaseTeamResponse]: {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  [Phase.phaseTesterResponse]: {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: true,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: true,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"  /** Phase 3 Permissions **/"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  [Phase.phaseModeration]: {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: true,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: true,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"};"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"})"},{"lineNumber":147,"author":{"gitId":"-"},"content":"export class PermissionService {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private userService: UserService, private phaseService: PhaseService) {}"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"  isIssueCreatable(): boolean {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueCreatable\u0027);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"  isIssueDeletable(): boolean {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueDeletable\u0027);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"  isIssueTitleEditable(): boolean {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueTitleEditable\u0027);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  isIssueDescriptionEditable(): boolean {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueDescriptionEditable\u0027);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"  isIssueLabelsEditable(): boolean {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueLabelsEditable\u0027);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  isTesterResponseEditable(): boolean {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTesterResponseEditable\u0027);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  isTeamResponseEditable(): boolean {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTeamResponseEditable\u0027);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  isTutorResponseEditable(): boolean {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTutorResponseEditable\u0027);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"anubh-v"},"content":"  isIssueEditable(): boolean {"},{"lineNumber":183,"author":{"gitId":"anubh-v"},"content":"    return this.isIssueTitleEditable() || this.isIssueDescriptionEditable()"},{"lineNumber":184,"author":{"gitId":"anubh-v"},"content":"           || this.isIssueLabelsEditable() || this.isTeamResponseEditable()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"           || this.isTesterResponseEditable() || this.isTutorResponseEditable();"},{"lineNumber":186,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":187,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"  private askForPermission(permissionLevel: PermissionLevel, permissionType: string): boolean {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    switch (permissionLevel) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      case PermissionLevel.Phase:"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return PERMISSIONS[this.phaseService.currentPhase][permissionType];"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      case PermissionLevel.User:"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        return PERMISSIONS[this.phaseService.currentPhase][this.userService.currentUser.role][permissionType];"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":5,"-":193}},{"path":"src/app/core/services/phase.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { HttpClient } from \u0027@angular/common/http\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { flatMap, map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027./label.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"import { SessionData, assertSessionDataIntegrity } from \u0027../models/session.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { SessionFixConfirmationComponent } from \u0027./session-fix-confirmation/session-fix-confirmation.component\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"export enum Phase {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  phaseBugReporting \u003d \u0027phaseBugReporting\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  phaseTeamResponse \u003d \u0027phaseTeamResponse\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  phaseTesterResponse \u003d \u0027phaseTesterResponse\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  phaseModeration \u003d \u0027phaseModeration\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export class PhaseService {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  public currentPhase: Phase;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private repoName: string;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  private orgName: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  public readonly phaseDescription \u003d {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u0027phaseBugReporting\u0027: \u0027Bug Reporting Phase\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u0027phaseTeamResponse\u0027: \u0027Team\\\u0027s Response Phase\u0027,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u0027phaseTesterResponse\u0027: \u0027Tester\\\u0027s Response Phase\u0027,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u0027phaseModeration\u0027: \u0027Moderation Phase\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  public sessionData: SessionData;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private phaseRepoOwners \u003d {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    phaseBugReporting: \u0027\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    phaseTeamResponse: \u0027\u0027,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    phaseTesterResponse: \u0027\u0027,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    phaseModeration: \u0027\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  constructor(private http: HttpClient,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              private labelService: LabelService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              public phaseFixConfirmationDialog: MatDialog) {}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * Stores the location of the repositories belonging to"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * each phase of the application."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * @param org - name of organization."},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * @param user - name of user."},{"lineNumber":55,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  setPhaseOwners(org: string, user: string): void {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.orgName \u003d org;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseBugReporting \u003d user;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTeamResponse \u003d org;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTesterResponse \u003d user;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseModeration \u003d org;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   * Returns the name of the owner of a given phase."},{"lineNumber":66,"author":{"gitId":"-"},"content":"   * @param phase"},{"lineNumber":67,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  getPhaseOwner(phase: string): string {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    return this.phaseRepoOwners[phase];"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  fetchSessionData(): Observable\u003cSessionData\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    return this.githubService.fetchSettingsFile().pipe("},{"lineNumber":74,"author":{"gitId":"-"},"content":"      map(data \u003d\u003e data as SessionData)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"   * Will fetch session data and update phase service with it."},{"lineNumber":80,"author":{"gitId":"-"},"content":"   * @returns - If the session is valid return true, else false"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  storeSessionData(): Observable\u003cboolean\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":84,"author":{"gitId":"anubh-v"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      map((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this.currentPhase !\u003d\u003d undefined;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"   * Determines the github\u0027s level of repo permission required for the phase."},{"lineNumber":94,"author":{"gitId":"-"},"content":"   * Ref: https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/#available-scopes"},{"lineNumber":95,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  githubRepoPermissionLevel(): string {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    if (this.sessionData.openPhases.includes(Phase.phaseModeration)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      return \u0027repo\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      return \u0027public_repo\u0027;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * Checks if the necessary repository is available and creates it if the permissions are available."},{"lineNumber":106,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  verifySessionAvailability(sessionData: SessionData): Observable\u003cboolean\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.githubService.isRepositoryPresent(this.phaseRepoOwners[this.currentPhase], sessionData[this.currentPhase]);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   * If a Session is unavailable (because the repository is missing) attempt to create IF it is"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   * the BugReporting Phase"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   * @param sessionData - SessionData containing repository information."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   * @return - Dummy Observable to give the API sometime to propagate the creation of the new repository since"},{"lineNumber":117,"author":{"gitId":"-"},"content":"   *           the API Call used here does not return any response."},{"lineNumber":118,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  attemptSessionAvailabilityFix(sessionData: SessionData): Observable\u003cany\u003e {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    if (this.currentPhase !\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      throw new Error(\u0027Current Phase\\\u0027s Repository has not been opened.\u0027);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    } else if (this.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting \u0026\u0026 this.userService.currentUser.role !\u003d\u003d UserRole.Student) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      throw new Error(\u0027Bug-Reporting Phase\\\u0027s repository initialisation is only available to Students.\u0027);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    this.githubService.createRepository(sessionData[this.currentPhase]);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    return new Observable(subscriber \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      setTimeout(() \u003d\u003e subscriber.next(true), 1000);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"   * Stores session data and sets current session\u0027s phase."},{"lineNumber":135,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  updateSessionParameters(sessionData: SessionData) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.sessionData \u003d sessionData;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d Phase[sessionData.openPhases[0]];"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    this.repoName \u003d sessionData[sessionData.openPhases[0]];"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails(this.phaseRepoOwners[this.currentPhase], this.repoName);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   * Launches the SessionFixConfirmation Dialog."},{"lineNumber":146,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - Representing user\u0027s permission grant."},{"lineNumber":147,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  openSessionFixConfirmation(): Observable\u003cboolean\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.phaseFixConfirmationDialog.open(SessionFixConfirmationComponent, {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      data: {user: this.userService.currentUser.loginId, repoName: this.sessionData[this.currentPhase]}"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    return dialogRef.afterClosed();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"   * Ensures that the necessary data for the current session is available"},{"lineNumber":159,"author":{"gitId":"-"},"content":"   * and synchronized with the remote server."},{"lineNumber":160,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  sessionSetup(): Observable\u003cany\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":163,"author":{"gitId":"anubh-v"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      flatMap((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return this.verifySessionAvailability(sessionData);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      flatMap((isSessionAvailable: boolean) \u003d\u003e {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!isSessionAvailable \u0026\u0026 this.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"          return this.openSessionFixConfirmation();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          return of(null);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      flatMap((sessionFixPermission: boolean | null) \u003d\u003e {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (sessionFixPermission \u003d\u003d\u003d null) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"          // No Session Fix Necessary"},{"lineNumber":178,"author":{"gitId":"-"},"content":"          return of(null);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } if (sessionFixPermission \u003d\u003d\u003d true) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"          return this.attemptSessionAvailabilityFix(this.sessionData);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"          throw new Error(\u0027You cannot proceed without the required repository.\u0027);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      flatMap((isFixAttempted: boolean | null) \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (isFixAttempted \u003d\u003d\u003d null) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"          // If no fix has been attempted, there is no need to verify fix outcome."},{"lineNumber":188,"author":{"gitId":"-"},"content":"          return of(true);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        } else if (isFixAttempted \u003d\u003d\u003d true) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"          // Verify that Repository has been created if a fix attempt has occurred."},{"lineNumber":191,"author":{"gitId":"-"},"content":"          return this.verifySessionAvailability(this.sessionData);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      flatMap((isSessionCreated: boolean) \u003d\u003e {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (!isSessionCreated) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"          throw new Error(\u0027Session Availability Fix failed.\u0027);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return this.labelService.synchronizeRemoteLabels();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"  public getPhaseDetail() {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    return this.orgName.concat(\u0027/\u0027).concat(this.repoName);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d null;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":3,"-":208}},{"path":"src/app/core/services/upload.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"export const SUPPORTED_FILE_TYPES \u003d [\u0027gif\u0027, \u0027jpeg\u0027, \u0027jpg\u0027, \u0027png\u0027, \u0027docx\u0027, \u0027gz\u0027, \u0027log\u0027, \u0027pdf\u0027, \u0027pptx\u0027, \u0027txt\u0027, \u0027xlsx\u0027, \u0027zip\u0027];"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"export const FILE_TYPE_SUPPORT_ERROR \u003d \u0027We don\\\u0027t support that file type.\u0027 +"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"  \u0027 Try again with \u0027 + SUPPORTED_FILE_TYPES.join(\u0027, \u0027) + \u0027.\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"})"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export class UploadService {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  uploadFile(base64File: string | ArrayBuffer, userFilename: string) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    let base64String: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    if (base64File instanceof ArrayBuffer) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      base64String \u003d String.fromCharCode.apply(null, new Uint16Array(base64File));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      base64String \u003d base64File;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    const fileType \u003d userFilename.split(\u0027.\u0027).pop();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    if (SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase())) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      base64String \u003d base64String.split(\u0027,\u0027)[1];"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      const onlineFilename \u003d uuid();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      return this.githubService.uploadFile(`${onlineFilename}.${fileType}`, base64String);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"      return throwError(FILE_TYPE_SUPPORT_ERROR);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  isSupportedFileType(fileName): boolean {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    const fileType \u003d fileName.split(\u0027.\u0027).pop();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    return SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":4,"-":35}},{"path":"src/app/phase-bug-reporting/new-issue/new-issue.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../../shared/view-issue/view-issue.component\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-new-issue\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./new-issue.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./new-issue.component.css\u0027]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class NewIssueComponent implements OnInit {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  newIssueForm: FormGroup;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService, private formBuilder: FormBuilder,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService, public labelService: LabelService,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"              private router: Router) { }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    this.newIssueForm \u003d this.formBuilder.group({"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      title: [\u0027\u0027, Validators.required],"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"      description: [\u0027No details provided.\u0027],"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      severity: [\u0027\u0027, Validators.required],"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      type: [\u0027\u0027, Validators.required],"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SUBMIT;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  submitNewIssue(form: NgForm) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    if (this.newIssueForm.invalid) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"    this.issueService.createIssue(this.title.value,"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"      Issue.updateDescription(this.description.value),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      this.severity.value, this.type.value).pipe(finalize(() \u003d\u003e this.isFormPending \u003d false))"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":46,"author":{"gitId":"-"},"content":"        newIssue \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          this.issueService.updateLocalStore(newIssue);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          this.router.navigateByUrl(`phaseBugReporting/issues/${newIssue.id}`);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          error \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  get title() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027title\u0027);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  get description() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027description\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  get severity() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027severity\u0027);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  get type() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027type\u0027);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":4,"-":67}},{"path":"src/app/phase-bug-reporting/phase-bug-reporting.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../core/services/permission.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  selector: \u0027app-phase-bug-reporting\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./phase-bug-reporting.component.html\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./phase-bug-reporting.component.css\u0027]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class PhaseBugReportingComponent implements OnInit {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  readonly displayedColumns \u003d ["},{"lineNumber":14,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.DELETE_ISSUE,"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor(public permissions: PermissionService,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"              public userService: UserService) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":36}},{"path":"src/app/phase-moderation/phase-moderation.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssuesFilter } from \u0027../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../core/services/error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../core/services/phase.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../core/services/data.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../core/services/label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../core/services/github.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  selector: \u0027app-phase-moderation\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./phase-moderation.component.html\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./phase-moderation.component.css\u0027]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"})"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"export class PhaseModerationComponent implements OnInit {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  displayedColumns \u003d ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TODO,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  public teamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d [ACTION_BUTTONS.VIEW_IN_WEB, ACTION_BUTTONS.FIX_ISSUE];"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              public userService: UserService, private labelService: LabelService, private githubService: GithubService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              private dataService: DataService) { }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(this.teamFilter);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  get teamList(): string[] {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    const teams \u003d this.dataService.getTeams();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[Phase.phaseModeration][this.userService.currentUser.role]) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_TEAM_ASSIGNED\u0027:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...this.userService.currentUser.allocatedTeams.map(team \u003d\u003e team.id)];"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      case \u0027NO_FILTER\u0027:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...teams];"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  updateDisplayedTeam(newTeam: string) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.teamFilter \u003d newTeam;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.table.issues.teamFilter \u003d this.teamFilter;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":64}},{"path":"src/app/phase-team-response/issues-pending/issues-pending.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027../../shared/issue-tables/IssuesDataTable\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-pending\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-pending.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-pending.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class IssuesPendingComponent implements OnInit, OnChanges {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  displayedColumns;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":20,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.RESPOND_TO_ISSUE,"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.MARK_AS_RESPONDED,"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"              public permissions: PermissionService, public userService: UserService) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role !\u003d\u003d UserRole.Student) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":34,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      return (!this.issueService.hasTeamResponse(issue.id) || (!issue.status || issue.status \u003d\u003d\u003d \u0027Incomplete\u0027)) \u0026\u0026"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        !issue.duplicateOf;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":68}},{"path":"src/app/phase-team-response/issues-responded/issues-responded.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027../../shared/issue-tables/IssuesDataTable\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-responded\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-responded.component.html\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-responded.component.css\u0027],"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class IssuesRespondedComponent implements OnInit, OnChanges {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  displayedColumns: string[];"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.MARK_AS_PENDING,"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService, public userService: UserService) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role \u003d\u003d\u003d UserRole.Student) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":31,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":42,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      return this.issueService.hasTeamResponse(issue.id) \u0026\u0026 !issue.duplicateOf \u0026\u0026"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        (issue.status \u003d\u003d\u003d \u0027Done\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":69}},{"path":"src/app/phase-tester-response/issue-pending/issue-pending.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-pending\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-pending.component.html\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-pending.component.css\u0027]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"})"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class IssuePendingComponent implements OnInit {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  readonly displayedColumns \u003d ["},{"lineNumber":15,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.RESPOND_TO_ISSUE,"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.MARK_AS_RESPONDED,"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor() { }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      return (!issue.status || issue.status \u003d\u003d\u003d STATUS.Incomplete) \u0026\u0026 !!issue.issueComment;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":39}},{"path":"src/app/phase-tester-response/issue-responded/issue-responded.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent, TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-responded\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-responded.component.html\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-responded.component.css\u0027]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"})"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class IssueRespondedComponent implements OnInit {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  readonly displayedColumns  \u003d ["},{"lineNumber":14,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.MARK_AS_PENDING,"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  constructor() { }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      return (issue.status \u003d\u003d\u003d STATUS.Done) \u0026\u0026 !!issue.issueComment;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":37}},{"path":"src/app/shared/comment-editor/comment-editor.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"commentForm\" style\u003d\"min-height: 350px\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-tab-group class\u003d\"mat-elevation-z1\" animationDuration\u003d\"0ms\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cmat-tab label\u003d\"Write\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \u003cdiv #dropArea class\u003d\"tab-content\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"           (dragleave)\u003d\"onDragExit($event)\" (dragenter)\u003d\"onDragEnter($event)\" (drop)\u003d\"onDrop($event)\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"           (dragover)\u003d\"enableFileDrop($event)\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"        \u003cmat-form-field appearance\u003d\"outline\" style\u003d\"width: 100%\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"          \u003cmat-label\u003e\u003c/mat-label\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"          \u003ctextarea (paste)\u003d\"onPaste($event)\" #commentTextArea (dragover)\u003d\"disableCaretMovement($event)\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                    id\u003d\"{{ this.id }}\" formControlName\u003d\"{{ this.id }}\" matInput placeholder\u003d\"Description\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"                    cdkTextareaAutosize #autosize\u003d\"cdkTextareaAutosize\" cdkAutosizeMinRows\u003d\"10\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                    cdkAutosizeMaxRows\u003d\"20\"\u003e\u003c/textarea\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"commentField.errors \u0026\u0026 commentField.errors[\u0027required\u0027] \u0026\u0026 commentField.touched\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            Description required."},{"lineNumber":16,"author":{"gitId":"-"},"content":"          \u003c/mat-error\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"drag-and-drop\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"!isInErrorState\"\u003e Attach files by dragging \u0026 dropping or select them by clicking here. \u003c/span\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"isInErrorState\" class\u003d\"error\"\u003e {{uploadErrorMessage}} \u003c/span\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \u003cinput #fileInput [disabled]\u003d\"this.commentField.disabled\""},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"                   [accept]\u003d\"SUPPORTED_FILE_TYPES\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"                   type\u003d\"file\" class\u003d\"file\" (change)\u003d\"onFileInputUpload($event, fileInput)\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003c/mat-form-field\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003c/mat-tab\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmat-tab label\u003d\"Preview\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"tab-content\" style\u003d\"min-height: 228px\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003cmarkdown #markdownArea *ngIf\u003d\"commentField.value !\u003d\u003d \u0027\u0027\" [data]\u003d\"commentField.value\"\u003e\u003c/markdown\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"commentField.value \u003d\u003d\u003d\u0027\u0027\"\u003e Nothing to preview. \u003c/div\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/mat-tab\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c/mat-tab-group\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"anubh-v":1,"-":34}},{"path":"src/app/shared/comment-editor/comment-editor.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AbstractControl, FormGroup } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { FILE_TYPE_SUPPORT_ERROR, SUPPORTED_FILE_TYPES, UploadService } from \u0027../../core/services/upload.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const DISPLAYABLE_CONTENT \u003d [\u0027gif\u0027, \u0027jpeg\u0027, \u0027jpg\u0027, \u0027png\u0027];"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const MAX_UPLOAD_SIZE \u003d 10000000; // 10MB"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-comment-editor\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./comment-editor.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./comment-editor.component.css\u0027],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class CommentEditorComponent implements OnInit {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  readonly SUPPORTED_FILE_TYPES \u003d SUPPORTED_FILE_TYPES;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  constructor(private uploadService: UploadService,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"              private electronService: ElectronService) {}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  @Input() commentField: AbstractControl; // Compulsory Input"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  @Input() commentForm: FormGroup; // Compulsory Input"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  @Input() id: string; // Compulsory Input"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() initialDescription?: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  // Allows the comment editor to control the overall form\u0027s completeness."},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() isFormPending?: boolean;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Output() isFormPendingChange: EventEmitter\u003cboolean\u003e \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Allow the comment editor to control the text of the submit button to prompt the user."},{"lineNumber":34,"author":{"gitId":"-"},"content":"  @Input() submitButtonText?: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  @Output() submitButtonTextChange: EventEmitter\u003cstring\u003e \u003d new EventEmitter\u003cstring\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  formatFileUploadingButtonText: (string) \u003d\u003e string \u003d ((currentButtonText: string) \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    return currentButtonText + \u0027 (Waiting for File Upload to finish...)\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  initialSubmitButtonText: string;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  lastUploadingTime: string;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027dropArea\u0027) dropArea;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027commentTextArea\u0027) commentTextArea;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027markdownArea\u0027) markdownArea;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  dragActiveCounter \u003d 0;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  uploadErrorMessage: string;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    if (this.initialDescription !\u003d\u003d undefined) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      this.commentField.setValue(this.initialDescription);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    if (this.commentField \u003d\u003d\u003d undefined || this.commentForm \u003d\u003d\u003d undefined || this.id \u003d\u003d\u003d undefined) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      throw new Error(\u0027Comment Editor\\\u0027s compulsory properties are not defined.\u0027);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.initialSubmitButtonText \u003d this.submitButtonText;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  onDragEnter(event) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.dragActiveCounter++;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box\u0027);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"  // Prevent cursor in textarea from moving when file is dragged over it."},{"lineNumber":74,"author":{"gitId":"-"},"content":"  disableCaretMovement(event) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  // To enable file drop in non-input elements, the dragOver event must be cancelled."},{"lineNumber":79,"author":{"gitId":"-"},"content":"  enableFileDrop(event) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  onDrop(event) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    const files \u003d event.dataTransfer.files;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    if (files.length \u003e 0) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(files[0]);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.focus();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  onDragExit(event) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  onFileInputUpload(event, fileInput) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    const files \u003d fileInput.files;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    if (files.length \u003e 0) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(files[0]);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      fileInput.value \u003d \u0027\u0027;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  updateParentFormsSubmittability(isFormPending: boolean, submitButtonText: string) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      this.isFormPendingChange.emit(isFormPending);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      this.submitButtonTextChange.emit(submitButtonText);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"  readAndUploadFile(file: File): void {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    this.uploadErrorMessage \u003d null;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const reader \u003d new FileReader();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    const filename \u003d file.name;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    const insertedText \u003d this.insertUploadingText(filename);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    if (file.size \u003e\u003d MAX_UPLOAD_SIZE) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      this.handleUploadError(\u0027Oops, file is too big. Keep it under 10MB.\u0027, insertedText);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    if (!this.uploadService.isSupportedFileType(filename)) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      this.handleUploadError(FILE_TYPE_SUPPORT_ERROR, insertedText);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    // Log the most recent upload."},{"lineNumber":139,"author":{"gitId":"-"},"content":"    this.lastUploadingTime \u003d new Date().getTime().toString();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    const currentFileUploadTime \u003d this.lastUploadingTime;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    // Prevents Form Submission during Upload"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    this.updateParentFormsSubmittability(true, this.formatFileUploadingButtonText(this.initialSubmitButtonText));"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    reader.onload \u003d () \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.uploadService.uploadFile(reader.result, filename).subscribe((response) \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        this.insertUploadUrl(filename, response.data.content.download_url);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      }, (error) \u003d\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        this.handleUploadError(error, insertedText);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"          this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      }, () \u003d\u003e {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"          this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    reader.readAsDataURL(file);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  onPaste(event) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    const items \u003d event.clipboardData.items;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    let blob \u003d null;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    for (const item of items) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      if (item.type.indexOf(\u0027image\u0027) \u003d\u003d\u003d 0) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        blob \u003d item.getAsFile();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    if (blob) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(blob);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  get isInErrorState(): boolean {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    return !!this.uploadErrorMessage;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  private handleUploadError(error, insertedText: string) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    if (error instanceof HttpErrorResponse) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d \u0027Something went wrong while uploading your file. Please try again.\u0027;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d error;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    this.commentField.setValue(this.commentField.value.replace(insertedText, \u0027\u0027));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  private insertUploadingText(filename: string): string {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    const originalDescription \u003d this.commentField.value;"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    const fileType \u003d filename.split(\u0027.\u0027).pop();"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    let toInsert: string;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    if (DISPLAYABLE_CONTENT.includes(fileType.toLowerCase())) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      toInsert \u003d `![Uploading ${filename}...]\\n`;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      toInsert \u003d `[Uploading ${filename}...]\\n`;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    const cursorPosition \u003d this.commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    const endOfLineIndex \u003d originalDescription.indexOf(\u0027\\n\u0027, cursorPosition);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    const nextCursorPosition \u003d cursorPosition + toInsert.length;"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    if (endOfLineIndex \u003d\u003d\u003d -1) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      if (this.commentField.value \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        this.commentField.setValue(toInsert);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        this.commentField.setValue(`${this.commentField.value}\\n${toInsert}`);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      const startTillNewline \u003d originalDescription.slice(0, endOfLineIndex + 1);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      const newlineTillEnd \u003d originalDescription.slice(endOfLineIndex);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      this.commentField.setValue(`${startTillNewline + toInsert + newlineTillEnd}`);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.setSelectionRange(nextCursorPosition, nextCursorPosition);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    return toInsert;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"  private insertUploadUrl(filename: string, uploadUrl: string) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    const cursorPosition \u003d this.commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    const startIndexOfString \u003d this.commentField.value.indexOf(`[Uploading ${filename}...]`);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    const endIndexOfString \u003d startIndexOfString + `[Uploading ${filename}...]`.length;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    const endOfInsertedString \u003d startIndexOfString + `[${filename}](${uploadUrl})`.length;"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    this.commentField.setValue("},{"lineNumber":230,"author":{"gitId":"-"},"content":"      this.commentField.value.replace(`[Uploading ${filename}...]`, `[${filename}](${uploadUrl})`));"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    if (cursorPosition \u003e startIndexOfString - 1 \u0026\u0026 cursorPosition \u003c\u003d endIndexOfString) { // within the range of uploading text"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.setSelectionRange(endOfInsertedString, endOfInsertedString);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.setSelectionRange(cursorPosition, cursorPosition);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"  private removeHighlightBorderStyle() {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    this.dragActiveCounter--;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    if (this.dragActiveCounter \u003d\u003d\u003d 0) { // To make sure when dragging over a child element, drop area is still highlight."},{"lineNumber":242,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box\u0027);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":245}},{"path":"src/app/shared/error-toasters/form-error/form-error.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  selector: \u0027app-form-error\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./form-error.component.html\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"export class FormErrorComponent {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public snackBarRef: MatSnackBarRef\u003cFormErrorComponent\u003e,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Inject(MAT_SNACK_BAR_DATA) public data: any) {}"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":11}},{"path":"src/app/shared/error-toasters/general-message-error/general-message-error.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  selector: \u0027app-general-message-error\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./general-message-error.component.html\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"export class GeneralMessageErrorComponent {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public snackBarRef: MatSnackBarRef\u003cGeneralMessageErrorComponent\u003e,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Inject(MAT_SNACK_BAR_DATA) public data: any) {}"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":11}},{"path":"src/app/shared/error-toasters/invalid-credentials-error/invalid-credentials-error.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  selector: \u0027app-form-error\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./invalid-credentials-error.component.html\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"export class InvalidCredentialsErrorComponent {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public snackBarRef: MatSnackBarRef\u003cInvalidCredentialsErrorComponent\u003e,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Inject(MAT_SNACK_BAR_DATA) public data: any) {}"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":11}},{"path":"src/app/shared/issue-tables/issue-tables.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ctable mat-table [dataSource]\u003d\"this.issues\" matSort class\u003d\"mat-elevation-z8\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003c!-- ID Column --\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"id\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef mat-sort-header\u003e ID \u003c/th\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default;\"\u003e{{issue.id}}\u003c/span\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003c!-- Title Column --\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"title\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef mat-sort-header\u003e Title \u003c/th\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003ca class\u003d\"no-underline link-grey-dark\" [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\"\u003e {{this.fitTitleText(issue.title)}} \u003c/a\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c!-- Team Assigned Column --\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cng-container *ngIf\u003d\"userService.currentUser.role !\u003d\u003d \u0027Student\u0027\" matColumnDef\u003d\"teamAssigned\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef mat-sort-header\u003e Team \u003c/th\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e {{ issue.teamAssigned \u0026\u0026 issue.teamAssigned.id || \u0027-\u0027}} \u003c/td\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  \u003c!-- Type Column --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"type\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell [style.width]\u003d\"permissions.isTeamResponseEditable() ? \u002710%\u0027 : \u002715%\u0027\" *matHeaderCellDef mat-sort-header\u003e Type \u003c/th\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cspan (click)\u003d\"$event.stopPropagation()\" [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(issue.type))\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              {{issue.type || \u0027-\u0027}}"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/span\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c!-- Severity Column --\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"severity\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell [style.width]\u003d\"permissions.isTeamResponseEditable() ? \u00279%\u0027 : \u002712%\u0027\" *matHeaderCellDef mat-sort-header\u003e Severity \u003c/th\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cspan (click)\u003d\"$event.stopPropagation()\" [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(issue.severity))\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          {{issue.severity || \u0027-\u0027}}"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003c!--Response Tag Column--\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"responseTag\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef mat-sort-header\u003e Response \u003c/th\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cspan (click)\u003d\"$event.stopPropagation()\" *ngIf\u003d\"issue.responseTag\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"              [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(issue.responseTag))\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          {{issue.responseTag}}"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!issue.responseTag\" style\u003d\"margin-left: 10%\"\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cmat-icon matTooltip\u003d\"Should not be empty\" matTooltipPosition\u003d\"above\" color\u003d\"warn\"\u003ewarning\u003c/mat-icon\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c!--Assignee Column--\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"assignees\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003cth [style.width]\u003d\"userService.currentUser.role \u003d\u003d\u003d \u0027Student\u0027 ? \u002715%\u0027 : \u002710%\u0027\" mat-header-cell *matHeaderCellDef mat-sort-header\u003e Assignees \u003c/th\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default;\" *ngIf\u003d\"issue.assignees.length !\u003d\u003d 0\"\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          {{issue.assignees.join(\u0027, \u0027)}}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.assignees.length \u003d\u003d\u003d 0\" style\u003d\"margin-left: 5%\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          \u003cmat-icon matTooltip\u003d\"We strongly recommend assigning all issues to someone\""},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    matTooltipPosition\u003d\"above\" style\u003d\"color: #FFAB40;\"\u003ewarning\u003c/mat-icon\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  \u003c!-- Duplicated Issues Column --\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"duplicatedIssues\"\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef\u003e Duplicates \u003c/th\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"(issueService.getDuplicateIssuesFor(issue) | async).length \u003d\u003d\u003d 0\"\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        -"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      \u003cmat-chip-list *ngFor\u003d\"let duplicateIssue of (issueService.getDuplicateIssuesFor(issue) | async)\" style\u003d\"display: inline-block; margin-left: 5px;\"\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        \u003cmat-chip [routerLink]\u003d\"[\u0027issues/\u0027 + duplicateIssue.id]\""},{"lineNumber":80,"author":{"gitId":"-"},"content":"                  [matTooltip]\u003d\"duplicateIssue.title\" matTooltipPosition\u003d\"above\""},{"lineNumber":81,"author":{"gitId":"-"},"content":"                  style\u003d\"font-size: 12px; cursor: pointer\"\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          #{{duplicateIssue.id}}"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003c/mat-chip\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      \u003c/mat-chip-list\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  \u003c!-- To do Column --\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"Todo Remaining\"\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef mat-sort-header\u003e Todo Remaining \u003c/th\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"isTodoListChecked(issue) \u0026\u0026 issue.issueDisputes.length \u003e 0\"\u003e \u003cfont color\u003d\"green\"\u003eAll tasks are completed\u003c/font\u003e \u003c/span\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!isTodoListChecked(issue)\"\u003e \u003cfont color\u003d\"red\"\u003e{{ issue.issueDisputes.length - todoFinished(issue) }}/{{ issue.issueDisputes.length }} tasks pending.\u003c/font\u003e\u003c/span\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cprogress *ngIf\u003d\"issue.issueDisputes.length \u003e 0\" value\u003d{{todoFinished(issue)}} max\u003d{{issue.issueDisputes.length}} role\u003d\"progressbar\" style\u003d\"width: 100%\" aria-valuenow\u003d\"100\" aria-valuemin\u003d\"0\" aria-valuemax\u003d\"100\"\u003e\u003c/progress\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.issueDisputes.length \u003d\u003d\u003d 0\"\u003e No Todo List for this issue \u003c/span\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  \u003c!-- Action Buttons Column --\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"actions\"\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003cth mat-header-cell *matHeaderCellDef\u003e Actions \u003c/th\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003ctd mat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      \u003cbutton mat-button matTooltip\u003d\"View this issue in web-browser\" *ngIf\u003d\"this.isActionVisible(action_buttons.VIEW_IN_WEB)\""},{"lineNumber":104,"author":{"gitId":"-"},"content":"              (click)\u003d\"this.githubService.viewIssueInBrowser(issue.id)\" style\u003d\""},{"lineNumber":105,"author":{"gitId":"-"},"content":"              transform: scale(0.8)\"\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003elink\u003c/mat-icon\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cbutton *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 !issue.status"},{"lineNumber":109,"author":{"gitId":"anubh-v"},"content":"       \u0026\u0026 this.isActionVisible(action_buttons.RESPOND_TO_ISSUE); else tryEditIssue\""},{"lineNumber":110,"author":{"gitId":"-"},"content":"              [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\" mat-button color\u003d\"accent\""},{"lineNumber":111,"author":{"gitId":"anubh-v"},"content":"              style\u003d\"transform: scale(0.8)\" matTooltip\u003d\"Respond to this issue\"\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003efeedback\u003c/mat-icon\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":114,"author":{"gitId":"anubh-v"},"content":"      \u003cng-template #tryEditIssue\u003e"},{"lineNumber":115,"author":{"gitId":"anubh-v"},"content":"        \u003cbutton *ngIf\u003d\"permissions.isIssueEditable() \u0026\u0026 this.isActionVisible(action_buttons.FIX_ISSUE)\""},{"lineNumber":116,"author":{"gitId":"anubh-v"},"content":"                mat-button color\u003d\"accent\""},{"lineNumber":117,"author":{"gitId":"anubh-v"},"content":"                style\u003d\"transform: scale(0.8)\" matTooltip\u003d\"Edit this issue\" \u003e"},{"lineNumber":118,"author":{"gitId":"anubh-v"},"content":"          \u003cmat-icon\u003eedit\u003c/mat-icon\u003e"},{"lineNumber":119,"author":{"gitId":"anubh-v"},"content":"        \u003c/button\u003e"},{"lineNumber":120,"author":{"gitId":"anubh-v"},"content":"      \u003c/ng-template\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003cbutton *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 issue.status"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u0026\u0026 this.isActionVisible(action_buttons.MARK_AS_RESPONDED)\""},{"lineNumber":123,"author":{"gitId":"-"},"content":"              mat-button color\u003d\"primary\" (click)\u003d\"markAsResponded(issue)\""},{"lineNumber":124,"author":{"gitId":"anubh-v"},"content":"              style\u003d\"transform: scale(0.8)\" matTooltip\u003d\"Mark this issue as Responded\"\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003echeck_circle\u003c/mat-icon\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u003cbutton color\u003d\"primary\" matTooltip\u003d\"Mark this issue as Pending\" mat-button (click)\u003d\"markAsPending(issue)\""},{"lineNumber":128,"author":{"gitId":"-"},"content":"              style\u003d\"transform: scale(0.8)\" *ngIf\u003d\"(userService.currentUser.role \u003d\u003d\u003d \u0027Student\u0027 || userService.currentUser.role \u003d\u003d\u003d \u0027Admin\u0027)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"              \u0026\u0026 this.isActionVisible(action_buttons.MARK_AS_PENDING)\"\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003ecancel\u003c/mat-icon\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \u003cbutton mat-button color\u003d\"warn\" *ngIf\u003d\"permissions.isIssueDeletable() \u0026\u0026 !issuesPendingDeletion[issue.id]"},{"lineNumber":133,"author":{"gitId":"-"},"content":"          \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\""},{"lineNumber":134,"author":{"gitId":"-"},"content":"              (click)\u003d\"deleteIssue(issue.id)\" matTooltip\u003d\"Delete this issue\" style\u003d\"transform: scale(0.8)\"\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003edelete_outline\u003c/mat-icon\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \u003cmat-spinner color\u003d\"warn\" [diameter]\u003d\"25\" style\u003d\"display: inline; padding-right: 30px; margin-left: 5px\""},{"lineNumber":138,"author":{"gitId":"-"},"content":"                   *ngIf\u003d\"issuesPendingDeletion[issue.id] \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\" \u003e\u003c/mat-spinner\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    \u003c/td\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  \u003ctr mat-header-row *matHeaderRowDef\u003d\"this.headers\"\u003e\u003c/tr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  \u003ctr mat-row *matRowDef\u003d\"let issue; columns: this.headers;\" [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\" style\u003d\"cursor: pointer\"\u003e\u003c/tr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"\u003c/table\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"\u003cmat-card *ngIf\u003d\"this.issues.isLoading$ | async\""},{"lineNumber":146,"author":{"gitId":"-"},"content":"          style\u003d\"display: flex; justify-content: center; align-items: center\"\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003cmat-progress-spinner color\u003d\"primary\" mode\u003d\"indeterminate\" diameter\u003d\"50\" strokeWidth\u003d\"5\"\u003e\u003c/mat-progress-spinner\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003c/mat-card\u003e"},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003cmat-paginator [pageSize]\u003d\"20\" [pageSizeOptions]\u003d\"[10, 20, 50]\"\u003e\u003c/mat-paginator\u003e"}],"authorContributionMap":{"anubh-v":10,"-":139}},{"path":"src/app/shared/issue-tables/issue-tables.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component, Input, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027./IssuesDataTable\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { MatPaginator, MatSort } from \u0027@angular/material\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase, PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"export enum ACTION_BUTTONS {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  VIEW_IN_WEB,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  MARK_AS_RESPONDED,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  MARK_AS_PENDING,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  RESPOND_TO_ISSUE,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  FIX_ISSUE,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  DELETE_ISSUE"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"export enum TABLE_COLUMNS {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ID \u003d \u0027id\u0027,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  TITLE \u003d \u0027title\u0027,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  TEAM_ASSIGNED \u003d \u0027teamAssigned\u0027,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  TYPE \u003d \u0027type\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  SEVERITY \u003d \u0027severity\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  RESPONSE \u003d \u0027responseTag\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ASSIGNEE \u003d \u0027assignees\u0027,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  DUPLICATED_ISSUES \u003d \u0027duplicatedIssues\u0027,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  TODO \u003d \u0027Todo Remaining\u0027,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  ACTIONS \u003d \u0027actions\u0027"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-tables\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-tables.component.html\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-tables.component.css\u0027]"},{"lineNumber":40,"author":{"gitId":"-"},"content":"})"},{"lineNumber":41,"author":{"gitId":"-"},"content":"export class IssueTablesComponent implements OnInit, AfterViewInit {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  @Input() headers: string[];"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  @Input() actions: ACTION_BUTTONS[];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  @Input() filters?: any \u003d undefined;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  @ViewChild(MatSort) sort: MatSort;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  @ViewChild(MatPaginator) paginator: MatPaginator;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  issues: IssuesDataTable;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  issuesPendingDeletion: {[id: number]: boolean};"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  private readonly action_buttons \u003d ACTION_BUTTONS;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  constructor(public userService: UserService,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"              private permissions: PermissionService,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"              private labelService: LabelService,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"              private issueService: IssueService,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService) { }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.issues \u003d new IssuesDataTable(this.issueService, this.errorHandlingService, this.sort,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      this.paginator, this.headers, this.filters);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {};"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  ngAfterViewInit(): void {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      this.issues.loadIssues();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"   * Formats the title text to account for those that contain long words."},{"lineNumber":76,"author":{"gitId":"-"},"content":"   * @param title - Title of Issue that is to be displayed in the Table Row."},{"lineNumber":77,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  fitTitleText(title: string): string {"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    // Arbitrary Length of Characters beyond which an overflow occurs."},{"lineNumber":81,"author":{"gitId":"-"},"content":"    const MAX_WORD_LENGTH \u003d 43;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    const SPLITTER_TEXT \u003d \u0027 \u0027;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const ELLIPSES \u003d \u0027...\u0027;"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    return title.split(SPLITTER_TEXT).map(word \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      if (word.length \u003e MAX_WORD_LENGTH) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return word.substring(0, MAX_WORD_LENGTH - 5).concat(ELLIPSES);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      return word;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }).join(SPLITTER_TEXT);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  isActionVisible(action: ACTION_BUTTONS): boolean {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return this.actions.includes(action);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  markAsResponded(issue: Issue) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Done;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe((updatedIssue) \u003d\u003e {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }, error \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  isResponseEditable() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable() || this.permissions.isTesterResponseEditable();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"  markAsPending(issue: Issue) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe((updatedIssue) \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }, error \u003d\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"geshuming"},"content":"  /**"},{"lineNumber":124,"author":{"gitId":"geshuming"},"content":"   * Gets the number of resolved disputes."},{"lineNumber":125,"author":{"gitId":"geshuming"},"content":"   */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  todoFinished(issue: Issue): number {"},{"lineNumber":127,"author":{"gitId":"geshuming"},"content":"    return issue.issueDisputes.length - issue.numOfUnresolvedDisputes();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"geshuming"},"content":"  /**"},{"lineNumber":131,"author":{"gitId":"geshuming"},"content":"   * Checks if all the disputes are resolved."},{"lineNumber":132,"author":{"gitId":"geshuming"},"content":"   */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  isTodoListChecked(issue: Issue): boolean {"},{"lineNumber":134,"author":{"gitId":"geshuming"},"content":"    return issue.issueDisputes \u0026\u0026 issue.numOfUnresolvedDisputes() \u003d\u003d\u003d 0;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"  deleteIssue(id: number) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      ...this.issuesPendingDeletion,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      [id]: true,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    this.issueService.deleteIssue(id).pipe(finalize(() \u003d\u003e {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      const { [id]: issueRemoved, ...theRest } \u003d this.issuesPendingDeletion;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      this.issuesPendingDeletion \u003d theRest;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    })).subscribe((removedIssue) \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geshuming":8,"-":143}},{"path":"src/app/shared/issue/description/description.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { finalize, map, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../../view-issue/view-issue.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { throwError } from \u0027rxjs\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-description\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./description.component.html\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./description.component.css\u0027],"},{"lineNumber":19,"author":{"gitId":"-"},"content":"})"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export class DescriptionComponent implements OnInit {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  issueDescriptionForm: FormGroup;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() title: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Output() changeEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"              private formBuilder: FormBuilder,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"              private dialog: MatDialog,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              public permissions: PermissionService) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm \u003d this.formBuilder.group({"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"      description: [\u0027\u0027],"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(true);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm.setValue({"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      description: this.issue[\u0027description\u0027] || \u0027\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  updateDescription(form: NgForm) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    if (this.issueDescriptionForm.invalid) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":61,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return issue.description \u003d\u003d\u003d this.issue.description;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      flatMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          return this.issueService.updateIssue(this.getUpdatedIssue());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          this.conflict \u003d new Conflict(this.issue.description, this.issueService.issues[this.issue.id].description);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          this.viewChanges();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      finalize(() \u003d\u003e this.isSavePending \u003d false)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    ).subscribe((editedIssue: Issue) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(editedIssue);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      form.resetForm();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":99,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    const newIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    newIssue.description \u003d Issue.updateDescription(this.issueDescriptionForm.get(\u0027description\u0027).value);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    return newIssue;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":1,"-":111}},{"path":"src/app/shared/label-dropdown/label-dropdown.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"dropdownForm\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-form-field style\u003d\"width: 100%;\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cmat-select [ngClass]\u003d\"dropdownTextColor\" formControlName\u003d\"{{attributeName}}\" placeholder\u003d\"{{this.labelService.getLabelTitle(attributeName)}}\""},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"      (selectionChange)\u003d\"setSelectedLabelColor($event.value)\" [ngStyle]\u003d\"this.labelService.setLabelStyle(this.selectedColor)\" required\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cmat-select-trigger\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"        {{dropdownControl.value}}"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \u003c/mat-select-trigger\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \u003cmat-option *ngFor\u003d\"let value of labelList\" [value]\u003d\"value.labelValue\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        \u003cmat-icon [ngStyle]\u003d\"{\u0027color\u0027: \u0027#\u0027 + value.labelColor}\"\u003estop\u003c/mat-icon\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        \u003cspan\u003e {{value.labelValue}}\u003c/span\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \u003c/mat-option\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003c/mat-select\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmat-error *ngIf\u003d\"dropdownControl.errors \u0026\u0026 dropdownControl.errors[\u0027required\u0027] \u0026\u0026 dropdownControl.touched\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      {{this.labelService.getLabelTitle(attributeName)}} required."},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/mat-error\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003c/mat-form-field\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"anubh-v":1,"-":16}},{"path":"src/app/shared/label-dropdown/label-dropdown.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, Input } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { FormGroup, AbstractControl } from \u0027@angular/forms\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Label } from \u0027../../core/models/label.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"export const WHITE_TEXT_CLASS \u003d \u0027white-text\u0027;"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"export const BLACK_TEXT_CLASS \u003d \u0027black-text\u0027;"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  selector: \u0027app-label-dropdown\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./label-dropdown.component.html\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./label-dropdown.component.css\u0027]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class LabelDropdownComponent implements OnInit {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  dropdownControl: AbstractControl;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  @Input() attributeName: string;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  @Input() initialValue: string;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  @Input() dropdownForm: FormGroup;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  selectedColor: string;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  labelList: Label[];"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  constructor(public labelService: LabelService) { }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    this.selectedColor \u003d this.labelService.getColorOfLabel(this.initialValue);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    this.labelList \u003d this.labelService.getLabelList(this.attributeName);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    this.dropdownControl \u003d this.dropdownForm.get(this.attributeName);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  setSelectedLabelColor(labelValue: string) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    this.selectedColor \u003d this.labelService.getColorOfLabel(labelValue);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  get dropdownTextColor(): string {"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"    return this.labelService.isDarkColor(this.selectedColor) ? WHITE_TEXT_CLASS : BLACK_TEXT_CLASS;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":4,"-":35}},{"path":"src/app/shared/lib/custom-ops.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { filter, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"import { pipe } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"export function throwIfFalse(predicate, error_func) {"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"    return pipe("},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"        filter(v \u003d\u003e predicate(v)),"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"        throwIfEmpty(error_func)"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"    );"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"}"}],"authorContributionMap":{"anubh-v":9}},{"path":"src/app/shared/lib/github-paginator-parser.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { GithubResponse } from \u0027../../core/models/github/github-response.model\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":" * Get the number of paginated pages of issues specified in a GitHubResponse"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":" * @param response"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":" */"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"export function getNumberOfPages\u003cT\u003e(response: GithubResponse\u003cT\u003e): number {"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"  let numberOfPages \u003d 1;"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"  if (response.headers.link) {"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    const paginatedData \u003d githubPaginatorParser(response.headers.link);"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    numberOfPages \u003d +paginatedData[\u0027last\u0027] || 1;"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"  }"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"  return numberOfPages;"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"}"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Will return in the format of { paginateAction: number }"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Example { next: \u002715\u0027, last: \u002734\u0027, first: \u00271\u0027, prev: \u002713\u0027 }"},{"lineNumber":19,"author":{"gitId":"-"},"content":" *"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * ref: https://developer.github.com/v3/guides/traversing-with-pagination/"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * @param linkStr represent the pagination string provided by github API."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"function githubPaginatorParser(linkStr: string) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  return linkStr.split(\u0027,\u0027).map((paginateItem) \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    return paginateItem.split(\u0027;\u0027).map((curr, idx) \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      if (idx \u003d\u003d\u003d 0) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return /[^_]page\u003d(\\d+)/.exec(curr)[1];"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      if (idx \u003d\u003d\u003d 1) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return /rel\u003d\"(.+)\"/.exec(curr)[1];"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }).reduce((obj, curr) \u003d\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    obj[curr[1]] \u003d curr[0];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    return obj;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {});"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":16,"-":23}},{"path":"src/app/shared/view-issue/new-team-response/new-team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue, SEVERITY_ORDER, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { finalize, flatMap, map } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../core/services/label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { MatCheckboxChange } from \u0027@angular/material/checkbox\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-new-team-response\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./new-team-response.component.html\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./new-team-response.component.css\u0027]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"})"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export class NewTeamResponseComponent implements OnInit {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  newTeamResponseForm: FormGroup;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  teamMembers: string[];"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  duplicatedIssueList: Observable\u003cIssue[]\u003e;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private formBuilder: FormBuilder,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              public labelService: LabelService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              private dialog: MatDialog,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService) { }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    this.teamMembers \u003d this.issue.teamAssigned.teamMembers.map((member) \u003d\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      return member.loginId;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList \u003d this.getDupIssueList();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.newTeamResponseForm \u003d this.formBuilder.group({"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"      description: [\u0027No response provided.\u0027],"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      severity: [this.issue.severity, Validators.required],"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      type: [this.issue.type, Validators.required],"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      responseTag: [this.issue.responseTag, Validators.required],"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      assignees: [this.issue.assignees.map(a \u003d\u003e a.toLowerCase())],"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      duplicated: [false],"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      duplicateOf: [\u0027\u0027]"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.duplicated.valueChanges.subscribe(checked \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      if (checked) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(Validators.required);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(null);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(null);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(Validators.required);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      this.duplicateOf.updateValueAndValidity();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      this.responseTag.updateValueAndValidity();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SUBMIT;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  submitNewTeamResponse(form: NgForm) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    if (this.newTeamResponseForm.invalid) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    const latestIssue \u003d this.getUpdatedIssue();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.isSafeToSubmit().pipe("},{"lineNumber":78,"author":{"gitId":"-"},"content":"      flatMap((isSaveToSubmit: boolean) \u003d\u003e {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        const newCommentDescription \u003d latestIssue.createGithubTeamResponse();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (isSaveToSubmit) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"          return this.issueService.createTeamResponse(latestIssue);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        } else if (this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          const issueCommentId \u003d this.issueService.issues[this.issue.id].issueComment.id;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"          return this.issueService.updateIssueWithComment(latestIssue, \u003cIssueComment\u003e{"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            id: issueCommentId,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            description: newCommentDescription,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"          this.conflict \u003d new Conflict(\u0027 \u0027, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          this.viewUpdatedResponse();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"          return throwError(\u0027A response has been submitted. Please verify the changes and try again.\u0027);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      finalize(() \u003d\u003e this.isFormPending \u003d false)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    ).subscribe((updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      // updatedIssue.issueComment \u003d updatedComment;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(updatedIssue);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      form.resetForm();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit a tester response."},{"lineNumber":107,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  isSafeToSubmit(): Observable\u003cboolean\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":110,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return !issue.teamResponse;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"   * @return - an updated copy of issue with its updated value from the form."},{"lineNumber":118,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  getUpdatedIssue(): Issue {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    clone.severity \u003d this.severity.value;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    clone.type \u003d this.type.value;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    clone.assignees \u003d this.assignees.value;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    clone.responseTag \u003d this.responseTag.value;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    clone.duplicated \u003d this.duplicated.value;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    clone.duplicateOf \u003d this.duplicateOf.value;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    clone.status \u003d STATUS.Done;"},{"lineNumber":128,"author":{"gitId":"anubh-v"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.description.value);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"  dupIssueOptionIsDisabled(issue: Issue): boolean {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return SEVERITY_ORDER[this.severity.value] \u003e SEVERITY_ORDER[issue.severity] || (issue.duplicated || !!issue.duplicateOf);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  getDisabledDupOptionErrorText(issue: Issue): string {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    const reason \u003d new Array\u003cstring\u003e();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    if (this.dupIssueOptionIsDisabled(issue)) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      if (SEVERITY_ORDER[this.severity.value] \u003e SEVERITY_ORDER[issue.severity]) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        reason.push(\u0027Issue of lower priority\u0027);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      } else if (issue.duplicated || !!issue.duplicateOf) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        reason.push(\u0027A duplicated issue\u0027);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    return reason.join(\u0027, \u0027);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"  handleChangeOfDuplicateCheckbox(event: MatCheckboxChange) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    if (event.checked) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      this.responseTag.setValue(\u0027\u0027);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      this.assignees.setValue([]);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      this.responseTag.markAsUntouched();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      this.duplicateOf.setValue(\u0027\u0027);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      this.duplicateOf.markAsUntouched();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"   * Pops up a dialog that shows the updated team response that was submitted."},{"lineNumber":161,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  viewUpdatedResponse(): void {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      data: this.issueService.issues[this.issue.id],"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"  refresh(): void {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issueService.issues[this.issue.id];"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    this.issueUpdated.emit(updatedIssue);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  private getDupIssueList(): Observable\u003cIssue[]\u003e {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return this.issueService.issues$.pipe(map((issues) \u003d\u003e {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      return issues.filter((issue) \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return this.issue.id !\u003d\u003d issue.id;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  get description() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027description\u0027);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"  get severity() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027severity\u0027);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  get type() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027type\u0027);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"  get assignees() {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027assignees\u0027);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"  get responseTag() {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027responseTag\u0027);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  get duplicated() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicated\u0027);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"  get duplicateOf() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicateOf\u0027);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":207}},{"path":"src/app/shared/view-issue/team-response/team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { finalize, map, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../../issue/conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  selector: \u0027app-team-response\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./team-response.component.html\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./team-response.component.css\u0027],"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class TeamResponseComponent implements OnInit {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  responseForm: FormGroup;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              private formBuilder: FormBuilder,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private permissions: PermissionService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              private dialog: MatDialog,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    this.responseForm \u003d this.formBuilder.group({"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"      description: [\u0027\u0027],"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.responseForm.setValue({"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      description: this.issue.teamResponse || \u0027\u0027,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  updateResponse(form: NgForm) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    if (this.responseForm.invalid) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.getUpdatedIssue();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const updatedIssueComment \u003d \u003cIssueComment\u003e{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      ...updatedIssue.issueComment,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      description: updatedIssue.createGithubTeamResponse(),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.isSafeToUpdate().pipe("},{"lineNumber":68,"author":{"gitId":"-"},"content":"      flatMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          return this.issueService.updateIssueWithComment(updatedIssue, updatedIssueComment);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } else if (this.isUpdatingDeletedResponse()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          return this.issueService.createTeamResponse(updatedIssue);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          this.conflict \u003d new Conflict(this.issue.teamResponse, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          this.viewChanges();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      finalize(() \u003d\u003e this.isSavePending \u003d false)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ).subscribe((updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(updatedIssue);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      form.resetForm();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to updated an existing team response."},{"lineNumber":92,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  isSafeToUpdate(): Observable\u003cboolean\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":95,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return issue.teamResponse \u003d\u003d\u003d this.issue.teamResponse;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":103,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    return this.issue.teamResponse \u0026\u0026 !this.issueService.issues[this.issue.id].teamResponse;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  canEditIssue(): boolean {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":114,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":130,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":140,"author":{"gitId":"anubh-v"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.responseForm.get(\u0027description\u0027).value);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    if (!clone.status) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      clone.status \u003d clone.teamResponse \u003d\u003d\u003d \u0027\u0027 ? STATUS.Incomplete : STATUS.Done;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"anubh-v":2,"-":144}},{"path":"src/test.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// This file is required by karma.conf.js and loads recursively all the .spec and framework files"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import \u0027zone.js/dist/zone-testing\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { getTestBed } from \u0027@angular/core/testing\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  BrowserDynamicTestingModule,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  platformBrowserDynamicTesting"},{"lineNumber":8,"author":{"gitId":"-"},"content":"} from \u0027@angular/platform-browser-dynamic/testing\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"declare const require: any;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"// First, initialize the Angular testing environment."},{"lineNumber":13,"author":{"gitId":"-"},"content":"getTestBed().initTestEnvironment("},{"lineNumber":14,"author":{"gitId":"-"},"content":"  BrowserDynamicTestingModule,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  platformBrowserDynamicTesting()"},{"lineNumber":16,"author":{"gitId":"-"},"content":");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"// Then we find all the tests."},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"const context \u003d require.context(\u0027../tests\u0027, true, /\\.spec\\.ts$/);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"// And load the modules."},{"lineNumber":20,"author":{"gitId":"-"},"content":"context.keys().map(context);"}],"authorContributionMap":{"anubh-v":1,"-":19}},{"path":"tests/app/shared/label-dropdown/label-dropdown.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { LabelDropdownComponent, BLACK_TEXT_CLASS, WHITE_TEXT_CLASS } from \u0027../../../../src/app/shared/label-dropdown/label-dropdown.component\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"import { LabelService } from \u0027../../../../src/app/core/services/label.service\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { FormGroup, FormBuilder, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"import { SEVERITY_LABELS, COLOR_WHITE, SEVERITY } from \u0027../../../constants/label.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"describe(\u0027LabelDropdownComponent\u0027, () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"  let labelDropdownComponent: LabelDropdownComponent;"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"  let labelService: any;"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    labelService \u003d jasmine.createSpyObj(LabelService, [\u0027getLabelList\u0027,"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"      \u0027getColorOfLabel\u0027, \u0027isDarkColor\u0027]);"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"    const formGroup: FormGroup \u003d new FormBuilder().group(({"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"      title: [\u0027\u0027, Validators.required],"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"      description: [\u0027No details provided.\u0027],"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"      severity: [\u0027\u0027, Validators.required],"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"      type: [\u0027\u0027, Validators.required],"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"    }));"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    labelDropdownComponent \u003d new LabelDropdownComponent(labelService);"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    labelDropdownComponent.dropdownForm \u003d formGroup;"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"  it(\u0027should be initialised with a list of labels, an initial colour and a dropdown control\u0027, () \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"    labelDropdownComponent.attributeName \u003d SEVERITY;"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"    labelDropdownComponent.initialValue \u003d \u0027\u0027;"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"    labelService.getLabelList.and.returnValue(SEVERITY_LABELS);"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    labelService.getColorOfLabel.and.returnValue(COLOR_WHITE);"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"    labelDropdownComponent.ngOnInit();"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"    expect(labelDropdownComponent.labelList).toEqual(SEVERITY_LABELS);"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"    expect(labelDropdownComponent.selectedColor).toEqual(COLOR_WHITE);"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"    expect(labelDropdownComponent.dropdownControl).toBeDefined();"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"  it(\u0027should set its dropdown text colour based on the darkness of the current colour\u0027, () \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"    labelService.isDarkColor.and.returnValue(false);"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"    expect(labelDropdownComponent.dropdownTextColor).toBe(BLACK_TEXT_CLASS);"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"    labelService.isDarkColor.and.returnValue(true);"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"    expect(labelDropdownComponent.dropdownTextColor).toBe(WHITE_TEXT_CLASS);"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"});"}],"authorContributionMap":{"anubh-v":43}},{"path":"tests/auto-spy.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"geshuming"},"content":"/** Create an object with methods that are autoSpy-ed to use as mock dependency */"},{"lineNumber":2,"author":{"gitId":"geshuming"},"content":"export function autoSpy\u003cT\u003e(obj: new (...args: any[]) \u003d\u003e T): SpyOf\u003cT\u003e {"},{"lineNumber":3,"author":{"gitId":"geshuming"},"content":"    const res: SpyOf\u003cT\u003e \u003d {} as any;"},{"lineNumber":4,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":5,"author":{"gitId":"geshuming"},"content":"    // turns out that in target:es2015 the methods attached to the prototype are not enumerable so Object.keys returns []."},{"lineNumber":6,"author":{"gitId":"geshuming"},"content":"    // So to workaround that and keep some backwards compatibility - merge with ownPropertyNames - that disregards the enumerable property."},{"lineNumber":7,"author":{"gitId":"geshuming"},"content":"    const keys \u003d [...Object.keys(obj.prototype), ...Object.getOwnPropertyNames(obj.prototype)];"},{"lineNumber":8,"author":{"gitId":"geshuming"},"content":"    keys.forEach(key \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"geshuming"},"content":"        res[key] \u003d jasmine.createSpy(key);"},{"lineNumber":10,"author":{"gitId":"geshuming"},"content":"    });"},{"lineNumber":11,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":12,"author":{"gitId":"geshuming"},"content":"    return res;"},{"lineNumber":13,"author":{"gitId":"geshuming"},"content":"}"},{"lineNumber":14,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":15,"author":{"gitId":"geshuming"},"content":"/** Keeps the types of properties of a type but assigns type of Spy to the methods */"},{"lineNumber":16,"author":{"gitId":"geshuming"},"content":"type SpyOf\u003cT\u003e \u003d T \u0026"},{"lineNumber":17,"author":{"gitId":"geshuming"},"content":"    Partial\u003c{ [k in keyof T]: T[k] extends (...args: any[]) \u003d\u003e any ? jasmine.Spy : T[k] }\u003e;"}],"authorContributionMap":{"geshuming":17}},{"path":"tests/constants/data.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"geshuming"},"content":"import { DataFile } from \u0027../../src/app/core/models/data-file.model\u0027;"},{"lineNumber":2,"author":{"gitId":"geshuming"},"content":"import { Team } from \u0027../../src/app/core/models/team.model\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"export const csvString \u003d `"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"role,name,team"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"student,JunWei96,CS2103T-W12-3"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"admin,damithc,"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"tutor,anubh-v,CS2103T-W12-3"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"admin,geshuming,"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"tutor,jj-lim,CS2103T-W12-3"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"tutor,jj-lim,CS2103T-W12-3"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"tutor,jj-lim,CS2103T-W12-4"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"tutor,q     ,CS2103T-W12-4"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"student,003-samuel,CS2103T-W12-3"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"student,damithc,CS2103T-W12-3"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"student,RonakLakhotia,CS2103T-W12-4"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"student,ptvrajsk,CS2103T-W12-3` +"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"`                       `;"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"// jsonData is a json representation of csvString"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"export const jsonData \u003d {"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"    roles: {"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"      students: {"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"        junwei96: \u0027true\u0027,"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"        \u0027003-samuel\u0027: \u0027true\u0027,"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"        damithc: \u0027true\u0027,"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"        ronaklakhotia: \u0027true\u0027,"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"        ptvrajsk: \u0027true\u0027"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"      },"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"      tutors: { \u0027anubh-v\u0027: \u0027true\u0027, \u0027jj-lim\u0027: \u0027true\u0027, q: \u0027true\u0027 },"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"      admins: { damithc: \u0027true\u0027, geshuming: \u0027true\u0027 }"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"    \u0027team-structure\u0027: {"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"      \u0027CS2103T-W12-3\u0027: {"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"        junwei96: \u0027true\u0027,"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"        \u0027003-samuel\u0027: \u0027true\u0027,"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"        damithc: \u0027true\u0027,"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"        ptvrajsk: \u0027true\u0027"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"      },"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"      \u0027CS2103T-W12-4\u0027: { ronaklakhotia: \u0027true\u0027 }"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"    \u0027students-allocation\u0027: {"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"      junwei96: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":46,"author":{"gitId":"anubh-v"},"content":"      \u0027003-samuel\u0027: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"      damithc: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"      ronaklakhotia: { teamId: \u0027CS2103T-W12-4\u0027 },"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"      ptvrajsk: { teamId: \u0027CS2103T-W12-3\u0027 }"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"    \u0027tutors-allocation\u0027: {"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"      \u0027anubh-v\u0027: { \u0027CS2103T-W12-3\u0027: \u0027true\u0027 },"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"      \u0027jj-lim\u0027: { \u0027CS2103T-W12-3\u0027: \u0027true\u0027, \u0027CS2103T-W12-4\u0027: \u0027true\u0027 },"},{"lineNumber":54,"author":{"gitId":"anubh-v"},"content":"      q: { \u0027CS2103T-W12-4\u0027: \u0027true\u0027 }"},{"lineNumber":55,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":56,"author":{"gitId":"anubh-v"},"content":"    \u0027admins-allocation\u0027: { damithc: {}, geshuming: {} }"},{"lineNumber":57,"author":{"gitId":"geshuming"},"content":"  };"},{"lineNumber":58,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":59,"author":{"gitId":"anubh-v"},"content":"  // These are objects representing some users and teams in jsonData"},{"lineNumber":60,"author":{"gitId":"-"},"content":"const TEAM_3 \u003d new Team({"},{"lineNumber":61,"author":{"gitId":"anubh-v"},"content":"  id: \u0027CS2103T-W12-3\u0027,"},{"lineNumber":62,"author":{"gitId":"anubh-v"},"content":"  teamMembers: [ {loginId: \u0027junwei96\u0027, role: UserRole.Student},"},{"lineNumber":63,"author":{"gitId":"anubh-v"},"content":"                {loginId: \u0027003-samuel\u0027, role: UserRole.Student}  ,"},{"lineNumber":64,"author":{"gitId":"anubh-v"},"content":"                {loginId: \u0027damithc\u0027,  role: UserRole.Student},"},{"lineNumber":65,"author":{"gitId":"anubh-v"},"content":"                {loginId: \u0027ptvrajsk\u0027, role: UserRole.Student}]"},{"lineNumber":66,"author":{"gitId":"-"},"content":"});"},{"lineNumber":67,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"const TEAM_4 \u003d new Team({"},{"lineNumber":69,"author":{"gitId":"anubh-v"},"content":"  id: \u0027CS2103T-W12-4\u0027,"},{"lineNumber":70,"author":{"gitId":"anubh-v"},"content":"  teamMembers: [{loginId: \u0027ronaklakhotia\u0027, role: UserRole.Student}]"},{"lineNumber":71,"author":{"gitId":"-"},"content":"});"},{"lineNumber":72,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":73,"author":{"gitId":"anubh-v"},"content":"export const USER_JUNWEI \u003d {"},{"lineNumber":74,"author":{"gitId":"anubh-v"},"content":"  loginId: \u0027junwei96\u0027,"},{"lineNumber":75,"author":{"gitId":"anubh-v"},"content":"  role: UserRole.Student,"},{"lineNumber":76,"author":{"gitId":"anubh-v"},"content":"  team: TEAM_3"},{"lineNumber":77,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":78,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":79,"author":{"gitId":"anubh-v"},"content":"export const USER_Q \u003d {"},{"lineNumber":80,"author":{"gitId":"anubh-v"},"content":"  loginId: \u0027q\u0027,"},{"lineNumber":81,"author":{"gitId":"anubh-v"},"content":"  role: UserRole.Tutor,"},{"lineNumber":82,"author":{"gitId":"anubh-v"},"content":"  allocatedTeams: [TEAM_4]"},{"lineNumber":83,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":84,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":85,"author":{"gitId":"anubh-v"},"content":"export const USER_SHUMING \u003d {"},{"lineNumber":86,"author":{"gitId":"anubh-v"},"content":"  loginId: \u0027geshuming\u0027,"},{"lineNumber":87,"author":{"gitId":"anubh-v"},"content":"  role: UserRole.Admin,"},{"lineNumber":88,"author":{"gitId":"anubh-v"},"content":"  allocatedTeams: []"},{"lineNumber":89,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":90,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":91,"author":{"gitId":"anubh-v"},"content":"export const USER_WITH_TWO_ROLES \u003d {"},{"lineNumber":92,"author":{"gitId":"anubh-v"},"content":"  loginId: \u0027damithc\u0027,"},{"lineNumber":93,"author":{"gitId":"anubh-v"},"content":"  role: UserRole.Admin,"},{"lineNumber":94,"author":{"gitId":"anubh-v"},"content":"  allocatedTeams: []"},{"lineNumber":95,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":96,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":97,"author":{"gitId":"geshuming"},"content":"export const dataFileTeamStructure: DataFile \u003d {"},{"lineNumber":98,"author":{"gitId":"geshuming"},"content":"  teamStructure: new Map\u003cstring, Team\u003e(["},{"lineNumber":99,"author":{"gitId":"-"},"content":"    [\u0027CS2103T-W12-3\u0027, new Team({id: \u0027CS2103T-W12-3\u0027, teamMembers: ["},{"lineNumber":100,"author":{"gitId":"geshuming"},"content":"      {loginId: \u0027junwei96\u0027, role: UserRole.Student},"},{"lineNumber":101,"author":{"gitId":"geshuming"},"content":"      {loginId: \u0027003-samuel\u0027, role: UserRole.Student},"},{"lineNumber":102,"author":{"gitId":"geshuming"},"content":"      {loginId: \u0027damithc\u0027, role: UserRole.Student},"},{"lineNumber":103,"author":{"gitId":"geshuming"},"content":"      {loginId: \u0027ptvrajsk\u0027, role: UserRole.Student}"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    ]})],"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    [\u0027CS2103T-W12-4\u0027, new Team({id: \u0027CS2103T-W12-4\u0027, teamMembers: ["},{"lineNumber":106,"author":{"gitId":"geshuming"},"content":"      {loginId: \u0027ronaklakhotia\u0027, role: UserRole.Student}"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ]})]"},{"lineNumber":108,"author":{"gitId":"geshuming"},"content":"  ])"},{"lineNumber":109,"author":{"gitId":"geshuming"},"content":"};"}],"authorContributionMap":{"geshuming":17,"anubh-v":84,"-":8}},{"path":"tests/constants/githubcomment.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"geshuming"},"content":"import { GithubComment } from \u0027../../src/app/core/models/github/github-comment.model\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"export const EMPTY_TEAM_RESPONSE: GithubComment \u003d {"},{"lineNumber":4,"author":{"gitId":"geshuming"},"content":"    body: \u0027# Team\\\u0027s Response\\n\u0027 +"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"    \u0027\\n\u0027 +"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"    \u0027 ## Duplicate status (if any):\\n\u0027 +"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"    \u0027--\u0027,"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"    created_at: \u00272020-02-16T18:31:38Z\u0027,"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"    id: 586737495,"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/comments/586737495\u0027,"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"    user: {"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"      login: \u0027testathorStudent\u0027,"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"      id: 46639862,"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"      avatar_url: \u0027https://avatars3.githubusercontent.com/u/46639862?v\u003d4\u0027,"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"      url: \u0027https://api.github.com/users/testathorStudent\u0027,"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":19,"author":{"gitId":"geshuming"},"content":"  };"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  export const PENDING_TUTOR_MODERATION: GithubComment \u003d {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    body: \u0027# Tutor Moderation\\n\\n\u0027 +"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u0027## :question: Issue Type\\n\\n- [x] Done\\n\\ntest\\n\\n-------------------\\n\u0027 +"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u0027## :question: Issue Severity\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u0027[replace this with your explanation]\\n\\n-------------------\\n\u0027 +"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u0027## :question: Not Related Question\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u0027[replace this with your explanation]\\n\\n-------------------\\n\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    created_at: \u00272020-08-15T06:39:24Z\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    id: 674357972,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/26\u0027,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/comments/674357972\u0027,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    user: {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      login: \u0027testathorTutor\u0027,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      id: 46640218,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      avatar_url: \u0027https://avatars2.githubusercontent.com/u/46640218?v\u003d4\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      url: \u0027https://api.github.com/users/testathorTutor\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  };"}],"authorContributionMap":{"geshuming":3,"anubh-v":16,"-":20}},{"path":"tests/constants/githubevent.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { ISSUE_WITH_ASSIGNEES, ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027./githubissue.constants\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"/* Contains a simplified version of the data obtained when we query"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"   for the latest events on a repository using the Octokit API."},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"   (specifically, the data obtained from octokit.issues.listEventsForRepo())"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"   For repos used by CATcher, these events will only involve issues. */"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"export const CHANGE_TITLE_EVENT \u003d {"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"    event: \u0027renamed\u0027,"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    created_at: \u00272020-03-13T12:40:47Z\u0027,"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    rename: {"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"        from: \u0027App lags on large amount of input\u0027,"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"        to: \u0027App starts to lag when given large amount of input\u0027"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"    issue: ISSUE_WITH_EMPTY_DESCRIPTION"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"};"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"export const ADD_LABEL_EVENT \u003d {"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"    event: \u0027labeled\u0027,"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"    created_at: \u00272020-03-02T16:34:03Z\u0027,"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    label: { name: \u0027severity.VeryLow\u0027, color: \u0027ffe0e0\u0027 },"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    issue: ISSUE_WITH_ASSIGNEES"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"};"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"/* In the list of events returned by Octokit API,"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"   the events are ordered by time of creation,"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"   with the most recent events appearing first. */"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"export const EVENTS \u003d [CHANGE_TITLE_EVENT, ADD_LABEL_EVENT];"}],"authorContributionMap":{"anubh-v":28}},{"path":"tests/constants/githubissue.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { GithubIssue } from \u0027../../src/app/core/models/github/github-issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_FUNCTIONALITY_BUG,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_MEDIUM_SEVERITY,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TEAM_LABEL,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TUTORIAL_LABEL"},{"lineNumber":7,"author":{"gitId":"-"},"content":"} from \u0027../constants/githublabel.constants\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { IssueState } from \u0027../../graphql/graphql-types\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { EMPTY_TEAM_RESPONSE, PENDING_TUTOR_MODERATION } from \u0027./githubcomment.constants\u0027;"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION \u003d new GithubIssue({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  id: \u0027574085971\u0027,"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"  number: 92,"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"  assignees: [],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"  body: \u0027\u0027,"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"  created_at: \u00272020-03-02T16:19:02Z\u0027,"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"  title: \u0027App starts to lag when given large amount of input\u0027,"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"  updated_at: \u00272020-03-13T13:37:32Z\u0027,"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/92\u0027,"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"  user: {"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"    login: \u0027anubh-v\u0027,"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":29,"author":{"gitId":"-"},"content":"});"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"export const ISSUE_WITH_ASSIGNEES \u003d new GithubIssue({"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  id: \u0027551732011\u0027,"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"  number: 91,"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"  assignees: ["},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"    {"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"      login: \u0027anubh-v\u0027,"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"      id: 35621759,"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"      url: \u0027https://api.github.com/users/anubh-v\u0027,"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"  ],"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"  body: \u0027Screen freezes every few minutes\u0027,"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"  created_at: \u00272020-01-18T07:01:45Z\u0027,"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL,"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"      GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"     ],"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"  title: \u0027Screen freezes\u0027,"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"  updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":"  user: {"},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"    login: \u0027anubh-v\u0027,"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  comments: [EMPTY_TEAM_RESPONSE],"},{"lineNumber":56,"author":{"gitId":"-"},"content":"});"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"export const ISSUE_PENDING_MODERATION \u003d new GithubIssue({"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  id: \u0027574674360\u0027,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  number: 26,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  assignees: ["},{"lineNumber":62,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      login: \u0027geshuming\u0027,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      id: 43642522,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      url: \u0027https://api.github.com/users/geshuming\u0027,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  body: \u0027# Issue Description\\n{original issue description}\\n\u0027 +"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \u0027# Team\\\u0027s Response\\n{team\\\u0027s response}\\n # Disputes\\n\\n\u0027 +"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    \u0027## :question: Issue Type\\n\\n### Team says:\\r\\n{the team\\\u0027s action that is being disputed}\\r\\n\\r\\n\u0027 +"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    \u0027### Tester says:\\r\\n{tester\\\u0027s objection}\\n\\n-------------------\\n## :question: Issue Severity\\n\\n\u0027 +"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u0027### Team says:\\r\\n{the team\\\u0027s action that is being disputed}\\r\\n\\r\\n\u0027 +"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \u0027### Tester says:\\r\\n{tester\\\u0027s objection}\\n\\n-------------------\\n## :question: Not Related Question\\n\\n\u0027 +"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u0027### Team says:\\r\\n{the team\\\u0027s action that is being disputed}\\r\\n\\r\\n\u0027 +"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    \u0027### Tester says:\\r\\n{tester\\\u0027s objection}\\n\\n-------------------\\n\\n\u0027,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-03T13:38:32Z\u0027,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     ],"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  title: \u0027Basic Issue, Three Disputes, Unsure\u0027,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/26\u0027,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    login: \u0027geshuming\u0027,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars0.githubusercontent.com/u/43642522?v\u003d4\u0027,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    url: \u0027https://api.github.com/users/geshuming\u0027,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  comments: [PENDING_TUTOR_MODERATION],"},{"lineNumber":90,"author":{"gitId":"-"},"content":"});"},{"lineNumber":91,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"anubh-v":37,"-":54}},{"path":"tests/constants/githublabel.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"export const GITHUB_LABEL_FUNCTIONALITY_BUG \u003d {"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"    color: \u00279900cc\u0027,"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"    name: \u0027type.FunctionalityBug\u0027,"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"    id: 1226647550,"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/type.FunctionalityBug\u0027,"},{"lineNumber":8,"author":{"gitId":"geshuming"},"content":"} as GithubLabel;"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"export const GITHUB_LABEL_MEDIUM_SEVERITY \u003d  {"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"    color: \u0027ff9999\u0027,"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"    name: \u0027severity.Medium\u0027,"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"    id: 1226647149,"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/severity.Medium\u0027,"},{"lineNumber":15,"author":{"gitId":"geshuming"},"content":"} as GithubLabel;"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"export const GITHUB_LABEL_TUTORIAL_LABEL \u003d {"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/tutorial.CS2103T-W12\u0027,"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"    name: \u0027tutorial.CS2103T-W12\u0027,"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"    color: \u0027c2e0c6\u0027,"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    id: 1226649736,"},{"lineNumber":22,"author":{"gitId":"geshuming"},"content":"} as GithubLabel;"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"export const GITHUB_LABEL_TEAM_LABEL \u003d {"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"    id: 1226649835,"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"    url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/team.3\u0027,"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"    name: \u0027team.3\u0027,"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"    color: \u0027d4c5f9\u0027,"},{"lineNumber":29,"author":{"gitId":"geshuming"},"content":"} as GithubLabel;"}],"authorContributionMap":{"geshuming":4,"anubh-v":24,"-":1}},{"path":"tests/constants/label.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { Label } from \u0027../../src/app/core/models/label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Label name constants"},{"lineNumber":4,"author":{"gitId":"-"},"content":"export const SEVERITY_LOW \u003d \u0027Low\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"export const SEVERITY_MEDIUM \u003d \u0027Medium\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"export const SEVERITY_HIGH \u003d \u0027High\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"export const TYPE_DOCUMENTATION_BUG \u003d \u0027DocumentationBug\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export const TYPE_FUNCTIONALITY_BUG \u003d \u0027FunctionalityBug\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const RESPONSE_ACCEPTED \u003d \u0027Accepted\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export const RESPONSE_REJECTED \u003d \u0027Rejected\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const RESPONSE_ISSUE_UNCLEAR \u003d \u0027IssueUnclear\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export const RESPONSE_CANNOT_REPRODUCE \u003d \u0027CannotReproduce\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const STATUS_DONE \u003d \u0027Done\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export const STATUS_INCOMPLETE \u003d \u0027Incomplete\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"// Label category constants"},{"lineNumber":17,"author":{"gitId":"-"},"content":"export const SEVERITY \u003d \u0027severity\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export const TYPE \u003d \u0027type\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"export const RESPONSE \u003d \u0027response\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export const STATUS \u003d \u0027status\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"// Label color constants"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export const COLOR_BLACK  \u003d \u0027000000\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export const COLOR_WHITE  \u003d \u0027FFFFFF\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_LOW \u003d \u0027ffcccc\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_MEDIUM \u003d \u0027ff9999\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_HIGH \u003d \u0027ff6666\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_DOCUMENTATION_BUG \u003d \u0027d966ff\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_FUNCTIONALITY_BUG \u003d \u00279900cc\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ACCEPTED \u003d \u002700802b\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_REJECTED \u003d \u0027ff9900\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ISSUE_UNCLEAR \u003d \u0027ffcc80\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_CANNOT_REPRODUCE \u003d \u0027ffebcc\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_DONE \u003d \u0027a6a6a6\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_INCOMPLETE \u003d \u0027000000\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"// CSS style constants"},{"lineNumber":38,"author":{"gitId":"-"},"content":"export const DARK_BG_LIGHT_TEXT \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u0027background-color\u0027 : `#${COLOR_BLACK}`,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u0027border-radius\u0027 : \u00273px\u0027,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u0027cursor\u0027 : \u0027default\u0027,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u0027padding\u0027 : \u00273px\u0027,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \u0027color\u0027 : `#${COLOR_WHITE}`,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \u0027font-weight\u0027 : \u0027410\u0027,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"};"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"export const LIGHT_BG_DARK_TEXT \u003d {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u0027background-color\u0027 : `#${COLOR_WHITE}`,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u0027border-radius\u0027 : \u00273px\u0027,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \u0027cursor\u0027 : \u0027default\u0027,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u0027padding\u0027 : \u00273px\u0027,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u0027color\u0027 : `#${COLOR_BLACK}`,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \u0027font-weight\u0027 : \u0027410\u0027,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"};"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"// Constant array of labels to simulate Github response"},{"lineNumber":57,"author":{"gitId":"-"},"content":"export const LABEL_ARRAY \u003d ["},{"lineNumber":58,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        color: COLOR_RESPONSE_ACCEPTED,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name: RESPONSE + \u0027.\u0027 + RESPONSE_ACCEPTED"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        color: COLOR_SEVERITY_LOW,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        name: SEVERITY + \u0027.\u0027 + SEVERITY_LOW"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        color: COLOR_TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        name: TYPE + \u0027.\u0027 + TYPE_FUNCTIONALITY_BUG"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"];"},{"lineNumber":71,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":72,"author":{"gitId":"anubh-v"},"content":"// List of labels"},{"lineNumber":73,"author":{"gitId":"anubh-v"},"content":"export const SEVERITY_LABELS \u003d [new Label(SEVERITY, SEVERITY_LOW, COLOR_SEVERITY_LOW),"},{"lineNumber":74,"author":{"gitId":"anubh-v"},"content":"  new Label(SEVERITY, SEVERITY_MEDIUM, COLOR_SEVERITY_MEDIUM),"},{"lineNumber":75,"author":{"gitId":"anubh-v"},"content":"  new Label(SEVERITY, SEVERITY_HIGH, COLOR_SEVERITY_HIGH)];"}],"authorContributionMap":{"anubh-v":7,"-":68}},{"path":"tests/karma.ci.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"let ciProperties;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"let baseConfigs \u003d require(\u0027./karma.conf.js\u0027);"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"baseConfigs({ set: function(arg) { ciProperties \u003d arg; }});"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"// Set CI specific settings"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"// Include Firefox as a testing environment"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"ciProperties.plugins.push(require(\u0027karma-firefox-launcher\u0027));"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"ciProperties.browsers.push(\u0027FirefoxHeadless\u0027);"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"module.exports \u003d function(config) {"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"  config.set(ciProperties);"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"};"}],"authorContributionMap":{"anubh-v":13}},{"path":"tests/karma.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"// Karma configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"// https://karma-runner.github.io/1.0/config/configuration-file.html"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"module.exports \u003d function (config) {"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"  config.set({"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"    basePath: \u0027\u0027,"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"    frameworks: [\u0027jasmine\u0027, \u0027@angular-devkit/build-angular\u0027],"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"    plugins: ["},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"      require(\u0027karma-jasmine\u0027),"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"      require(\u0027karma-chrome-launcher\u0027),"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"      require(\u0027karma-spec-reporter\u0027),"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"      require(\u0027karma-coverage-istanbul-reporter\u0027),"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"      require(\u0027@angular-devkit/build-angular/plugins/karma\u0027)"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"    ],"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"    client: {"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"      clearContext: false // leave Jasmine Spec Runner output visible in browser"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    coverageIstanbulReporter: {"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"      dir: require(\u0027path\u0027).join(__dirname, \u0027./coverage/CATcher\u0027),"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"      reports: [\u0027html\u0027, \u0027lcovonly\u0027, \u0027text-summary\u0027],"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"      fixWebpackSourcePaths: true"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"    reporters: [\u0027spec\u0027],"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"    specReporter: {"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"      maxLogLines: 5, // limit number of lines per test"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"      suppressErrorSummary: true,"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"      suppressPassed: true,"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"      showSpecTiming: false,"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    },"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"    port: 9876,"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"    colors: true,"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"    logLevel: config.LOG_INFO,"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"    browsers: [\u0027ChromeHeadless\u0027],"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"    singleRun: true,"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"};"}],"authorContributionMap":{"anubh-v":36}},{"path":"tests/model/issue.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../src/app/core/models/issue-dispute.model\u0027;"},{"lineNumber":2,"author":{"gitId":"geshuming"},"content":"import { Issue } from \u0027../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Team } from \u0027../../src/app/core/models/team.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../../src/app/core/models/tester-response.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../src/app/core/services/phase.service\u0027;"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":7,"author":{"gitId":"geshuming"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION, ISSUE_WITH_ASSIGNEES } from \u0027../constants/githubissue.constants\u0027;"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"describe(\u0027Issue model class\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    describe(\u0027.createPhaseBugReportIssue(githubIssue)\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"        it(\u0027correctly creates a bug reporting issue that has an empty description\u0027, async () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"            const issue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"            expect(issue.title).toBe(\u0027App starts to lag when given large amount of input\u0027);"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"            expect(issue.description).toBe(\u0027No details provided by bug reporter.\u0027);"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"            expect(issue.severity).toBe(\u0027Medium\u0027);"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"            expect(issue.type).toBe(\u0027FunctionalityBug\u0027);"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"    describe(\u0027.createPhaseTeamResponseIssue(githubIssue, githubComment)\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"        it(\u0027correctly creates a team response issue that has an empty team response\u0027, async() \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"            const dummyTeam \u003d null;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            const issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_ASSIGNEES, dummyTeam);"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"            expect(issue.title).toBe(\u0027Screen freezes\u0027);"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"            expect(issue.teamResponse).toBe(\u0027No details provided by team.\u0027);"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"            expect(issue.severity).toBe(\u0027Medium\u0027);"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"            expect(issue.assignees).toContain(\u0027anubh-v\u0027);"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"            expect(issue.assignees.length).toBe(1);"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"    describe(\u0027.updateDescription(description) and .updateTeamResponse(teamResponse)\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"        it(\u0027correctly clean strings obtained from users\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"            const noDetailsFromBugReporter \u003d \u0027No details provided by bug reporter.\u0027;"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"            const noDetailsFromTeam \u003d \u0027No details provided by team.\u0027;"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"            expect(Issue.updateDescription(\u0027\u0027)).toBe(noDetailsFromBugReporter);"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"            expect(Issue.updateTeamResponse(\u0027\u0027)).toBe(noDetailsFromTeam);"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"            expect(Issue.updateDescription(null)).toBe(noDetailsFromBugReporter);"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"            expect(Issue.updateTeamResponse(undefined)).toBe(noDetailsFromTeam);"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":39,"author":{"gitId":"geshuming"},"content":"            const typicalDescription \u003d \u0027The app crashes after parsing config files.\u0027;"},{"lineNumber":40,"author":{"gitId":"geshuming"},"content":"            const typicalTeamResponse \u003d \u0027Cannot replicate the bug.\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            expect(Issue.updateDescription(typicalDescription)).toBe(typicalDescription + \u0027\\n\\n\u0027);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            expect(Issue.updateTeamResponse(typicalTeamResponse)).toBe(typicalTeamResponse + \u0027\\n\\n\u0027);"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"            const inputWithSpecialChars \u003d \u0027$%^!@\u0026-_test\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            expect(Issue.updateDescription(inputWithSpecialChars)).toBe(inputWithSpecialChars + \u0027\\n\\n\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            expect(Issue.updateTeamResponse(inputWithSpecialChars)).toBe(inputWithSpecialChars + \u0027\\n\\n\u0027);"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"});"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"describe(\u0027Issue\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    const dummyTeam \u003d new Team({"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        id: \u0027F09-2\u0027,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        teamMembers: [],"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    const dummyIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    const otherDummyIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_ASSIGNEES);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    const dummyIssueWithTeam \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    const noReportedDescriptionString \u003d \u0027No details provided by bug reporter.\\n\u0027;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const tutorResponseStringHeader \u003d \u0027# Tutor Moderation\\n\\n\u0027;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const newIssueDispute \u003d new IssueDispute(\u0027Cannot Work\u0027, \u0027Help Please\u0027);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const newTesterResponse \u003d new TesterResponse(\u0027Cannot Work\u0027, \u0027Help Please\u0027, \u0027- [ ] Not Done\u0027, \u0027Reason\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    it(\u0027.clone() should intialise the cloned issue with the correct phase and team\u0027, () \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        const phaseBugReportingIssue \u003d dummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expect(phaseBugReportingIssue).toEqual(dummyIssue);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        const phaseTeamResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTeamResponse);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expect(phaseTeamResponseIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expect(phaseTeamResponseIssue.teamAssigned).toEqual(dummyTeam);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        const phaseTesterResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        expect(phaseTesterResponseIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue.teamAssigned).toEqual(dummyTeam);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    it(\u0027.createGithubIssueDescription() forms the correct GitHub Issue description for the issue\u0027, () \u003d\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        const phaseBugReportingIssue \u003d dummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        expect(phaseBugReportingIssue.createGithubIssueDescription()).toEqual(noReportedDescriptionString);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        const phaseBugReportingIssueWithDescription \u003d otherDummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expect(phaseBugReportingIssueWithDescription.createGithubIssueDescription())"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            .toEqual(`${phaseBugReportingIssueWithDescription.description}\\n`);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    it(\u0027.createGithubTeamResponse() should be able to get the proper Team Response\u0027, () \u003d\u003e {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        const phaseTeamResponseIssue \u003d dummyIssue.clone(Phase.phaseTeamResponse);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        phaseTeamResponseIssue.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expect(phaseTeamResponseIssue.createGithubTeamResponse())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            .toEqual(`# Team\\\u0027s Response\\n${phaseTeamResponseIssue.teamResponse}\\n## Duplicate status (if any):\\n--`);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        const phaseTeamResponseIssue2 \u003d dummyIssue.clone(Phase.phaseTeamResponse);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        phaseTeamResponseIssue2.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        phaseTeamResponseIssue2.duplicateOf \u003d 10;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expect(phaseTeamResponseIssue2.createGithubTeamResponse())"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            .toEqual(`# Team\\\u0027s Response\\n${phaseTeamResponseIssue2.teamResponse}\\n`"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                + `## Duplicate status (if any):\\nDuplicate of #${phaseTeamResponseIssue2.duplicateOf}`);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    it (\u0027.createGithubTutorResponse() should be able to get the proper Tutor Response\u0027, () \u003d\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue.createGithubTutorResponse()).toEqual(tutorResponseStringHeader);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        const phaseModerationIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        phaseModerationIssue2.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue2.createGithubTutorResponse()).toEqual(tutorResponseStringHeader"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            + newIssueDispute.toTutorResponseString());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    it (\u0027.createGithubTesterResponse() should be able to get the proper Tester Response\u0027, () \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        const phaseTesterResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        phaseTesterResponseIssue.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        phaseTesterResponseIssue.testerResponses \u003d [];"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        expect(phaseTesterResponseIssue.createGithubTesterResponse()).toEqual("},{"lineNumber":120,"author":{"gitId":"-"},"content":"            `# Team\\\u0027s Response\\n${phaseTesterResponseIssue.teamResponse}\\n` +"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        `# Items for the Tester to Verify\\n${\u0027\u0027}`);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        const phaseTesterResponseIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        phaseTesterResponseIssue2.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        phaseTesterResponseIssue2.testerResponses \u003d [newTesterResponse];"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        expect(phaseTesterResponseIssue2.createGithubTesterResponse()).toEqual("},{"lineNumber":127,"author":{"gitId":"-"},"content":"            `# Team\\\u0027s Response\\n${phaseTesterResponseIssue.teamResponse}\\n` +"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        `# Items for the Tester to Verify\\n${newTesterResponse.toString()}`);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    it (\u0027.numOfUnresolvedDisputes() returns the correct number of issue disputes\u0027, () \u003d\u003e {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue.numOfUnresolvedDisputes()).toEqual(0);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        const phaseModerationIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        phaseModerationIssue2.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue2.numOfUnresolvedDisputes()).toEqual(1);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        const phaseModerationIssue3 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        phaseModerationIssue3.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        newIssueDispute.setIsDone(true);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        expect(phaseModerationIssue3.numOfUnresolvedDisputes()).toEqual(0);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":144,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"geshuming":4,"anubh-v":36,"-":104}},{"path":"tests/services/application.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { ApplicationService } from \u0027../../src/app/core/services/application.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../src/app/core/services/github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"const currentVersion \u003d \u00273.2.5\u0027;"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"class ApplicationServiceStub extends ApplicationService {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  readonly currentVersion: string;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor(githubService: GithubService, currentVersion: string) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    super(githubService);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    this.currentVersion \u003d currentVersion;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"describe(\u0027ApplicationService#isApplicationOutdated\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  const githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchLatestRelease\u0027]);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  it(\u0027should return the appropriate Observable if the ApplicationService is outdated\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v2.2.5\u0027}));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    const outdatedAppService1 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    outdatedAppService1.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.1\u0027}));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const outdatedAppService2 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    outdatedAppService2.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.4\u0027}));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    const outdatedAppService3 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    outdatedAppService3.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.4.8.9\u0027}));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    const longVersionedAppService \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    longVersionedAppService.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.5\u0027}));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    const latestApplicationService \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    latestApplicationService.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.5.0\u0027}));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    const upToDateAppService1 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    upToDateAppService1.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.5.5\u0027}));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    const upToDateAppService2 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    upToDateAppService2.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v3.2.6\u0027}));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    const upToDateAppService3 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    upToDateAppService3.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({tag_name: \u0027v10\u0027}));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    const upToDateAppService4 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    upToDateAppService4.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":54,"author":{"gitId":"anubh-v"},"content":"});"}],"authorContributionMap":{"anubh-v":6,"-":48}},{"path":"tests/services/data.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"geshuming"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"geshuming"},"content":"import { DataService } from \u0027../../src/app/core/services/data.service\u0027;"},{"lineNumber":3,"author":{"gitId":"geshuming"},"content":"import { GithubService } from \u0027../../src/app/core/services/github.service\u0027;"},{"lineNumber":4,"author":{"gitId":"geshuming"},"content":"import { autoSpy } from \u0027../auto-spy\u0027;"},{"lineNumber":5,"author":{"gitId":"geshuming"},"content":"import { csvString, jsonData, dataFileTeamStructure } from \u0027../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":7,"author":{"gitId":"geshuming"},"content":"describe(\u0027DataService\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.getDataFile()\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"    it(\u0027returns a json representation of the repo\\\u0027s data csv\u0027, done \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"geshuming"},"content":"      const { build, githubService } \u003d setup();"},{"lineNumber":11,"author":{"gitId":"geshuming"},"content":"      const dataService \u003d build();"},{"lineNumber":12,"author":{"gitId":"geshuming"},"content":"      githubService.fetchDataFile.and.returnValue(of({\u0027data\u0027: csvString}));"},{"lineNumber":13,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":14,"author":{"gitId":"geshuming"},"content":"      dataService.getDataFile().subscribe(actual \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"geshuming"},"content":"        expect(actual).toEqual(jsonData);"},{"lineNumber":16,"author":{"gitId":"geshuming"},"content":"        done();"},{"lineNumber":17,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":18,"author":{"gitId":"geshuming"},"content":"    });"},{"lineNumber":19,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"    it(\u0027initializes an internal data structure that maps teamIds to Team objects\u0027, done \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"geshuming"},"content":"      const { build, githubService } \u003d setup();"},{"lineNumber":22,"author":{"gitId":"geshuming"},"content":"      const dataService \u003d build();"},{"lineNumber":23,"author":{"gitId":"geshuming"},"content":"      githubService.fetchDataFile.and.returnValue(of({\u0027data\u0027: csvString}));"},{"lineNumber":24,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":25,"author":{"gitId":"geshuming"},"content":"      dataService.getDataFile().subscribe(actual \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"geshuming"},"content":"        expect(dataService.dataFile).toEqual(dataFileTeamStructure);"},{"lineNumber":27,"author":{"gitId":"geshuming"},"content":"        done();"},{"lineNumber":28,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":29,"author":{"gitId":"geshuming"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"geshuming"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.getTeam(teamId)\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"    it(\u0027returns the Team object corresponding to the given teamId\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"geshuming"},"content":"      // arrange"},{"lineNumber":35,"author":{"gitId":"geshuming"},"content":"      const { build } \u003d setup();"},{"lineNumber":36,"author":{"gitId":"geshuming"},"content":"      const dataService \u003d build();"},{"lineNumber":37,"author":{"gitId":"geshuming"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"geshuming"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":39,"author":{"gitId":"geshuming"},"content":"        return of({});"},{"lineNumber":40,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":41,"author":{"gitId":"geshuming"},"content":"      // act"},{"lineNumber":42,"author":{"gitId":"geshuming"},"content":"      dataService.getDataFile();"},{"lineNumber":43,"author":{"gitId":"geshuming"},"content":"      // assert"},{"lineNumber":44,"author":{"gitId":"geshuming"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-3\u0027)).toEqual(dataFileTeamStructure.teamStructure.get(\u0027CS2103T-W12-3\u0027));"},{"lineNumber":45,"author":{"gitId":"geshuming"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-4\u0027)).toEqual(dataFileTeamStructure.teamStructure.get(\u0027CS2103T-W12-4\u0027));"},{"lineNumber":46,"author":{"gitId":"geshuming"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-1\u0027)).toBeUndefined();"},{"lineNumber":47,"author":{"gitId":"geshuming"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-2\u0027)).toBeUndefined();"},{"lineNumber":48,"author":{"gitId":"geshuming"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"geshuming"},"content":"  });"},{"lineNumber":50,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.getTeams()\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"    it(\u0027returns an array containing ids of the teams in the repo\\\u0027s data csv\u0027, () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"geshuming"},"content":"      // arrange"},{"lineNumber":54,"author":{"gitId":"geshuming"},"content":"      const { build } \u003d setup();"},{"lineNumber":55,"author":{"gitId":"geshuming"},"content":"      const dataService \u003d build();"},{"lineNumber":56,"author":{"gitId":"geshuming"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"geshuming"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":58,"author":{"gitId":"geshuming"},"content":"        return of({});"},{"lineNumber":59,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":60,"author":{"gitId":"geshuming"},"content":"      const teams \u003d ["},{"lineNumber":61,"author":{"gitId":"geshuming"},"content":"        \u0027CS2103T-W12-3\u0027,"},{"lineNumber":62,"author":{"gitId":"geshuming"},"content":"        \u0027CS2103T-W12-4\u0027"},{"lineNumber":63,"author":{"gitId":"geshuming"},"content":"      ];"},{"lineNumber":64,"author":{"gitId":"geshuming"},"content":"      // act"},{"lineNumber":65,"author":{"gitId":"geshuming"},"content":"      dataService.getDataFile();"},{"lineNumber":66,"author":{"gitId":"geshuming"},"content":"      const actual \u003d dataService.getTeams();"},{"lineNumber":67,"author":{"gitId":"geshuming"},"content":"      // assert"},{"lineNumber":68,"author":{"gitId":"geshuming"},"content":"      expect(actual).toEqual(teams);"},{"lineNumber":69,"author":{"gitId":"geshuming"},"content":"    });"},{"lineNumber":70,"author":{"gitId":"geshuming"},"content":"  });"},{"lineNumber":71,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":72,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"anubh-v"},"content":"      it(\u0027clears the internal state of the DataService\u0027, () \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"geshuming"},"content":"      // arrange"},{"lineNumber":75,"author":{"gitId":"geshuming"},"content":"      const { build } \u003d setup();"},{"lineNumber":76,"author":{"gitId":"geshuming"},"content":"      const dataService \u003d build();"},{"lineNumber":77,"author":{"gitId":"geshuming"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"geshuming"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":79,"author":{"gitId":"geshuming"},"content":"        return of({});"},{"lineNumber":80,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":81,"author":{"gitId":"geshuming"},"content":"      // assert"},{"lineNumber":82,"author":{"gitId":"geshuming"},"content":"      dataService.getDataFile();"},{"lineNumber":83,"author":{"gitId":"geshuming"},"content":"      expect(dataService.dataFile).toBeDefined();"},{"lineNumber":84,"author":{"gitId":"geshuming"},"content":"      dataService.reset();"},{"lineNumber":85,"author":{"gitId":"geshuming"},"content":"      expect(dataService.dataFile).toBeUndefined();"},{"lineNumber":86,"author":{"gitId":"geshuming"},"content":"      });"},{"lineNumber":87,"author":{"gitId":"geshuming"},"content":"  });"},{"lineNumber":88,"author":{"gitId":"geshuming"},"content":"});"},{"lineNumber":89,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":90,"author":{"gitId":"geshuming"},"content":"function setup() {"},{"lineNumber":91,"author":{"gitId":"geshuming"},"content":"  const githubService \u003d autoSpy(GithubService);"},{"lineNumber":92,"author":{"gitId":"geshuming"},"content":"  const builder \u003d {"},{"lineNumber":93,"author":{"gitId":"geshuming"},"content":"    githubService,"},{"lineNumber":94,"author":{"gitId":"geshuming"},"content":"    build() {"},{"lineNumber":95,"author":{"gitId":"geshuming"},"content":"      return new DataService(githubService);"},{"lineNumber":96,"author":{"gitId":"geshuming"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"geshuming"},"content":"  };"},{"lineNumber":98,"author":{"gitId":"geshuming"},"content":""},{"lineNumber":99,"author":{"gitId":"geshuming"},"content":"  return builder;"},{"lineNumber":100,"author":{"gitId":"geshuming"},"content":"}"}],"authorContributionMap":{"geshuming":91,"anubh-v":9}},{"path":"tests/services/githubevent.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { GithubEventService } from \u0027../../src/app/core/services/githubevent.service\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { EVENTS, ADD_LABEL_EVENT, CHANGE_TITLE_EVENT } from \u0027../constants/githubevent.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"let githubService: any;"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"let issueService: any;"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"describe(\u0027GithubEventService\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchEventsForRepo\u0027]);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    issueService \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027reloadAllIssues\u0027]);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    issueService.reloadAllIssues.and.returnValue(of([]));"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.setLatestChangeEvent()\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"    it(\u0027stores the time of the most recent issue event\\ and most recent issue update.\u0027, async () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"      await githubEventService.setLatestChangeEvent().toPromise();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(false));"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.reloadPage()\u0027, () \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"    afterEach(() \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"      issueService.reloadAllIssues.calls.reset();"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    it(\u0027triggers the IssueService to re-initialise the issue list if there are new events\u0027, async () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"      const FIRST_EVENT \u003d [ADD_LABEL_EVENT];"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"      const SECOND_EVENT \u003d [CHANGE_TITLE_EVENT];"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(FIRST_EVENT));"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(true));"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(SECOND_EVENT));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(true));"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    it(\u0027does not trigger the IssueService to re-initialise the issue list, if there are no new events\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(true));"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"      // issueService.reloadAllIssues must not have been called again"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(false));"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"    it(\u0027clears the details of the most recent event\u0027, async () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":55,"author":{"gitId":"anubh-v"},"content":"      await githubEventService.setLatestChangeEvent().toPromise();"},{"lineNumber":56,"author":{"gitId":"anubh-v"},"content":"      githubEventService.reset();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"       // reloadPage should return an Observable of true due to reset()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      githubEventService.reloadPage().subscribe(result \u003d\u003e expect(result).toBe(true));"},{"lineNumber":60,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":61,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":62,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":63,"author":{"gitId":"anubh-v"},"content":"});"},{"lineNumber":64,"author":{"gitId":"anubh-v"},"content":""}],"authorContributionMap":{"anubh-v":51,"-":13}},{"path":"tests/services/permissions.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { PermissionService } from \u0027../../src/app/core/services/permission.service\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":"import { Phase, PhaseService } from \u0027../../src/app/core/services/phase.service\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"import { UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"const testStudent \u003d {"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"    loginId: \u0027testStudent\u0027,"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"    role: UserRole.Student"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"};"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"const testTutor \u003d {"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"    loginId: \u0027testTutor\u0027,"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"    role: UserRole.Tutor"},{"lineNumber":14,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"const testAdmin \u003d {"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"    loginId: \u0027testAdmin\u0027,"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"    role: UserRole.Admin"},{"lineNumber":19,"author":{"gitId":"geshuming"},"content":"};"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":21,"author":{"gitId":"geshuming"},"content":"const mockUserService \u003d new UserService(null, null);"},{"lineNumber":22,"author":{"gitId":"geshuming"},"content":"const mockPhaseService \u003d new PhaseService(null, null, null, null, null);"},{"lineNumber":23,"author":{"gitId":"geshuming"},"content":"const permissionService \u003d new PermissionService(null, mockUserService, mockPhaseService);"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"describe(\u0027Test a few permissions for each role in each phase\u0027, () \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":"    it(\u0027Test a few permissions for UserRole.Student\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"        mockUserService.currentUser \u003d testStudent;"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"    it(\u0027Test a few permissions for UserRole.Tutor\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"        mockUserService.currentUser \u003d testTutor;"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueCreatable()).toBe(false);"},{"lineNumber":46,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueLabelsEditable()).toBe(false);"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTeamResponseEditable()).toBe(false);"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueEditable()).toBe(false);"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":54,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTutorResponseEditable()).toBe(true);"},{"lineNumber":55,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":56,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":57,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":58,"author":{"gitId":"anubh-v"},"content":"    it(\u0027Test a few permissions for UserRole.Admin\u0027, () \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":60,"author":{"gitId":"anubh-v"},"content":"        mockUserService.currentUser \u003d testAdmin;"},{"lineNumber":61,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":62,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":63,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":64,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":65,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":66,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":67,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":68,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDescriptionEditable()).toBe(true);"},{"lineNumber":69,"author":{"gitId":"anubh-v"},"content":"        mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":70,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":71,"author":{"gitId":"anubh-v"},"content":"        expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":72,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":73,"author":{"gitId":"anubh-v"},"content":"});"}],"authorContributionMap":{"geshuming":5,"anubh-v":67,"-":1}},{"path":"tests/services/upload.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"anubh-v"},"content":"import { UploadService, SUPPORTED_FILE_TYPES, FILE_TYPE_SUPPORT_ERROR } from \u0027../../src/app/core/services/upload.service\u0027;"},{"lineNumber":2,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":3,"author":{"gitId":"geshuming"},"content":"const PERIOD \u003d \u0027.\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":"describe(\u0027UploadService\u0027, () \u003d\u003e {"},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"    describe(\u0027.isSupportedFileType(fileName)\u0027, () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":"        it(\u0027can distinguish valid / invalid filetypes\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"            const uploadService \u003d new UploadService(null);"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"            for (const validFileType of SUPPORTED_FILE_TYPES) {"},{"lineNumber":10,"author":{"gitId":"geshuming"},"content":"                const validFileName \u003d \u0027testFile\u0027 + PERIOD + validFileType;"},{"lineNumber":11,"author":{"gitId":"anubh-v"},"content":"                expect(uploadService.isSupportedFileType(validFileName)).toBe(true);"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"            }"},{"lineNumber":13,"author":{"gitId":"geshuming"},"content":"            const invalidFileName \u003d \u0027testFile\u0027 + PERIOD + \u0027java\u0027;"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":"            expect(uploadService.isSupportedFileType(invalidFileName)).toBe(false);"},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"        it(\u0027is case insensitive\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":"          const uploadService \u003d new UploadService(null);"},{"lineNumber":19,"author":{"gitId":"geshuming"},"content":"          const invalidFileName \u003d \u0027TESTfile\u0027 + PERIOD + \u0027JS\u0027;"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"          expect(uploadService.isSupportedFileType(invalidFileName)).toBe(false);"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"        it(\u0027returns false for filenames that do not have a file extension\u0027, () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"          const uploadService \u003d new UploadService(null);"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"          for (const validFileType of SUPPORTED_FILE_TYPES) {"},{"lineNumber":26,"author":{"gitId":"geshuming"},"content":"            const fileNameWithoutFileExtension \u003d \u0027testFile\u0027 + validFileType;"},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"            expect(uploadService.isSupportedFileType(fileNameWithoutFileExtension)).toBe(false);"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"          }"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"    describe(\u0027.uploadFile(fileData, fileName)\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"        it(\u0027throws an error if an invalid filetype is uploaded\u0027, done \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":"          const uploadService \u003d new UploadService(null);"},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"          uploadService.uploadFile(\u0027testdata\u0027, \u0027testFile.java\u0027).subscribe("},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"            val \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"              fail(\u0027This test case should fail.\u0027);"},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"              done();"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"            },"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"            error \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"              expect(error).toBe(FILE_TYPE_SUPPORT_ERROR);"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"              done();"},{"lineNumber":43,"author":{"gitId":"anubh-v"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"          );"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"        });"},{"lineNumber":46,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"});"}],"authorContributionMap":{"geshuming":5,"anubh-v":42}},{"path":"tests/services/user.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"geshuming"},"content":"import { jsonData, USER_JUNWEI, USER_Q, USER_SHUMING, USER_WITH_TWO_ROLES } from \u0027../constants/data.constants\u0027;"},{"lineNumber":2,"author":{"gitId":"geshuming"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":3,"author":{"gitId":"anubh-v"},"content":"import { User, UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"anubh-v"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":6,"author":{"gitId":"anubh-v"},"content":"let dataService: any;"},{"lineNumber":7,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":8,"author":{"gitId":"anubh-v"},"content":"describe(\u0027UserService\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"anubh-v"},"content":"  describe(\u0027.createUserModel(loginId)\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"anubh-v"},"content":"    beforeAll(() \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"geshuming"},"content":"      dataService \u003d jasmine.createSpyObj(\u0027DataService\u0027, [\u0027getDataFile\u0027]);"},{"lineNumber":12,"author":{"gitId":"anubh-v"},"content":"      dataService.getDataFile.and.returnValue(of(jsonData));"},{"lineNumber":13,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":14,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":15,"author":{"gitId":"anubh-v"},"content":"    it(\u0027creates a Student user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"anubh-v"},"content":"      await createAndVerifyUser(USER_JUNWEI.loginId, USER_JUNWEI);"},{"lineNumber":17,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":18,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":19,"author":{"gitId":"anubh-v"},"content":"    it(\u0027creates a Tutor user correctly when loginId is very short\u0027, async () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"anubh-v"},"content":"      await createAndVerifyUser(USER_Q.loginId, USER_Q);"},{"lineNumber":21,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":23,"author":{"gitId":"anubh-v"},"content":"    it(\u0027creates an Admin user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"anubh-v"},"content":"      await createAndVerifyUser(USER_SHUMING.loginId, USER_SHUMING);"},{"lineNumber":25,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":26,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":27,"author":{"gitId":"anubh-v"},"content":"    it(\u0027treats the loginId in a case insensitive manner\u0027, async () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"anubh-v"},"content":"      await createAndVerifyUser(\u0027JUNWEi96\u0027, USER_JUNWEI);"},{"lineNumber":29,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":31,"author":{"gitId":"anubh-v"},"content":"    it(\u0027assigns highest possible role to a user who has multiple roles in data.csv\u0027, async () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"anubh-v"},"content":"      await createAndVerifyUser(USER_WITH_TWO_ROLES.loginId, USER_WITH_TWO_ROLES);"},{"lineNumber":33,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":34,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":35,"author":{"gitId":"anubh-v"},"content":"    it(\u0027throws an error if the user is unauthorized\u0027, (done) \u003d\u003e {"},{"lineNumber":36,"author":{"gitId":"anubh-v"},"content":"      const userService \u003d new UserService(null, dataService);"},{"lineNumber":37,"author":{"gitId":"anubh-v"},"content":"      userService.createUserModel(\u0027RandomUser\u0027).subscribe("},{"lineNumber":38,"author":{"gitId":"anubh-v"},"content":"        user \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"anubh-v"},"content":"          fail(\u0027This test case should have failed.\u0027);"},{"lineNumber":40,"author":{"gitId":"anubh-v"},"content":"          done();"},{"lineNumber":41,"author":{"gitId":"anubh-v"},"content":"        },"},{"lineNumber":42,"author":{"gitId":"anubh-v"},"content":"        error \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          expect(error).toEqual(new Error(\u0027Unauthorized user.\u0027));"},{"lineNumber":44,"author":{"gitId":"anubh-v"},"content":"          done();"},{"lineNumber":45,"author":{"gitId":"anubh-v"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"anubh-v"},"content":"      );"},{"lineNumber":47,"author":{"gitId":"anubh-v"},"content":"    });"},{"lineNumber":48,"author":{"gitId":"anubh-v"},"content":"  });"},{"lineNumber":49,"author":{"gitId":"anubh-v"},"content":"});"},{"lineNumber":50,"author":{"gitId":"anubh-v"},"content":""},{"lineNumber":51,"author":{"gitId":"anubh-v"},"content":"async function createAndVerifyUser(loginId: string, expectedUser: User) {"},{"lineNumber":52,"author":{"gitId":"anubh-v"},"content":"  const userService \u003d new UserService(null, dataService);"},{"lineNumber":53,"author":{"gitId":"anubh-v"},"content":"  const actualUser \u003d await userService.createUserModel(loginId).toPromise();"},{"lineNumber":54,"author":{"gitId":"anubh-v"},"content":"  expect(actualUser).toEqual(expectedUser);"},{"lineNumber":55,"author":{"gitId":"anubh-v"},"content":"}"}],"authorContributionMap":{"geshuming":3,"anubh-v":51,"-":1}}]
